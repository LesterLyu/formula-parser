{"version":3,"sources":["webpack://formulaParser/webpack/universalModuleDefinition","webpack://formulaParser/webpack/bootstrap","webpack://formulaParser/./node_modules/formulajs/lib/error.js","webpack://formulaParser/./node_modules/formulajs/lib/utils.js","webpack://formulaParser/./node_modules/formulajs/index.js","webpack://formulaParser/./node_modules/formulajs/lib/math-trig.js","webpack://formulaParser/./node_modules/formulajs/lib/statistical.js","webpack://formulaParser/./node_modules/formulajs/lib/text.js","webpack://formulaParser/./node_modules/formulajs/lib/information.js","webpack://formulaParser/./node_modules/formulajs/lib/date-time.js","webpack://formulaParser/./node_modules/jStat/dist/jstat.js","webpack://formulaParser/./node_modules/formulajs/lib/miscellaneous.js","webpack://formulaParser/./node_modules/formulajs/lib/engineering.js","webpack://formulaParser/./node_modules/tiny-emitter/index.js","webpack://formulaParser/./src/grammar-parser/grammar-parser.js","webpack://formulaParser/./node_modules/formulajs/lib/compatibility.js","webpack://formulaParser/./node_modules/bessel/bessel.js","webpack://formulaParser/./node_modules/formulajs/lib/database.js","webpack://formulaParser/./node_modules/formulajs/lib/logical.js","webpack://formulaParser/./node_modules/formulajs/lib/financial.js","webpack://formulaParser/./node_modules/formulajs/lib/lookup-reference.js","webpack://formulaParser/(webpack)/buildin/module.js","webpack://formulaParser/external \"fs\"","webpack://formulaParser/external \"path\"","webpack://formulaParser/./src/helper/number.js","webpack://formulaParser/./src/error.js","webpack://formulaParser/./src/helper/undefined-cell.js","webpack://formulaParser/./node_modules/decimal.js/decimal.mjs","webpack://formulaParser/./src/evaluate-by-operator/operator/add.js","webpack://formulaParser/./src/evaluate-by-operator/operator/ampersand.js","webpack://formulaParser/./src/evaluate-by-operator/operator/divide.js","webpack://formulaParser/./src/evaluate-by-operator/operator/equal.js","webpack://formulaParser/./src/supported-formulas.js","webpack://formulaParser/./src/evaluate-by-operator/operator/formula-function.js","webpack://formulaParser/./src/evaluate-by-operator/operator/greater-than.js","webpack://formulaParser/./src/evaluate-by-operator/operator/greater-than-or-equal.js","webpack://formulaParser/./src/evaluate-by-operator/operator/less-than.js","webpack://formulaParser/./src/evaluate-by-operator/operator/less-than-or-equal.js","webpack://formulaParser/./src/evaluate-by-operator/operator/minus.js","webpack://formulaParser/./src/evaluate-by-operator/operator/multiply.js","webpack://formulaParser/./src/evaluate-by-operator/operator/not-equal.js","webpack://formulaParser/./src/evaluate-by-operator/operator/power.js","webpack://formulaParser/./src/evaluate-by-operator/evaluate-by-operator.js","webpack://formulaParser/./src/helper/string.js","webpack://formulaParser/./src/helper/cell.js","webpack://formulaParser/./src/parser.js","webpack://formulaParser/./index.js"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","nil","Error","div0","ref","num","na","error","data","flattenShallow","array","reduce","concat","apply","isFlat","length","Array","isArray","flatten","result","argsToArray","arguments","args","arrayEach","push","numbers","this","filter","el","cleanFloat","number","Math","round","parseBool","bool","up","toUpperCase","Date","isNaN","parseNumber","string","undefined","parseFloat","parseNumberArray","arr","len","parsed","parseMatrix","matrix","pnarr","d1900","UTC","parseDate","date","parseInt","getTime","parseDateArray","anyIsError","arrayValuesToNumbers","rest","idx","slice","initial","iteratee","index","transpose","map","col","row","categories","category","f","utils","statistical","information","ABS","abs","ACOS","acos","ACOSH","log","sqrt","ACOT","atan","ACOTH","AGGREGATE","function_num","options","ref1","ref2","AVERAGE","COUNT","COUNTA","MAX","MIN","PRODUCT","STDEV","S","P","SUM","VAR","MEDIAN","MODE","SNGL","LARGE","SMALL","PERCENTILE","INC","QUARTILE","EXC","ARABIC","text","test","replace","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","ASIN","asin","ASINH","ATAN","ATAN2","number_x","number_y","atan2","ATANH","BASE","radix","min_length","toString","max","join","CEILING","significance","precision","floor","ROUND","ceil","MATH","PRECISE","COMBIN","number_chosen","FACT","COMBINA","COS","cos","COSH","exp","COT","tan","COTH","e2","CSC","sin","CSCH","DECIMAL","DEGREES","PI","EVEN","EXP","MEMOIZED_FACT","FACTDOUBLE","FLOOR","GCD","range","r0","x","ri","y","INT","ISO","LCM","j","pop","splice","LN","LN10","LN2","LOG10E","LOG2E","LOG","base","LOG10","MOD","dividend","divisor","modulus","MROUND","multiple","MULTINOMIAL","sum","ODD","temp","E","POWER","power","pow","QUOTIENT","numerator","denominator","RADIANS","RAND","random","RANDBETWEEN","bottom","top","ROMAN","digits","String","split","roman","ROUNDDOWN","ROUNDUP","SEC","SECH","SERIESSUM","coefficients","SIGN","SIN","SINH","SQRT","SQRTPI","SQRT1_2","SQRT2","SUBTOTAL","function_code","ADD","num1","num2","MINUS","DIVIDE","MULTIPLY","factor1","factor2","GTE","LT","LTE","EQ","value1","value2","NE","POW","exponent","SUMIF","criteria","sumRange","includes","eval","toLowerCase","SUMIFS","shift","n_range_elements","n_criterias","condition","SUMPRODUCT","product","k","_i","_ij","arrays","SUMSQ","ISNUMBER","SUMX2MY2","array_x","array_y","SUMX2PY2","SUMXMY2","TAN","TANH","TRUNC","mathTrig","jStat","misc","SQRT2PI","AVEDEV","subtract","mean","count","AVERAGEA","AVERAGEIF","average_range","average_count","AVERAGEIFS","average","BETA","DIST","alpha","beta","cumulative","A","B","cdf","pdf","INV","probability","inv","BINOM","successes","trials","binomial","RANGE","successes2","CHISQ","chisquare","RT","TEST","observed","expected","tmp","dof","xsqr","Pi","a","ChiSq","COLUMN","COLUMNS","cols","CONFIDENCE","NORM","sd","normalci","T","tci","CORREL","array1","array2","corrcoeff","COUNTBLANK","COUNTIN","element","blanks","COUNTIF","matches","COUNTIFS","results","COUNTUNIQUE","UNIQUE","COVARIANCE","mean1","mean2","covariance","DEVSQ","EXPON","lambda","exponential","F","d1","d2","centralF","sumOfSquares","values","x1","x2","FISHER","FISHERINV","e2y","FORECAST","data_y","data_x","xmean","ymean","den","b","FREQUENCY","bins","GAMMA","gammafn","gamma","GAMMALN","gammaln","GAUSS","z","normal","GEOMEAN","geomean","GROWTH","known_y","known_x","new_x","use_const","avg_x","avg_y","avg_xy","avg_xx","new_y","HARMEAN","HYPGEOM","N","INTERCEPT","KURT","sigma","stdev","sort","LINEST","LOGEST","LOGNORM","lognormal","MAXA","median","min","MINA","MULT","currentItem","maxItems","NEGBINOM","negbin","PEARSON","den1","den2","fl","PERCENTRANK","uniques","match","indexOf","PERMUT","PERMUTATIONA","PHI","POISSON","poisson","PROB","lower","upper","sorted","quart","RANK","AVG","order","ROW","ROWS","rows","RSQ","SKEW","m2","m3","SLOPE","STANDARDIZE","v","STDEVA","VARA","STDEVPA","VARPA","STEYX","lft","TRANSPOSE","df","studentt","mean_x","mean_y","s_x","s_y","TREND","new_data_x","linest","forEach","TRIMMEAN","percent","trim","WEIBULL","Z","ASC","BAHTTEXT","CHAR","fromCharCode","CLEAN","CODE","charCodeAt","CONCATENATE","trueFound","falseFound","DBCS","DOLLAR","EXACT","text1","text2","FIND","find_text","within_text","position","FIXED","HTML2TEXT","line","LEFT","substring","LEN","LOWER","MID","start","begin","end","NUMBERVALUE","decimal_separator","group_separator","Number","PRONETIC","PROPER","txt","charAt","substr","REGEXEXTRACT","regular_expression","RegExp","REGEXMATCH","full","REGEXREPLACE","replacement","REPLACE","new_text","REPT","RIGHT","SEARCH","foundAt","SPLIT","separator","SUBSTITUTE","old_text","occurrence","TEXT","TRIM","UNICHAR","UNICODE","UPPER","VALUE","CELL","ERROR","TYPE","error_val","INFO","ISBLANK","ISBINARY","ISERR","isFinite","ISERROR","ISEVEN","ISFORMULA","ISLOGICAL","ISNA","ISNONTEXT","ISODD","ISREF","ISTEXT","NA","SHEET","SHEETS","WEEK_STARTS","WEEK_TYPES","WEEKEND_TYPES","isLeapYear","year","getMonth","daysBetween","start_date","end_date","serial","addOn","DATE","month","day","DATEDIF","interval","difference","DATEVALUE","date_text","modifier","parse","DAY","serial_number","getDate","DAYS","DAYS360","method","ed","sm","em","smd","getFullYear","emd","EDATE","months","setMonth","EOMONTH","HOUR","getHours","INTERVAL","second","hour","sec","ISOWEEKNUM","setHours","setDate","getDay","yearStart","MINUTE","getMinutes","MONTH","NETWORKDAYS","holidays","INTL","weekend","h","days","total","getTimezoneOffset","getUTCDay","dec","holiday","NOW","SECOND","getSeconds","TIME","minute","TIMEVALUE","time_text","TODAY","WEEKDAY","return_type","WEEKNUM","week_start","jan","inc","WORKDAY","YEAR","YEARFRAC","basis","sy","ey","ylength","date1","date2","year1","mar1year1","year2","mar1year2","feb29Between","years","isFunction","ascNum","clip","arg","sumsqrd","sumsqerr","sumrow","prod","low","high","unique","hash","_arr","meansqerr","arrlen","cumsum","cumreduce","cumprod","diff","diffs","arrLen","rank","ranks","first","last","lastIndexOf","val","maxCount","numMaxCount","mode_arr","variance","flag","pooledvariance","samples","deviation","dev","pooledstdev","meandev","meddev","coeffvar","quartiles","quantiles","quantilesArray","alphap","betap","aleph","sortedArray","quantileVals","percentile","realIndex","frac","percentileOfScore","score","kind","counter","strict","histogram","binCnt","binWidth","arr1","arr2","u","arr1Len","sq_dev","spearmancoeff","stanMoment","mu","skewSum","skewness","kurtosis","jProto","funcs","passfunc","fullbool","func","tmpthis","setTimeout","toVector","callbackFunction","argsToPass","curriedFunction","vector","calcRdx","isNumber","_init","retZero","retOne","retIdent","fn","seq","toArray","constructor","extend","obj","dimensions","rowa","submat","arange","ind","column","cola","diag","nrow","res","antidiag","objArr","toAlter","ncol","alter","zeros","ones","rand","identity","symmetric","size","clear","cnt","hival","step","current","rl","_slice","list","copy","rcSlice","colSlice","rowSlice","sliceAssign","nl","ml","diagonal","diagArray","mat","self","Function","xx","cof","ser","yi","q","fact","xden","xnum","Infinity","gammap","lowRegGamma","an","aln","ap","del","ITMAX","NaN","factorialln","factorial","combination","combinationln","permutation","betafn","betaln","betacf","aa","qab","qap","qam","gammapinv","pp","lna1","afac","a1","gln","erf","ty","isneg","dd","erfc","erfcinv","err","ibetainv","lna","lnb","al","w","b1","ibeta","bt","randn","randg","shape","a2","oalph","tukeyWprob","rr","cc","xleg","aleg","qsqz","wincr","pr_w","blb","binc","bub","einsum","cc1","wi","elsum","jj","ac","qexpo","rinsum","callee","_a","_b","_c","newthis","sample","vals","fnfunc","df1","df2","cauchy","local","scale","rate","invgamma","kumaraswamy","noncentralt","ncp","flip","prob","lastvalue","std","pareto","dof2","weibull","uniform","binomarr","hypgeom","scaledPDF","samplesDone","scaledCDF","factor","sumarr","triangular","arcsine","laplace","tukey","nmeans","xlegq","alegq","ulen","f2","f2lf","f21","ff4","ans","otsum","twa1","t1","x0","ps","tukeyQinv","valx0","valx1","iter","isUsable","add","divide","multiply","nrescols","rescols","outer","dot","left","right","norm","nnorm","angle","aug","newarr","gauss_jordan","det","alen","alend","rowshift","colshift","mrow","mcol","gauss_elimination","maug","pivot","maxrow","y2","triaUpSolve","parts","matrix_mode","triaLowSolve","lu","R","cholesky","gauss_jacobi","xv","xk","gauss_seidel","SOR","householder","QR","lstsq","array_mode","Q","attrs","Q1","RI","Aj","cAi","Ij","cIi","R_I","Q2","jacobi","maxim","theta","e","ev","rungekutta","t_j","u_j","k1","k2","k3","romberg","h1","g","richardson","pos","y1","h_min","simpson","hermite","dF","dl","lagrange","cubic_spline","sq","gauss_quadrature","PCA","temp1","Bt","temp2","Y","Vt","differenceOfProportions","p1","n1","p2","n2","pooled","zscore","ztest","sides","tscore","ttest","anovafscore","expVar","sampMean","sampSampMean","tmpargs","unexpVar","anovaftest","ftest","fscore","anovaftes","qscore","qtest","tukeyhsd","means","change","significant","pvalue","oneSidedDifferenceOfProportions","twoSidedDifferenceOfProportions","models","ols","endog","exog","nobs","df_model","df_resid","coef","predict","resid","ybar","SSE","SSR","SST","R2","t_test","model","var_count","subModelList","endog_index","exog_index","sigmaHat","seBetaHat","mod","tStatistic","pValue","leftppf","interval95","se","F_statistic","F_test","adjust_R2","hasElement","FLATTEN","ARGS2ARRAY","REFERENCE","context","reference","path","opening","JOIN","NUMBERS","bessel","isValidBinaryNumber","BESSELI","besseli","BESSELJ","besselj","BESSELK","besselk","BESSELY","bessely","BIN2DEC","stringified","BIN2HEX","places","BIN2OCT","BITAND","number1","number2","BITLSHIFT","BITOR","BITRSHIFT","BITXOR","COMPLEX","real","imaginary","suffix","sign","CONVERT","from_unit","to_unit","alt","units","binary_prefixes","Yi","Zi","Ei","Ti","Gi","Mi","ki","unit_prefixes","G","from","to","base_from_unit","base_to_unit","from_multiplier","to_multiplier","from_binary_prefix","from_unit_prefix","to_binary_prefix","to_unit_prefix","DEC2BIN","DEC2HEX","DEC2OCT","DELTA","ERF","lower_bound","upper_bound","ERFC","GESTEP","HEX2BIN","negative","decimal","HEX2DEC","HEX2OCT","IMABS","inumber","IMREAL","IMAGINARY","plus","minus","unit","IMARGUMENT","IMCONJUGATE","IMCOS","IMCOSH","IMCOT","IMDIV","IMSIN","inumber1","inumber2","unit1","unit2","IMEXP","IMLN","IMLOG10","IMLOG2","IMPOWER","IMPRODUCT","IMSEC","IMSECH","IMSINH","IMSQRT","IMCSC","IMCSCH","IMSUB","IMSUM","IMTAN","OCT2BIN","OCT2DEC","OCT2HEX","on","callback","ctx","once","listener","off","_","emit","evtArr","evts","liveEvents","parser","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","$Vb","$Vc","$Vd","$Ve","$Vf","$Vg","$Vh","$Vi","$Vj","$Vk","$Vl","$Vm","$Vn","$Vo","$Vp","$Vq","$Vr","$Vs","$Vt","$Vu","trace","yy","symbols_","expressions","expression","EOF","variableSequence","STRING","&","=","+","(",")","<",">","NOT","-","*","/","^","FUNCTION","expseq","ARRAYCONSTANT","ARRAY","cell","refCell","refRange","ABSOLUTE_CELL","RELATIVE_CELL","MIXED_CELL","REFSHEET","!",":",";",",","VARIABLE","NUMBER","%","$accept","$end","terminals_","5","8","9","10","11","12","13","14","15","16","17","18","19","20","21","23","24","29","30","31","32","33","34","35","36","37","38","39","40","41","productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","callVariable","toNumber","trimEdges","evaluateByOperator","invertNumber","callFunction","textInArray","item","cellValue","rangeValue","throwError","table","2","3","4","6","7","25","26","27","28","1","22","defaultActions","parseError","str","recoverable","input","stack","vstack","lstack","recovering","lexer","sharedState","setInput","yylloc","yyloc","ranges","getPrototypeOf","symbol","preErrorSymbol","state","action","newState","lex","token","yyval","error_rule_depth","locateNearestErrorRecoveryRule","stack_probe","depth","errStr","showPosition","loc","first_line","last_line","first_column","last_column","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","unput","lines","oldLines","more","reject","backtrack_lexer","less","pastInput","past","upcomingInput","next","pre","test_match","indexed_rule","backup","tempMatch","rules","_currentRules","flex","popState","conditions","topState","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","INITIAL","inclusive","Parser","main","console","process","exit","source","require","readFileSync","normalize","argv","engineering","dateTime","set","BETADIST","BETAINV","BINOMDIST","ISOCEILING","CEILINGMATH","CEILINGPRECISE","CHIDIST","CHIDISTRT","CHIINV","CHIINVRT","CHITEST","COVAR","COVARIANCEP","COVARIANCES","CRITBINOM","EXPONDIST","ERFCPRECISE","ERFPRECISE","FDIST","FDISTRT","FINVRT","FINV","FLOORMATH","FLOORPRECISE","FTEST","GAMMADIST","GAMMAINV","GAMMALNPRECISE","HYPGEOMDIST","LOGINV","LOGNORMINV","LOGNORMDIST","MODEMULT","MODESNGL","NEGBINOMDIST","NETWORKDAYSINTL","NORMDIST","NORMINV","NORMSDIST","NORMSINV","PERCENTILEEXC","PERCENTILEINC","PERCENTRANKEXC","PERCENTRANKINC","POISSONDIST","QUARTILEEXC","QUARTILEINC","RANKAVG","RANKEQ","SKEWP","STDEVP","STDEVS","TDIST","TDISTRT","TINV","TTEST","VARP","VARS","WEIBULLDIST","WORKDAYINTL","ZTEST","_horner","_bessel_iter","f0","f1","tdx","_bessel_wrap","bessel0","bessel1","nonzero","b0_a1a","reverse","b0_a2a","b0_a1b","b0_a2b","W","b1_a1a","b1_a2a","b1_a1b","b1_a2b","ret","jsum","bjp","bj","bjm","tox","b0_a","b0_b","b1_a","b1_b","bip","bi","bim","stats","maths","compact","findResultIndex","database","criterias","maxCriteriaLength","currentCriteriaResult","hasMatchingCriteria","criteriaField","FINDFIELD","title","DAVERAGE","field","resultIndexes","targetFields","DCOUNT","targetValues","DCOUNTA","DGET","DMAX","maxValue","DMIN","minValue","DPRODUCT","DSTDEV","DSTDEVP","DSUM","DVAR","DVARP","AND","CHOOSE","FALSE","IF","then_value","otherwise_value","IFERROR","valueIfError","IFNA","value_if_na","logical","OR","TRUE","XOR","SWITCH","targetValue","argc","switchCount","switchSatisfied","hasDefaultClause","defaultClause","validDate","ensureDate","ACCRINT","issue","settlement","par","frequency","ACCRINTM","AMORDEGRC","AMORLINC","COUPDAYBS","COUPDAYS","COUPDAYSNC","COUPNCD","COUPNUM","COUPPCD","CUMIPMT","periods","type","payment","PMT","interest","FV","CUMPRINC","principal","DB","cost","salvage","life","period","toFixed","ceiling","DDB","DISC","DOLLARDE","dollar","fraction","DOLLARFR","DURATION","EFFECT","term","FVSCHEDULE","schedule","future","INTRATE","IPMT","present","IRR","guess","irrResult","dates","irrResultDeriv","positive","newRate","epsRate","resultValue","resultRate","contLoop","ISPMT","MDURATION","MIRR","finance_rate","reinvest_rate","payments","incomes","NPV","NOMINAL","NPER","ODDFPRICE","ODDFYIELD","ODDLPRICE","ODDLYIELD","PDURATION","PPMT","PRICE","PRICEDISC","PRICEMAT","PV","RATE","y0","RECEIVED","RRI","SLN","SYD","TBILLEQ","maturity","discount","TBILLPRICE","TBILLYIELD","price","VDB","XNPV","YIELD","YIELDDISC","YIELDMAT","INDEX","lookupArray","lookupRow","lookupColumn","MATCH","lookupValue","matchType","indexValue","VLOOKUP","needle","rangeLookup","startRange","endRange","HLOOKUP","transposedTable","LOOKUP","lookupVector","resultsVector","valueOf","sortedIndex","webpackPolyfill","deprecate","paths","children","ERROR_DIV_ZERO","ERROR_NAME","ERROR_VALUE","errors","_defineProperty","_errors","undefinedCell","inexact","quadrant","EXP_LIMIT","MAX_DIGITS","NUMERALS","DEFAULTS","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","mathfloor","mathpow","isBinary","isHex","isOctal","isDecimal","LOG_BASE","LN10_PRECISION","PI_PRECISION","digitsToString","ws","indexOfLastWord","getZeroString","checkInt32","checkRoundingDigits","rm","repeating","di","rd","convertBase","baseIn","baseOut","arrL","strL","absoluteValue","finalise","comparedTo","cmp","xdL","ydL","xd","yd","xs","ys","cosine","pr","Ctor","taylorSeries","times","cos2x","toLessThanHalfPi","neg","cubeRoot","cbrt","rep","t3","t3plusx","isZero","toExponential","eq","decimalPlaces","dp","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","gt","greaterThanOrEqualTo","gte","hyperbolicCosine","cosh","one","cosh2_x","d8","hyperbolicSine","sinh","sinh2_x","d5","d16","d20","hyperbolicTangent","tanh","inverseCosine","halfPi","isNeg","getPi","inverseHyperbolicCosine","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","inverseSine","inverseTangent","px","isInteger","isInt","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","isBase10","inf","naturalLogarithm","getLn10","sub","xe","xLTy","getBase10Exponent","naturalExponential","negated","carry","unshift","getPrecision","sine","sin2_x","squareRoot","tangent","mul","rL","toBinary","toStringBinary","toDecimalPlaces","toDP","finiteToString","toFraction","maxD","d0","n0","toHexadecimal","toHex","toNearest","toOctal","toPower","yn","intPow","toPrecision","toSignificantDigits","toSD","truncated","trunc","toJSON","multiplyInteger","compare","aL","bL","logBase","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","isTruncated","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","ltgt","guard","c0","parseDecimal","search","parseOther","isFloat","Decimal","isHyperbolic","pi","config","useDefaults","defaults","getRandomValues","randomBytes","hypot","isDecimalInstance","log2","log10","Uint32Array","clone","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","_len","_key","acc","SYMBOL","params","tempValue","message","exp1","exp2","SUPPORTED_FORMULAS","symbolParts","foundFormula","formulajs","nestedFormula","isFactory","availableOperators","operator","_toConsumableArray","registerOperation","ampersand","equal","formulaFunction","greaterThanOrEqual","lessThanOrEqual","notEqual","margin","LABEL_EXTRACT_REGEXP","extractLabel","label","_label$toUpperCase$ma2","_slicedToArray","columnAbs","rowAbs","rowLabelToIndex","isAbsolute","columnLabelToIndex","toLabel","rowLabel","rowIndexToLabel","columnIndexToLabel","COLUMN_LABEL_BASE","COLUMN_LABEL_BASE_LENGTH","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","GrammarParser","errorName","_throwError","variable","_callVariable","sheet","_callCellValue","_callRangeValue","variables","setVariable","Emitter","ex","errorParser","getVariable","newValue","_extractLabel2","parser_slicedToArray","cellCoordinate","_value","startLabel","endLabel","_extractLabel4","startRow","startColumn","_extractLabel6","endRow","endColumn","startCell","endCell","valid","isErrorValid","__webpack_exports__","parser_Parser","error_error"],"mappings":"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wCACA,wCACA,wDACA,kEACA,sCACA,kEACA,8EACA,iEACA,oEACA,wCACA,gEACA,gDACA,oCACA,kDACA,6CACA,sCACA,kDACA,yDACA,6CACA,4CACA,wCACA,kDACA,6DACA,mEACA,qDACA,iEACA,2DACA,uEACA,oCACA,mDACA,+DACA,sDACA,wCACA,oDACA,kDACA,2CACA,gEACA,6DACA,oDACA,qEACA,kDACA,oCACA,wEACA,+CACA,qDACA,wCACA,0DACA,mDACA,4CACA,kEACA,yEACA,gDACA,6CACA,yDACA,iDACA,iDACA,sCACA,sDACA,sCACA,kEACA,sDACA,gDACA,4CACA,wDACA,sDACA,qDACA,sEACA,0CACA,2DACA,+DACA,uFACA,sDACA,mDACA,8CACA,2CACA,sDACA,+CACA,oDACA,kDACA,mDACA,wDACA,0CACA,oCACA,uDACA,uDACA,4DACA,0DACA,iEACA,oEACA,oCACA,kCACA,8CACA,4CACA,wCACA,0CAKAC,EAAA,CACAC,GAAA,+CACAC,GAAA,8CACAC,GAAA,0CACA5wB,GAAA,wCACA6wB,GAAA,sCACAC,GAAA,mCACAC,GAAA,gCACAC,GAAA,8BAKAC,EAAA,CACAlH,EAAA,mBACA5gB,EAAA,mBACAzQ,EAAA,iBACAzG,EAAA,kBACAyO,EAAA,kBACAwwB,EAAA,iBACAj+B,EAAA,iBACAwJ,EAAA,iBACAsV,EAAA,kBACAqW,EAAA,iBACA99B,EAAA,gBACAD,EAAA,kBACAD,EAAA,mBACA4tB,EAAA,mBACAvsB,EAAA,kBACAK,EAAA,mBACAwE,EAAA,oBACA2P,EAAA,mBACA2D,EAAA,oBACA3M,EAAA,qBAIAk6B,EAAA,KACAC,EAAA,KACAC,EAAAhB,EACAiB,EAAAhB,EACAiB,EAAA,EACAC,EAAA,EAIAxnC,EAAA,EAAiBA,EAAAwmC,EAAA1jC,OAAkB9C,IACnCumC,EAAA,OAAAC,EAAAxmC,GAAA,MAAAwmC,EAAAxmC,GAAA,IACAwmC,EAAAxmC,GAAA,KAAAqnC,GAAAd,EAAAjqB,QAAA+qB,IAAA,KACAF,EAAAX,EAAAxmC,KA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EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IADiCpyD,EACjCoyD,EAAA,GAAA10D,UAAA00D,GAGF,IAAK,IAAI93D,EAAI,EAAGA,EAAI0F,EAAK5C,OAAQ9C,IAE/B,GADA0F,EAAK1F,GAAKqqD,EAAc3kD,EAAK1F,IACb,IAAZ0F,EAAK1F,GACP,OAAO,EAIX,IAAMkD,EAASwC,EAAKhD,OAAO,SAACq1D,EAAK92D,GAC/B,IAAMi3D,EAAa,IAAI7B,GAAQ0B,GAAMlJ,IAAI,IAAIwH,GAAQxjB,EAAS5xC,KAAS4xC,WACvE,GAAIqlB,IAAchlC,KAAYglC,KAAehlC,IAC3C,MAAMjxB,MAAM8nD,GAGd,OAAOmO,GACNrlB,EAASnnB,IAEZ,GAAIrnB,MAAMnB,GACR,MAAMjB,MAAMgoD,GAGd,OAAO/mD,EACP,MAAOZ,GACP,GAAIA,EAAM61D,UAAYpO,EACpB,MAAM9nD,MAAM8nD,GAGd,MAAM9nD,MAAMgoD,IAIhBp7B,GAAKmpC,OApCiB,ICHP,SAASnpC,GAAKupC,EAAMC,GACjC,MAAqB,iBAATD,GAAuC,iBAATC,EACjCD,EAAKj0D,gBAAkBk0D,EAAKl0D,gBACjB,GAARi0D,QAA0B5zD,IAAT4zD,GAAgC,GAARC,QAA0B7zD,IAAT6zD,IAG7DD,IAASC,EAIpBxpC,GAAKmpC,OAZiB,ICAtB,IAAMM,GAAqB,CACzB,MACA,UACA,OACA,QACA,OACA,QACA,MACA,YACA,MACA,SACA,aACA,OACA,QACA,OACA,QACA,QACA,SACA,UACA,WACA,YACA,aACA,OACA,UACA,UACA,UACA,UACA,YACA,WACA,WACA,UACA,UACA,UACA,UACA,aACA,mBACA,YACA,YACA,SACA,YACA,QACA,YACA,SACA,UACA,cACA,iBACA,OACA,aACA,gBACA,YACA,eACA,SACA,SACA,QACA,OACA,SACA,UACA,SACA,UACA,UACA,cACA,aACA,kBACA,eACA,UACA,SACA,MACA,OACA,MACA,OACA,QACA,SACA,aACA,UACA,WACA,UACA,cACA,eACA,eACA,MACA,OACA,UACA,WACA,OACA,UACA,YACA,MACA,OACA,UACA,KACA,MACA,UACA,UACA,UACA,UACA,UACA,QACA,QACA,SACA,SACA,WACA,WACA,IACA,QACA,SACA,UACA,KACA,MACA,OACA,OACA,QACA,aACA,YACA,SACA,YACA,QACA,WACA,OACA,aACA,QACA,QACA,UACA,OACA,OACA,SACA,SACA,YACA,QACA,UACA,QACA,WACA,YACA,KACA,aACA,QACA,aACA,YACA,YACA,WACA,UACA,kBACA,QACA,MACA,UACA,SACA,SACA,MACA,UACA,UACA,UACA,UACA,OACA,YACA,eACA,cACA,KACA,UACA,QACA,YACA,aACA,cACA,QACA,SACA,QACA,QACA,SACA,QACA,QACA,OACA,UACA,SACA,UACA,YACA,SACA,QACA,SACA,QACA,SACA,SACA,QACA,QACA,QACA,QACA,MACA,YACA,WACA,OACA,MACA,WACA,UACA,SACA,YACA,OACA,YACA,WACA,QACA,QACA,aACA,QACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,SACA,KACA,MACA,QACA,SACA,eACA,cACA,cACA,aACA,SACA,QACA,KACA,MACA,QACA,MACA,OACA,SACA,MACA,MACA,OACA,QACA,SACA,OACA,MACA,YACA,YACA,WACA,WACA,QACA,SACA,cACA,WACA,KACA,KACA,gBACA,eACA,cACA,UACA,YACA,WACA,cACA,aACA,WACA,UACA,YACA,WACA,MACA,MACA,OACA,MACA,UACA,UACA,UACA,UACA,UACA,MACA,KACA,YACA,UACA,gBACA,gBACA,iBACA,iBACA,SACA,eACA,MACA,KACA,MACA,eACA,cACA,MACA,QACA,OACA,OACA,UACA,SACA,KACA,eACA,eACA,cACA,cACA,WACA,UACA,OACA,cACA,WACA,UACA,UACA,SACA,OACA,YACA,eACA,aACA,eACA,UACA,OACA,QACA,QACA,QACA,YACA,UACA,MACA,OACA,MACA,MACA,SACA,MACA,OACA,SACA,YACA,OACA,MACA,OACA,OACA,SACA,QACA,MACA,QACA,QACA,QACA,QACA,OACA,SACA,cACA,UACA,UACA,SACA,SACA,UACA,SACA,QACA,aACA,WACA,MACA,QACA,SACA,aACA,QACA,WACA,WACA,UACA,SACA,MACA,IACA,SACA,YACA,YACA,QACA,WACA,MACA,OACA,UACA,aACA,aACA,QACA,UACA,UACA,OACA,OACA,YACA,OACA,SACA,QACA,YACA,QACA,OACA,WACA,OACA,QACA,UACA,UACA,SACA,QACA,QACA,QACA,QACA,OACA,OACA,QACA,OACA,UACA,UACA,eACA,cACA,UACA,OACA,OACA,MACA,OACA,WACA,UACA,UACA,UACA,gBC3YWN,GAASM,GAEP,SAASzpC,GAAKsmB,GAC3B,OAAO,WAGL,IAEIjyC,EAFEq1D,GAFNpjB,EAASA,EAAOhxC,eAEWuL,MAAM,KAC7B8oD,GAAe,EAGnB,GAA2B,IAAvBD,EAAYz1D,OACV21D,GAAUF,EAAY,MACxBC,GAAe,EACft1D,EAASu1D,GAAUF,EAAY,IAAtB31D,MAAA61D,GAASr1D,gBAEf,CAKL,IAJA,IAAMN,EAASy1D,EAAYz1D,OACvBiD,EAAQ,EACR2yD,EAAgBD,GAEb1yD,EAAQjD,GAIb,GAHA41D,EAAgBA,EAAcH,EAAYxyD,IAC1CA,KAEK2yD,EAAe,CAClBA,EAAgB,KAChB,MAGAA,IACFF,GAAe,EACft1D,EAASw1D,EAAa91D,WAAb,EAAAQ,YAIb,IAAKo1D,EACH,MAAMv2D,MAAM+nD,GAGd,OAAO9mD,GAIX2rB,GAAK8pC,WAAY,EACjB9pC,GAAKmpC,OAASA,GC9CC,SAASnpC,GAAKupC,EAAMC,GACjC,OAAOD,EAAOC,EAGhBxpC,GAAKmpC,OANiB,ICEP,SAASnpC,GAAKupC,EAAMC,GACjC,OAAOD,GAAQC,EAGjBxpC,GAAKmpC,OANiB,KCEP,SAASnpC,GAAKupC,EAAMC,GACjC,OAAOD,EAAOC,EAGhBxpC,GAAKmpC,OANiB,ICEP,SAASnpC,GAAKupC,EAAMC,GACjC,OAAOD,GAAQC,EAGjBxpC,GAAKmpC,OANiB,KCOP,SAASnpC,GAAKnD,GAC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","file":"formula-parser.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"formulaParser\"] = factory();\n\telse\n\t\troot[\"formulaParser\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","exports.nil = new Error('#NULL!');\nexports.div0 = new Error('#DIV/0!');\nexports.value = new Error('#VALUE!');\nexports.ref = new Error('#REF!');\nexports.name = new Error('#NAME?');\nexports.num = new Error('#NUM!');\nexports.na = new Error('#N/A');\nexports.error = new Error('#ERROR!');\nexports.data = new Error('#GETTING_DATA');\n","var error = require('./error');\n\nexports.flattenShallow = function(array) {\n  if (!array || !array.reduce) {\n    return array;\n  }\n  return [].concat.apply([], array);\n};\n\nexports.isFlat = function(array) {\n  if (!array) {\n    return false;\n  }\n\n  for (var i = 0; i < array.length; ++i) {\n    if (Array.isArray(array[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexports.flatten = function() {\n  var result = exports.argsToArray.apply(null, arguments);\n\n  while (!exports.isFlat(result)) {\n    result = exports.flattenShallow(result);\n  }\n\n  return result;\n};\n\nexports.argsToArray = function(args) {\n  var result = [];\n\n  exports.arrayEach(args, function(value) {\n    result.push(value);\n  });\n\n  return result;\n};\n\nexports.numbers = function() {\n  var possibleNumbers = this.flatten.apply(null, arguments);\n  return possibleNumbers.filter(function(el) {\n    return typeof el === 'number';\n  });\n};\n\nexports.cleanFloat = function(number) {\n  var power = 1e14;\n  return Math.round(number * power) / power;\n};\n\nexports.parseBool = function(bool) {\n  if (typeof bool === 'boolean') {\n    return bool;\n  }\n\n  if (bool instanceof Error) {\n    return bool;\n  }\n\n  if (typeof bool === 'number') {\n    return bool !== 0;\n  }\n\n  if (typeof bool === 'string') {\n    var up = bool.toUpperCase();\n    if (up === 'TRUE') {\n      return true;\n    }\n\n    if (up === 'FALSE') {\n      return false;\n    }\n  }\n\n  if (bool instanceof Date && !isNaN(bool)) {\n    return true;\n  }\n\n  return error.value;\n};\n\nexports.parseNumber = function(string) {\n  if (string === undefined || string === '') {\n    return error.value;\n  }\n  if (!isNaN(string)) {\n    return parseFloat(string);\n  }\n\n  return error.value;\n};\n\nexports.parseNumberArray = function(arr) {\n  var len;\n\n  if (!arr || (len = arr.length) === 0) {\n    return error.value;\n  }\n\n  var parsed;\n\n  while (len--) {\n    parsed = exports.parseNumber(arr[len]);\n    if (parsed === error.value) {\n      return parsed;\n    }\n    arr[len] = parsed;\n  }\n\n  return arr;\n};\n\nexports.parseMatrix = function(matrix) {\n  var n;\n\n  if (!matrix || (n = matrix.length) === 0) {\n    return error.value;\n  }\n  var pnarr;\n\n  for (var i = 0; i < matrix.length; i++) {\n    pnarr = exports.parseNumberArray(matrix[i]);\n    matrix[i] = pnarr;\n\n    if (pnarr instanceof Error) {\n      return pnarr;\n    }\n  }\n\n  return matrix;\n};\n\nvar d1900 = new Date(Date.UTC(1900, 0, 1));\nexports.parseDate = function(date) {\n  if (!isNaN(date)) {\n    if (date instanceof Date) {\n      return new Date(date);\n    }\n    var d = parseInt(date, 10);\n    if (d < 0) {\n      return error.num;\n    }\n    if (d <= 60) {\n      return new Date(d1900.getTime() + (d - 1) * 86400000);\n    }\n    return new Date(d1900.getTime() + (d - 2) * 86400000);\n  }\n  if (typeof date === 'string') {\n    date = new Date(date);\n    if (!isNaN(date)) {\n      return date;\n    }\n  }\n  return error.value;\n};\n\nexports.parseDateArray = function(arr) {\n  var len = arr.length;\n  var parsed;\n  while (len--) {\n    parsed = this.parseDate(arr[len]);\n    if (parsed === error.value) {\n      return parsed;\n    }\n    arr[len] = parsed;\n  }\n  return arr;\n};\n\nexports.anyIsError = function() {\n  var n = arguments.length;\n  while (n--) {\n    if (arguments[n] instanceof Error) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.arrayValuesToNumbers = function(arr) {\n  var n = arr.length;\n  var el;\n  while (n--) {\n    el = arr[n];\n    if (typeof el === 'number') {\n      continue;\n    }\n    if (el === true) {\n      arr[n] = 1;\n      continue;\n    }\n    if (el === false) {\n      arr[n] = 0;\n      continue;\n    }\n    if (typeof el === 'string') {\n      var number = this.parseNumber(el);\n      if (number instanceof Error) {\n        arr[n] = 0;\n      } else {\n        arr[n] = number;\n      }\n    }\n  }\n  return arr;\n};\n\nexports.rest = function(array, idx) {\n  idx = idx || 1;\n  if (!array || typeof array.slice !== 'function') {\n    return array;\n  }\n  return array.slice(idx);\n};\n\nexports.initial = function(array, idx) {\n  idx = idx || 1;\n  if (!array || typeof array.slice !== 'function') {\n    return array;\n  }\n  return array.slice(0, array.length - idx);\n};\n\nexports.arrayEach = function(array, iteratee) {\n  var index = -1, length = array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n\n  return array;\n};\n\nexports.transpose = function(matrix) {\n  if(!matrix) { \n    return error.value;\n  }\n\n  return matrix[0].map(function(col, i) { \n    return matrix.map(function(row) { \n      return row[i];\n    });\n  });\n};\n","var categories = [\n  require('./lib/compatibility'),\n  require('./lib/database'),\n  require('./lib/engineering'),\n  require('./lib/logical'),\n  require('./lib/math-trig'),\n  require('./lib/text'),\n  require('./lib/date-time'),\n  require('./lib/financial'),\n  require('./lib/information'),\n  require('./lib/lookup-reference'),\n  require('./lib/statistical'),\n  require('./lib/miscellaneous')\n];\n\nfor (var c in categories) {\n  var category = categories[c];\n  for (var f in category) {\n    exports[f] = exports[f] || category[f];\n  }\n}\n","var utils = require('./utils');\nvar error = require('./error');\nvar statistical = require('./statistical');\nvar information = require('./information');\n\nexports.ABS = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = Math.abs(number);\n\n  return result;\n};\n\nexports.ACOS = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = Math.acos(number);\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.ACOSH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = Math.log(number + Math.sqrt(number * number - 1));\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.ACOT = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = Math.atan(1 / number);\n\n  return result;\n};\n\nexports.ACOTH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = 0.5 * Math.log((number + 1) / (number - 1));\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\n//TODO: use options\nexports.AGGREGATE = function(function_num, options, ref1, ref2) {\n  function_num = utils.parseNumber(function_num);\n  options = utils.parseNumber(function_num);\n  if (utils.anyIsError(function_num, options)) {\n    return error.value;\n  }\n  switch (function_num) {\n    case 1:\n      return statistical.AVERAGE(ref1);\n    case 2:\n      return statistical.COUNT(ref1);\n    case 3:\n      return statistical.COUNTA(ref1);\n    case 4:\n      return statistical.MAX(ref1);\n    case 5:\n      return statistical.MIN(ref1);\n    case 6:\n      return exports.PRODUCT(ref1);\n    case 7:\n      return statistical.STDEV.S(ref1);\n    case 8:\n      return statistical.STDEV.P(ref1);\n    case 9:\n      return exports.SUM(ref1);\n    case 10:\n      return statistical.VAR.S(ref1);\n    case 11:\n      return statistical.VAR.P(ref1);\n    case 12:\n      return statistical.MEDIAN(ref1);\n    case 13:\n      return statistical.MODE.SNGL(ref1);\n    case 14:\n      return statistical.LARGE(ref1, ref2);\n    case 15:\n      return statistical.SMALL(ref1, ref2);\n    case 16:\n      return statistical.PERCENTILE.INC(ref1, ref2);\n    case 17:\n      return statistical.QUARTILE.INC(ref1, ref2);\n    case 18:\n      return statistical.PERCENTILE.EXC(ref1, ref2);\n    case 19:\n      return statistical.QUARTILE.EXC(ref1, ref2);\n  }\n};\n\nexports.ARABIC = function(text) {\n  // Credits: Rafa? Kukawski\n  if (!/^M*(?:D?C{0,3}|C[MD])(?:L?X{0,3}|X[CL])(?:V?I{0,3}|I[XV])$/.test(text)) {\n    return error.value;\n  }\n  var r = 0;\n  text.replace(/[MDLV]|C[MD]?|X[CL]?|I[XV]?/g, function(i) {\n    r += {\n      M: 1000,\n      CM: 900,\n      D: 500,\n      CD: 400,\n      C: 100,\n      XC: 90,\n      L: 50,\n      XL: 40,\n      X: 10,\n      IX: 9,\n      V: 5,\n      IV: 4,\n      I: 1\n    }[i];\n  });\n  return r;\n};\n\nexports.ASIN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = Math.asin(number);\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.ASINH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.log(number + Math.sqrt(number * number + 1));\n};\n\nexports.ATAN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.atan(number);\n};\n\nexports.ATAN2 = function(number_x, number_y) {\n  number_x = utils.parseNumber(number_x);\n  number_y = utils.parseNumber(number_y);\n  if (utils.anyIsError(number_x, number_y)) {\n    return error.value;\n  }\n  return Math.atan2(number_x, number_y);\n};\n\nexports.ATANH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = Math.log((1 + number) / (1 - number)) / 2;\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.BASE = function(number, radix, min_length) {\n  min_length = min_length || 0;\n\n  number = utils.parseNumber(number);\n  radix = utils.parseNumber(radix);\n  min_length = utils.parseNumber(min_length);\n  if (utils.anyIsError(number, radix, min_length)) {\n    return error.value;\n  }\n  min_length = (min_length === undefined) ? 0 : min_length;\n  var result = number.toString(radix);\n  return new Array(Math.max(min_length + 1 - result.length, 0)).join('0') + result;\n};\n\nexports.CEILING = function(number, significance, mode) {\n  significance = (significance === undefined) ? 1 : Math.abs(significance);\n  mode = mode || 0;\n\n  number = utils.parseNumber(number);\n  significance = utils.parseNumber(significance);\n  mode = utils.parseNumber(mode);\n  if (utils.anyIsError(number, significance, mode)) {\n    return error.value;\n  }\n  if (significance === 0) {\n    return 0;\n  }\n  var precision = -Math.floor(Math.log(significance) / Math.log(10));\n  if (number >= 0) {\n    return exports.ROUND(Math.ceil(number / significance) * significance, precision);\n  } else {\n    if (mode === 0) {\n      return -exports.ROUND(Math.floor(Math.abs(number) / significance) * significance, precision);\n    } else {\n      return -exports.ROUND(Math.ceil(Math.abs(number) / significance) * significance, precision);\n    }\n  }\n};\n\nexports.CEILING.MATH = exports.CEILING;\n\nexports.CEILING.PRECISE = exports.CEILING;\n\nexports.COMBIN = function(number, number_chosen) {\n  number = utils.parseNumber(number);\n  number_chosen = utils.parseNumber(number_chosen);\n  if (utils.anyIsError(number, number_chosen)) {\n    return error.value;\n  }\n  return exports.FACT(number) / (exports.FACT(number_chosen) * exports.FACT(number - number_chosen));\n};\n\nexports.COMBINA = function(number, number_chosen) {\n  number = utils.parseNumber(number);\n  number_chosen = utils.parseNumber(number_chosen);\n  if (utils.anyIsError(number, number_chosen)) {\n    return error.value;\n  }\n  return (number === 0 && number_chosen === 0) ? 1 : exports.COMBIN(number + number_chosen - 1, number - 1);\n};\n\nexports.COS = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.cos(number);\n};\n\nexports.COSH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return (Math.exp(number) + Math.exp(-number)) / 2;\n};\n\nexports.COT = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return 1 / Math.tan(number);\n};\n\nexports.COTH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var e2 = Math.exp(2 * number);\n  return (e2 + 1) / (e2 - 1);\n};\n\nexports.CSC = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return 1 / Math.sin(number);\n};\n\nexports.CSCH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return 2 / (Math.exp(number) - Math.exp(-number));\n};\n\nexports.DECIMAL = function(number, radix) {\n  if (arguments.length < 1) {\n    return error.value;\n  }\n\n  return parseInt(number, radix);\n};\n\nexports.DEGREES = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return number * 180 / Math.PI;\n};\n\nexports.EVEN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return exports.CEILING(number, -2, -1);\n};\n\nexports.EXP = function(number) {\n  if (arguments.length < 1) {\n    return error.na;\n  }\n  if (typeof number !== 'number' || arguments.length > 1) {\n    return error.error;\n  }\n\n  number = Math.exp(number);\n\n  return number;\n};\n\nvar MEMOIZED_FACT = [];\nexports.FACT = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var n = Math.floor(number);\n  if (n === 0 || n === 1) {\n    return 1;\n  } else if (MEMOIZED_FACT[n] > 0) {\n    return MEMOIZED_FACT[n];\n  } else {\n    MEMOIZED_FACT[n] = exports.FACT(n - 1) * n;\n    return MEMOIZED_FACT[n];\n  }\n};\n\nexports.FACTDOUBLE = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var n = Math.floor(number);\n  if (n <= 0) {\n    return 1;\n  } else {\n    return n * exports.FACTDOUBLE(n - 2);\n  }\n};\n\nexports.FLOOR = function(number, significance) {\n  number = utils.parseNumber(number);\n  significance = utils.parseNumber(significance);\n  if (utils.anyIsError(number, significance)) {\n    return error.value;\n  }\n  if (significance === 0) {\n    return 0;\n  }\n\n  if (!(number > 0 && significance > 0) && !(number < 0 && significance < 0)) {\n    return error.num;\n  }\n\n  significance = Math.abs(significance);\n  var precision = -Math.floor(Math.log(significance) / Math.log(10));\n  if (number >= 0) {\n    return exports.ROUND(Math.floor(number / significance) * significance, precision);\n  } else {\n    return -exports.ROUND(Math.ceil(Math.abs(number) / significance), precision);\n  }\n};\n\n//TODO: Verify\nexports.FLOOR.MATH = function(number, significance, mode) {\n  significance = (significance === undefined) ? 1 : significance;\n  mode = (mode === undefined) ? 0 : mode;\n\n  number = utils.parseNumber(number);\n  significance = utils.parseNumber(significance);\n  mode = utils.parseNumber(mode);\n  if (utils.anyIsError(number, significance, mode)) {\n    return error.value;\n  }\n  if (significance === 0) {\n    return 0;\n  }\n\n  significance = significance ? Math.abs(significance) : 1;\n  var precision = -Math.floor(Math.log(significance) / Math.log(10));\n  if (number >= 0) {\n    return exports.ROUND(Math.floor(number / significance) * significance, precision);\n  } else if (mode === 0 || mode === undefined) {\n    return -exports.ROUND(Math.ceil(Math.abs(number) / significance) * significance, precision);\n  }\n  return -exports.ROUND(Math.floor(Math.abs(number) / significance) * significance, precision);\n};\n\n// Deprecated\nexports.FLOOR.PRECISE = exports.FLOOR.MATH;\n\n// adapted http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript\nexports.GCD = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var n = range.length;\n  var r0 = range[0];\n  var x = r0 < 0 ? -r0 : r0;\n  for (var i = 1; i < n; i++) {\n    var ri = range[i];\n    var y = ri < 0 ? -ri : ri;\n    while (x && y) {\n      if (x > y) {\n        x %= y;\n      } else {\n        y %= x;\n      }\n    }\n    x += y;\n  }\n  return x;\n};\n\n\nexports.INT = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.floor(number);\n};\n\n//TODO: verify\nexports.ISO = {\n  CEILING: exports.CEILING\n};\n\nexports.LCM = function() {\n  // Credits: Jonas Raoni Soares Silva\n  var o = utils.parseNumberArray(utils.flatten(arguments));\n  if (o instanceof Error) {\n    return o;\n  }\n  for (var i, j, n, d, r = 1;\n       (n = o.pop()) !== undefined;) {\n    while (n > 1) {\n      if (n % 2) {\n        for (i = 3, j = Math.floor(Math.sqrt(n)); i <= j && n % i; i += 2) {\n          //empty\n        }\n        d = (i <= j) ? i : n;\n      } else {\n        d = 2;\n      }\n      for (n /= d, r *= d, i = o.length; i;\n           (o[--i] % d) === 0 && (o[i] /= d) === 1 && o.splice(i, 1)) {\n        //empty\n      }\n    }\n  }\n  return r;\n};\n\nexports.LN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.log(number);\n};\n\nexports.LN10 = function() {\n  return Math.log(10);\n};\n\nexports.LN2 = function() {\n  return Math.log(2);\n};\n\nexports.LOG10E = function() {\n  return Math.LOG10E;\n};\n\nexports.LOG2E = function() {\n  return Math.LOG2E;\n};\n\nexports.LOG = function(number, base) {\n  number = utils.parseNumber(number);\n  base = utils.parseNumber(base);\n  if (utils.anyIsError(number, base)) {\n    return error.value;\n  }\n  base = (base === undefined) ? 10 : base;\n  return Math.log(number) / Math.log(base);\n};\n\nexports.LOG10 = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.log(number) / Math.log(10);\n};\n\nexports.MOD = function(dividend, divisor) {\n  dividend = utils.parseNumber(dividend);\n  divisor = utils.parseNumber(divisor);\n  if (utils.anyIsError(dividend, divisor)) {\n    return error.value;\n  }\n  if (divisor === 0) {\n    return error.div0;\n  }\n  var modulus = Math.abs(dividend % divisor);\n  return (divisor > 0) ? modulus : -modulus;\n};\n\nexports.MROUND = function(number, multiple) {\n  number = utils.parseNumber(number);\n  multiple = utils.parseNumber(multiple);\n  if (utils.anyIsError(number, multiple)) {\n    return error.value;\n  }\n  if (number * multiple < 0) {\n    return error.num;\n  }\n\n  return Math.round(number / multiple) * multiple;\n};\n\nexports.MULTINOMIAL = function() {\n  var args = utils.parseNumberArray(utils.flatten(arguments));\n  if (args instanceof Error) {\n    return args;\n  }\n  var sum = 0;\n  var divisor = 1;\n  for (var i = 0; i < args.length; i++) {\n    sum += args[i];\n    divisor *= exports.FACT(args[i]);\n  }\n  return exports.FACT(sum) / divisor;\n};\n\nexports.ODD = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var temp = Math.ceil(Math.abs(number));\n  temp = (temp & 1) ? temp : temp + 1;\n  return (number > 0) ? temp : -temp;\n};\n\nexports.PI = function() {\n  return Math.PI;\n};\n\nexports.E = function() {\n  return Math.E;\n};\n\nexports.POWER = function(number, power) {\n  number = utils.parseNumber(number);\n  power = utils.parseNumber(power);\n  if (utils.anyIsError(number, power)) {\n    return error.value;\n  }\n  var result = Math.pow(number, power);\n  if (isNaN(result)) {\n    return error.num;\n  }\n\n  return result;\n};\n\nexports.PRODUCT = function() {\n  var args = utils.parseNumberArray(utils.flatten(arguments));\n  if (args instanceof Error) {\n    return args;\n  }\n  var result = 1;\n  for (var i = 0; i < args.length; i++) {\n    result *= args[i];\n  }\n  return result;\n};\n\nexports.QUOTIENT = function(numerator, denominator) {\n  numerator = utils.parseNumber(numerator);\n  denominator = utils.parseNumber(denominator);\n  if (utils.anyIsError(numerator, denominator)) {\n    return error.value;\n  }\n  return parseInt(numerator / denominator, 10);\n};\n\nexports.RADIANS = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return number * Math.PI / 180;\n};\n\nexports.RAND = function() {\n  return Math.random();\n};\n\nexports.RANDBETWEEN = function(bottom, top) {\n  bottom = utils.parseNumber(bottom);\n  top = utils.parseNumber(top);\n  if (utils.anyIsError(bottom, top)) {\n    return error.value;\n  }\n  // Creative Commons Attribution 3.0 License\n  // Copyright (c) 2012 eqcode\n  return bottom + Math.ceil((top - bottom + 1) * Math.random()) - 1;\n};\n\n// TODO\nexports.ROMAN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  // The MIT License\n  // Copyright (c) 2008 Steven Levithan\n  var digits = String(number).split('');\n  var key = ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM', '', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC', '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'];\n  var roman = '';\n  var i = 3;\n  while (i--) {\n    roman = (key[+digits.pop() + (i * 10)] || '') + roman;\n  }\n  return new Array(+digits.join('') + 1).join('M') + roman;\n};\n\nexports.ROUND = function(number, digits) {\n  number = utils.parseNumber(number);\n  digits = utils.parseNumber(digits);\n  if (utils.anyIsError(number, digits)) {\n    return error.value;\n  }\n  return Math.round(number * Math.pow(10, digits)) / Math.pow(10, digits);\n};\n\nexports.ROUNDDOWN = function(number, digits) {\n  number = utils.parseNumber(number);\n  digits = utils.parseNumber(digits);\n  if (utils.anyIsError(number, digits)) {\n    return error.value;\n  }\n  var sign = (number > 0) ? 1 : -1;\n  return sign * (Math.floor(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);\n};\n\nexports.ROUNDUP = function(number, digits) {\n  number = utils.parseNumber(number);\n  digits = utils.parseNumber(digits);\n  if (utils.anyIsError(number, digits)) {\n    return error.value;\n  }\n  var sign = (number > 0) ? 1 : -1;\n  return sign * (Math.ceil(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);\n};\n\nexports.SEC = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return 1 / Math.cos(number);\n};\n\nexports.SECH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return 2 / (Math.exp(number) + Math.exp(-number));\n};\n\nexports.SERIESSUM = function(x, n, m, coefficients) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  m = utils.parseNumber(m);\n  coefficients = utils.parseNumberArray(coefficients);\n  if (utils.anyIsError(x, n, m, coefficients)) {\n    return error.value;\n  }\n  var result = coefficients[0] * Math.pow(x, n);\n  for (var i = 1; i < coefficients.length; i++) {\n    result += coefficients[i] * Math.pow(x, n + i * m);\n  }\n  return result;\n};\n\nexports.SIGN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  if (number < 0) {\n    return -1;\n  } else if (number === 0) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\nexports.SIN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.sin(number);\n};\n\nexports.SINH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return (Math.exp(number) - Math.exp(-number)) / 2;\n};\n\nexports.SQRT = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  if (number < 0) {\n    return error.num;\n  }\n  return Math.sqrt(number);\n};\n\nexports.SQRTPI = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.sqrt(number * Math.PI);\n};\n\nexports.SQRT1_2 = function() {\n  return 1 / Math.sqrt(2);\n};\n\nexports.SQRT2 = function() {\n  return Math.sqrt(2);\n};\n\nexports.SUBTOTAL = function(function_code, ref1) {\n  function_code = utils.parseNumber(function_code);\n  if (function_code instanceof Error) {\n    return function_code;\n  }\n  switch (function_code) {\n    case 1:\n      return statistical.AVERAGE(ref1);\n    case 2:\n      return statistical.COUNT(ref1);\n    case 3:\n      return statistical.COUNTA(ref1);\n    case 4:\n      return statistical.MAX(ref1);\n    case 5:\n      return statistical.MIN(ref1);\n    case 6:\n      return exports.PRODUCT(ref1);\n    case 7:\n      return statistical.STDEV.S(ref1);\n    case 8:\n      return statistical.STDEV.P(ref1);\n    case 9:\n      return exports.SUM(ref1);\n    case 10:\n      return statistical.VAR.S(ref1);\n    case 11:\n      return statistical.VAR.P(ref1);\n    // no hidden values for us\n    case 101:\n      return statistical.AVERAGE(ref1);\n    case 102:\n      return statistical.COUNT(ref1);\n    case 103:\n      return statistical.COUNTA(ref1);\n    case 104:\n      return statistical.MAX(ref1);\n    case 105:\n      return statistical.MIN(ref1);\n    case 106:\n      return exports.PRODUCT(ref1);\n    case 107:\n      return statistical.STDEV.S(ref1);\n    case 108:\n      return statistical.STDEV.P(ref1);\n    case 109:\n      return exports.SUM(ref1);\n    case 110:\n      return statistical.VAR.S(ref1);\n    case 111:\n      return statistical.VAR.P(ref1);\n\n  }\n};\n\nexports.ADD = function (num1, num2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  num1 = utils.parseNumber(num1);\n  num2 = utils.parseNumber(num2);\n  if (utils.anyIsError(num1, num2)) {\n    return error.value;\n  }\n\n  return num1 + num2;\n};\n\nexports.MINUS = function (num1, num2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  num1 = utils.parseNumber(num1);\n  num2 = utils.parseNumber(num2);\n  if (utils.anyIsError(num1, num2)) {\n    return error.value;\n  }\n\n  return num1 - num2;\n};\n\nexports.DIVIDE = function (dividend, divisor) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  dividend = utils.parseNumber(dividend);\n  divisor = utils.parseNumber(divisor);\n  if (utils.anyIsError(dividend, divisor)) {\n    return error.value;\n  }\n\n  if (divisor === 0) {\n    return error.div0;\n  }\n\n  return dividend / divisor;\n};\n\nexports.MULTIPLY = function (factor1, factor2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  factor1 = utils.parseNumber(factor1);\n  factor2 = utils.parseNumber(factor2);\n  if (utils.anyIsError(factor1, factor2)) {\n    return error.value;\n  }\n\n  return factor1 * factor2;\n};\n\nexports.GTE = function (num1, num2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  num1 = utils.parseNumber(num1);\n  num2 = utils.parseNumber(num2);\n  if (utils.anyIsError(num1, num2)) {\n    return error.error;\n  }\n\n  return num1 >= num2;\n};\n\nexports.LT = function (num1, num2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  num1 = utils.parseNumber(num1);\n  num2 = utils.parseNumber(num2);\n  if (utils.anyIsError(num1, num2)) {\n    return error.error;\n  }\n\n  return num1 < num2;\n};\n\n\nexports.LTE = function (num1, num2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  num1 = utils.parseNumber(num1);\n  num2 = utils.parseNumber(num2);\n  if (utils.anyIsError(num1, num2)) {\n    return error.error;\n  }\n\n  return num1 <= num2;\n};\n\nexports.EQ = function (value1, value2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  return value1 === value2;\n};\n\nexports.NE = function (value1, value2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  return value1 !== value2;\n};\n\nexports.POW = function (base, exponent) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  base = utils.parseNumber(base);\n  exponent = utils.parseNumber(exponent);\n  if (utils.anyIsError(base, exponent)) {\n    return error.error;\n  }\n\n  return exports.POWER(base, exponent);\n};\n\nexports.SUM = function() {\n  var result = 0;\n\n  utils.arrayEach(utils.argsToArray(arguments), function(value) {\n    if (typeof value === 'number') {\n      result += value;\n\n    } else if (typeof value === 'string') {\n      var parsed = parseFloat(value);\n\n      !isNaN(parsed) && (result += parsed);\n\n    } else if (Array.isArray(value)) {\n      result += exports.SUM.apply(null, value);\n    }\n  });\n\n  return result;\n};\n\nexports.SUMIF = function(range, criteria, sumRange) {\n  range = utils.flatten(range);\n  if (sumRange !== undefined) {\n    sumRange = utils.flatten(sumRange);\n  }\n  else{\n    sumRange = range;\n  }\n  var result = 0;\n\n  if (criteria.includes('>') || criteria.includes('<') || criteria.includes('=')) {\n    criteria = criteria.replace(/=/g, '==').replace(/<>/g, '!=');\n    for (var i = 0; i < range.length; i++) {\n      result += (eval('\"' + range[i] + '\"' + criteria)) ? sumRange[i] : 0; // jshint ignore:line\n    }\n  }\n  else {\n    // check if the criteria is same as range[i]\n    for (var i = 0; i < range.length; i++) {\n      result += ((\"\" + range[i]).toLowerCase() === (criteria + \"\").toLowerCase()) ? sumRange[i] : 0; // jshint ignore:line\n    }\n  }\n\n  return result;\n};\n\nexports.SUMIFS = function() {\n  var args = utils.argsToArray(arguments);\n  var range = utils.parseNumberArray(utils.flatten(args.shift()));\n  if (range instanceof Error) {\n    return range;\n  }\n  var criteria = args;\n\n  var n_range_elements = range.length;\n  var n_criterias = criteria.length;\n\n  var result = 0;\n  for (var i = 0; i < n_range_elements; i++) {\n    var el = range[i];\n    var condition = '';\n    for (var c = 0; c < n_criterias; c++) {\n      condition += el + criteria[c];\n      if (c !== n_criterias - 1) {\n        condition += '&&';\n      }\n    }\n    if (eval(condition)) { // jshint ignore:line\n      result += el;\n    }\n  }\n  return result;\n};\n\nexports.SUMPRODUCT = function() {\n  if (!arguments || arguments.length === 0) {\n    return error.value;\n  }\n  var arrays = arguments.length + 1;\n  var result = 0;\n  var product;\n  var k;\n  var _i;\n  var _ij;\n  for (var i = 0; i < arguments[0].length; i++) {\n    if (!(arguments[0][i] instanceof Array)) {\n      product = 1;\n      for (k = 1; k < arrays; k++) {\n        _i = utils.parseNumber(arguments[k - 1][i]);\n        if (_i instanceof Error) {\n          return _i;\n        }\n        product *= _i;\n      }\n      result += product;\n    } else {\n      for (var j = 0; j < arguments[0][i].length; j++) {\n        product = 1;\n        for (k = 1; k < arrays; k++) {\n          _ij = utils.parseNumber(arguments[k - 1][i][j]);\n          if (_ij instanceof Error) {\n            return _ij;\n          }\n          product *= _ij;\n        }\n        result += product;\n      }\n    }\n  }\n  return result;\n};\n\nexports.SUMSQ = function() {\n  var numbers = utils.parseNumberArray(utils.flatten(arguments));\n  if (numbers instanceof Error) {\n    return numbers;\n  }\n  var result = 0;\n  var length = numbers.length;\n  for (var i = 0; i < length; i++) {\n    result += (information.ISNUMBER(numbers[i])) ? numbers[i] * numbers[i] : 0;\n  }\n  return result;\n};\n\nexports.SUMX2MY2 = function(array_x, array_y) {\n  array_x = utils.parseNumberArray(utils.flatten(array_x));\n  array_y = utils.parseNumberArray(utils.flatten(array_y));\n  if (utils.anyIsError(array_x, array_y)) {\n    return error.value;\n  }\n  var result = 0;\n  for (var i = 0; i < array_x.length; i++) {\n    result += array_x[i] * array_x[i] - array_y[i] * array_y[i];\n  }\n  return result;\n};\n\nexports.SUMX2PY2 = function(array_x, array_y) {\n  array_x = utils.parseNumberArray(utils.flatten(array_x));\n  array_y = utils.parseNumberArray(utils.flatten(array_y));\n  if (utils.anyIsError(array_x, array_y)) {\n    return error.value;\n  }\n  var result = 0;\n  array_x = utils.parseNumberArray(utils.flatten(array_x));\n  array_y = utils.parseNumberArray(utils.flatten(array_y));\n  for (var i = 0; i < array_x.length; i++) {\n    result += array_x[i] * array_x[i] + array_y[i] * array_y[i];\n  }\n  return result;\n};\n\nexports.SUMXMY2 = function(array_x, array_y) {\n  array_x = utils.parseNumberArray(utils.flatten(array_x));\n  array_y = utils.parseNumberArray(utils.flatten(array_y));\n  if (utils.anyIsError(array_x, array_y)) {\n    return error.value;\n  }\n  var result = 0;\n  array_x = utils.flatten(array_x);\n  array_y = utils.flatten(array_y);\n  for (var i = 0; i < array_x.length; i++) {\n    result += Math.pow(array_x[i] - array_y[i], 2);\n  }\n  return result;\n};\n\nexports.TAN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.tan(number);\n};\n\nexports.TANH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var e2 = Math.exp(2 * number);\n  return (e2 - 1) / (e2 + 1);\n};\n\nexports.TRUNC = function(number, digits) {\n  digits = (digits === undefined) ? 0 : digits;\n  number = utils.parseNumber(number);\n  digits = utils.parseNumber(digits);\n  if (utils.anyIsError(number, digits)) {\n    return error.value;\n  }\n  var sign = (number > 0) ? 1 : -1;\n  return sign * (Math.floor(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);\n};\n","var mathTrig = require('./math-trig');\nvar text = require('./text');\nvar jStat = require('jStat').jStat;\nvar utils = require('./utils');\nvar error = require('./error');\nvar misc = require('./miscellaneous');\n\nvar SQRT2PI = 2.5066282746310002;\n\nexports.AVEDEV = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  return jStat.sum(jStat(range).subtract(jStat.mean(range)).abs()[0]) / range.length;\n};\n\nexports.AVERAGE = function() {\n  var range = utils.numbers(utils.flatten(arguments));\n  var n = range.length;\n  var sum = 0;\n  var count = 0;\n  var result;\n\n  for (var i = 0; i < n; i++) {\n    sum += range[i];\n    count += 1;\n  }\n  result = sum / count;\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.AVERAGEA = function() {\n  var range = utils.flatten(arguments);\n  var n = range.length;\n  var sum = 0;\n  var count = 0;\n  var result;\n  for (var i = 0; i < n; i++) {\n    var el = range[i];\n    if (typeof el === 'number') {\n      sum += el;\n    }\n    if (el === true) {\n      sum++;\n    }\n    if (el !== null) {\n      count++;\n    }\n  }\n  result = sum / count;\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.AVERAGEIF = function(range, criteria, average_range) {\n  if (arguments.length <= 1) {\n    return error.na;\n  }\n  average_range = average_range || range;\n  range = utils.flatten(range);\n  average_range = utils.parseNumberArray(utils.flatten(average_range));\n  if (average_range instanceof Error) {\n    return average_range;\n  }\n  var average_count = 0;\n  var result = 0;\n  for (var i = 0; i < range.length; i++) {\n    if (eval(range[i] + criteria)) { // jshint ignore:line\n      result += average_range[i];\n      average_count++;\n    }\n  }\n  return result / average_count;\n};\n\nexports.AVERAGEIFS = function() {\n  // Does not work with multi dimensional ranges yet!\n  //http://office.microsoft.com/en-001/excel-help/averageifs-function-HA010047493.aspx\n  var args = utils.argsToArray(arguments);\n  var criteria = (args.length - 1) / 2;\n  var range = utils.flatten(args[0]);\n  var count = 0;\n  var result = 0;\n  for (var i = 0; i < range.length; i++) {\n    var condition = '';\n    for (var j = 0; j < criteria; j++) {\n      condition += args[2 * j + 1][i] + args[2 * j + 2];\n      if (j !== criteria - 1) {\n        condition += '&&';\n      }\n    }\n    if (eval(condition)) { // jshint ignore:line\n      result += range[i];\n      count++;\n    }\n  }\n\n  var average = result / count;\n  if (isNaN(average)) {\n    return 0;\n  } else {\n    return average;\n  }\n};\n\nexports.BETA = {};\n\nexports.BETA.DIST = function(x, alpha, beta, cumulative, A, B) {\n  if (arguments.length < 4) {\n    return error.value;\n  }\n\n  A = (A === undefined) ? 0 : A;\n  B = (B === undefined) ? 1 : B;\n\n  x = utils.parseNumber(x);\n  alpha = utils.parseNumber(alpha);\n  beta = utils.parseNumber(beta);\n  A = utils.parseNumber(A);\n  B = utils.parseNumber(B);\n  if (utils.anyIsError(x, alpha, beta, A, B)) {\n    return error.value;\n  }\n\n  x = (x - A) / (B - A);\n  return (cumulative) ? jStat.beta.cdf(x, alpha, beta) : jStat.beta.pdf(x, alpha, beta);\n};\n\nexports.BETA.INV = function(probability, alpha, beta, A, B) {\n  A = (A === undefined) ? 0 : A;\n  B = (B === undefined) ? 1 : B;\n\n  probability = utils.parseNumber(probability);\n  alpha = utils.parseNumber(alpha);\n  beta = utils.parseNumber(beta);\n  A = utils.parseNumber(A);\n  B = utils.parseNumber(B);\n  if (utils.anyIsError(probability, alpha, beta, A, B)) {\n    return error.value;\n  }\n\n  return jStat.beta.inv(probability, alpha, beta) * (B - A) + A;\n};\n\nexports.BINOM = {};\n\nexports.BINOM.DIST = function(successes, trials, probability, cumulative) {\n  successes = utils.parseNumber(successes);\n  trials = utils.parseNumber(trials);\n  probability = utils.parseNumber(probability);\n  cumulative = utils.parseNumber(cumulative);\n  if (utils.anyIsError(successes, trials, probability, cumulative)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.binomial.cdf(successes, trials, probability) : jStat.binomial.pdf(successes, trials, probability);\n};\n\nexports.BINOM.DIST.RANGE = function(trials, probability, successes, successes2) {\n  successes2 = (successes2 === undefined) ? successes : successes2;\n\n  trials = utils.parseNumber(trials);\n  probability = utils.parseNumber(probability);\n  successes = utils.parseNumber(successes);\n  successes2 = utils.parseNumber(successes2);\n  if (utils.anyIsError(trials, probability, successes, successes2)) {\n    return error.value;\n  }\n\n  var result = 0;\n  for (var i = successes; i <= successes2; i++) {\n    result += mathTrig.COMBIN(trials, i) * Math.pow(probability, i) * Math.pow(1 - probability, trials - i);\n  }\n  return result;\n};\n\nexports.BINOM.INV = function(trials, probability, alpha) {\n  trials = utils.parseNumber(trials);\n  probability = utils.parseNumber(probability);\n  alpha = utils.parseNumber(alpha);\n  if (utils.anyIsError(trials, probability, alpha)) {\n    return error.value;\n  }\n\n  var x = 0;\n  while (x <= trials) {\n    if (jStat.binomial.cdf(x, trials, probability) >= alpha) {\n      return x;\n    }\n    x++;\n  }\n};\n\nexports.CHISQ = {};\n\nexports.CHISQ.DIST = function(x, k, cumulative) {\n  x = utils.parseNumber(x);\n  k = utils.parseNumber(k);\n  if (utils.anyIsError(x, k)) {\n    return error.value;\n  }\n\n  return (cumulative) ? jStat.chisquare.cdf(x, k) : jStat.chisquare.pdf(x, k);\n};\n\nexports.CHISQ.DIST.RT = function(x, k) {\n  if (!x | !k) {\n    return error.na;\n  }\n\n  if (x < 1 || k > Math.pow(10, 10)) {\n    return error.num;\n  }\n\n  if ((typeof x !== 'number') || (typeof k !== 'number')) {\n    return error.value;\n  }\n\n  return 1 -  jStat.chisquare.cdf(x, k);\n};\n\nexports.CHISQ.INV = function(probability, k) {\n  probability = utils.parseNumber(probability);\n  k = utils.parseNumber(k);\n  if (utils.anyIsError(probability, k)) {\n    return error.value;\n  }\n  return jStat.chisquare.inv(probability, k);\n};\n\nexports.CHISQ.INV.RT = function(p, k) {\n  if (!p | !k) {\n    return error.na;\n  }\n\n  if (p < 0 || p > 1 || k < 1 || k > Math.pow(10, 10)) {\n    return error.num;\n  }\n\n  if ((typeof p !== 'number') || (typeof k !== 'number')) {\n    return error.value;\n  }\n\n  return jStat.chisquare.inv(1.0 - p, k);\n};\n\nexports.CHISQ.TEST = function(observed, expected) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  if ((!(observed instanceof Array)) || (!(expected instanceof Array))) {\n    return error.value;\n  }\n\n  if (observed.length !== expected.length) {\n    return error.value;\n  }\n\n  if (observed[0] && expected[0] &&\n    observed[0].length !== expected[0].length) {\n    return error.value;\n  }\n\n  var row = observed.length;\n  var tmp, i, j;\n\n  // Convert single-dimension array into two-dimension array\n  for (i = 0; i < row; i ++) {\n    if (!(observed[i] instanceof Array)) {\n      tmp = observed[i];\n      observed[i] = [];\n      observed[i].push(tmp);\n    }\n    if (!(expected[i] instanceof Array)) {\n      tmp = expected[i];\n      expected[i] = [];\n      expected[i].push(tmp);\n    }\n  }\n\n  var col = observed[0].length;\n  var dof = (col === 1) ? row-1 : (row-1)*(col-1);\n  var xsqr = 0;\n  var Pi =Math.PI;\n\n  for (i = 0; i < row; i ++) {\n    for (j = 0; j < col; j ++) {\n      xsqr += Math.pow((observed[i][j] - expected[i][j]), 2) / expected[i][j];\n    }\n  }\n\n  // Get independency by X square and its degree of freedom\n  function ChiSq(xsqr, dof) {\n    var p = Math.exp(-0.5 * xsqr);\n    if((dof%2) === 1) {\n      p = p * Math.sqrt(2 * xsqr/Pi);\n    }\n    var k = dof;\n    while(k >= 2) {\n      p = p * xsqr/k;\n      k = k - 2;\n    }\n    var t = p;\n    var a = dof;\n    while (t > 0.0000000001*p) {\n      a = a + 2;\n      t = t * xsqr/a;\n      p = p + t;\n    }\n    return 1-p;\n  }\n\n  return Math.round(ChiSq(xsqr, dof) * 1000000) / 1000000;\n};\n\nexports.COLUMN = function(matrix, index) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  if (index < 0) {\n    return error.num;\n  }\n\n  if (!(matrix instanceof Array) || (typeof index !== 'number')) {\n    return error.value;\n  }\n\n  if (matrix.length === 0) {\n    return undefined;\n  }\n\n  return jStat.col(matrix, index);\n};\n\nexports.COLUMNS = function(matrix) {\n  if (arguments.length !== 1) {\n    return error.na;\n  }\n\n  if (!(matrix instanceof Array)) {\n    return error.value;\n  }\n\n  if (matrix.length === 0) {\n    return 0;\n  }\n\n  return jStat.cols(matrix);\n};\n\nexports.CONFIDENCE = {};\n\nexports.CONFIDENCE.NORM = function(alpha, sd, n) {\n  alpha = utils.parseNumber(alpha);\n  sd = utils.parseNumber(sd);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(alpha, sd, n)) {\n    return error.value;\n  }\n  return jStat.normalci(1, alpha, sd, n)[1] - 1;\n};\n\nexports.CONFIDENCE.T = function(alpha, sd, n) {\n  alpha = utils.parseNumber(alpha);\n  sd = utils.parseNumber(sd);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(alpha, sd, n)) {\n    return error.value;\n  }\n  return jStat.tci(1, alpha, sd, n)[1] - 1;\n};\n\nexports.CORREL = function(array1, array2) {\n  array1 = utils.parseNumberArray(utils.flatten(array1));\n  array2 = utils.parseNumberArray(utils.flatten(array2));\n  if (utils.anyIsError(array1, array2)) {\n    return error.value;\n  }\n  return jStat.corrcoeff(array1, array2);\n};\n\nexports.COUNT = function() {\n  return utils.numbers(utils.flatten(arguments)).length;\n};\n\nexports.COUNTA = function() {\n  var range = utils.flatten(arguments);\n  return range.length - exports.COUNTBLANK(range);\n};\n\nexports.COUNTIN = function (range, value) {\n  var result = 0;\n\n  range = utils.flatten(range);\n\n  for (var i = 0; i < range.length; i++) {\n    if (range[i] === value) {\n      result++;\n    }\n  }\n  return result;\n};\n\n\nexports.COUNTBLANK = function() {\n  var range = utils.flatten(arguments);\n  var blanks = 0;\n  var element;\n  for (var i = 0; i < range.length; i++) {\n    element = range[i];\n    if (element === null || element === '') {\n      blanks++;\n    }\n  }\n  return blanks;\n};\n\nexports.COUNTIF = function(range, criteria) {\n  range = utils.flatten(range);\n  if (!/[<>=!]/.test(criteria)) {\n    criteria = '==\"' + criteria + '\"';\n  }\n  var matches = 0;\n  for (var i = 0; i < range.length; i++) {\n    if (typeof range[i] !== 'string') {\n      if (eval(range[i] + criteria)) { // jshint ignore:line\n        matches++;\n      }\n    } else {\n      if (eval('\"' + range[i] + '\"' + criteria)) { // jshint ignore:line\n        matches++;\n      }\n    }\n  }\n  return matches;\n};\n\nexports.COUNTIFS = function() {\n  var args = utils.argsToArray(arguments);\n  var results = new Array(utils.flatten(args[0]).length);\n  for (var i = 0; i < results.length; i++) {\n    results[i] = true;\n  }\n  for (i = 0; i < args.length; i += 2) {\n    var range = utils.flatten(args[i]);\n    var criteria = args[i + 1];\n    if (!/[<>=!]/.test(criteria)) {\n      criteria = '==\"' + criteria + '\"';\n    }\n    for (var j = 0; j < range.length; j++) {\n      if (typeof range[j] !== 'string') {\n        results[j] = results[j] && eval(range[j] + criteria); // jshint ignore:line\n      } else {\n        results[j] = results[j] && eval('\"' + range[j] + '\"' + criteria); // jshint ignore:line\n      }\n    }\n  }\n  var result = 0;\n  for (i = 0; i < results.length; i++) {\n    if (results[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n\nexports.COUNTUNIQUE = function () {\n  return misc.UNIQUE.apply(null, utils.flatten(arguments)).length;\n};\n\nexports.COVARIANCE = {};\n\nexports.COVARIANCE.P = function(array1, array2) {\n  array1 = utils.parseNumberArray(utils.flatten(array1));\n  array2 = utils.parseNumberArray(utils.flatten(array2));\n  if (utils.anyIsError(array1, array2)) {\n    return error.value;\n  }\n  var mean1 = jStat.mean(array1);\n  var mean2 = jStat.mean(array2);\n  var result = 0;\n  var n = array1.length;\n  for (var i = 0; i < n; i++) {\n    result += (array1[i] - mean1) * (array2[i] - mean2);\n  }\n  return result / n;\n};\n\nexports.COVARIANCE.S = function(array1, array2) {\n  array1 = utils.parseNumberArray(utils.flatten(array1));\n  array2 = utils.parseNumberArray(utils.flatten(array2));\n  if (utils.anyIsError(array1, array2)) {\n    return error.value;\n  }\n  return jStat.covariance(array1, array2);\n};\n\nexports.DEVSQ = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var mean = jStat.mean(range);\n  var result = 0;\n  for (var i = 0; i < range.length; i++) {\n    result += Math.pow((range[i] - mean), 2);\n  }\n  return result;\n};\n\nexports.EXPON = {};\n\nexports.EXPON.DIST = function(x, lambda, cumulative) {\n  x = utils.parseNumber(x);\n  lambda = utils.parseNumber(lambda);\n  if (utils.anyIsError(x, lambda)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.exponential.cdf(x, lambda) : jStat.exponential.pdf(x, lambda);\n};\n\nexports.F = {};\n\nexports.F.DIST = function(x, d1, d2, cumulative) {\n  x = utils.parseNumber(x);\n  d1 = utils.parseNumber(d1);\n  d2 = utils.parseNumber(d2);\n  if (utils.anyIsError(x, d1, d2)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.centralF.cdf(x, d1, d2) : jStat.centralF.pdf(x, d1, d2);\n};\n\nexports.F.DIST.RT = function(x, d1, d2) {\n  if (arguments.length !== 3) {\n    return error.na;\n  }\n\n  if (x < 0 || d1 < 1 || d2 < 1) {\n    return error.num;\n  }\n\n  if ((typeof x !== 'number') || (typeof d1 !== 'number') || (typeof d2 !== 'number')) {\n    return error.value;\n  }\n\n  return 1 - jStat.centralF.cdf(x, d1, d2);\n};\n\nexports.F.INV = function(probability, d1, d2) {\n  probability = utils.parseNumber(probability);\n  d1 = utils.parseNumber(d1);\n  d2 = utils.parseNumber(d2);\n  if (utils.anyIsError(probability, d1, d2)) {\n    return error.value;\n  }\n  if (probability <= 0.0 || probability > 1.0) {\n    return error.num;\n  }\n\n  return jStat.centralF.inv(probability, d1, d2);\n};\n\nexports.F.INV.RT = function(p, d1, d2) {\n  if (arguments.length !== 3) {\n    return error.na;\n  }\n\n  if (p < 0 || p > 1 || d1 < 1 || d1 > Math.pow(10, 10) || d2 < 1 || d2 > Math.pow(10, 10)) {\n    return error.num;\n  }\n\n  if ((typeof p !== 'number') || (typeof d1 !== 'number') || (typeof d2 !== 'number')) {\n    return error.value;\n  }\n\n  return jStat.centralF.inv(1.0 - p, d1, d2);\n};\n\nexports.F.TEST = function(array1, array2) {\n  if (!array1 || !array2) {\n    return error.na;\n  }\n\n  if (!(array1 instanceof Array) || !(array2 instanceof Array)) {\n    return error.na;\n  }\n\n  if (array1.length < 2 || array2.length < 2) {\n    return error.div0;\n  }\n\n  var sumOfSquares = function(values, x1) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n      sum +=Math.pow((values[i] - x1), 2);\n    }\n    return sum;\n  };\n\n  var x1 = mathTrig.SUM(array1) / array1.length;\n  var x2 = mathTrig.SUM(array2) / array2.length;\n  var sum1 = sumOfSquares(array1, x1) / (array1.length - 1);\n  var sum2 = sumOfSquares(array2, x2) / (array2.length - 1);\n\n  return sum1 / sum2;\n};\n\nexports.FISHER = function(x) {\n  x = utils.parseNumber(x);\n  if (x instanceof Error) {\n    return x;\n  }\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n\nexports.FISHERINV = function(y) {\n  y = utils.parseNumber(y);\n  if (y instanceof Error) {\n    return y;\n  }\n  var e2y = Math.exp(2 * y);\n  return (e2y - 1) / (e2y + 1);\n};\n\nexports.FORECAST = function(x, data_y, data_x) {\n  x = utils.parseNumber(x);\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  if (utils.anyIsError(x, data_y, data_x)) {\n    return error.value;\n  }\n  var xmean = jStat.mean(data_x);\n  var ymean = jStat.mean(data_y);\n  var n = data_x.length;\n  var num = 0;\n  var den = 0;\n  for (var i = 0; i < n; i++) {\n    num += (data_x[i] - xmean) * (data_y[i] - ymean);\n    den += Math.pow(data_x[i] - xmean, 2);\n  }\n  var b = num / den;\n  var a = ymean - b * xmean;\n  return a + b * x;\n};\n\nexports.FREQUENCY = function(data, bins) {\n  data = utils.parseNumberArray(utils.flatten(data));\n  bins = utils.parseNumberArray(utils.flatten(bins));\n  if (utils.anyIsError(data, bins)) {\n    return error.value;\n  }\n  var n = data.length;\n  var b = bins.length;\n  var r = [];\n  for (var i = 0; i <= b; i++) {\n    r[i] = 0;\n    for (var j = 0; j < n; j++) {\n      if (i === 0) {\n        if (data[j] <= bins[0]) {\n          r[0] += 1;\n        }\n      } else if (i < b) {\n        if (data[j] > bins[i - 1] && data[j] <= bins[i]) {\n          r[i] += 1;\n        }\n      } else if (i === b) {\n        if (data[j] > bins[b - 1]) {\n          r[b] += 1;\n        }\n      }\n    }\n  }\n  return r;\n};\n\n\nexports.GAMMA = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  if (number === 0) {\n    return error.num;\n  }\n\n  if (parseInt(number, 10) === number && number < 0) {\n    return error.num;\n  }\n\n  return jStat.gammafn(number);\n};\n\nexports.GAMMA.DIST = function(value, alpha, beta, cumulative) {\n  if (arguments.length !== 4) {\n    return error.na;\n  }\n\n  if (value < 0 || alpha <= 0 || beta <= 0) {\n    return error.value;\n  }\n\n  if ((typeof value !== 'number') || (typeof alpha !== 'number') || (typeof beta !== 'number')) {\n    return error.value;\n  }\n\n  return cumulative ? jStat.gamma.cdf(value, alpha, beta, true) : jStat.gamma.pdf(value, alpha, beta, false);\n};\n\nexports.GAMMA.INV = function(probability, alpha, beta) {\n  if (arguments.length !== 3) {\n    return error.na;\n  }\n\n  if (probability < 0 || probability > 1 || alpha <= 0 || beta <= 0) {\n    return error.num;\n  }\n\n  if ((typeof probability !== 'number') || (typeof alpha !== 'number') || (typeof beta !== 'number')) {\n    return error.value;\n  }\n\n  return jStat.gamma.inv(probability, alpha, beta);\n};\n\nexports.GAMMALN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return jStat.gammaln(number);\n};\n\nexports.GAMMALN.PRECISE = function(x) {\n  if (arguments.length !== 1) {\n    return error.na;\n  }\n\n  if (x <= 0) {\n    return error.num;\n  }\n\n  if (typeof x !== 'number') {\n    return error.value;\n  }\n\n  return jStat.gammaln(x);\n};\n\nexports.GAUSS = function(z) {\n  z = utils.parseNumber(z);\n  if (z instanceof Error) {\n    return z;\n  }\n  return jStat.normal.cdf(z, 0, 1) - 0.5;\n};\n\nexports.GEOMEAN = function() {\n  var args = utils.parseNumberArray(utils.flatten(arguments));\n  if (args instanceof Error) {\n    return args;\n  }\n  return jStat.geomean(args);\n};\n\nexports.GROWTH = function(known_y, known_x, new_x, use_const) {\n  // Credits: Ilmari Karonen (http://stackoverflow.com/questions/14161990/how-to-implement-growth-function-in-javascript)\n\n  known_y = utils.parseNumberArray(known_y);\n  if (known_y instanceof Error) {\n    return known_y;\n  }\n\n  // Default values for optional parameters:\n  var i;\n  if (known_x === undefined) {\n    known_x = [];\n    for (i = 1; i <= known_y.length; i++) {\n      known_x.push(i);\n    }\n  }\n  if (new_x === undefined) {\n    new_x = [];\n    for (i = 1; i <= known_y.length; i++) {\n      new_x.push(i);\n    }\n  }\n\n  known_x = utils.parseNumberArray(known_x);\n  new_x = utils.parseNumberArray(new_x);\n  if (utils.anyIsError(known_x, new_x)) {\n    return error.value;\n  }\n\n\n  if (use_const === undefined) {\n    use_const = true;\n  }\n\n  // Calculate sums over the data:\n  var n = known_y.length;\n  var avg_x = 0;\n  var avg_y = 0;\n  var avg_xy = 0;\n  var avg_xx = 0;\n  for (i = 0; i < n; i++) {\n    var x = known_x[i];\n    var y = Math.log(known_y[i]);\n    avg_x += x;\n    avg_y += y;\n    avg_xy += x * y;\n    avg_xx += x * x;\n  }\n  avg_x /= n;\n  avg_y /= n;\n  avg_xy /= n;\n  avg_xx /= n;\n\n  // Compute linear regression coefficients:\n  var beta;\n  var alpha;\n  if (use_const) {\n    beta = (avg_xy - avg_x * avg_y) / (avg_xx - avg_x * avg_x);\n    alpha = avg_y - beta * avg_x;\n  } else {\n    beta = avg_xy / avg_xx;\n    alpha = 0;\n  }\n\n  // Compute and return result array:\n  var new_y = [];\n  for (i = 0; i < new_x.length; i++) {\n    new_y.push(Math.exp(alpha + beta * new_x[i]));\n  }\n  return new_y;\n};\n\nexports.HARMEAN = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var n = range.length;\n  var den = 0;\n  for (var i = 0; i < n; i++) {\n    den += 1 / range[i];\n  }\n  return n / den;\n};\n\nexports.HYPGEOM = {};\n\nexports.HYPGEOM.DIST = function(x, n, M, N, cumulative) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  M = utils.parseNumber(M);\n  N = utils.parseNumber(N);\n  if (utils.anyIsError(x, n, M, N)) {\n    return error.value;\n  }\n\n  function pdf(x, n, M, N) {\n    return mathTrig.COMBIN(M, x) * mathTrig.COMBIN(N - M, n - x) / mathTrig.COMBIN(N, n);\n  }\n\n  function cdf(x, n, M, N) {\n    var result = 0;\n    for (var i = 0; i <= x; i++) {\n      result += pdf(i, n, M, N);\n    }\n    return result;\n  }\n\n  return (cumulative) ? cdf(x, n, M, N) : pdf(x, n, M, N);\n};\n\nexports.INTERCEPT = function(known_y, known_x) {\n  known_y = utils.parseNumberArray(known_y);\n  known_x = utils.parseNumberArray(known_x);\n  if (utils.anyIsError(known_y, known_x)) {\n    return error.value;\n  }\n  if (known_y.length !== known_x.length) {\n    return error.na;\n  }\n  return exports.FORECAST(0, known_y, known_x);\n};\n\nexports.KURT = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var mean = jStat.mean(range);\n  var n = range.length;\n  var sigma = 0;\n  for (var i = 0; i < n; i++) {\n    sigma += Math.pow(range[i] - mean, 4);\n  }\n  sigma = sigma / Math.pow(jStat.stdev(range, true), 4);\n  return ((n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3))) * sigma - 3 * (n - 1) * (n - 1) / ((n - 2) * (n - 3));\n};\n\nexports.LARGE = function(range, k) {\n  range = utils.parseNumberArray(utils.flatten(range));\n  k = utils.parseNumber(k);\n  if (utils.anyIsError(range, k)) {\n    return range;\n  }\n  return range.sort(function(a, b) {\n    return b - a;\n  })[k - 1];\n};\n\nexports.LINEST = function(data_y, data_x) {\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  if (utils.anyIsError(data_y, data_x)) {\n    return error.value;\n  }\n  var ymean = jStat.mean(data_y);\n  var xmean = jStat.mean(data_x);\n  var n = data_x.length;\n  var num = 0;\n  var den = 0;\n  for (var i = 0; i < n; i++) {\n    num += (data_x[i] - xmean) * (data_y[i] - ymean);\n    den += Math.pow(data_x[i] - xmean, 2);\n  }\n  var m = num / den;\n  var b = ymean - m * xmean;\n  return [m, b];\n};\n\n// According to Microsoft:\n// http://office.microsoft.com/en-us/starter-help/logest-function-HP010342665.aspx\n// LOGEST returns are based on the following linear model:\n// ln y = x1 ln m1 + ... + xn ln mn + ln b\nexports.LOGEST = function(data_y, data_x) {\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  if (utils.anyIsError(data_y, data_x)) {\n    return error.value;\n  }\n  for (var i = 0; i < data_y.length; i ++) {\n    data_y[i] = Math.log(data_y[i]);\n  }\n\n  var result = exports.LINEST(data_y, data_x);\n  result[0] = Math.round(Math.exp(result[0])*1000000)/1000000;\n  result[1] = Math.round(Math.exp(result[1])*1000000)/1000000;\n  return result;\n};\n\nexports.LOGNORM = {};\n\nexports.LOGNORM.DIST = function(x, mean, sd, cumulative) {\n  x = utils.parseNumber(x);\n  mean = utils.parseNumber(mean);\n  sd = utils.parseNumber(sd);\n  if (utils.anyIsError(x, mean, sd)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.lognormal.cdf(x, mean, sd) : jStat.lognormal.pdf(x, mean, sd);\n};\n\nexports.LOGNORM.INV = function(probability, mean, sd) {\n  probability = utils.parseNumber(probability);\n  mean = utils.parseNumber(mean);\n  sd = utils.parseNumber(sd);\n  if (utils.anyIsError(probability, mean, sd)) {\n    return error.value;\n  }\n  return jStat.lognormal.inv(probability, mean, sd);\n};\n\nexports.MAX = function() {\n  var range = utils.numbers(utils.flatten(arguments));\n  return (range.length === 0) ? 0 : Math.max.apply(Math, range);\n};\n\nexports.MAXA = function() {\n  var range = utils.arrayValuesToNumbers(utils.flatten(arguments));\n  return (range.length === 0) ? 0 : Math.max.apply(Math, range);\n};\n\nexports.MEDIAN = function() {\n  var range = utils.arrayValuesToNumbers(utils.flatten(arguments));\n  var result = jStat.median(range);\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.MIN = function() {\n  var range = utils.numbers(utils.flatten(arguments));\n  return (range.length === 0) ? 0 : Math.min.apply(Math, range);\n};\n\nexports.MINA = function() {\n  var range = utils.arrayValuesToNumbers(utils.flatten(arguments));\n  return (range.length === 0) ? 0 : Math.min.apply(Math, range);\n};\n\nexports.MODE = {};\n\nexports.MODE.MULT = function() {\n  // Credits: Roönaän\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var n = range.length;\n  var count = {};\n  var maxItems = [];\n  var max = 0;\n  var currentItem;\n\n  for (var i = 0; i < n; i++) {\n    currentItem = range[i];\n    count[currentItem] = count[currentItem] ? count[currentItem] + 1 : 1;\n    if (count[currentItem] > max) {\n      max = count[currentItem];\n      maxItems = [];\n    }\n    if (count[currentItem] === max) {\n      maxItems[maxItems.length] = currentItem;\n    }\n  }\n  return maxItems;\n};\n\nexports.MODE.SNGL = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  return exports.MODE.MULT(range).sort(function(a, b) {\n    return a - b;\n  })[0];\n};\n\nexports.NEGBINOM = {};\n\nexports.NEGBINOM.DIST = function(k, r, p, cumulative) {\n  k = utils.parseNumber(k);\n  r = utils.parseNumber(r);\n  p = utils.parseNumber(p);\n  if (utils.anyIsError(k, r, p)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.negbin.cdf(k, r, p) : jStat.negbin.pdf(k, r, p);\n};\n\nexports.NORM = {};\n\nexports.NORM.DIST = function(x, mean, sd, cumulative) {\n  x = utils.parseNumber(x);\n  mean = utils.parseNumber(mean);\n  sd = utils.parseNumber(sd);\n  if (utils.anyIsError(x, mean, sd)) {\n    return error.value;\n  }\n  if (sd <= 0) {\n    return error.num;\n  }\n\n  // Return normal distribution computed by jStat [http://jstat.org]\n  return (cumulative) ? jStat.normal.cdf(x, mean, sd) : jStat.normal.pdf(x, mean, sd);\n};\n\nexports.NORM.INV = function(probability, mean, sd) {\n  probability = utils.parseNumber(probability);\n  mean = utils.parseNumber(mean);\n  sd = utils.parseNumber(sd);\n  if (utils.anyIsError(probability, mean, sd)) {\n    return error.value;\n  }\n  return jStat.normal.inv(probability, mean, sd);\n};\n\nexports.NORM.S = {};\n\nexports.NORM.S.DIST = function(z, cumulative) {\n  z = utils.parseNumber(z);\n  if (z instanceof Error) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.normal.cdf(z, 0, 1) : jStat.normal.pdf(z, 0, 1);\n};\n\nexports.NORM.S.INV = function(probability) {\n  probability = utils.parseNumber(probability);\n  if (probability instanceof Error) {\n    return error.value;\n  }\n  return jStat.normal.inv(probability, 0, 1);\n};\n\nexports.PEARSON = function(data_x, data_y) {\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  if (utils.anyIsError(data_y, data_x)) {\n    return error.value;\n  }\n  var xmean = jStat.mean(data_x);\n  var ymean = jStat.mean(data_y);\n  var n = data_x.length;\n  var num = 0;\n  var den1 = 0;\n  var den2 = 0;\n  for (var i = 0; i < n; i++) {\n    num += (data_x[i] - xmean) * (data_y[i] - ymean);\n    den1 += Math.pow(data_x[i] - xmean, 2);\n    den2 += Math.pow(data_y[i] - ymean, 2);\n  }\n  return num / Math.sqrt(den1 * den2);\n};\n\nexports.PERCENTILE = {};\n\nexports.PERCENTILE.EXC = function(array, k) {\n  array = utils.parseNumberArray(utils.flatten(array));\n  k = utils.parseNumber(k);\n  if (utils.anyIsError(array, k)) {\n    return error.value;\n  }\n  array = array.sort(function(a, b) {\n    {\n      return a - b;\n    }\n  });\n  var n = array.length;\n  if (k < 1 / (n + 1) || k > 1 - 1 / (n + 1)) {\n    return error.num;\n  }\n  var l = k * (n + 1) - 1;\n  var fl = Math.floor(l);\n  return utils.cleanFloat((l === fl) ? array[l] : array[fl] + (l - fl) * (array[fl + 1] - array[fl]));\n};\n\nexports.PERCENTILE.INC = function(array, k) {\n  array = utils.parseNumberArray(utils.flatten(array));\n  k = utils.parseNumber(k);\n  if (utils.anyIsError(array, k)) {\n    return error.value;\n  }\n  array = array.sort(function(a, b) {\n    return a - b;\n  });\n  var n = array.length;\n  var l = k * (n - 1);\n  var fl = Math.floor(l);\n  return utils.cleanFloat((l === fl) ? array[l] : array[fl] + (l - fl) * (array[fl + 1] - array[fl]));\n};\n\nexports.PERCENTRANK = {};\n\nexports.PERCENTRANK.EXC = function(array, x, significance) {\n  significance = (significance === undefined) ? 3 : significance;\n  array = utils.parseNumberArray(utils.flatten(array));\n  x = utils.parseNumber(x);\n  significance = utils.parseNumber(significance);\n  if (utils.anyIsError(array, x, significance)) {\n    return error.value;\n  }\n  array = array.sort(function(a, b) {\n    return a - b;\n  });\n  var uniques = misc.UNIQUE.apply(null, array);\n  var n = array.length;\n  var m = uniques.length;\n  var power = Math.pow(10, significance);\n  var result = 0;\n  var match = false;\n  var i = 0;\n  while (!match && i < m) {\n    if (x === uniques[i]) {\n      result = (array.indexOf(uniques[i]) + 1) / (n + 1);\n      match = true;\n    } else if (x >= uniques[i] && (x < uniques[i + 1] || i === m - 1)) {\n      result = (array.indexOf(uniques[i]) + 1 + (x - uniques[i]) / (uniques[i + 1] - uniques[i])) / (n + 1);\n      match = true;\n    }\n    i++;\n  }\n  return Math.floor(result * power) / power;\n};\n\nexports.PERCENTRANK.INC = function(array, x, significance) {\n  significance = (significance === undefined) ? 3 : significance;\n  array = utils.parseNumberArray(utils.flatten(array));\n  x = utils.parseNumber(x);\n  significance = utils.parseNumber(significance);\n  if (utils.anyIsError(array, x, significance)) {\n    return error.value;\n  }\n  array = array.sort(function(a, b) {\n    return a - b;\n  });\n  var uniques = misc.UNIQUE.apply(null, array);\n  var n = array.length;\n  var m = uniques.length;\n  var power = Math.pow(10, significance);\n  var result = 0;\n  var match = false;\n  var i = 0;\n  while (!match && i < m) {\n    if (x === uniques[i]) {\n      result = array.indexOf(uniques[i]) / (n - 1);\n      match = true;\n    } else if (x >= uniques[i] && (x < uniques[i + 1] || i === m - 1)) {\n      result = (array.indexOf(uniques[i]) + (x - uniques[i]) / (uniques[i + 1] - uniques[i])) / (n - 1);\n      match = true;\n    }\n    i++;\n  }\n  return Math.floor(result * power) / power;\n};\n\nexports.PERMUT = function(number, number_chosen) {\n  number = utils.parseNumber(number);\n  number_chosen = utils.parseNumber(number_chosen);\n  if (utils.anyIsError(number, number_chosen)) {\n    return error.value;\n  }\n  return mathTrig.FACT(number) / mathTrig.FACT(number - number_chosen);\n};\n\nexports.PERMUTATIONA = function(number, number_chosen) {\n  number = utils.parseNumber(number);\n  number_chosen = utils.parseNumber(number_chosen);\n  if (utils.anyIsError(number, number_chosen)) {\n    return error.value;\n  }\n  return Math.pow(number, number_chosen);\n};\n\nexports.PHI = function(x) {\n  x = utils.parseNumber(x);\n  if (x instanceof Error) {\n    return error.value;\n  }\n  return Math.exp(-0.5 * x * x) / SQRT2PI;\n};\n\nexports.POISSON = {};\n\nexports.POISSON.DIST = function(x, mean, cumulative) {\n  x = utils.parseNumber(x);\n  mean = utils.parseNumber(mean);\n  if (utils.anyIsError(x, mean)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.poisson.cdf(x, mean) : jStat.poisson.pdf(x, mean);\n};\n\nexports.PROB = function(range, probability, lower, upper) {\n  if (lower === undefined) {\n    return 0;\n  }\n  upper = (upper === undefined) ? lower : upper;\n\n  range = utils.parseNumberArray(utils.flatten(range));\n  probability = utils.parseNumberArray(utils.flatten(probability));\n  lower = utils.parseNumber(lower);\n  upper = utils.parseNumber(upper);\n  if (utils.anyIsError(range, probability, lower, upper)) {\n    return error.value;\n  }\n\n  if (lower === upper) {\n    return (range.indexOf(lower) >= 0) ? probability[range.indexOf(lower)] : 0;\n  }\n\n  var sorted = range.sort(function(a, b) {\n    return a - b;\n  });\n  var n = sorted.length;\n  var result = 0;\n  for (var i = 0; i < n; i++) {\n    if (sorted[i] >= lower && sorted[i] <= upper) {\n      result += probability[range.indexOf(sorted[i])];\n    }\n  }\n  return result;\n};\n\nexports.QUARTILE = {};\n\nexports.QUARTILE.EXC = function(range, quart) {\n  range = utils.parseNumberArray(utils.flatten(range));\n  quart = utils.parseNumber(quart);\n  if (utils.anyIsError(range, quart)) {\n    return error.value;\n  }\n  switch (quart) {\n    case 1:\n      return exports.PERCENTILE.EXC(range, 0.25);\n    case 2:\n      return exports.PERCENTILE.EXC(range, 0.5);\n    case 3:\n      return exports.PERCENTILE.EXC(range, 0.75);\n    default:\n      return error.num;\n  }\n};\n\nexports.QUARTILE.INC = function(range, quart) {\n  range = utils.parseNumberArray(utils.flatten(range));\n  quart = utils.parseNumber(quart);\n  if (utils.anyIsError(range, quart)) {\n    return error.value;\n  }\n  switch (quart) {\n    case 1:\n      return exports.PERCENTILE.INC(range, 0.25);\n    case 2:\n      return exports.PERCENTILE.INC(range, 0.5);\n    case 3:\n      return exports.PERCENTILE.INC(range, 0.75);\n    default:\n      return error.num;\n  }\n};\n\nexports.RANK = {};\n\nexports.RANK.AVG = function(number, range, order) {\n  number = utils.parseNumber(number);\n  range = utils.parseNumberArray(utils.flatten(range));\n  if (utils.anyIsError(number, range)) {\n    return error.value;\n  }\n  range = utils.flatten(range);\n  order = order || false;\n  var sort = (order) ? function(a, b) {\n    return a - b;\n  } : function(a, b) {\n    return b - a;\n  };\n  range = range.sort(sort);\n\n  var length = range.length;\n  var count = 0;\n  for (var i = 0; i < length; i++) {\n    if (range[i] === number) {\n      count++;\n    }\n  }\n\n  return (count > 1) ? (2 * range.indexOf(number) + count + 1) / 2 : range.indexOf(number) + 1;\n};\n\nexports.RANK.EQ = function(number, range, order) {\n  number = utils.parseNumber(number);\n  range = utils.parseNumberArray(utils.flatten(range));\n  if (utils.anyIsError(number, range)) {\n    return error.value;\n  }\n  order = order || false;\n  var sort = (order) ? function(a, b) {\n    return a - b;\n  } : function(a, b) {\n    return b - a;\n  };\n  range = range.sort(sort);\n  return range.indexOf(number) + 1;\n};\n\nexports.ROW = function(matrix, index) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  if (index < 0) {\n    return error.num;\n  }\n\n  if (!(matrix instanceof Array) || (typeof index !== 'number')) {\n    return error.value;\n  }\n\n  if (matrix.length === 0) {\n    return undefined;\n  }\n\n  return jStat.row(matrix, index);\n};\n\nexports.ROWS = function(matrix) {\n  if (arguments.length !== 1) {\n    return error.na;\n  }\n\n  if (!(matrix instanceof Array)) {\n    return error.value;\n  }\n\n  if (matrix.length === 0) {\n    return 0;\n  }\n\n  return jStat.rows(matrix);\n};\n\nexports.RSQ = function(data_x, data_y) { // no need to flatten here, PEARSON will take care of that\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  if (utils.anyIsError(data_x, data_y)) {\n    return error.value;\n  }\n  return Math.pow(exports.PEARSON(data_x, data_y), 2);\n};\n\nexports.SKEW = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var mean = jStat.mean(range);\n  var n = range.length;\n  var sigma = 0;\n  for (var i = 0; i < n; i++) {\n    sigma += Math.pow(range[i] - mean, 3);\n  }\n  return n * sigma / ((n - 1) * (n - 2) * Math.pow(jStat.stdev(range, true), 3));\n};\n\nexports.SKEW.P = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var mean = jStat.mean(range);\n  var n = range.length;\n  var m2 = 0;\n  var m3 = 0;\n  for (var i = 0; i < n; i++) {\n    m3 += Math.pow(range[i] - mean, 3);\n    m2 += Math.pow(range[i] - mean, 2);\n  }\n  m3 = m3 / n;\n  m2 = m2 / n;\n  return m3 / Math.pow(m2, 3 / 2);\n};\n\nexports.SLOPE = function(data_y, data_x) {\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  if (utils.anyIsError(data_y, data_x)) {\n    return error.value;\n  }\n  var xmean = jStat.mean(data_x);\n  var ymean = jStat.mean(data_y);\n  var n = data_x.length;\n  var num = 0;\n  var den = 0;\n  for (var i = 0; i < n; i++) {\n    num += (data_x[i] - xmean) * (data_y[i] - ymean);\n    den += Math.pow(data_x[i] - xmean, 2);\n  }\n  return num / den;\n};\n\nexports.SMALL = function(range, k) {\n  range = utils.parseNumberArray(utils.flatten(range));\n  k = utils.parseNumber(k);\n  if (utils.anyIsError(range, k)) {\n    return range;\n  }\n  return range.sort(function(a, b) {\n    return a - b;\n  })[k - 1];\n};\n\nexports.STANDARDIZE = function(x, mean, sd) {\n  x = utils.parseNumber(x);\n  mean = utils.parseNumber(mean);\n  sd = utils.parseNumber(sd);\n  if (utils.anyIsError(x, mean, sd)) {\n    return error.value;\n  }\n  return (x - mean) / sd;\n};\n\nexports.STDEV = {};\n\nexports.STDEV.P = function() {\n  var v = exports.VAR.P.apply(this, arguments);\n  var result = Math.sqrt(v);\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.STDEV.S = function() {\n  var v = exports.VAR.S.apply(this, arguments);\n  var result = Math.sqrt(v);\n\n  return result;\n};\n\nexports.STDEVA = function() {\n  var v = exports.VARA.apply(this, arguments);\n  var result = Math.sqrt(v);\n\n  return result;\n};\n\nexports.STDEVPA = function() {\n  var v = exports.VARPA.apply(this, arguments);\n  var result = Math.sqrt(v);\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\n\nexports.STEYX = function(data_y, data_x) {\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  if (utils.anyIsError(data_y, data_x)) {\n    return error.value;\n  }\n  var xmean = jStat.mean(data_x);\n  var ymean = jStat.mean(data_y);\n  var n = data_x.length;\n  var lft = 0;\n  var num = 0;\n  var den = 0;\n  for (var i = 0; i < n; i++) {\n    lft += Math.pow(data_y[i] - ymean, 2);\n    num += (data_x[i] - xmean) * (data_y[i] - ymean);\n    den += Math.pow(data_x[i] - xmean, 2);\n  }\n  return Math.sqrt((lft - num * num / den) / (n - 2));\n};\n\nexports.TRANSPOSE = function(matrix) {\n  if (!matrix) {\n    return error.na;\n  }\n  return jStat.transpose(matrix);\n};\n\nexports.T = text.T;\n\nexports.T.DIST = function(x, df, cumulative) {\n  x = utils.parseNumber(x);\n  df = utils.parseNumber(df);\n  if (utils.anyIsError(x, df)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.studentt.cdf(x, df) : jStat.studentt.pdf(x, df);\n};\n\nexports.T.DIST['2T'] = function(x, df) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  if (x < 0 || df < 1) {\n    return error.num;\n  }\n\n  if ((typeof x !== 'number') || (typeof df !== 'number')) {\n    return error.value;\n  }\n\n  return (1 - jStat.studentt.cdf(x , df)) * 2;\n};\n\nexports.T.DIST.RT = function(x, df) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  if (x < 0 || df < 1) {\n    return error.num;\n  }\n\n  if ((typeof x !== 'number') || (typeof df !== 'number')) {\n    return error.value;\n  }\n\n  return 1 - jStat.studentt.cdf(x , df);\n};\n\nexports.T.INV = function(probability, df) {\n  probability = utils.parseNumber(probability);\n  df = utils.parseNumber(df);\n  if (utils.anyIsError(probability, df)) {\n    return error.value;\n  }\n  return jStat.studentt.inv(probability, df);\n};\n\nexports.T.INV['2T'] = function(probability, df) {\n  probability = utils.parseNumber(probability);\n  df = utils.parseNumber(df);\n  if (probability <= 0 || probability > 1 || df < 1) {\n    return error.num;\n  }\n  if (utils.anyIsError(probability, df)) {\n    return error.value;\n  }\n  return Math.abs(jStat.studentt.inv(probability/2, df));\n};\n\n// The algorithm can be found here:\n// http://www.chem.uoa.gr/applets/AppletTtest/Appl_Ttest2.html\nexports.T.TEST = function(data_x, data_y) {\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  if (utils.anyIsError(data_x, data_y)) {\n    return error.value;\n  }\n\n  var mean_x = jStat.mean(data_x);\n  var mean_y = jStat.mean(data_y);\n  var s_x = 0;\n  var s_y = 0;\n  var i;\n\n  for (i = 0; i < data_x.length; i++) {\n    s_x += Math.pow(data_x[i] - mean_x, 2);\n  }\n  for (i = 0; i < data_y.length; i++) {\n    s_y += Math.pow(data_y[i] - mean_y, 2);\n  }\n\n  s_x = s_x / (data_x.length-1);\n  s_y = s_y / (data_y.length-1);\n\n  var t = Math.abs(mean_x - mean_y) / Math.sqrt(s_x/data_x.length + s_y/data_y.length);\n\n  return exports.T.DIST['2T'](t, data_x.length+data_y.length-2);\n};\n\nexports.TREND = function(data_y, data_x, new_data_x) {\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  new_data_x = utils.parseNumberArray(utils.flatten(new_data_x));\n  if (utils.anyIsError(data_y, data_x, new_data_x)) {\n    return error.value;\n  }\n  var linest = exports.LINEST(data_y, data_x);\n  var m = linest[0];\n  var b = linest[1];\n  var result = [];\n\n  new_data_x.forEach(function(x) {\n    result.push(m * x + b);\n  });\n\n  return result;\n};\n\nexports.TRIMMEAN = function(range, percent) {\n  range = utils.parseNumberArray(utils.flatten(range));\n  percent = utils.parseNumber(percent);\n  if (utils.anyIsError(range, percent)) {\n    return error.value;\n  }\n  var trim = mathTrig.FLOOR(range.length * percent, 2) / 2;\n  return jStat.mean(utils.initial(utils.rest(range.sort(function(a, b) {\n    return a - b;\n  }), trim), trim));\n};\n\nexports.VAR = {};\n\nexports.VAR.P = function() {\n  var range = utils.numbers(utils.flatten(arguments));\n  var n = range.length;\n  var sigma = 0;\n  var mean = exports.AVERAGE(range);\n  var result;\n  for (var i = 0; i < n; i++) {\n    sigma += Math.pow(range[i] - mean, 2);\n  }\n  result = sigma / n;\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.VAR.S = function() {\n  var range = utils.numbers(utils.flatten(arguments));\n  var n = range.length;\n  var sigma = 0;\n  var mean = exports.AVERAGE(range);\n  for (var i = 0; i < n; i++) {\n    sigma += Math.pow(range[i] - mean, 2);\n  }\n  return sigma / (n - 1);\n};\n\nexports.VARA = function() {\n  var range = utils.flatten(arguments);\n  var n = range.length;\n  var sigma = 0;\n  var count = 0;\n  var mean = exports.AVERAGEA(range);\n  for (var i = 0; i < n; i++) {\n    var el = range[i];\n    if (typeof el === 'number') {\n      sigma += Math.pow(el - mean, 2);\n    } else if (el === true) {\n      sigma += Math.pow(1 - mean, 2);\n    } else {\n      sigma += Math.pow(0 - mean, 2);\n    }\n\n    if (el !== null) {\n      count++;\n    }\n  }\n  return sigma / (count - 1);\n};\n\nexports.VARPA = function() {\n  var range = utils.flatten(arguments);\n  var n = range.length;\n  var sigma = 0;\n  var count = 0;\n  var mean = exports.AVERAGEA(range);\n  var result;\n  for (var i = 0; i < n; i++) {\n    var el = range[i];\n    if (typeof el === 'number') {\n      sigma += Math.pow(el - mean, 2);\n    } else if (el === true) {\n      sigma += Math.pow(1 - mean, 2);\n    } else {\n      sigma += Math.pow(0 - mean, 2);\n    }\n\n    if (el !== null) {\n      count++;\n    }\n  }\n  result = sigma / count;\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.WEIBULL = {};\n\nexports.WEIBULL.DIST = function(x, alpha, beta, cumulative) {\n  x = utils.parseNumber(x);\n  alpha = utils.parseNumber(alpha);\n  beta = utils.parseNumber(beta);\n  if (utils.anyIsError(x, alpha, beta)) {\n    return error.value;\n  }\n  return (cumulative) ? 1 - Math.exp(-Math.pow(x / beta, alpha)) : Math.pow(x, alpha - 1) * Math.exp(-Math.pow(x / beta, alpha)) * alpha / Math.pow(beta, alpha);\n};\n\nexports.Z = {};\n\nexports.Z.TEST = function(range, x, sd) {\n  range = utils.parseNumberArray(utils.flatten(range));\n  x = utils.parseNumber(x);\n  if (utils.anyIsError(range, x)) {\n    return error.value;\n  }\n\n  sd = sd || exports.STDEV.S(range);\n  var n = range.length;\n  return 1 - exports.NORM.S.DIST((exports.AVERAGE(range) - x) / (sd / Math.sqrt(n)), true);\n};\n","var utils = require('./utils');\nvar error = require('./error');\n\n//TODO\nexports.ASC = function() {\n  throw new Error('ASC is not implemented');\n};\n\n//TODO\nexports.BAHTTEXT = function() {\n  throw new Error('BAHTTEXT is not implemented');\n};\n\nexports.CHAR = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return String.fromCharCode(number);\n};\n\nexports.CLEAN = function(text) {\n  text = text || '';\n  var re = /[\\0-\\x1F]/g;\n  return text.replace(re, \"\");\n};\n\nexports.CODE = function(text) {\n  text = text || '';\n  var result = text.charCodeAt(0);\n\n  if (isNaN(result)) {\n    result = error.na;\n  }\n  return result;\n};\n\nexports.CONCATENATE = function() {\n  var args = utils.flatten(arguments);\n\n  var trueFound = 0;\n  while ((trueFound = args.indexOf(true)) > -1) {\n    args[trueFound] = 'TRUE';\n  }\n\n  var falseFound = 0;\n  while ((falseFound = args.indexOf(false)) > -1) {\n    args[falseFound] = 'FALSE';\n  }\n\n  return args.join('');\n};\n\n//TODO\nexports.DBCS = function() {\n  throw new Error('DBCS is not implemented');\n};\n\n//TODO\nexports.DOLLAR = function() {\n  throw new Error('DOLLAR is not implemented');\n};\n\nexports.EXACT = function(text1, text2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n  return text1 === text2;\n};\n\nexports.FIND = function(find_text, within_text, position) {\n  if (arguments.length < 2) {\n    return error.na;\n  }\n  position = (position === undefined) ? 0 : position;\n  return within_text ? within_text.indexOf(find_text, position - 1) + 1 : null;\n};\n\n//TODO\nexports.FIXED = function() {\n  throw new Error('FIXED is not implemented');\n};\n\nexports.HTML2TEXT = function (value) {\n  var result = '';\n\n  if (value) {\n    if (value instanceof Array) {\n      value.forEach(function (line) {\n        if (result !== '') {\n          result += '\\n';\n        }\n        result += (line.replace(/<(?:.|\\n)*?>/gm, ''));\n      });\n    } else {\n      result = value.replace(/<(?:.|\\n)*?>/gm, '');\n    }\n  }\n\n  return result;\n};\n\nexports.LEFT = function(text, number) {\n  number = (number === undefined) ? 1 : number;\n  number = utils.parseNumber(number);\n  if (number instanceof Error || typeof text !== 'string') {\n    return error.value;\n  }\n  return text ? text.substring(0, number) : null;\n};\n\nexports.LEN = function(text) {\n  if (arguments.length === 0) {\n    return error.error;\n  }\n\n  if (typeof text === 'string') {\n    return text ? text.length : 0;\n  }\n\n  if (text.length) {\n    return text.length;\n  }\n\n  return error.value;\n};\n\nexports.LOWER = function(text) {\n  if (typeof text !== 'string') {\n    return error.value;\n  }\n  return text ? text.toLowerCase() : text;\n};\n\nexports.MID = function(text, start, number) {\n  start = utils.parseNumber(start);\n  number = utils.parseNumber(number);\n  if (utils.anyIsError(start, number) || typeof text !== 'string') {\n    return number;\n  }\n\n  var begin = start - 1;\n  var end = begin + number;\n\n  return text.substring(begin, end);\n};\n\n// TODO\nexports.NUMBERVALUE = function (text, decimal_separator, group_separator)  {\n  decimal_separator = (typeof decimal_separator === 'undefined') ? '.' : decimal_separator;\n  group_separator = (typeof group_separator === 'undefined') ? ',' : group_separator;\n  return Number(text.replace(decimal_separator, '.').replace(group_separator, ''));\n};\n\n// TODO\nexports.PRONETIC = function() {\n  throw new Error('PRONETIC is not implemented');\n};\n\nexports.PROPER = function(text) {\n  if (text === undefined || text.length === 0) {\n    return error.value;\n  }\n  if (text === true) {\n    text = 'TRUE';\n  }\n  if (text === false) {\n    text = 'FALSE';\n  }\n  if (isNaN(text) && typeof text === 'number') {\n    return error.value;\n  }\n  if (typeof text === 'number') {\n    text = '' + text;\n  }\n\n  return text.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nexports.REGEXEXTRACT = function (text, regular_expression) {\n  if (arguments.length < 2) {\n    return error.na;\n  }\n  var match = text.match(new RegExp(regular_expression));\n  return match ? (match[match.length > 1 ? match.length - 1 : 0]) : null;\n};\n\nexports.REGEXMATCH = function (text, regular_expression, full) {\n  if (arguments.length < 2) {\n    return error.na;\n  }\n  var match = text.match(new RegExp(regular_expression));\n  return full ? match : !!match;\n};\n\nexports.REGEXREPLACE = function (text, regular_expression, replacement) {\n  if (arguments.length < 3) {\n    return error.na;\n  }\n  return text.replace(new RegExp(regular_expression), replacement);\n};\n\nexports.REPLACE = function(text, position, length, new_text) {\n  position = utils.parseNumber(position);\n  length = utils.parseNumber(length);\n  if (utils.anyIsError(position, length) ||\n    typeof text !== 'string' ||\n    typeof new_text !== 'string') {\n    return error.value;\n  }\n  return text.substr(0, position - 1) + new_text + text.substr(position - 1 + length);\n};\n\nexports.REPT = function(text, number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return new Array(number + 1).join(text);\n};\n\nexports.RIGHT = function(text, number) {\n  number = (number === undefined) ? 1 : number;\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return text ? text.substring(text.length - number) : error.na;\n};\n\nexports.SEARCH = function(find_text, within_text, position) {\n  var foundAt;\n  if (typeof find_text !== 'string' || typeof within_text !== 'string') {\n    return error.value;\n  }\n  position = (position === undefined) ? 0 : position;\n  foundAt = within_text.toLowerCase().indexOf(find_text.toLowerCase(), position - 1)+1;\n  return (foundAt === 0)?error.value:foundAt;\n};\n\nexports.SPLIT = function (text, separator) {\n  return text.split(separator);\n};\n\nexports.SUBSTITUTE = function(text, old_text, new_text, occurrence) {\n  if (arguments.length < 2) {\n    return error.na;\n  }\n  if (!text || !old_text || !new_text) {\n    return text;\n  } else if (occurrence === undefined) {\n    return text.replace(new RegExp(old_text, 'g'), new_text);\n  } else {\n    var index = 0;\n    var i = 0;\n    while (text.indexOf(old_text, index) > 0) {\n      index = text.indexOf(old_text, index + 1);\n      i++;\n      if (i === occurrence) {\n        return text.substring(0, index) + new_text + text.substring(index + old_text.length);\n      }\n    }\n  }\n};\n\nexports.T = function(value) {\n  return (typeof value === \"string\") ? value : '';\n};\n\n// TODO incomplete implementation\nexports.TEXT = function() {\n  throw new Error('TEXT is not implemented');\n};\n\nexports.TRIM = function(text) {\n  if (typeof text !== 'string') {\n    return error.value;\n  }\n  return text.replace(/ +/g, ' ').trim();\n};\n\nexports.UNICHAR = exports.CHAR;\n\nexports.UNICODE = exports.CODE;\n\nexports.UPPER = function(text) {\n  if (typeof text !== 'string') {\n    return error.value;\n  }\n  return text.toUpperCase();\n};\n\n//TODO\nexports.VALUE = function() {\n  throw new Error('VALUE is not implemented');\n};\n","var error = require('./error');\n\n// TODO\nexports.CELL = function() {\n  throw new Error('CELL is not implemented');\n};\n\nexports.ERROR = {};\nexports.ERROR.TYPE = function(error_val) {\n  switch (error_val) {\n    case error.nil: return 1;\n    case error.div0: return 2;\n    case error.value: return 3;\n    case error.ref: return 4;\n    case error.name: return 5;\n    case error.num: return 6;\n    case error.na: return 7;\n    case error.data: return 8;\n  }\n  return error.na;\n};\n\n// TODO\nexports.INFO = function() {\n  throw new Error('INFO is not implemented');\n};\n\nexports.ISBLANK = function(value) {\n  return value === null;\n};\n\nexports.ISBINARY = function (number) {\n  return (/^[01]{1,10}$/).test(number);\n};\n\nexports.ISERR = function(value) {\n  return ([error.value, error.ref, error.div0, error.num, error.name, error.nil]).indexOf(value) >= 0 ||\n    (typeof value === 'number' && (isNaN(value) || !isFinite(value)));\n};\n\nexports.ISERROR = function(value) {\n  return exports.ISERR(value) || value === error.na;\n};\n\nexports.ISEVEN = function(number) {\n  return (Math.floor(Math.abs(number)) & 1) ? false : true;\n};\n\n// TODO\nexports.ISFORMULA = function() {\n  throw new Error('ISFORMULA is not implemented');\n};\n\nexports.ISLOGICAL = function(value) {\n  return value === true || value === false;\n};\n\nexports.ISNA = function(value) {\n  return value === error.na;\n};\n\nexports.ISNONTEXT = function(value) {\n  return typeof(value) !== 'string';\n};\n\nexports.ISNUMBER = function(value) {\n  return typeof(value) === 'number' && !isNaN(value) && isFinite(value);\n};\n\nexports.ISODD = function(number) {\n  return (Math.floor(Math.abs(number)) & 1) ? true : false;\n};\n\n// TODO\nexports.ISREF = function() {\n  throw new Error('ISREF is not implemented');\n};\n\nexports.ISTEXT = function(value) {\n  return typeof(value) === 'string';\n};\n\nexports.N = function(value) {\n  if (this.ISNUMBER(value)) {\n    return value;\n  }\n  if (value instanceof Date) {\n    return value.getTime();\n  }\n  if (value === true) {\n    return 1;\n  }\n  if (value === false) {\n    return 0;\n  }\n  if (this.ISERROR(value)) {\n    return value;\n  }\n  return 0;\n};\n\nexports.NA = function() {\n  return error.na;\n};\n\n\n// TODO\nexports.SHEET = function() {\n  throw new Error('SHEET is not implemented');\n};\n\n// TODO\nexports.SHEETS = function() {\n  throw new Error('SHEETS is not implemented');\n};\n\nexports.TYPE = function(value) {\n  if (this.ISNUMBER(value)) {\n    return 1;\n  }\n  if (this.ISTEXT(value)) {\n    return 2;\n  }\n  if (this.ISLOGICAL(value)) {\n    return 4;\n  }\n  if (this.ISERROR(value)) {\n    return 16;\n  }\n  if (Array.isArray(value)) {\n    return 64;\n  }\n};\n","var error = require('./error');\nvar utils = require('./utils');\n\nvar d1900 = new Date(Date.UTC(1900, 0, 1));\nvar WEEK_STARTS = [\n  undefined,\n  0,\n  1,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  0\n];\nvar WEEK_TYPES = [\n  [],\n  [1, 2, 3, 4, 5, 6, 7],\n  [7, 1, 2, 3, 4, 5, 6],\n  [6, 0, 1, 2, 3, 4, 5],\n  [],\n  [],\n  [],\n  [],\n  [],\n  [],\n  [],\n  [7, 1, 2, 3, 4, 5, 6],\n  [6, 7, 1, 2, 3, 4, 5],\n  [5, 6, 7, 1, 2, 3, 4],\n  [4, 5, 6, 7, 1, 2, 3],\n  [3, 4, 5, 6, 7, 1, 2],\n  [2, 3, 4, 5, 6, 7, 1],\n  [1, 2, 3, 4, 5, 6, 7]\n];\nvar WEEKEND_TYPES = [\n  [],\n  [6, 0],\n  [0, 1],\n  [1, 2],\n  [2, 3],\n  [3, 4],\n  [4, 5],\n  [5, 6],\n  undefined,\n  undefined,\n  undefined, [0, 0],\n  [1, 1],\n  [2, 2],\n  [3, 3],\n  [4, 4],\n  [5, 5],\n  [6, 6]\n];\n\nexports.DATE = function(year, month, day) {\n  var result;\n\n  year = utils.parseNumber(year);\n  month = utils.parseNumber(month);\n  day = utils.parseNumber(day);\n\n  if (utils.anyIsError(year, month, day)) {\n    result = error.value;\n\n  } else if (year < 0 || month < 0 || day < 0) {\n    result = error.num;\n\n  } else {\n    result = new Date(year, month - 1, day);\n  }\n\n  return result;\n};\n\nexports.DATEDIF = function(start_date, end_date, interval) {\n  end_date = utils.parseDate(end_date);\n  start_date = utils.parseDate(start_date);\n\n  if (end_date instanceof Error) {\n    return end_date;\n  }\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  if (typeof interval !== 'string') {\n    return error.value;\n  }\n\n  var difference = end_date - start_date;\n  switch (interval.toLowerCase()) {\n    case 'y':\n      return Math.floor(difference / 31556952000);\n    case 'm':\n      return Math.floor(difference / 2629746000);\n    case 'd':\n      return Math.floor(difference / 86400000);\n  }\n};\n\nexports.DATEVALUE = function(date_text) {\n  var modifier = 2;\n  var date;\n\n  if (typeof date_text !== 'string') {\n    return error.value;\n  }\n\n  date = Date.parse(date_text);\n\n  if (isNaN(date)) {\n    return error.value;\n  }\n\n  if (date <= -2203891200000) {\n    modifier = 1;\n  }\n\n  return Math.ceil((date - d1900) / 86400000) + modifier;\n};\n\nexports.DAY = function(serial_number) {\n  var date = utils.parseDate(serial_number);\n  if (date instanceof Error) {\n    return date;\n  }\n\n  return date.getDate();\n};\n\nexports.DAYS = function(end_date, start_date) {\n  end_date = utils.parseDate(end_date);\n  start_date = utils.parseDate(start_date);\n\n  if (end_date instanceof Error) {\n    return end_date;\n  }\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n\n  return serial(end_date) - serial(start_date);\n};\n\nexports.DAYS360 = function(start_date, end_date, method) {\n  method = utils.parseBool(method);\n  start_date = utils.parseDate(start_date);\n  end_date = utils.parseDate(end_date);\n\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  if (end_date instanceof Error) {\n    return end_date;\n  }\n  if (method instanceof Error) {\n    return method;\n  }\n  var sm = start_date.getMonth();\n  var em = end_date.getMonth();\n  var sd, ed;\n\n  if (method) {\n    sd = start_date.getDate() === 31 ? 30 : start_date.getDate();\n    ed = end_date.getDate() === 31 ? 30 : end_date.getDate();\n  } else {\n    var smd = new Date(start_date.getFullYear(), sm + 1, 0).getDate();\n    var emd = new Date(end_date.getFullYear(), em + 1, 0).getDate();\n    sd = start_date.getDate() === smd ? 30 : start_date.getDate();\n    if (end_date.getDate() === emd) {\n      if (sd < 30) {\n        em++;\n        ed = 1;\n      } else {\n        ed = 30;\n      }\n    } else {\n      ed = end_date.getDate();\n    }\n  }\n\n  return 360 * (end_date.getFullYear() - start_date.getFullYear()) +\n    30 * (em - sm) + (ed - sd);\n};\n\nexports.EDATE = function(start_date, months) {\n  start_date = utils.parseDate(start_date);\n\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  if (isNaN(months)) {\n    return error.value;\n  }\n  months = parseInt(months, 10);\n  start_date.setMonth(start_date.getMonth() + months);\n\n  return serial(start_date);\n};\n\nexports.EOMONTH = function(start_date, months) {\n  start_date = utils.parseDate(start_date);\n\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  if (isNaN(months)) {\n    return error.value;\n  }\n  months = parseInt(months, 10);\n\n  return serial(new Date(start_date.getFullYear(), start_date.getMonth() + months + 1, 0));\n};\n\nexports.HOUR = function(serial_number) {\n  serial_number = utils.parseDate(serial_number);\n\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n\n  return serial_number.getHours();\n};\n\nexports.INTERVAL = function (second) {\n  if (typeof second !== 'number' && typeof second !== 'string') {\n    return error.value;\n  } else {\n    second = parseInt(second, 10);\n  }\n\n  var year  = Math.floor(second/946080000);\n  second    = second%946080000;\n  var month = Math.floor(second/2592000);\n  second    = second%2592000;\n  var day   = Math.floor(second/86400);\n  second    = second%86400;\n\n  var hour  = Math.floor(second/3600);\n  second    = second%3600;\n  var min   = Math.floor(second/60);\n  second    = second%60;\n  var sec   = second;\n\n  year  = (year  > 0) ? year  + 'Y' : '';\n  month = (month > 0) ? month + 'M' : '';\n  day   = (day   > 0) ? day   + 'D' : '';\n  hour  = (hour  > 0) ? hour  + 'H' : '';\n  min   = (min   > 0) ? min   + 'M' : '';\n  sec   = (sec   > 0) ? sec   + 'S' : '';\n\n  return 'P' + year + month + day + 'T' + hour + min + sec;\n};\n\nexports.ISOWEEKNUM = function(date) {\n  date = utils.parseDate(date);\n\n  if (date instanceof Error) {\n    return date;\n  }\n\n  date.setHours(0, 0, 0);\n  date.setDate(date.getDate() + 4 - (date.getDay() || 7));\n  var yearStart = new Date(date.getFullYear(), 0, 1);\n\n  return Math.ceil((((date - yearStart) / 86400000) + 1) / 7);\n};\n\nexports.MINUTE = function(serial_number) {\n  serial_number = utils.parseDate(serial_number);\n\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n\n  return serial_number.getMinutes();\n};\n\nexports.MONTH = function(serial_number) {\n  serial_number = utils.parseDate(serial_number);\n\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n\n  return serial_number.getMonth() + 1;\n};\n\nexports.NETWORKDAYS = function(start_date, end_date, holidays) {\n  return this.NETWORKDAYS.INTL(start_date, end_date, 1, holidays);\n};\n\nexports.NETWORKDAYS.INTL = function(start_date, end_date, weekend, holidays) {\n  start_date = utils.parseDate(start_date);\n\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  end_date = utils.parseDate(end_date);\n\n  if (end_date instanceof Error) {\n    return end_date;\n  }\n  if (weekend === undefined) {\n    weekend = WEEKEND_TYPES[1];\n  } else {\n    weekend = WEEKEND_TYPES[weekend];\n  }\n  if (!(weekend instanceof Array)) {\n    return error.value;\n  }\n  if (holidays === undefined) {\n    holidays = [];\n  } else if (!(holidays instanceof Array)) {\n    holidays = [holidays];\n  }\n\n  for (var i = 0; i < holidays.length; i++) {\n    var h = utils.parseDate(holidays[i]);\n    if (h instanceof Error) {\n      return h;\n    }\n    holidays[i] = h;\n  }\n  var days = (end_date - start_date) / (1000 * 60 * 60 * 24) + 1;\n  var total = days;\n  var day = start_date;\n  for (i = 0; i < days; i++) {\n    var d = (new Date().getTimezoneOffset() > 0) ? day.getUTCDay() : day.getDay();\n    var dec = false;\n    if (d === weekend[0] || d === weekend[1]) {\n      dec = true;\n    }\n    for (var j = 0; j < holidays.length; j++) {\n      var holiday = holidays[j];\n      if (holiday.getDate() === day.getDate() &&\n        holiday.getMonth() === day.getMonth() &&\n        holiday.getFullYear() === day.getFullYear()) {\n        dec = true;\n        break;\n      }\n    }\n    if (dec) {\n      total--;\n    }\n    day.setDate(day.getDate() + 1);\n  }\n\n  return total;\n};\n\nexports.NOW = function() {\n  return new Date();\n};\n\nexports.SECOND = function(serial_number) {\n  serial_number = utils.parseDate(serial_number);\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n\n  return serial_number.getSeconds();\n};\n\nexports.TIME = function(hour, minute, second) {\n  hour = utils.parseNumber(hour);\n  minute = utils.parseNumber(minute);\n  second = utils.parseNumber(second);\n  if (utils.anyIsError(hour, minute, second)) {\n    return error.value;\n  }\n  if (hour < 0 || minute < 0 || second < 0) {\n    return error.num;\n  }\n\n  return (3600 * hour + 60 * minute + second) / 86400;\n};\n\nexports.TIMEVALUE = function(time_text) {\n  time_text = utils.parseDate(time_text);\n\n  if (time_text instanceof Error) {\n    return time_text;\n  }\n\n  return (3600 * time_text.getHours() + 60 * time_text.getMinutes() + time_text.getSeconds()) / 86400;\n};\n\nexports.TODAY = function() {\n  return new Date();\n};\n\nexports.WEEKDAY = function(serial_number, return_type) {\n  serial_number = utils.parseDate(serial_number);\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n  if (return_type === undefined) {\n    return_type = 1;\n  }\n  var day = serial_number.getDay();\n\n  return WEEK_TYPES[return_type][day];\n};\n\nexports.WEEKNUM = function(serial_number, return_type) {\n  serial_number = utils.parseDate(serial_number);\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n  if (return_type === undefined) {\n    return_type = 1;\n  }\n  if (return_type === 21) {\n    return this.ISOWEEKNUM(serial_number);\n  }\n  var week_start = WEEK_STARTS[return_type];\n  var jan = new Date(serial_number.getFullYear(), 0, 1);\n  var inc = jan.getDay() < week_start ? 1 : 0;\n  jan -= Math.abs(jan.getDay() - week_start) * 24 * 60 * 60 * 1000;\n\n  return Math.floor(((serial_number - jan) / (1000 * 60 * 60 * 24)) / 7 + 1) + inc;\n};\n\nexports.WORKDAY = function(start_date, days, holidays) {\n  return this.WORKDAY.INTL(start_date, days, 1, holidays);\n};\n\nexports.WORKDAY.INTL = function(start_date, days, weekend, holidays) {\n  start_date = utils.parseDate(start_date);\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  days = utils.parseNumber(days);\n  if (days instanceof Error) {\n    return days;\n  }\n  if (days < 0) {\n    return error.num;\n  }\n  if (weekend === undefined) {\n    weekend = WEEKEND_TYPES[1];\n  } else {\n    weekend = WEEKEND_TYPES[weekend];\n  }\n  if (!(weekend instanceof Array)) {\n    return error.value;\n  }\n  if (holidays === undefined) {\n    holidays = [];\n  } else if (!(holidays instanceof Array)) {\n    holidays = [holidays];\n  }\n  for (var i = 0; i < holidays.length; i++) {\n    var h = utils.parseDate(holidays[i]);\n    if (h instanceof Error) {\n      return h;\n    }\n    holidays[i] = h;\n  }\n  var d = 0;\n  while (d < days) {\n    start_date.setDate(start_date.getDate() + 1);\n    var day = start_date.getDay();\n    if (day === weekend[0] || day === weekend[1]) {\n      continue;\n    }\n    for (var j = 0; j < holidays.length; j++) {\n      var holiday = holidays[j];\n      if (holiday.getDate() === start_date.getDate() &&\n        holiday.getMonth() === start_date.getMonth() &&\n        holiday.getFullYear() === start_date.getFullYear()) {\n        d--;\n        break;\n      }\n    }\n    d++;\n  }\n\n  return start_date;\n};\n\nexports.YEAR = function(serial_number) {\n  serial_number = utils.parseDate(serial_number);\n\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n\n  return serial_number.getFullYear();\n};\n\nfunction isLeapYear(year) {\n  return new Date(year, 1, 29).getMonth() === 1;\n}\n\n// TODO : Use DAYS ?\nfunction daysBetween(start_date, end_date) {\n  return Math.ceil((end_date - start_date) / 1000 / 60 / 60 / 24);\n}\n\nexports.YEARFRAC = function(start_date, end_date, basis) {\n  start_date = utils.parseDate(start_date);\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  end_date = utils.parseDate(end_date);\n  if (end_date instanceof Error) {\n    return end_date;\n  }\n\n  basis = basis || 0;\n  var sd = start_date.getDate();\n  var sm = start_date.getMonth() + 1;\n  var sy = start_date.getFullYear();\n  var ed = end_date.getDate();\n  var em = end_date.getMonth() + 1;\n  var ey = end_date.getFullYear();\n\n  switch (basis) {\n    case 0:\n      // US (NASD) 30/360\n      if (sd === 31 && ed === 31) {\n        sd = 30;\n        ed = 30;\n      } else if (sd === 31) {\n        sd = 30;\n      } else if (sd === 30 && ed === 31) {\n        ed = 30;\n      }\n      return ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;\n    case 1:\n      // Actual/actual\n      var feb29Between = function(date1, date2) {\n        var year1 = date1.getFullYear();\n        var mar1year1 = new Date(year1, 2, 1);\n        if (isLeapYear(year1) && date1 < mar1year1 && date2 >= mar1year1) {\n          return true;\n        }\n        var year2 = date2.getFullYear();\n        var mar1year2 = new Date(year2, 2, 1);\n        return (isLeapYear(year2) && date2 >= mar1year2 && date1 < mar1year2);\n      };\n      var ylength = 365;\n      if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {\n        if ((sy === ey && isLeapYear(sy)) ||\n          feb29Between(start_date, end_date) ||\n          (em === 1 && ed === 29)) {\n          ylength = 366;\n        }\n        return daysBetween(start_date, end_date) / ylength;\n      }\n      var years = (ey - sy) + 1;\n      var days = (new Date(ey + 1, 0, 1) - new Date(sy, 0, 1)) / 1000 / 60 / 60 / 24;\n      var average = days / years;\n      return daysBetween(start_date, end_date) / average;\n    case 2:\n      // Actual/360\n      return daysBetween(start_date, end_date) / 360;\n    case 3:\n      // Actual/365\n      return daysBetween(start_date, end_date) / 365;\n    case 4:\n      // European 30/360\n      return ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;\n  }\n};\n\nfunction serial(date) {\n  var addOn = (date > -2203891200000) ? 2 : 1;\n\n  return Math.ceil((date - d1900) / 86400000) + addOn;\n}\n","(function (window, factory) {\n    if (typeof exports === 'object') {\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else {\n        window.jStat = factory();\n    }\n})(this, function () {\nvar jStat = (function(Math, undefined) {\n\n// For quick reference.\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\nvar toString = Object.prototype.toString;\n\n// Calculate correction for IEEE error\n// TODO: This calculation can be improved.\nfunction calcRdx(n, m) {\n  var val = n > m ? n : m;\n  return Math.pow(10,\n                  17 - ~~(Math.log(((val > 0) ? val : -val)) * Math.LOG10E));\n}\n\n\nvar isArray = Array.isArray || function isArray(arg) {\n  return toString.call(arg) === '[object Array]';\n};\n\n\nfunction isFunction(arg) {\n  return toString.call(arg) === '[object Function]';\n}\n\n\nfunction isNumber(arg) {\n  return typeof arg === 'number' && arg === arg;\n}\n\n\n// Converts the jStat matrix to vector.\nfunction toVector(arr) {\n  return concat.apply([], arr);\n}\n\n\n// The one and only jStat constructor.\nfunction jStat() {\n  return new jStat._init(arguments);\n}\n\n\n// TODO: Remove after all references in src files have been removed.\njStat.fn = jStat.prototype;\n\n\n// By separating the initializer from the constructor it's easier to handle\n// always returning a new instance whether \"new\" was used or not.\njStat._init = function _init(args) {\n  var i;\n\n  // If first argument is an array, must be vector or matrix.\n  if (isArray(args[0])) {\n    // Check if matrix.\n    if (isArray(args[0][0])) {\n      // See if a mapping function was also passed.\n      if (isFunction(args[1]))\n        args[0] = jStat.map(args[0], args[1]);\n      // Iterate over each is faster than this.push.apply(this, args[0].\n      for (var i = 0; i < args[0].length; i++)\n        this[i] = args[0][i];\n      this.length = args[0].length;\n\n    // Otherwise must be a vector.\n    } else {\n      this[0] = isFunction(args[1]) ? jStat.map(args[0], args[1]) : args[0];\n      this.length = 1;\n    }\n\n  // If first argument is number, assume creation of sequence.\n  } else if (isNumber(args[0])) {\n    this[0] = jStat.seq.apply(null, args);\n    this.length = 1;\n\n  // Handle case when jStat object is passed to jStat.\n  } else if (args[0] instanceof jStat) {\n    // Duplicate the object and pass it back.\n    return jStat(args[0].toArray());\n\n  // Unexpected argument value, return empty jStat object.\n  // TODO: This is strange behavior. Shouldn't this throw or some such to let\n  // the user know they had bad arguments?\n  } else {\n    this[0] = [];\n    this.length = 1;\n  }\n\n  return this;\n};\njStat._init.prototype = jStat.prototype;\njStat._init.constructor = jStat;\n\n\n// Utility functions.\n// TODO: for internal use only?\njStat.utils = {\n  calcRdx: calcRdx,\n  isArray: isArray,\n  isFunction: isFunction,\n  isNumber: isNumber,\n  toVector: toVector\n};\n\n\n// Easily extend the jStat object.\n// TODO: is this seriously necessary?\njStat.extend = function extend(obj) {\n  var i, j;\n\n  if (arguments.length === 1) {\n    for (j in obj)\n      jStat[j] = obj[j];\n    return this;\n  }\n\n  for (var i = 1; i < arguments.length; i++) {\n    for (j in arguments[i])\n      obj[j] = arguments[i][j];\n  }\n\n  return obj;\n};\n\n\n// Returns the number of rows in the matrix.\njStat.rows = function rows(arr) {\n  return arr.length || 1;\n};\n\n\n// Returns the number of columns in the matrix.\njStat.cols = function cols(arr) {\n  return arr[0].length || 1;\n};\n\n\n// Returns the dimensions of the object { rows: i, cols: j }\njStat.dimensions = function dimensions(arr) {\n  return {\n    rows: jStat.rows(arr),\n    cols: jStat.cols(arr)\n  };\n};\n\n\n// Returns a specified row as a vector or return a sub matrix by pick some rows\njStat.row = function row(arr, index) {\n  if (isArray(index)) {\n    return index.map(function(i) {\n      return jStat.row(arr, i);\n    })\n  }\n  return arr[index];\n};\n\n\n// return row as array\n// rowa([[1,2],[3,4]],0) -> [1,2]\njStat.rowa = function rowa(arr, i) {\n  return jStat.row(arr, i);\n};\n\n\n// Returns the specified column as a vector or return a sub matrix by pick some\n// columns\njStat.col = function col(arr, index) {\n  if (isArray(index)) {\n    var submat = jStat.arange(arr.length).map(function(i) {\n      return new Array(index.length);\n    });\n    index.forEach(function(ind, i){\n      jStat.arange(arr.length).forEach(function(j) {\n        submat[j][i] = arr[j][ind];\n      });\n    });\n    return submat;\n  }\n  var column = new Array(arr.length);\n  for (var i = 0; i < arr.length; i++)\n    column[i] = [arr[i][index]];\n  return column;\n};\n\n\n// return column as array\n// cola([[1,2],[3,4]],0) -> [1,3]\njStat.cola = function cola(arr, i) {\n  return jStat.col(arr, i).map(function(a){ return a[0] });\n};\n\n\n// Returns the diagonal of the matrix\njStat.diag = function diag(arr) {\n  var nrow = jStat.rows(arr);\n  var res = new Array(nrow);\n  for (var row = 0; row < nrow; row++)\n    res[row] = [arr[row][row]];\n  return res;\n};\n\n\n// Returns the anti-diagonal of the matrix\njStat.antidiag = function antidiag(arr) {\n  var nrow = jStat.rows(arr) - 1;\n  var res = new Array(nrow);\n  for (var i = 0; nrow >= 0; nrow--, i++)\n    res[i] = [arr[i][nrow]];\n  return res;\n};\n\n// Transpose a matrix or array.\njStat.transpose = function transpose(arr) {\n  var obj = [];\n  var objArr, rows, cols, j, i;\n\n  // Make sure arr is in matrix format.\n  if (!isArray(arr[0]))\n    arr = [arr];\n\n  rows = arr.length;\n  cols = arr[0].length;\n\n  for (var i = 0; i < cols; i++) {\n    objArr = new Array(rows);\n    for (j = 0; j < rows; j++)\n      objArr[j] = arr[j][i];\n    obj.push(objArr);\n  }\n\n  // If obj is vector, return only single array.\n  return obj.length === 1 ? obj[0] : obj;\n};\n\n\n// Map a function to an array or array of arrays.\n// \"toAlter\" is an internal variable.\njStat.map = function map(arr, func, toAlter) {\n  var row, nrow, ncol, res, col;\n\n  if (!isArray(arr[0]))\n    arr = [arr];\n\n  nrow = arr.length;\n  ncol = arr[0].length;\n  res = toAlter ? arr : new Array(nrow);\n\n  for (row = 0; row < nrow; row++) {\n    // if the row doesn't exist, create it\n    if (!res[row])\n      res[row] = new Array(ncol);\n    for (col = 0; col < ncol; col++)\n      res[row][col] = func(arr[row][col], row, col);\n  }\n\n  return res.length === 1 ? res[0] : res;\n};\n\n\n// Cumulatively combine the elements of an array or array of arrays using a function.\njStat.cumreduce = function cumreduce(arr, func, toAlter) {\n  var row, nrow, ncol, res, col;\n\n  if (!isArray(arr[0]))\n    arr = [arr];\n\n  nrow = arr.length;\n  ncol = arr[0].length;\n  res = toAlter ? arr : new Array(nrow);\n\n  for (row = 0; row < nrow; row++) {\n    // if the row doesn't exist, create it\n    if (!res[row])\n      res[row] = new Array(ncol);\n    if (ncol > 0)\n      res[row][0] = arr[row][0];\n    for (col = 1; col < ncol; col++)\n      res[row][col] = func(res[row][col-1], arr[row][col]);\n  }\n  return res.length === 1 ? res[0] : res;\n};\n\n\n// Destructively alter an array.\njStat.alter = function alter(arr, func) {\n  return jStat.map(arr, func, true);\n};\n\n\n// Generate a rows x cols matrix according to the supplied function.\njStat.create = function  create(rows, cols, func) {\n  var res = new Array(rows);\n  var i, j;\n\n  if (isFunction(cols)) {\n    func = cols;\n    cols = rows;\n  }\n\n  for (var i = 0; i < rows; i++) {\n    res[i] = new Array(cols);\n    for (j = 0; j < cols; j++)\n      res[i][j] = func(i, j);\n  }\n\n  return res;\n};\n\n\nfunction retZero() { return 0; }\n\n\n// Generate a rows x cols matrix of zeros.\njStat.zeros = function zeros(rows, cols) {\n  if (!isNumber(cols))\n    cols = rows;\n  return jStat.create(rows, cols, retZero);\n};\n\n\nfunction retOne() { return 1; }\n\n\n// Generate a rows x cols matrix of ones.\njStat.ones = function ones(rows, cols) {\n  if (!isNumber(cols))\n    cols = rows;\n  return jStat.create(rows, cols, retOne);\n};\n\n\n// Generate a rows x cols matrix of uniformly random numbers.\njStat.rand = function rand(rows, cols) {\n  if (!isNumber(cols))\n    cols = rows;\n  return jStat.create(rows, cols, Math.random);\n};\n\n\nfunction retIdent(i, j) { return i === j ? 1 : 0; }\n\n\n// Generate an identity matrix of size row x cols.\njStat.identity = function identity(rows, cols) {\n  if (!isNumber(cols))\n    cols = rows;\n  return jStat.create(rows, cols, retIdent);\n};\n\n\n// Tests whether a matrix is symmetric\njStat.symmetric = function symmetric(arr) {\n  var issymmetric = true;\n  var size = arr.length;\n  var row, col;\n\n  if (arr.length !== arr[0].length)\n    return false;\n\n  for (row = 0; row < size; row++) {\n    for (col = 0; col < size; col++)\n      if (arr[col][row] !== arr[row][col])\n        return false;\n  }\n\n  return true;\n};\n\n\n// Set all values to zero.\njStat.clear = function clear(arr) {\n  return jStat.alter(arr, retZero);\n};\n\n\n// Generate sequence.\njStat.seq = function seq(min, max, length, func) {\n  if (!isFunction(func))\n    func = false;\n\n  var arr = [];\n  var hival = calcRdx(min, max);\n  var step = (max * hival - min * hival) / ((length - 1) * hival);\n  var current = min;\n  var cnt;\n\n  // Current is assigned using a technique to compensate for IEEE error.\n  // TODO: Needs better implementation.\n  for (cnt = 0;\n       current <= max && cnt < length;\n       cnt++, current = (min * hival + step * hival * cnt) / hival) {\n    arr.push((func ? func(current, cnt) : current));\n  }\n\n  return arr;\n};\n\n\n// arange(5) -> [0,1,2,3,4]\n// arange(1,5) -> [1,2,3,4]\n// arange(5,1,-1) -> [5,4,3,2]\njStat.arange = function arange(start, end, step) {\n  var rl = [];\n  step = step || 1;\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  }\n  if (start === end || step === 0) {\n    return [];\n  }\n  if (start < end && step < 0) {\n    return [];\n  }\n  if (start > end && step > 0) {\n    return [];\n  }\n  if (step > 0) {\n    for (i = start; i < end; i += step) {\n      rl.push(i);\n    }\n  } else {\n    for (i = start; i > end; i += step) {\n      rl.push(i);\n    }\n  }\n  return rl;\n};\n\n\n// A=[[1,2,3],[4,5,6],[7,8,9]]\n// slice(A,{row:{end:2},col:{start:1}}) -> [[2,3],[5,6]]\n// slice(A,1,{start:1}) -> [5,6]\n// as numpy code A[:2,1:]\njStat.slice = (function(){\n  function _slice(list, start, end, step) {\n    // note it's not equal to range.map mode it's a bug\n    var i;\n    var rl = [];\n    var length = list.length;\n    if (start === undefined && end === undefined && step === undefined) {\n      return jStat.copy(list);\n    }\n\n    start = start || 0;\n    end = end || list.length;\n    start = start >= 0 ? start : length + start;\n    end = end >= 0 ? end : length + end;\n    step = step || 1;\n    if (start === end || step === 0) {\n      return [];\n    }\n    if (start < end && step < 0) {\n      return [];\n    }\n    if (start > end && step > 0) {\n      return [];\n    }\n    if (step > 0) {\n      for (i = start; i < end; i += step) {\n        rl.push(list[i]);\n      }\n    } else {\n      for (i = start; i > end;i += step) {\n        rl.push(list[i]);\n      }\n    }\n    return rl;\n  }\n\n  function slice(list, rcSlice) {\n    rcSlice = rcSlice || {};\n    if (isNumber(rcSlice.row)) {\n      if (isNumber(rcSlice.col))\n        return list[rcSlice.row][rcSlice.col];\n      var row = jStat.rowa(list, rcSlice.row);\n      var colSlice = rcSlice.col || {};\n      return _slice(row, colSlice.start, colSlice.end, colSlice.step);\n    }\n\n    if (isNumber(rcSlice.col)) {\n      var col = jStat.cola(list, rcSlice.col);\n      var rowSlice = rcSlice.row || {};\n      return _slice(col, rowSlice.start, rowSlice.end, rowSlice.step);\n    }\n\n    var rowSlice = rcSlice.row || {};\n    var colSlice = rcSlice.col || {};\n    var rows = _slice(list, rowSlice.start, rowSlice.end, rowSlice.step);\n    return rows.map(function(row) {\n      return _slice(row, colSlice.start, colSlice.end, colSlice.step);\n    });\n  }\n\n  return slice;\n}());\n\n\n// A=[[1,2,3],[4,5,6],[7,8,9]]\n// sliceAssign(A,{row:{start:1},col:{start:1}},[[0,0],[0,0]])\n// A=[[1,2,3],[4,0,0],[7,0,0]]\njStat.sliceAssign = function sliceAssign(A, rcSlice, B) {\n  if (isNumber(rcSlice.row)) {\n    if (isNumber(rcSlice.col))\n      return A[rcSlice.row][rcSlice.col] = B;\n    rcSlice.col = rcSlice.col || {};\n    rcSlice.col.start = rcSlice.col.start || 0;\n    rcSlice.col.end = rcSlice.col.end || A[0].length;\n    rcSlice.col.step = rcSlice.col.step || 1;\n    var nl = jStat.arange(rcSlice.col.start,\n                          Math.min(A.length, rcSlice.col.end),\n                          rcSlice.col.step);\n    var m = rcSlice.row;\n    nl.forEach(function(n, i) {\n      A[m][n] = B[i];\n    });\n    return A;\n  }\n\n  if (isNumber(rcSlice.col)) {\n    rcSlice.row = rcSlice.row || {};\n    rcSlice.row.start = rcSlice.row.start || 0;\n    rcSlice.row.end = rcSlice.row.end || A.length;\n    rcSlice.row.step = rcSlice.row.step || 1;\n    var ml = jStat.arange(rcSlice.row.start,\n                          Math.min(A[0].length, rcSlice.row.end),\n                          rcSlice.row.step);\n    var n = rcSlice.col;\n    ml.forEach(function(m, j) {\n      A[m][n] = B[j];\n    });\n    return A;\n  }\n\n  if (B[0].length === undefined) {\n    B = [B];\n  }\n  rcSlice.row.start = rcSlice.row.start || 0;\n  rcSlice.row.end = rcSlice.row.end || A.length;\n  rcSlice.row.step = rcSlice.row.step || 1;\n  rcSlice.col.start = rcSlice.col.start || 0;\n  rcSlice.col.end = rcSlice.col.end || A[0].length;\n  rcSlice.col.step = rcSlice.col.step || 1;\n  var ml = jStat.arange(rcSlice.row.start,\n                        Math.min(A.length, rcSlice.row.end),\n                        rcSlice.row.step);\n  var nl = jStat.arange(rcSlice.col.start,\n                        Math.min(A[0].length, rcSlice.col.end),\n                        rcSlice.col.step);\n  ml.forEach(function(m, i) {\n    nl.forEach(function(n, j) {\n      A[m][n] = B[i][j];\n    });\n  });\n  return A;\n};\n\n\n// [1,2,3] ->\n// [[1,0,0],[0,2,0],[0,0,3]]\njStat.diagonal = function diagonal(diagArray) {\n  var mat = jStat.zeros(diagArray.length, diagArray.length);\n  diagArray.forEach(function(t, i) {\n    mat[i][i] = t;\n  });\n  return mat;\n};\n\n\n// return copy of A\njStat.copy = function copy(A) {\n  return A.map(function(row) {\n    if (isNumber(row))\n      return row;\n    return row.map(function(t) {\n      return t;\n    });\n  });\n};\n\n\n// TODO: Go over this entire implementation. Seems a tragic waste of resources\n// doing all this work. Instead, and while ugly, use new Function() to generate\n// a custom function for each static method.\n\n// Quick reference.\nvar jProto = jStat.prototype;\n\n// Default length.\njProto.length = 0;\n\n// For internal use only.\n// TODO: Check if they're actually used, and if they are then rename them\n// to _*\njProto.push = Array.prototype.push;\njProto.sort = Array.prototype.sort;\njProto.splice = Array.prototype.splice;\njProto.slice = Array.prototype.slice;\n\n\n// Return a clean array.\njProto.toArray = function toArray() {\n  return this.length > 1 ? slice.call(this) : slice.call(this)[0];\n};\n\n\n// Map a function to a matrix or vector.\njProto.map = function map(func, toAlter) {\n  return jStat(jStat.map(this, func, toAlter));\n};\n\n\n// Cumulatively combine the elements of a matrix or vector using a function.\njProto.cumreduce = function cumreduce(func, toAlter) {\n  return jStat(jStat.cumreduce(this, func, toAlter));\n};\n\n\n// Destructively alter an array.\njProto.alter = function alter(func) {\n  jStat.alter(this, func);\n  return this;\n};\n\n\n// Extend prototype with methods that have no argument.\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jProto[passfunc] = function(func) {\n      var self = this,\n      results;\n      // Check for callback.\n      if (func) {\n        setTimeout(function() {\n          func.call(self, jProto[passfunc].call(self));\n        });\n        return this;\n      }\n      results = jStat[passfunc](this);\n      return isArray(results) ? jStat(results) : results;\n    };\n  })(funcs[i]);\n})('transpose clear symmetric rows cols dimensions diag antidiag'.split(' '));\n\n\n// Extend prototype with methods that have one argument.\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jProto[passfunc] = function(index, func) {\n      var self = this;\n      // check for callback\n      if (func) {\n        setTimeout(function() {\n          func.call(self, jProto[passfunc].call(self, index));\n        });\n        return this;\n      }\n      return jStat(jStat[passfunc](this, index));\n    };\n  })(funcs[i]);\n})('row col'.split(' '));\n\n\n// Extend prototype with simple shortcut methods.\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jProto[passfunc] = new Function(\n        'return jStat(jStat.' + passfunc + '.apply(null, arguments));');\n  })(funcs[i]);\n})('create zeros ones rand identity'.split(' '));\n\n\n// Exposing jStat.\nreturn jStat;\n\n}(Math));\n(function(jStat, Math) {\n\nvar isFunction = jStat.utils.isFunction;\n\n// Ascending functions for sort\nfunction ascNum(a, b) { return a - b; }\n\nfunction clip(arg, min, max) {\n  return Math.max(min, Math.min(arg, max));\n}\n\n\n// sum of an array\njStat.sum = function sum(arr) {\n  var sum = 0;\n  var i = arr.length;\n  while (--i >= 0)\n    sum += arr[i];\n  return sum;\n};\n\n\n// sum squared\njStat.sumsqrd = function sumsqrd(arr) {\n  var sum = 0;\n  var i = arr.length;\n  while (--i >= 0)\n    sum += arr[i] * arr[i];\n  return sum;\n};\n\n\n// sum of squared errors of prediction (SSE)\njStat.sumsqerr = function sumsqerr(arr) {\n  var mean = jStat.mean(arr);\n  var sum = 0;\n  var i = arr.length;\n  var tmp;\n  while (--i >= 0) {\n    tmp = arr[i] - mean;\n    sum += tmp * tmp;\n  }\n  return sum;\n};\n\n// sum of an array in each row\njStat.sumrow = function sumrow(arr) {\n  var sum = 0;\n  var i = arr.length;\n  while (--i >= 0)\n    sum += arr[i];\n  return sum;\n};\n\n// product of an array\njStat.product = function product(arr) {\n  var prod = 1;\n  var i = arr.length;\n  while (--i >= 0)\n    prod *= arr[i];\n  return prod;\n};\n\n\n// minimum value of an array\njStat.min = function min(arr) {\n  var low = arr[0];\n  var i = 0;\n  while (++i < arr.length)\n    if (arr[i] < low)\n      low = arr[i];\n  return low;\n};\n\n\n// maximum value of an array\njStat.max = function max(arr) {\n  var high = arr[0];\n  var i = 0;\n  while (++i < arr.length)\n    if (arr[i] > high)\n      high = arr[i];\n  return high;\n};\n\n\n// unique values of an array\njStat.unique = function unique(arr) {\n  var hash = {}, _arr = [];\n  for(var i = 0; i < arr.length; i++) {\n    if (!hash[arr[i]]) {\n      hash[arr[i]] = true;\n      _arr.push(arr[i]);\n    }\n  }\n  return _arr;\n};\n\n\n// mean value of an array\njStat.mean = function mean(arr) {\n  return jStat.sum(arr) / arr.length;\n};\n\n\n// mean squared error (MSE)\njStat.meansqerr = function meansqerr(arr) {\n  return jStat.sumsqerr(arr) / arr.length;\n};\n\n\n// geometric mean of an array\njStat.geomean = function geomean(arr) {\n  return Math.pow(jStat.product(arr), 1 / arr.length);\n};\n\n\n// median of an array\njStat.median = function median(arr) {\n  var arrlen = arr.length;\n  var _arr = arr.slice().sort(ascNum);\n  // check if array is even or odd, then return the appropriate\n  return !(arrlen & 1)\n    ? (_arr[(arrlen / 2) - 1 ] + _arr[(arrlen / 2)]) / 2\n    : _arr[(arrlen / 2) | 0 ];\n};\n\n\n// cumulative sum of an array\njStat.cumsum = function cumsum(arr) {\n  return jStat.cumreduce(arr, function (a, b) { return a + b; });\n};\n\n\n// cumulative product of an array\njStat.cumprod = function cumprod(arr) {\n  return jStat.cumreduce(arr, function (a, b) { return a * b; });\n};\n\n\n// successive differences of a sequence\njStat.diff = function diff(arr) {\n  var diffs = [];\n  var arrLen = arr.length;\n  var i;\n  for (var i = 1; i < arrLen; i++)\n    diffs.push(arr[i] - arr[i - 1]);\n  return diffs;\n};\n\n\n// ranks of an array\njStat.rank = function (arr) {\n  var arrlen = arr.length;\n  var sorted = arr.slice().sort(ascNum);\n  var ranks = new Array(arrlen);\n  for (var i = 0; i < arrlen; i++) {\n    var first = sorted.indexOf(arr[i]);\n    var last = sorted.lastIndexOf(arr[i]);\n    if (first === last) {\n      var val = first;\n    } else {\n      var val = (first + last) / 2;\n    }\n    ranks[i] = val + 1;\n  }\n  return ranks;\n};\n\n\n// mode of an array\n// if there are multiple modes of an array, return all of them\n// is this the appropriate way of handling it?\njStat.mode = function mode(arr) {\n  var arrLen = arr.length;\n  var _arr = arr.slice().sort(ascNum);\n  var count = 1;\n  var maxCount = 0;\n  var numMaxCount = 0;\n  var mode_arr = [];\n  var i;\n\n  for (var i = 0; i < arrLen; i++) {\n    if (_arr[i] === _arr[i + 1]) {\n      count++;\n    } else {\n      if (count > maxCount) {\n        mode_arr = [_arr[i]];\n        maxCount = count;\n        numMaxCount = 0;\n      }\n      // are there multiple max counts\n      else if (count === maxCount) {\n        mode_arr.push(_arr[i]);\n        numMaxCount++;\n      }\n      // resetting count for new value in array\n      count = 1;\n    }\n  }\n\n  return numMaxCount === 0 ? mode_arr[0] : mode_arr;\n};\n\n\n// range of an array\njStat.range = function range(arr) {\n  return jStat.max(arr) - jStat.min(arr);\n};\n\n// variance of an array\n// flag = true indicates sample instead of population\njStat.variance = function variance(arr, flag) {\n  return jStat.sumsqerr(arr) / (arr.length - (flag ? 1 : 0));\n};\n\n// pooled variance of an array of arrays\njStat.pooledvariance = function pooledvariance(arr) {\n  var sumsqerr = arr.reduce(function (a, samples) {return a + jStat.sumsqerr(samples);}, 0);\n  var count = arr.reduce(function (a, samples) {return a + samples.length;}, 0);\n  return sumsqerr / (count - arr.length);\n};\n\n// deviation of an array\njStat.deviation = function (arr) {\n  var mean = jStat.mean(arr);\n  var arrlen = arr.length;\n  var dev = new Array(arrlen);\n  for (var i = 0; i < arrlen; i++) {\n    dev[i] = arr[i] - mean;\n  }\n  return dev;\n};\n\n// standard deviation of an array\n// flag = true indicates sample instead of population\njStat.stdev = function stdev(arr, flag) {\n  return Math.sqrt(jStat.variance(arr, flag));\n};\n\n// pooled standard deviation of an array of arrays\njStat.pooledstdev = function pooledstdev(arr) {\n  return Math.sqrt(jStat.pooledvariance(arr));\n};\n\n// mean deviation (mean absolute deviation) of an array\njStat.meandev = function meandev(arr) {\n  var mean = jStat.mean(arr);\n  var a = [];\n  for (var i = arr.length - 1; i >= 0; i--) {\n    a.push(Math.abs(arr[i] - mean));\n  }\n  return jStat.mean(a);\n};\n\n\n// median deviation (median absolute deviation) of an array\njStat.meddev = function meddev(arr) {\n  var median = jStat.median(arr);\n  var a = [];\n  for (var i = arr.length - 1; i >= 0; i--) {\n    a.push(Math.abs(arr[i] - median));\n  }\n  return jStat.median(a);\n};\n\n\n// coefficient of variation\njStat.coeffvar = function coeffvar(arr) {\n  return jStat.stdev(arr) / jStat.mean(arr);\n};\n\n\n// quartiles of an array\njStat.quartiles = function quartiles(arr) {\n  var arrlen = arr.length;\n  var _arr = arr.slice().sort(ascNum);\n  return [\n    _arr[ Math.round((arrlen) / 4) - 1 ],\n    _arr[ Math.round((arrlen) / 2) - 1 ],\n    _arr[ Math.round((arrlen) * 3 / 4) - 1 ]\n  ];\n};\n\n\n// Arbitary quantiles of an array. Direct port of the scipy.stats\n// implementation by Pierre GF Gerard-Marchant.\njStat.quantiles = function quantiles(arr, quantilesArray, alphap, betap) {\n  var sortedArray = arr.slice().sort(ascNum);\n  var quantileVals = [quantilesArray.length];\n  var n = arr.length;\n  var i, p, m, aleph, k, gamma;\n\n  if (typeof alphap === 'undefined')\n    alphap = 3 / 8;\n  if (typeof betap === 'undefined')\n    betap = 3 / 8;\n\n  for (var i = 0; i < quantilesArray.length; i++) {\n    p = quantilesArray[i];\n    m = alphap + p * (1 - alphap - betap);\n    aleph = n * p + m;\n    k = Math.floor(clip(aleph, 1, n - 1));\n    gamma = clip(aleph - k, 0, 1);\n    quantileVals[i] = (1 - gamma) * sortedArray[k - 1] + gamma * sortedArray[k];\n  }\n\n  return quantileVals;\n};\n\n// Returns the k-th percentile of values in a range, where k is in the\n// range 0..1, exclusive.\njStat.percentile = function percentile(arr, k) {\n  var _arr = arr.slice().sort(ascNum);\n  var realIndex = k * (_arr.length - 1);\n  var index = parseInt(realIndex);\n  var frac = realIndex - index;\n\n  if (index + 1 < _arr.length) {\n    return _arr[index] * (1 - frac) + _arr[index + 1] * frac;\n  } else {\n    return _arr[index];\n  }\n}\n\n\n// The percentile rank of score in a given array. Returns the percentage\n// of all values in the input array that are less than (kind='strict') or\n// less or equal than (kind='weak') score. Default is weak.\njStat.percentileOfScore = function percentileOfScore(arr, score, kind) {\n  var counter = 0;\n  var len = arr.length;\n  var strict = false;\n  var value, i;\n\n  if (kind === 'strict')\n    strict = true;\n\n  for (var i = 0; i < len; i++) {\n    value = arr[i];\n    if ((strict && value < score) ||\n        (!strict && value <= score)) {\n      counter++;\n    }\n  }\n\n  return counter / len;\n};\n\n\n// Histogram (bin count) data\njStat.histogram = function histogram(arr, bins) {\n  var first = jStat.min(arr);\n  var binCnt = bins || 4;\n  var binWidth = (jStat.max(arr) - first) / binCnt;\n  var len = arr.length;\n  var bins = [];\n  var i;\n\n  for (var i = 0; i < binCnt; i++)\n    bins[i] = 0;\n  for (var i = 0; i < len; i++)\n    bins[Math.min(Math.floor(((arr[i] - first) / binWidth)), binCnt - 1)] += 1;\n\n  return bins;\n};\n\n\n// covariance of two arrays\njStat.covariance = function covariance(arr1, arr2) {\n  var u = jStat.mean(arr1);\n  var v = jStat.mean(arr2);\n  var arr1Len = arr1.length;\n  var sq_dev = new Array(arr1Len);\n  var i;\n\n  for (var i = 0; i < arr1Len; i++)\n    sq_dev[i] = (arr1[i] - u) * (arr2[i] - v);\n\n  return jStat.sum(sq_dev) / (arr1Len - 1);\n};\n\n\n// (pearson's) population correlation coefficient, rho\njStat.corrcoeff = function corrcoeff(arr1, arr2) {\n  return jStat.covariance(arr1, arr2) /\n      jStat.stdev(arr1, 1) /\n      jStat.stdev(arr2, 1);\n};\n\n  // (spearman's) rank correlation coefficient, sp\njStat.spearmancoeff =  function (arr1, arr2) {\n  arr1 = jStat.rank(arr1);\n  arr2 = jStat.rank(arr2);\n  //return pearson's correlation of the ranks:\n  return jStat.corrcoeff(arr1, arr2);\n}\n\n\n// statistical standardized moments (general form of skew/kurt)\njStat.stanMoment = function stanMoment(arr, n) {\n  var mu = jStat.mean(arr);\n  var sigma = jStat.stdev(arr);\n  var len = arr.length;\n  var skewSum = 0;\n\n  for (var i = 0; i < len; i++)\n    skewSum += Math.pow((arr[i] - mu) / sigma, n);\n\n  return skewSum / arr.length;\n};\n\n// (pearson's) moment coefficient of skewness\njStat.skewness = function skewness(arr) {\n  return jStat.stanMoment(arr, 3);\n};\n\n// (pearson's) (excess) kurtosis\njStat.kurtosis = function kurtosis(arr) {\n  return jStat.stanMoment(arr, 4) - 3;\n};\n\n\nvar jProto = jStat.prototype;\n\n\n// Extend jProto with method for calculating cumulative sums and products.\n// This differs from the similar extension below as cumsum and cumprod should\n// not be run again in the case fullbool === true.\n// If a matrix is passed, automatically assume operation should be done on the\n// columns.\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    // If a matrix is passed, automatically assume operation should be done on\n    // the columns.\n    jProto[passfunc] = function(fullbool, func) {\n      var arr = [];\n      var i = 0;\n      var tmpthis = this;\n      // Assignment reassignation depending on how parameters were passed in.\n      if (isFunction(fullbool)) {\n        func = fullbool;\n        fullbool = false;\n      }\n      // Check if a callback was passed with the function.\n      if (func) {\n        setTimeout(function() {\n          func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));\n        });\n        return this;\n      }\n      // Check if matrix and run calculations.\n      if (this.length > 1) {\n        tmpthis = fullbool === true ? this : this.transpose();\n        for (; i < tmpthis.length; i++)\n          arr[i] = jStat[passfunc](tmpthis[i]);\n        return arr;\n      }\n      // Pass fullbool if only vector, not a matrix. for variance and stdev.\n      return jStat[passfunc](this[0], fullbool);\n    };\n  })(funcs[i]);\n})(('cumsum cumprod').split(' '));\n\n\n// Extend jProto with methods which don't require arguments and work on columns.\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    // If a matrix is passed, automatically assume operation should be done on\n    // the columns.\n    jProto[passfunc] = function(fullbool, func) {\n      var arr = [];\n      var i = 0;\n      var tmpthis = this;\n      // Assignment reassignation depending on how parameters were passed in.\n      if (isFunction(fullbool)) {\n        func = fullbool;\n        fullbool = false;\n      }\n      // Check if a callback was passed with the function.\n      if (func) {\n        setTimeout(function() {\n          func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));\n        });\n        return this;\n      }\n      // Check if matrix and run calculations.\n      if (this.length > 1) {\n        if (passfunc !== 'sumrow')\n          tmpthis = fullbool === true ? this : this.transpose();\n        for (; i < tmpthis.length; i++)\n          arr[i] = jStat[passfunc](tmpthis[i]);\n        return fullbool === true\n            ? jStat[passfunc](jStat.utils.toVector(arr))\n            : arr;\n      }\n      // Pass fullbool if only vector, not a matrix. for variance and stdev.\n      return jStat[passfunc](this[0], fullbool);\n    };\n  })(funcs[i]);\n})(('sum sumsqrd sumsqerr sumrow product min max unique mean meansqerr ' +\n    'geomean median diff rank mode range variance deviation stdev meandev ' +\n    'meddev coeffvar quartiles histogram skewness kurtosis').split(' '));\n\n\n// Extend jProto with functions that take arguments. Operations on matrices are\n// done on columns.\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jProto[passfunc] = function() {\n      var arr = [];\n      var i = 0;\n      var tmpthis = this;\n      var args = Array.prototype.slice.call(arguments);\n\n      // If the last argument is a function, we assume it's a callback; we\n      // strip the callback out and call the function again.\n      if (isFunction(args[args.length - 1])) {\n        var callbackFunction = args[args.length - 1];\n        var argsToPass = args.slice(0, args.length - 1);\n\n        setTimeout(function() {\n          callbackFunction.call(tmpthis,\n                                jProto[passfunc].apply(tmpthis, argsToPass));\n        });\n        return this;\n\n      // Otherwise we curry the function args and call normally.\n      } else {\n        var callbackFunction = undefined;\n        var curriedFunction = function curriedFunction(vector) {\n          return jStat[passfunc].apply(tmpthis, [vector].concat(args));\n        }\n      }\n\n      // If this is a matrix, run column-by-column.\n      if (this.length > 1) {\n        tmpthis = tmpthis.transpose();\n        for (; i < tmpthis.length; i++)\n          arr[i] = curriedFunction(tmpthis[i]);\n        return arr;\n      }\n\n      // Otherwise run on the vector.\n      return curriedFunction(this[0]);\n    };\n  })(funcs[i]);\n})('quantiles percentileOfScore'.split(' '));\n\n}(jStat, Math));\n// Special functions //\n(function(jStat, Math) {\n\n// Log-gamma function\njStat.gammaln = function gammaln(x) {\n  var j = 0;\n  var cof = [\n    76.18009172947146, -86.50532032941677, 24.01409824083091,\n    -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5\n  ];\n  var ser = 1.000000000190015;\n  var xx, y, tmp;\n  tmp = (y = xx = x) + 5.5;\n  tmp -= (xx + 0.5) * Math.log(tmp);\n  for (; j < 6; j++)\n    ser += cof[j] / ++y;\n  return Math.log(2.5066282746310005 * ser / xx) - tmp;\n};\n\n\n// gamma of x\njStat.gammafn = function gammafn(x) {\n  var p = [-1.716185138865495, 24.76565080557592, -379.80425647094563,\n           629.3311553128184, 866.9662027904133, -31451.272968848367,\n           -36144.413418691176, 66456.14382024054\n  ];\n  var q = [-30.8402300119739, 315.35062697960416, -1015.1563674902192,\n           -3107.771671572311, 22538.118420980151, 4755.8462775278811,\n           -134659.9598649693, -115132.2596755535];\n  var fact = false;\n  var n = 0;\n  var xden = 0;\n  var xnum = 0;\n  var y = x;\n  var i, z, yi, res, sum, ysq;\n  if (y <= 0) {\n    res = y % 1 + 3.6e-16;\n    if (res) {\n      fact = (!(y & 1) ? 1 : -1) * Math.PI / Math.sin(Math.PI * res);\n      y = 1 - y;\n    } else {\n      return Infinity;\n    }\n  }\n  yi = y;\n  if (y < 1) {\n    z = y++;\n  } else {\n    z = (y -= n = (y | 0) - 1) - 1;\n  }\n  for (var i = 0; i < 8; ++i) {\n    xnum = (xnum + p[i]) * z;\n    xden = xden * z + q[i];\n  }\n  res = xnum / xden + 1;\n  if (yi < y) {\n    res /= yi;\n  } else if (yi > y) {\n    for (var i = 0; i < n; ++i) {\n      res *= y;\n      y++;\n    }\n  }\n  if (fact) {\n    res = fact / res;\n  }\n  return res;\n};\n\n\n// lower incomplete gamma function, which is usually typeset with a\n// lower-case greek gamma as the function symbol\njStat.gammap = function gammap(a, x) {\n  return jStat.lowRegGamma(a, x) * jStat.gammafn(a);\n};\n\n\n// The lower regularized incomplete gamma function, usually written P(a,x)\njStat.lowRegGamma = function lowRegGamma(a, x) {\n  var aln = jStat.gammaln(a);\n  var ap = a;\n  var sum = 1 / a;\n  var del = sum;\n  var b = x + 1 - a;\n  var c = 1 / 1.0e-30;\n  var d = 1 / b;\n  var h = d;\n  var i = 1;\n  // calculate maximum number of itterations required for a\n  var ITMAX = -~(Math.log((a >= 1) ? a : 1 / a) * 8.5 + a * 0.4 + 17);\n  var an, endval;\n\n  if (x < 0 || a <= 0) {\n    return NaN;\n  } else if (x < a + 1) {\n    for (; i <= ITMAX; i++) {\n      sum += del *= x / ++ap;\n    }\n    return (sum * Math.exp(-x + a * Math.log(x) - (aln)));\n  }\n\n  for (; i <= ITMAX; i++) {\n    an = -i * (i - a);\n    b += 2;\n    d = an * d + b;\n    c = b + an / c;\n    d = 1 / d;\n    h *= d * c;\n  }\n\n  return (1 - h * Math.exp(-x + a * Math.log(x) - (aln)));\n};\n\n// natural log factorial of n\njStat.factorialln = function factorialln(n) {\n  return n < 0 ? NaN : jStat.gammaln(n + 1);\n};\n\n// factorial of n\njStat.factorial = function factorial(n) {\n  return n < 0 ? NaN : jStat.gammafn(n + 1);\n};\n\n// combinations of n, m\njStat.combination = function combination(n, m) {\n  // make sure n or m don't exceed the upper limit of usable values\n  return (n > 170 || m > 170)\n      ? Math.exp(jStat.combinationln(n, m))\n      : (jStat.factorial(n) / jStat.factorial(m)) / jStat.factorial(n - m);\n};\n\n\njStat.combinationln = function combinationln(n, m){\n  return jStat.factorialln(n) - jStat.factorialln(m) - jStat.factorialln(n - m);\n};\n\n\n// permutations of n, m\njStat.permutation = function permutation(n, m) {\n  return jStat.factorial(n) / jStat.factorial(n - m);\n};\n\n\n// beta function\njStat.betafn = function betafn(x, y) {\n  // ensure arguments are positive\n  if (x <= 0 || y <= 0)\n    return undefined;\n  // make sure x + y doesn't exceed the upper limit of usable values\n  return (x + y > 170)\n      ? Math.exp(jStat.betaln(x, y))\n      : jStat.gammafn(x) * jStat.gammafn(y) / jStat.gammafn(x + y);\n};\n\n\n// natural logarithm of beta function\njStat.betaln = function betaln(x, y) {\n  return jStat.gammaln(x) + jStat.gammaln(y) - jStat.gammaln(x + y);\n};\n\n\n// Evaluates the continued fraction for incomplete beta function by modified\n// Lentz's method.\njStat.betacf = function betacf(x, a, b) {\n  var fpmin = 1e-30;\n  var m = 1;\n  var qab = a + b;\n  var qap = a + 1;\n  var qam = a - 1;\n  var c = 1;\n  var d = 1 - qab * x / qap;\n  var m2, aa, del, h;\n\n  // These q's will be used in factors that occur in the coefficients\n  if (Math.abs(d) < fpmin)\n    d = fpmin;\n  d = 1 / d;\n  h = d;\n\n  for (; m <= 100; m++) {\n    m2 = 2 * m;\n    aa = m * (b - m) * x / ((qam + m2) * (a + m2));\n    // One step (the even one) of the recurrence\n    d = 1 + aa * d;\n    if (Math.abs(d) < fpmin)\n      d = fpmin;\n    c = 1 + aa / c;\n    if (Math.abs(c) < fpmin)\n      c = fpmin;\n    d = 1 / d;\n    h *= d * c;\n    aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2));\n    // Next step of the recurrence (the odd one)\n    d = 1 + aa * d;\n    if (Math.abs(d) < fpmin)\n      d = fpmin;\n    c = 1 + aa / c;\n    if (Math.abs(c) < fpmin)\n      c = fpmin;\n    d = 1 / d;\n    del = d * c;\n    h *= del;\n    if (Math.abs(del - 1.0) < 3e-7)\n      break;\n  }\n\n  return h;\n};\n\n\n// Returns the inverse of the lower regularized inomplete gamma function\njStat.gammapinv = function gammapinv(p, a) {\n  var j = 0;\n  var a1 = a - 1;\n  var EPS = 1e-8;\n  var gln = jStat.gammaln(a);\n  var x, err, t, u, pp, lna1, afac;\n\n  if (p >= 1)\n    return Math.max(100, a + 100 * Math.sqrt(a));\n  if (p <= 0)\n    return 0;\n  if (a > 1) {\n    lna1 = Math.log(a1);\n    afac = Math.exp(a1 * (lna1 - 1) - gln);\n    pp = (p < 0.5) ? p : 1 - p;\n    t = Math.sqrt(-2 * Math.log(pp));\n    x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;\n    if (p < 0.5)\n      x = -x;\n    x = Math.max(1e-3,\n                 a * Math.pow(1 - 1 / (9 * a) - x / (3 * Math.sqrt(a)), 3));\n  } else {\n    t = 1 - a * (0.253 + a * 0.12);\n    if (p < t)\n      x = Math.pow(p / t, 1 / a);\n    else\n      x = 1 - Math.log(1 - (p - t) / (1 - t));\n  }\n\n  for(; j < 12; j++) {\n    if (x <= 0)\n      return 0;\n    err = jStat.lowRegGamma(a, x) - p;\n    if (a > 1)\n      t = afac * Math.exp(-(x - a1) + a1 * (Math.log(x) - lna1));\n    else\n      t = Math.exp(-x + a1 * Math.log(x) - gln);\n    u = err / t;\n    x -= (t = u / (1 - 0.5 * Math.min(1, u * ((a - 1) / x - 1))));\n    if (x <= 0)\n      x = 0.5 * (x + t);\n    if (Math.abs(t) < EPS * x)\n      break;\n  }\n\n  return x;\n};\n\n\n// Returns the error function erf(x)\njStat.erf = function erf(x) {\n  var cof = [-1.3026537197817094, 6.4196979235649026e-1, 1.9476473204185836e-2,\n             -9.561514786808631e-3, -9.46595344482036e-4, 3.66839497852761e-4,\n             4.2523324806907e-5, -2.0278578112534e-5, -1.624290004647e-6,\n             1.303655835580e-6, 1.5626441722e-8, -8.5238095915e-8,\n             6.529054439e-9, 5.059343495e-9, -9.91364156e-10,\n             -2.27365122e-10, 9.6467911e-11, 2.394038e-12,\n             -6.886027e-12, 8.94487e-13, 3.13092e-13,\n             -1.12708e-13, 3.81e-16, 7.106e-15,\n             -1.523e-15, -9.4e-17, 1.21e-16,\n             -2.8e-17];\n  var j = cof.length - 1;\n  var isneg = false;\n  var d = 0;\n  var dd = 0;\n  var t, ty, tmp, res;\n\n  if (x < 0) {\n    x = -x;\n    isneg = true;\n  }\n\n  t = 2 / (2 + x);\n  ty = 4 * t - 2;\n\n  for(; j > 0; j--) {\n    tmp = d;\n    d = ty * d - dd + cof[j];\n    dd = tmp;\n  }\n\n  res = t * Math.exp(-x * x + 0.5 * (cof[0] + ty * d) - dd);\n  return isneg ? res - 1 : 1 - res;\n};\n\n\n// Returns the complmentary error function erfc(x)\njStat.erfc = function erfc(x) {\n  return 1 - jStat.erf(x);\n};\n\n\n// Returns the inverse of the complementary error function\njStat.erfcinv = function erfcinv(p) {\n  var j = 0;\n  var x, err, t, pp;\n  if (p >= 2)\n    return -100;\n  if (p <= 0)\n    return 100;\n  pp = (p < 1) ? p : 2 - p;\n  t = Math.sqrt(-2 * Math.log(pp / 2));\n  x = -0.70711 * ((2.30753 + t * 0.27061) /\n                  (1 + t * (0.99229 + t * 0.04481)) - t);\n  for (; j < 2; j++) {\n    err = jStat.erfc(x) - pp;\n    x += err / (1.12837916709551257 * Math.exp(-x * x) - x * err);\n  }\n  return (p < 1) ? x : -x;\n};\n\n\n// Returns the inverse of the incomplete beta function\njStat.ibetainv = function ibetainv(p, a, b) {\n  var EPS = 1e-8;\n  var a1 = a - 1;\n  var b1 = b - 1;\n  var j = 0;\n  var lna, lnb, pp, t, u, err, x, al, h, w, afac;\n  if (p <= 0)\n    return 0;\n  if (p >= 1)\n    return 1;\n  if (a >= 1 && b >= 1) {\n    pp = (p < 0.5) ? p : 1 - p;\n    t = Math.sqrt(-2 * Math.log(pp));\n    x = (2.30753 + t * 0.27061) / (1 + t* (0.99229 + t * 0.04481)) - t;\n    if (p < 0.5)\n      x = -x;\n    al = (x * x - 3) / 6;\n    h = 2 / (1 / (2 * a - 1)  + 1 / (2 * b - 1));\n    w = (x * Math.sqrt(al + h) / h) - (1 / (2 * b - 1) - 1 / (2 * a - 1)) *\n        (al + 5 / 6 - 2 / (3 * h));\n    x = a / (a + b * Math.exp(2 * w));\n  } else {\n    lna = Math.log(a / (a + b));\n    lnb = Math.log(b / (a + b));\n    t = Math.exp(a * lna) / a;\n    u = Math.exp(b * lnb) / b;\n    w = t + u;\n    if (p < t / w)\n      x = Math.pow(a * w * p, 1 / a);\n    else\n      x = 1 - Math.pow(b * w * (1 - p), 1 / b);\n  }\n  afac = -jStat.gammaln(a) - jStat.gammaln(b) + jStat.gammaln(a + b);\n  for(; j < 10; j++) {\n    if (x === 0 || x === 1)\n      return x;\n    err = jStat.ibeta(x, a, b) - p;\n    t = Math.exp(a1 * Math.log(x) + b1 * Math.log(1 - x) + afac);\n    u = err / t;\n    x -= (t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x)))));\n    if (x <= 0)\n      x = 0.5 * (x + t);\n    if (x >= 1)\n      x = 0.5 * (x + t + 1);\n    if (Math.abs(t) < EPS * x && j > 0)\n      break;\n  }\n  return x;\n};\n\n\n// Returns the incomplete beta function I_x(a,b)\njStat.ibeta = function ibeta(x, a, b) {\n  // Factors in front of the continued fraction.\n  var bt = (x === 0 || x === 1) ?  0 :\n    Math.exp(jStat.gammaln(a + b) - jStat.gammaln(a) -\n             jStat.gammaln(b) + a * Math.log(x) + b *\n             Math.log(1 - x));\n  if (x < 0 || x > 1)\n    return false;\n  if (x < (a + 1) / (a + b + 2))\n    // Use continued fraction directly.\n    return bt * jStat.betacf(x, a, b) / a;\n  // else use continued fraction after making the symmetry transformation.\n  return 1 - bt * jStat.betacf(1 - x, b, a) / b;\n};\n\n\n// Returns a normal deviate (mu=0, sigma=1).\n// If n and m are specified it returns a object of normal deviates.\njStat.randn = function randn(n, m) {\n  var u, v, x, y, q, mat;\n  if (!m)\n    m = n;\n  if (n)\n    return jStat.create(n, m, function() { return jStat.randn(); });\n  do {\n    u = Math.random();\n    v = 1.7156 * (Math.random() - 0.5);\n    x = u - 0.449871;\n    y = Math.abs(v) + 0.386595;\n    q = x * x + y * (0.19600 * y - 0.25472 * x);\n  } while (q > 0.27597 && (q > 0.27846 || v * v > -4 * Math.log(u) * u * u));\n  return v / u;\n};\n\n\n// Returns a gamma deviate by the method of Marsaglia and Tsang.\njStat.randg = function randg(shape, n, m) {\n  var oalph = shape;\n  var a1, a2, u, v, x, mat;\n  if (!m)\n    m = n;\n  if (!shape)\n    shape = 1;\n  if (n) {\n    mat = jStat.zeros(n,m);\n    mat.alter(function() { return jStat.randg(shape); });\n    return mat;\n  }\n  if (shape < 1)\n    shape += 1;\n  a1 = shape - 1 / 3;\n  a2 = 1 / Math.sqrt(9 * a1);\n  do {\n    do {\n      x = jStat.randn();\n      v = 1 + a2 * x;\n    } while(v <= 0);\n    v = v * v * v;\n    u = Math.random();\n  } while(u > 1 - 0.331 * Math.pow(x, 4) &&\n          Math.log(u) > 0.5 * x*x + a1 * (1 - v + Math.log(v)));\n  // alpha > 1\n  if (shape == oalph)\n    return a1 * v;\n  // alpha < 1\n  do {\n    u = Math.random();\n  } while(u === 0);\n  return Math.pow(u, 1 / oalph) * a1 * v;\n};\n\n\n// making use of static methods on the instance\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jStat.fn[passfunc] = function() {\n      return jStat(\n          jStat.map(this, function(value) { return jStat[passfunc](value); }));\n    }\n  })(funcs[i]);\n})('gammaln gammafn factorial factorialln'.split(' '));\n\n\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jStat.fn[passfunc] = function() {\n      return jStat(jStat[passfunc].apply(null, arguments));\n    };\n  })(funcs[i]);\n})('randn'.split(' '));\n\n}(jStat, Math));\n(function(jStat, Math) {\n\n// generate all distribution instance methods\n(function(list) {\n  for (var i = 0; i < list.length; i++) (function(func) {\n    // distribution instance method\n    jStat[func] = function(a, b, c) {\n      if (!(this instanceof arguments.callee))\n        return new arguments.callee(a, b, c);\n      this._a = a;\n      this._b = b;\n      this._c = c;\n      return this;\n    };\n    // distribution method to be used on a jStat instance\n    jStat.fn[func] = function(a, b, c) {\n      var newthis = jStat[func](a, b, c);\n      newthis.data = this;\n      return newthis;\n    };\n    // sample instance method\n    jStat[func].prototype.sample = function(arr) {\n      var a = this._a;\n      var b = this._b;\n      var c = this._c;\n      if (arr)\n        return jStat.alter(arr, function() {\n          return jStat[func].sample(a, b, c);\n        });\n      else\n        return jStat[func].sample(a, b, c);\n    };\n    // generate the pdf, cdf and inv instance methods\n    (function(vals) {\n      for (var i = 0; i < vals.length; i++) (function(fnfunc) {\n        jStat[func].prototype[fnfunc] = function(x) {\n          var a = this._a;\n          var b = this._b;\n          var c = this._c;\n          if (!x && x !== 0)\n            x = this.data;\n          if (typeof x !== 'number') {\n            return jStat.fn.map.call(x, function(x) {\n              return jStat[func][fnfunc](x, a, b, c);\n            });\n          }\n          return jStat[func][fnfunc](x, a, b, c);\n        };\n      })(vals[i]);\n    })('pdf cdf inv'.split(' '));\n    // generate the mean, median, mode and variance instance methods\n    (function(vals) {\n      for (var i = 0; i < vals.length; i++) (function(fnfunc) {\n        jStat[func].prototype[fnfunc] = function() {\n          return jStat[func][fnfunc](this._a, this._b, this._c);\n        };\n      })(vals[i]);\n    })('mean median mode variance'.split(' '));\n  })(list[i]);\n})((\n  'beta centralF cauchy chisquare exponential gamma invgamma kumaraswamy ' +\n  'laplace lognormal noncentralt normal pareto studentt weibull uniform ' +\n  'binomial negbin hypgeom poisson triangular tukey arcsine'\n).split(' '));\n\n\n\n// extend beta function with static methods\njStat.extend(jStat.beta, {\n  pdf: function pdf(x, alpha, beta) {\n    // PDF is zero outside the support\n    if (x > 1 || x < 0)\n      return 0;\n    // PDF is one for the uniform case\n    if (alpha == 1 && beta == 1)\n      return 1;\n\n    if (alpha < 512 && beta < 512) {\n      return (Math.pow(x, alpha - 1) * Math.pow(1 - x, beta - 1)) /\n          jStat.betafn(alpha, beta);\n    } else {\n      return Math.exp((alpha - 1) * Math.log(x) +\n                      (beta - 1) * Math.log(1 - x) -\n                      jStat.betaln(alpha, beta));\n    }\n  },\n\n  cdf: function cdf(x, alpha, beta) {\n    return (x > 1 || x < 0) ? (x > 1) * 1 : jStat.ibeta(x, alpha, beta);\n  },\n\n  inv: function inv(x, alpha, beta) {\n    return jStat.ibetainv(x, alpha, beta);\n  },\n\n  mean: function mean(alpha, beta) {\n    return alpha / (alpha + beta);\n  },\n\n  median: function median(alpha, beta) {\n    return jStat.ibetainv(0.5, alpha, beta);\n  },\n\n  mode: function mode(alpha, beta) {\n    return (alpha - 1 ) / ( alpha + beta - 2);\n  },\n\n  // return a random sample\n  sample: function sample(alpha, beta) {\n    var u = jStat.randg(alpha);\n    return u / (u + jStat.randg(beta));\n  },\n\n  variance: function variance(alpha, beta) {\n    return (alpha * beta) / (Math.pow(alpha + beta, 2) * (alpha + beta + 1));\n  }\n});\n\n// extend F function with static methods\njStat.extend(jStat.centralF, {\n  // This implementation of the pdf function avoids float overflow\n  // See the way that R calculates this value:\n  // https://svn.r-project.org/R/trunk/src/nmath/df.c\n  pdf: function pdf(x, df1, df2) {\n    var p, q, f;\n\n    if (x < 0)\n      return 0;\n\n    if (df1 <= 2) {\n      if (x === 0 && df1 < 2) {\n        return Infinity;\n      }\n      if (x === 0 && df1 === 2) {\n        return 1;\n      }\n      return (1 / jStat.betafn(df1 / 2, df2 / 2)) *\n              Math.pow(df1 / df2, df1 / 2) *\n              Math.pow(x, (df1/2) - 1) *\n              Math.pow((1 + (df1 / df2) * x), -(df1 + df2) / 2);\n    }\n\n    p = (df1 * x) / (df2 + x * df1);\n    q = df2 / (df2 + x * df1);\n    f = df1 * q / 2.0;\n    return f * jStat.binomial.pdf((df1 - 2) / 2, (df1 + df2 - 2) / 2, p);\n  },\n\n  cdf: function cdf(x, df1, df2) {\n    if (x < 0)\n      return 0;\n    return jStat.ibeta((df1 * x) / (df1 * x + df2), df1 / 2, df2 / 2);\n  },\n\n  inv: function inv(x, df1, df2) {\n    return df2 / (df1 * (1 / jStat.ibetainv(x, df1 / 2, df2 / 2) - 1));\n  },\n\n  mean: function mean(df1, df2) {\n    return (df2 > 2) ? df2 / (df2 - 2) : undefined;\n  },\n\n  mode: function mode(df1, df2) {\n    return (df1 > 2) ? (df2 * (df1 - 2)) / (df1 * (df2 + 2)) : undefined;\n  },\n\n  // return a random sample\n  sample: function sample(df1, df2) {\n    var x1 = jStat.randg(df1 / 2) * 2;\n    var x2 = jStat.randg(df2 / 2) * 2;\n    return (x1 / df1) / (x2 / df2);\n  },\n\n  variance: function variance(df1, df2) {\n    if (df2 <= 4)\n      return undefined;\n    return 2 * df2 * df2 * (df1 + df2 - 2) /\n        (df1 * (df2 - 2) * (df2 - 2) * (df2 - 4));\n  }\n});\n\n\n// extend cauchy function with static methods\njStat.extend(jStat.cauchy, {\n  pdf: function pdf(x, local, scale) {\n    if (scale < 0) { return 0; }\n\n    return (scale / (Math.pow(x - local, 2) + Math.pow(scale, 2))) / Math.PI;\n  },\n\n  cdf: function cdf(x, local, scale) {\n    return Math.atan((x - local) / scale) / Math.PI + 0.5;\n  },\n\n  inv: function(p, local, scale) {\n    return local + scale * Math.tan(Math.PI * (p - 0.5));\n  },\n\n  median: function median(local, scale) {\n    return local;\n  },\n\n  mode: function mode(local, scale) {\n    return local;\n  },\n\n  sample: function sample(local, scale) {\n    return jStat.randn() *\n        Math.sqrt(1 / (2 * jStat.randg(0.5))) * scale + local;\n  }\n});\n\n\n\n// extend chisquare function with static methods\njStat.extend(jStat.chisquare, {\n  pdf: function pdf(x, dof) {\n    if (x < 0)\n      return 0;\n    return (x === 0 && dof === 2) ? 0.5 :\n        Math.exp((dof / 2 - 1) * Math.log(x) - x / 2 - (dof / 2) *\n                 Math.log(2) - jStat.gammaln(dof / 2));\n  },\n\n  cdf: function cdf(x, dof) {\n    if (x < 0)\n      return 0;\n    return jStat.lowRegGamma(dof / 2, x / 2);\n  },\n\n  inv: function(p, dof) {\n    return 2 * jStat.gammapinv(p, 0.5 * dof);\n  },\n\n  mean : function(dof) {\n    return dof;\n  },\n\n  // TODO: this is an approximation (is there a better way?)\n  median: function median(dof) {\n    return dof * Math.pow(1 - (2 / (9 * dof)), 3);\n  },\n\n  mode: function mode(dof) {\n    return (dof - 2 > 0) ? dof - 2 : 0;\n  },\n\n  sample: function sample(dof) {\n    return jStat.randg(dof / 2) * 2;\n  },\n\n  variance: function variance(dof) {\n    return 2 * dof;\n  }\n});\n\n\n\n// extend exponential function with static methods\njStat.extend(jStat.exponential, {\n  pdf: function pdf(x, rate) {\n    return x < 0 ? 0 : rate * Math.exp(-rate * x);\n  },\n\n  cdf: function cdf(x, rate) {\n    return x < 0 ? 0 : 1 - Math.exp(-rate * x);\n  },\n\n  inv: function(p, rate) {\n    return -Math.log(1 - p) / rate;\n  },\n\n  mean : function(rate) {\n    return 1 / rate;\n  },\n\n  median: function (rate) {\n    return (1 / rate) * Math.log(2);\n  },\n\n  mode: function mode(rate) {\n    return 0;\n  },\n\n  sample: function sample(rate) {\n    return -1 / rate * Math.log(Math.random());\n  },\n\n  variance : function(rate) {\n    return Math.pow(rate, -2);\n  }\n});\n\n\n\n// extend gamma function with static methods\njStat.extend(jStat.gamma, {\n  pdf: function pdf(x, shape, scale) {\n    if (x < 0)\n      return 0;\n    return (x === 0 && shape === 1) ? 1 / scale :\n            Math.exp((shape - 1) * Math.log(x) - x / scale -\n                    jStat.gammaln(shape) - shape * Math.log(scale));\n  },\n\n  cdf: function cdf(x, shape, scale) {\n    if (x < 0)\n      return 0;\n    return jStat.lowRegGamma(shape, x / scale);\n  },\n\n  inv: function(p, shape, scale) {\n    return jStat.gammapinv(p, shape) * scale;\n  },\n\n  mean : function(shape, scale) {\n    return shape * scale;\n  },\n\n  mode: function mode(shape, scale) {\n    if(shape > 1) return (shape - 1) * scale;\n    return undefined;\n  },\n\n  sample: function sample(shape, scale) {\n    return jStat.randg(shape) * scale;\n  },\n\n  variance: function variance(shape, scale) {\n    return shape * scale * scale;\n  }\n});\n\n// extend inverse gamma function with static methods\njStat.extend(jStat.invgamma, {\n  pdf: function pdf(x, shape, scale) {\n    if (x <= 0)\n      return 0;\n    return Math.exp(-(shape + 1) * Math.log(x) - scale / x -\n                    jStat.gammaln(shape) + shape * Math.log(scale));\n  },\n\n  cdf: function cdf(x, shape, scale) {\n    if (x <= 0)\n      return 0;\n    return 1 - jStat.lowRegGamma(shape, scale / x);\n  },\n\n  inv: function(p, shape, scale) {\n    return scale / jStat.gammapinv(1 - p, shape);\n  },\n\n  mean : function(shape, scale) {\n    return (shape > 1) ? scale / (shape - 1) : undefined;\n  },\n\n  mode: function mode(shape, scale) {\n    return scale / (shape + 1);\n  },\n\n  sample: function sample(shape, scale) {\n    return scale / jStat.randg(shape);\n  },\n\n  variance: function variance(shape, scale) {\n    if (shape <= 2)\n      return undefined;\n    return scale * scale / ((shape - 1) * (shape - 1) * (shape - 2));\n  }\n});\n\n\n// extend kumaraswamy function with static methods\njStat.extend(jStat.kumaraswamy, {\n  pdf: function pdf(x, alpha, beta) {\n    if (x === 0 && alpha === 1)\n      return beta;\n    else if (x === 1 && beta === 1)\n      return alpha;\n    return Math.exp(Math.log(alpha) + Math.log(beta) + (alpha - 1) *\n                    Math.log(x) + (beta - 1) *\n                    Math.log(1 - Math.pow(x, alpha)));\n  },\n\n  cdf: function cdf(x, alpha, beta) {\n    if (x < 0)\n      return 0;\n    else if (x > 1)\n      return 1;\n    return (1 - Math.pow(1 - Math.pow(x, alpha), beta));\n  },\n\n  inv: function inv(p, alpha, beta) {\n    return Math.pow(1 - Math.pow(1 - p, 1 / beta), 1 / alpha);\n  },\n\n  mean : function(alpha, beta) {\n    return (beta * jStat.gammafn(1 + 1 / alpha) *\n            jStat.gammafn(beta)) / (jStat.gammafn(1 + 1 / alpha + beta));\n  },\n\n  median: function median(alpha, beta) {\n    return Math.pow(1 - Math.pow(2, -1 / beta), 1 / alpha);\n  },\n\n  mode: function mode(alpha, beta) {\n    if (!(alpha >= 1 && beta >= 1 && (alpha !== 1 && beta !== 1)))\n      return undefined;\n    return Math.pow((alpha - 1) / (alpha * beta - 1), 1 / alpha);\n  },\n\n  variance: function variance(alpha, beta) {\n    throw new Error('variance not yet implemented');\n    // TODO: complete this\n  }\n});\n\n\n\n// extend lognormal function with static methods\njStat.extend(jStat.lognormal, {\n  pdf: function pdf(x, mu, sigma) {\n    if (x <= 0)\n      return 0;\n    return Math.exp(-Math.log(x) - 0.5 * Math.log(2 * Math.PI) -\n                    Math.log(sigma) - Math.pow(Math.log(x) - mu, 2) /\n                    (2 * sigma * sigma));\n  },\n\n  cdf: function cdf(x, mu, sigma) {\n    if (x < 0)\n      return 0;\n    return 0.5 +\n        (0.5 * jStat.erf((Math.log(x) - mu) / Math.sqrt(2 * sigma * sigma)));\n  },\n\n  inv: function(p, mu, sigma) {\n    return Math.exp(-1.41421356237309505 * sigma * jStat.erfcinv(2 * p) + mu);\n  },\n\n  mean: function mean(mu, sigma) {\n    return Math.exp(mu + sigma * sigma / 2);\n  },\n\n  median: function median(mu, sigma) {\n    return Math.exp(mu);\n  },\n\n  mode: function mode(mu, sigma) {\n    return Math.exp(mu - sigma * sigma);\n  },\n\n  sample: function sample(mu, sigma) {\n    return Math.exp(jStat.randn() * sigma + mu);\n  },\n\n  variance: function variance(mu, sigma) {\n    return (Math.exp(sigma * sigma) - 1) * Math.exp(2 * mu + sigma * sigma);\n  }\n});\n\n\n\n// extend noncentralt function with static methods\njStat.extend(jStat.noncentralt, {\n  pdf: function pdf(x, dof, ncp) {\n    var tol = 1e-14;\n    if (Math.abs(ncp) < tol)  // ncp approx 0; use student-t\n      return jStat.studentt.pdf(x, dof)\n\n    if (Math.abs(x) < tol) {  // different formula for x == 0\n      return Math.exp(jStat.gammaln((dof + 1) / 2) - ncp * ncp / 2 -\n                      0.5 * Math.log(Math.PI * dof) - jStat.gammaln(dof / 2));\n    }\n\n    // formula for x != 0\n    return dof / x *\n        (jStat.noncentralt.cdf(x * Math.sqrt(1 + 2 / dof), dof+2, ncp) -\n         jStat.noncentralt.cdf(x, dof, ncp));\n  },\n\n  cdf: function cdf(x, dof, ncp) {\n    var tol = 1e-14;\n    var min_iterations = 200;\n\n    if (Math.abs(ncp) < tol)  // ncp approx 0; use student-t\n      return jStat.studentt.cdf(x, dof);\n\n    // turn negative x into positive and flip result afterwards\n    var flip = false;\n    if (x < 0) {\n      flip = true;\n      ncp = -ncp;\n    }\n\n    var prob = jStat.normal.cdf(-ncp, 0, 1);\n    var value = tol + 1;\n    // use value at last two steps to determine convergence\n    var lastvalue = value;\n    var y = x * x / (x * x + dof);\n    var j = 0;\n    var p = Math.exp(-ncp * ncp / 2);\n    var q = Math.exp(-ncp * ncp / 2 - 0.5 * Math.log(2) -\n                     jStat.gammaln(3 / 2)) * ncp;\n    while (j < min_iterations || lastvalue > tol || value > tol) {\n      lastvalue = value;\n      if (j > 0) {\n        p *= (ncp * ncp) / (2 * j);\n        q *= (ncp * ncp) / (2 * (j + 1 / 2));\n      }\n      value = p * jStat.beta.cdf(y, j + 0.5, dof / 2) +\n          q * jStat.beta.cdf(y, j+1, dof/2);\n      prob += 0.5 * value;\n      j++;\n    }\n\n    return flip ? (1 - prob) : prob;\n  }\n});\n\n\n// extend normal function with static methods\njStat.extend(jStat.normal, {\n  pdf: function pdf(x, mean, std) {\n    return Math.exp(-0.5 * Math.log(2 * Math.PI) -\n                    Math.log(std) - Math.pow(x - mean, 2) / (2 * std * std));\n  },\n\n  cdf: function cdf(x, mean, std) {\n    return 0.5 * (1 + jStat.erf((x - mean) / Math.sqrt(2 * std * std)));\n  },\n\n  inv: function(p, mean, std) {\n    return -1.41421356237309505 * std * jStat.erfcinv(2 * p) + mean;\n  },\n\n  mean : function(mean, std) {\n    return mean;\n  },\n\n  median: function median(mean, std) {\n    return mean;\n  },\n\n  mode: function (mean, std) {\n    return mean;\n  },\n\n  sample: function sample(mean, std) {\n    return jStat.randn() * std + mean;\n  },\n\n  variance : function(mean, std) {\n    return std * std;\n  }\n});\n\n\n\n// extend pareto function with static methods\njStat.extend(jStat.pareto, {\n  pdf: function pdf(x, scale, shape) {\n    if (x < scale)\n      return 0;\n    return (shape * Math.pow(scale, shape)) / Math.pow(x, shape + 1);\n  },\n\n  cdf: function cdf(x, scale, shape) {\n    if (x < scale)\n      return 0;\n    return 1 - Math.pow(scale / x, shape);\n  },\n\n  inv: function inv(p, scale, shape) {\n    return scale / Math.pow(1 - p, 1 / shape);\n  },\n\n  mean: function mean(scale, shape) {\n    if (shape <= 1)\n      return undefined;\n    return (shape * Math.pow(scale, shape)) / (shape - 1);\n  },\n\n  median: function median(scale, shape) {\n    return scale * (shape * Math.SQRT2);\n  },\n\n  mode: function mode(scale, shape) {\n    return scale;\n  },\n\n  variance : function(scale, shape) {\n    if (shape <= 2)\n      return undefined;\n    return (scale*scale * shape) / (Math.pow(shape - 1, 2) * (shape - 2));\n  }\n});\n\n\n\n// extend studentt function with static methods\njStat.extend(jStat.studentt, {\n  pdf: function pdf(x, dof) {\n    dof = dof > 1e100 ? 1e100 : dof;\n    return (1/(Math.sqrt(dof) * jStat.betafn(0.5, dof/2))) *\n        Math.pow(1 + ((x * x) / dof), -((dof + 1) / 2));\n  },\n\n  cdf: function cdf(x, dof) {\n    var dof2 = dof / 2;\n    return jStat.ibeta((x + Math.sqrt(x * x + dof)) /\n                       (2 * Math.sqrt(x * x + dof)), dof2, dof2);\n  },\n\n  inv: function(p, dof) {\n    var x = jStat.ibetainv(2 * Math.min(p, 1 - p), 0.5 * dof, 0.5);\n    x = Math.sqrt(dof * (1 - x) / x);\n    return (p > 0.5) ? x : -x;\n  },\n\n  mean: function mean(dof) {\n    return (dof > 1) ? 0 : undefined;\n  },\n\n  median: function median(dof) {\n    return 0;\n  },\n\n  mode: function mode(dof) {\n    return 0;\n  },\n\n  sample: function sample(dof) {\n    return jStat.randn() * Math.sqrt(dof / (2 * jStat.randg(dof / 2)));\n  },\n\n  variance: function variance(dof) {\n    return (dof  > 2) ? dof / (dof - 2) : (dof > 1) ? Infinity : undefined;\n  }\n});\n\n\n\n// extend weibull function with static methods\njStat.extend(jStat.weibull, {\n  pdf: function pdf(x, scale, shape) {\n    if (x < 0 || scale < 0 || shape < 0)\n      return 0;\n    return (shape / scale) * Math.pow((x / scale), (shape - 1)) *\n        Math.exp(-(Math.pow((x / scale), shape)));\n  },\n\n  cdf: function cdf(x, scale, shape) {\n    return x < 0 ? 0 : 1 - Math.exp(-Math.pow((x / scale), shape));\n  },\n\n  inv: function(p, scale, shape) {\n    return scale * Math.pow(-Math.log(1 - p), 1 / shape);\n  },\n\n  mean : function(scale, shape) {\n    return scale * jStat.gammafn(1 + 1 / shape);\n  },\n\n  median: function median(scale, shape) {\n    return scale * Math.pow(Math.log(2), 1 / shape);\n  },\n\n  mode: function mode(scale, shape) {\n    if (shape <= 1)\n      return 0;\n    return scale * Math.pow((shape - 1) / shape, 1 / shape);\n  },\n\n  sample: function sample(scale, shape) {\n    return scale * Math.pow(-Math.log(Math.random()), 1 / shape);\n  },\n\n  variance: function variance(scale, shape) {\n    return scale * scale * jStat.gammafn(1 + 2 / shape) -\n        Math.pow(jStat.weibull.mean(scale, shape), 2);\n  }\n});\n\n\n\n// extend uniform function with static methods\njStat.extend(jStat.uniform, {\n  pdf: function pdf(x, a, b) {\n    return (x < a || x > b) ? 0 : 1 / (b - a);\n  },\n\n  cdf: function cdf(x, a, b) {\n    if (x < a)\n      return 0;\n    else if (x < b)\n      return (x - a) / (b - a);\n    return 1;\n  },\n\n  inv: function(p, a, b) {\n    return a + (p * (b - a));\n  },\n\n  mean: function mean(a, b) {\n    return 0.5 * (a + b);\n  },\n\n  median: function median(a, b) {\n    return jStat.mean(a, b);\n  },\n\n  mode: function mode(a, b) {\n    throw new Error('mode is not yet implemented');\n  },\n\n  sample: function sample(a, b) {\n    return (a / 2 + b / 2) + (b / 2 - a / 2) * (2 * Math.random() - 1);\n  },\n\n  variance: function variance(a, b) {\n    return Math.pow(b - a, 2) / 12;\n  }\n});\n\n\n\n// extend uniform function with static methods\njStat.extend(jStat.binomial, {\n  pdf: function pdf(k, n, p) {\n    return (p === 0 || p === 1) ?\n      ((n * p) === k ? 1 : 0) :\n      jStat.combination(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);\n  },\n\n  cdf: function cdf(x, n, p) {\n    var binomarr = [],\n    k = 0;\n    if (x < 0) {\n      return 0;\n    }\n    if (x < n) {\n      for (; k <= x; k++) {\n        binomarr[ k ] = jStat.binomial.pdf(k, n, p);\n      }\n      return jStat.sum(binomarr);\n    }\n    return 1;\n  }\n});\n\n\n\n// extend uniform function with static methods\njStat.extend(jStat.negbin, {\n  pdf: function pdf(k, r, p) {\n    if (k !== k >>> 0)\n      return false;\n    if (k < 0)\n      return 0;\n    return jStat.combination(k + r - 1, r - 1) *\n        Math.pow(1 - p, k) * Math.pow(p, r);\n  },\n\n  cdf: function cdf(x, r, p) {\n    var sum = 0,\n    k = 0;\n    if (x < 0) return 0;\n    for (; k <= x; k++) {\n      sum += jStat.negbin.pdf(k, r, p);\n    }\n    return sum;\n  }\n});\n\n\n\n// extend uniform function with static methods\njStat.extend(jStat.hypgeom, {\n  pdf: function pdf(k, N, m, n) {\n    // Hypergeometric PDF.\n\n    // A simplification of the CDF algorithm below.\n\n    // k = number of successes drawn\n    // N = population size\n    // m = number of successes in population\n    // n = number of items drawn from population\n\n    if(k !== k | 0) {\n      return false;\n    } else if(k < 0 || k < m - (N - n)) {\n      // It's impossible to have this few successes drawn.\n      return 0;\n    } else if(k > n || k > m) {\n      // It's impossible to have this many successes drawn.\n      return 0;\n    } else if (m * 2 > N) {\n      // More than half the population is successes.\n\n      if(n * 2 > N) {\n        // More than half the population is sampled.\n\n        return jStat.hypgeom.pdf(N - m - n + k, N, N - m, N - n)\n      } else {\n        // Half or less of the population is sampled.\n\n        return jStat.hypgeom.pdf(n - k, N, N - m, n);\n      }\n\n    } else if(n * 2 > N) {\n      // Half or less is successes.\n\n      return jStat.hypgeom.pdf(m - k, N, m, N - n);\n\n    } else if(m < n) {\n      // We want to have the number of things sampled to be less than the\n      // successes available. So swap the definitions of successful and sampled.\n      return jStat.hypgeom.pdf(k, N, n, m);\n    } else {\n      // If we get here, half or less of the population was sampled, half or\n      // less of it was successes, and we had fewer sampled things than\n      // successes. Now we can do this complicated iterative algorithm in an\n      // efficient way.\n\n      // The basic premise of the algorithm is that we partially normalize our\n      // intermediate product to keep it in a numerically good region, and then\n      // finish the normalization at the end.\n\n      // This variable holds the scaled probability of the current number of\n      // successes.\n      var scaledPDF = 1;\n\n      // This keeps track of how much we have normalized.\n      var samplesDone = 0;\n\n      for(var i = 0; i < k; i++) {\n        // For every possible number of successes up to that observed...\n\n        while(scaledPDF > 1 && samplesDone < n) {\n          // Intermediate result is growing too big. Apply some of the\n          // normalization to shrink everything.\n\n          scaledPDF *= 1 - (m / (N - samplesDone));\n\n          // Say we've normalized by this sample already.\n          samplesDone++;\n        }\n\n        // Work out the partially-normalized hypergeometric PDF for the next\n        // number of successes\n        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));\n      }\n\n      for(; samplesDone < n; samplesDone++) {\n        // Apply all the rest of the normalization\n        scaledPDF *= 1 - (m / (N - samplesDone));\n      }\n\n      // Bound answer sanely before returning.\n      return Math.min(1, Math.max(0, scaledPDF));\n    }\n  },\n\n  cdf: function cdf(x, N, m, n) {\n    // Hypergeometric CDF.\n\n    // This algorithm is due to Prof. Thomas S. Ferguson, <tom@math.ucla.edu>,\n    // and comes from his hypergeometric test calculator at\n    // <http://www.math.ucla.edu/~tom/distributions/Hypergeometric.html>.\n\n    // x = number of successes drawn\n    // N = population size\n    // m = number of successes in population\n    // n = number of items drawn from population\n\n    if(x < 0 || x < m - (N - n)) {\n      // It's impossible to have this few successes drawn or fewer.\n      return 0;\n    } else if(x >= n || x >= m) {\n      // We will always have this many successes or fewer.\n      return 1;\n    } else if (m * 2 > N) {\n      // More than half the population is successes.\n\n      if(n * 2 > N) {\n        // More than half the population is sampled.\n\n        return jStat.hypgeom.cdf(N - m - n + x, N, N - m, N - n)\n      } else {\n        // Half or less of the population is sampled.\n\n        return 1 - jStat.hypgeom.cdf(n - x - 1, N, N - m, n);\n      }\n\n    } else if(n * 2 > N) {\n      // Half or less is successes.\n\n      return 1 - jStat.hypgeom.cdf(m - x - 1, N, m, N - n);\n\n    } else if(m < n) {\n      // We want to have the number of things sampled to be less than the\n      // successes available. So swap the definitions of successful and sampled.\n      return jStat.hypgeom.cdf(x, N, n, m);\n    } else {\n      // If we get here, half or less of the population was sampled, half or\n      // less of it was successes, and we had fewer sampled things than\n      // successes. Now we can do this complicated iterative algorithm in an\n      // efficient way.\n\n      // The basic premise of the algorithm is that we partially normalize our\n      // intermediate sum to keep it in a numerically good region, and then\n      // finish the normalization at the end.\n\n      // Holds the intermediate, scaled total CDF.\n      var scaledCDF = 1;\n\n      // This variable holds the scaled probability of the current number of\n      // successes.\n      var scaledPDF = 1;\n\n      // This keeps track of how much we have normalized.\n      var samplesDone = 0;\n\n      for(var i = 0; i < x; i++) {\n        // For every possible number of successes up to that observed...\n\n        while(scaledCDF > 1 && samplesDone < n) {\n          // Intermediate result is growing too big. Apply some of the\n          // normalization to shrink everything.\n\n          var factor = 1 - (m / (N - samplesDone));\n\n          scaledPDF *= factor;\n          scaledCDF *= factor;\n\n          // Say we've normalized by this sample already.\n          samplesDone++;\n        }\n\n        // Work out the partially-normalized hypergeometric PDF for the next\n        // number of successes\n        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));\n\n        // Add to the CDF answer.\n        scaledCDF += scaledPDF;\n      }\n\n      for(; samplesDone < n; samplesDone++) {\n        // Apply all the rest of the normalization\n        scaledCDF *= 1 - (m / (N - samplesDone));\n      }\n\n      // Bound answer sanely before returning.\n      return Math.min(1, Math.max(0, scaledCDF));\n    }\n  }\n});\n\n\n\n// extend uniform function with static methods\njStat.extend(jStat.poisson, {\n  pdf: function pdf(k, l) {\n    if (l < 0 || (k % 1) !== 0 || k < 0) {\n      return 0;\n    }\n\n    return Math.pow(l, k) * Math.exp(-l) / jStat.factorial(k);\n  },\n\n  cdf: function cdf(x, l) {\n    var sumarr = [],\n    k = 0;\n    if (x < 0) return 0;\n    for (; k <= x; k++) {\n      sumarr.push(jStat.poisson.pdf(k, l));\n    }\n    return jStat.sum(sumarr);\n  },\n\n  mean : function(l) {\n    return l;\n  },\n\n  variance : function(l) {\n    return l;\n  },\n\n  sample: function sample(l) {\n    var p = 1, k = 0, L = Math.exp(-l);\n    do {\n      k++;\n      p *= Math.random();\n    } while (p > L);\n    return k - 1;\n  }\n});\n\n// extend triangular function with static methods\njStat.extend(jStat.triangular, {\n  pdf: function pdf(x, a, b, c) {\n    if (b <= a || c < a || c > b) {\n      return NaN;\n    } else {\n      if (x < a || x > b) {\n        return 0;\n      } else if (x < c) {\n          return (2 * (x - a)) / ((b - a) * (c - a));\n      } else if (x === c) {\n          return (2 / (b - a));\n      } else { // x > c\n          return (2 * (b - x)) / ((b - a) * (b - c));\n      }\n    }\n  },\n\n  cdf: function cdf(x, a, b, c) {\n    if (b <= a || c < a || c > b)\n      return NaN;\n    if (x <= a)\n      return 0;\n    else if (x >= b)\n      return 1;\n    if (x <= c)\n      return Math.pow(x - a, 2) / ((b - a) * (c - a));\n    else // x > c\n      return 1 - Math.pow(b - x, 2) / ((b - a) * (b - c));\n  },\n\n  inv: function inv(p, a, b, c) {\n    if (b <= a || c < a || c > b) {\n      return NaN;\n    } else {\n      if (p <= ((c - a) / (b - a))) {\n        return a + (b - a) * Math.sqrt(p * ((c - a) / (b - a)));\n      } else { // p > ((c - a) / (b - a))\n        return a + (b - a) * (1 - Math.sqrt((1 - p) * (1 - ((c - a) / (b - a)))));\n      }\n    }\n  },\n\n  mean: function mean(a, b, c) {\n    return (a + b + c) / 3;\n  },\n\n  median: function median(a, b, c) {\n    if (c <= (a + b) / 2) {\n      return b - Math.sqrt((b - a) * (b - c)) / Math.sqrt(2);\n    } else if (c > (a + b) / 2) {\n      return a + Math.sqrt((b - a) * (c - a)) / Math.sqrt(2);\n    }\n  },\n\n  mode: function mode(a, b, c) {\n    return c;\n  },\n\n  sample: function sample(a, b, c) {\n    var u = Math.random();\n    if (u < ((c - a) / (b - a)))\n      return a + Math.sqrt(u * (b - a) * (c - a))\n    return b - Math.sqrt((1 - u) * (b - a) * (b - c));\n  },\n\n  variance: function variance(a, b, c) {\n    return (a * a + b * b + c * c - a * b - a * c - b * c) / 18;\n  }\n});\n\n\n// extend arcsine function with static methods\njStat.extend(jStat.arcsine, {\n  pdf: function pdf(x, a, b) {\n    if (b <= a) return NaN;\n\n    return (x <= a || x >= b) ? 0 :\n      (2 / Math.PI) *\n        Math.pow(Math.pow(b - a, 2) -\n                  Math.pow(2 * x - a - b, 2), -0.5);\n  },\n\n  cdf: function cdf(x, a, b) {\n    if (x < a)\n      return 0;\n    else if (x < b)\n      return (2 / Math.PI) * Math.asin(Math.sqrt((x - a)/(b - a)));\n    return 1;\n  },\n\n  inv: function(p, a, b) {\n    return a + (0.5 - 0.5 * Math.cos(Math.PI * p)) * (b - a);\n  },\n\n  mean: function mean(a, b) {\n    if (b <= a) return NaN;\n    return (a + b) / 2;\n  },\n\n  median: function median(a, b) {\n    if (b <= a) return NaN;\n    return (a + b) / 2;\n  },\n\n  mode: function mode(a, b) {\n    throw new Error('mode is not yet implemented');\n  },\n\n  sample: function sample(a, b) {\n    return ((a + b) / 2) + ((b - a) / 2) *\n      Math.sin(2 * Math.PI * jStat.uniform.sample(0, 1));\n  },\n\n  variance: function variance(a, b) {\n    if (b <= a) return NaN;\n    return Math.pow(b - a, 2) / 8;\n  }\n});\n\n\nfunction laplaceSign(x) { return x / Math.abs(x); }\n\njStat.extend(jStat.laplace, {\n  pdf: function pdf(x, mu, b) {\n    return (b <= 0) ? 0 : (Math.exp(-Math.abs(x - mu) / b)) / (2 * b);\n  },\n\n  cdf: function cdf(x, mu, b) {\n    if (b <= 0) { return 0; }\n\n    if(x < mu) {\n      return 0.5 * Math.exp((x - mu) / b);\n    } else {\n      return 1 - 0.5 * Math.exp(- (x - mu) / b);\n    }\n  },\n\n  mean: function(mu, b) {\n    return mu;\n  },\n\n  median: function(mu, b) {\n    return mu;\n  },\n\n  mode: function(mu, b) {\n    return mu;\n  },\n\n  variance: function(mu, b) {\n    return 2 * b * b;\n  },\n\n  sample: function sample(mu, b) {\n    var u = Math.random() - 0.5;\n\n    return mu - (b * laplaceSign(u) * Math.log(1 - (2 * Math.abs(u))));\n  }\n});\n\nfunction tukeyWprob(w, rr, cc) {\n  var nleg = 12;\n  var ihalf = 6;\n\n  var C1 = -30;\n  var C2 = -50;\n  var C3 = 60;\n  var bb   = 8;\n  var wlar = 3;\n  var wincr1 = 2;\n  var wincr2 = 3;\n  var xleg = [\n    0.981560634246719250690549090149,\n    0.904117256370474856678465866119,\n    0.769902674194304687036893833213,\n    0.587317954286617447296702418941,\n    0.367831498998180193752691536644,\n    0.125233408511468915472441369464\n  ];\n  var aleg = [\n    0.047175336386511827194615961485,\n    0.106939325995318430960254718194,\n    0.160078328543346226334652529543,\n    0.203167426723065921749064455810,\n    0.233492536538354808760849898925,\n    0.249147045813402785000562436043\n  ];\n\n  var qsqz = w * 0.5;\n\n  // if w >= 16 then the integral lower bound (occurs for c=20)\n  // is 0.99999999999995 so return a value of 1.\n\n  if (qsqz >= bb)\n    return 1.0;\n\n  // find (f(w/2) - 1) ^ cc\n  // (first term in integral of hartley's form).\n\n  var pr_w = 2 * jStat.normal.cdf(qsqz, 0, 1, 1, 0) - 1; // erf(qsqz / M_SQRT2)\n  // if pr_w ^ cc < 2e-22 then set pr_w = 0\n  if (pr_w >= Math.exp(C2 / cc))\n    pr_w = Math.pow(pr_w, cc);\n  else\n    pr_w = 0.0;\n\n  // if w is large then the second component of the\n  // integral is small, so fewer intervals are needed.\n\n  var wincr;\n  if (w > wlar)\n    wincr = wincr1;\n  else\n    wincr = wincr2;\n\n  // find the integral of second term of hartley's form\n  // for the integral of the range for equal-length\n  // intervals using legendre quadrature.  limits of\n  // integration are from (w/2, 8).  two or three\n  // equal-length intervals are used.\n\n  // blb and bub are lower and upper limits of integration.\n\n  var blb = qsqz;\n  var binc = (bb - qsqz) / wincr;\n  var bub = blb + binc;\n  var einsum = 0.0;\n\n  // integrate over each interval\n\n  var cc1 = cc - 1.0;\n  for (var wi = 1; wi <= wincr; wi++) {\n    var elsum = 0.0;\n    var a = 0.5 * (bub + blb);\n\n    // legendre quadrature with order = nleg\n\n    var b = 0.5 * (bub - blb);\n\n    for (var jj = 1; jj <= nleg; jj++) {\n      var j, xx;\n      if (ihalf < jj) {\n        j = (nleg - jj) + 1;\n        xx = xleg[j-1];\n      } else {\n        j = jj;\n        xx = -xleg[j-1];\n      }\n      var c = b * xx;\n      var ac = a + c;\n\n      // if exp(-qexpo/2) < 9e-14,\n      // then doesn't contribute to integral\n\n      var qexpo = ac * ac;\n      if (qexpo > C3)\n        break;\n\n      var pplus = 2 * jStat.normal.cdf(ac, 0, 1, 1, 0);\n      var pminus= 2 * jStat.normal.cdf(ac, w, 1, 1, 0);\n\n      // if rinsum ^ (cc-1) < 9e-14,\n      // then doesn't contribute to integral\n\n      var rinsum = (pplus * 0.5) - (pminus * 0.5);\n      if (rinsum >= Math.exp(C1 / cc1)) {\n        rinsum = (aleg[j-1] * Math.exp(-(0.5 * qexpo))) * Math.pow(rinsum, cc1);\n        elsum += rinsum;\n      }\n    }\n    elsum *= (((2.0 * b) * cc) / Math.sqrt(2 * Math.PI));\n    einsum += elsum;\n    blb = bub;\n    bub += binc;\n  }\n\n  // if pr_w ^ rr < 9e-14, then return 0\n  pr_w += einsum;\n  if (pr_w <= Math.exp(C1 / rr))\n    return 0;\n\n  pr_w = Math.pow(pr_w, rr);\n  if (pr_w >= 1) // 1 was iMax was eps\n    return 1;\n  return pr_w;\n}\n\nfunction tukeyQinv(p, c, v) {\n  var p0 = 0.322232421088;\n  var q0 = 0.993484626060e-01;\n  var p1 = -1.0;\n  var q1 = 0.588581570495;\n  var p2 = -0.342242088547;\n  var q2 = 0.531103462366;\n  var p3 = -0.204231210125;\n  var q3 = 0.103537752850;\n  var p4 = -0.453642210148e-04;\n  var q4 = 0.38560700634e-02;\n  var c1 = 0.8832;\n  var c2 = 0.2368;\n  var c3 = 1.214;\n  var c4 = 1.208;\n  var c5 = 1.4142;\n  var vmax = 120.0;\n\n  var ps = 0.5 - 0.5 * p;\n  var yi = Math.sqrt(Math.log(1.0 / (ps * ps)));\n  var t = yi + (((( yi * p4 + p3) * yi + p2) * yi + p1) * yi + p0)\n     / (((( yi * q4 + q3) * yi + q2) * yi + q1) * yi + q0);\n  if (v < vmax) t += (t * t * t + t) / v / 4.0;\n  var q = c1 - c2 * t;\n  if (v < vmax) q += -c3 / v + c4 * t / v;\n  return t * (q * Math.log(c - 1.0) + c5);\n}\n\njStat.extend(jStat.tukey, {\n  cdf: function cdf(q, nmeans, df) {\n    // Identical implementation as the R ptukey() function as of commit 68947\n    var rr = 1;\n    var cc = nmeans;\n\n    var nlegq = 16;\n    var ihalfq = 8;\n\n    var eps1 = -30.0;\n    var eps2 = 1.0e-14;\n    var dhaf  = 100.0;\n    var dquar = 800.0;\n    var deigh = 5000.0;\n    var dlarg = 25000.0;\n    var ulen1 = 1.0;\n    var ulen2 = 0.5;\n    var ulen3 = 0.25;\n    var ulen4 = 0.125;\n    var xlegq = [\n      0.989400934991649932596154173450,\n      0.944575023073232576077988415535,\n      0.865631202387831743880467897712,\n      0.755404408355003033895101194847,\n      0.617876244402643748446671764049,\n      0.458016777657227386342419442984,\n      0.281603550779258913230460501460,\n      0.950125098376374401853193354250e-1\n    ];\n    var alegq = [\n      0.271524594117540948517805724560e-1,\n      0.622535239386478928628438369944e-1,\n      0.951585116824927848099251076022e-1,\n      0.124628971255533872052476282192,\n      0.149595988816576732081501730547,\n      0.169156519395002538189312079030,\n      0.182603415044923588866763667969,\n      0.189450610455068496285396723208\n    ];\n\n    if (q <= 0)\n      return 0;\n\n    // df must be > 1\n    // there must be at least two values\n\n    if (df < 2 || rr < 1 || cc < 2) return NaN;\n\n    if (!Number.isFinite(q))\n      return 1;\n\n    if (df > dlarg)\n      return tukeyWprob(q, rr, cc);\n\n    // calculate leading constant\n\n    var f2 = df * 0.5;\n    var f2lf = ((f2 * Math.log(df)) - (df * Math.log(2))) - jStat.gammaln(f2);\n    var f21 = f2 - 1.0;\n\n    // integral is divided into unit, half-unit, quarter-unit, or\n    // eighth-unit length intervals depending on the value of the\n    // degrees of freedom.\n\n    var ff4 = df * 0.25;\n    var ulen;\n    if      (df <= dhaf)  ulen = ulen1;\n    else if (df <= dquar) ulen = ulen2;\n    else if (df <= deigh) ulen = ulen3;\n    else                  ulen = ulen4;\n\n    f2lf += Math.log(ulen);\n\n    // integrate over each subinterval\n\n    var ans = 0.0;\n\n    for (var i = 1; i <= 50; i++) {\n      var otsum = 0.0;\n\n      // legendre quadrature with order = nlegq\n      // nodes (stored in xlegq) are symmetric around zero.\n\n      var twa1 = (2 * i - 1) * ulen;\n\n      for (var jj = 1; jj <= nlegq; jj++) {\n        var j, t1;\n        if (ihalfq < jj) {\n          j = jj - ihalfq - 1;\n          t1 = (f2lf + (f21 * Math.log(twa1 + (xlegq[j] * ulen))))\n              - (((xlegq[j] * ulen) + twa1) * ff4);\n        } else {\n          j = jj - 1;\n          t1 = (f2lf + (f21 * Math.log(twa1 - (xlegq[j] * ulen))))\n              + (((xlegq[j] * ulen) - twa1) * ff4);\n        }\n\n        // if exp(t1) < 9e-14, then doesn't contribute to integral\n        var qsqz;\n        if (t1 >= eps1) {\n          if (ihalfq < jj) {\n            qsqz = q * Math.sqrt(((xlegq[j] * ulen) + twa1) * 0.5);\n          } else {\n            qsqz = q * Math.sqrt(((-(xlegq[j] * ulen)) + twa1) * 0.5);\n          }\n\n          // call wprob to find integral of range portion\n\n          var wprb = tukeyWprob(qsqz, rr, cc);\n          var rotsum = (wprb * alegq[j]) * Math.exp(t1);\n          otsum += rotsum;\n        }\n        // end legendre integral for interval i\n        // L200:\n      }\n\n      // if integral for interval i < 1e-14, then stop.\n      // However, in order to avoid small area under left tail,\n      // at least  1 / ulen  intervals are calculated.\n      if (i * ulen >= 1.0 && otsum <= eps2)\n        break;\n\n      // end of interval i\n      // L330:\n\n      ans += otsum;\n    }\n\n    if (otsum > eps2) { // not converged\n      throw new Error('tukey.cdf failed to converge');\n    }\n    if (ans > 1)\n      ans = 1;\n    return ans;\n  },\n\n  inv: function(p, nmeans, df) {\n    // Identical implementation as the R qtukey() function as of commit 68947\n    var rr = 1;\n    var cc = nmeans;\n\n    var eps = 0.0001;\n    var maxiter = 50;\n\n    // df must be > 1 ; there must be at least two values\n    if (df < 2 || rr < 1 || cc < 2) return NaN;\n\n    if (p < 0 || p > 1) return NaN;\n    if (p === 0) return 0;\n    if (p === 1) return Infinity;\n\n    // Initial value\n\n    var x0 = tukeyQinv(p, cc, df);\n\n    // Find prob(value < x0)\n\n    var valx0 = jStat.tukey.cdf(x0, nmeans, df) - p;\n\n    // Find the second iterate and prob(value < x1).\n    // If the first iterate has probability value\n    // exceeding p then second iterate is 1 less than\n    // first iterate; otherwise it is 1 greater.\n\n    var x1;\n    if (valx0 > 0.0)\n      x1 = Math.max(0.0, x0 - 1.0);\n    else\n      x1 = x0 + 1.0;\n    var valx1 = jStat.tukey.cdf(x1, nmeans, df) - p;\n\n    // Find new iterate\n\n    var ans;\n    for(var iter = 1; iter < maxiter; iter++) {\n      ans = x1 - ((valx1 * (x1 - x0)) / (valx1 - valx0));\n      valx0 = valx1;\n\n      // New iterate must be >= 0\n\n      x0 = x1;\n      if (ans < 0.0) {\n        ans = 0.0;\n        valx1 = -p;\n      }\n      // Find prob(value < new iterate)\n\n      valx1 = jStat.tukey.cdf(ans, nmeans, df) - p;\n      x1 = ans;\n\n      // If the difference between two successive\n      // iterates is less than eps, stop\n\n      var xabs = Math.abs(x1 - x0);\n      if (xabs < eps)\n        return ans;\n    }\n\n    throw new Error('tukey.inv failed to converge');\n  }\n});\n\n}(jStat, Math));\n/* Provides functions for the solution of linear system of equations, integration, extrapolation,\n * interpolation, eigenvalue problems, differential equations and PCA analysis. */\n\n(function(jStat, Math) {\n\nvar push = Array.prototype.push;\nvar isArray = jStat.utils.isArray;\n\nfunction isUsable(arg) {\n  return isArray(arg) || arg instanceof jStat;\n}\n\njStat.extend({\n\n  // add a vector/matrix to a vector/matrix or scalar\n  add: function add(arr, arg) {\n    // check if arg is a vector or scalar\n    if (isUsable(arg)) {\n      if (!isUsable(arg[0])) arg = [ arg ];\n      return jStat.map(arr, function(value, row, col) {\n        return value + arg[row][col];\n      });\n    }\n    return jStat.map(arr, function(value) { return value + arg; });\n  },\n\n  // subtract a vector or scalar from the vector\n  subtract: function subtract(arr, arg) {\n    // check if arg is a vector or scalar\n    if (isUsable(arg)) {\n      if (!isUsable(arg[0])) arg = [ arg ];\n      return jStat.map(arr, function(value, row, col) {\n        return value - arg[row][col] || 0;\n      });\n    }\n    return jStat.map(arr, function(value) { return value - arg; });\n  },\n\n  // matrix division\n  divide: function divide(arr, arg) {\n    if (isUsable(arg)) {\n      if (!isUsable(arg[0])) arg = [ arg ];\n      return jStat.multiply(arr, jStat.inv(arg));\n    }\n    return jStat.map(arr, function(value) { return value / arg; });\n  },\n\n  // matrix multiplication\n  multiply: function multiply(arr, arg) {\n    var row, col, nrescols, sum, nrow, ncol, res, rescols;\n    // eg: arr = 2 arg = 3 -> 6 for res[0][0] statement closure\n    if (arr.length === undefined && arg.length === undefined) {\n      return arr * arg;\n    }\n    nrow = arr.length,\n    ncol = arr[0].length,\n    res = jStat.zeros(nrow, nrescols = (isUsable(arg)) ? arg[0].length : ncol),\n    rescols = 0;\n    if (isUsable(arg)) {\n      for (; rescols < nrescols; rescols++) {\n        for (row = 0; row < nrow; row++) {\n          sum = 0;\n          for (col = 0; col < ncol; col++)\n          sum += arr[row][col] * arg[col][rescols];\n          res[row][rescols] = sum;\n        }\n      }\n      return (nrow === 1 && rescols === 1) ? res[0][0] : res;\n    }\n    return jStat.map(arr, function(value) { return value * arg; });\n  },\n\n  // outer([1,2,3],[4,5,6])\n  // ===\n  // [[1],[2],[3]] times [[4,5,6]]\n  // ->\n  // [[4,5,6],[8,10,12],[12,15,18]]\n  outer:function outer(A, B) {\n    return jStat.multiply(A.map(function(t){ return [t] }), [B]);\n  },\n\n\n  // Returns the dot product of two matricies\n  dot: function dot(arr, arg) {\n    if (!isUsable(arr[0])) arr = [ arr ];\n    if (!isUsable(arg[0])) arg = [ arg ];\n    // convert column to row vector\n    var left = (arr[0].length === 1 && arr.length !== 1) ? jStat.transpose(arr) : arr,\n    right = (arg[0].length === 1 && arg.length !== 1) ? jStat.transpose(arg) : arg,\n    res = [],\n    row = 0,\n    nrow = left.length,\n    ncol = left[0].length,\n    sum, col;\n    for (; row < nrow; row++) {\n      res[row] = [];\n      sum = 0;\n      for (col = 0; col < ncol; col++)\n      sum += left[row][col] * right[row][col];\n      res[row] = sum;\n    }\n    return (res.length === 1) ? res[0] : res;\n  },\n\n  // raise every element by a scalar\n  pow: function pow(arr, arg) {\n    return jStat.map(arr, function(value) { return Math.pow(value, arg); });\n  },\n\n  // exponentiate every element\n  exp: function exp(arr) {\n    return jStat.map(arr, function(value) { return Math.exp(value); });\n  },\n\n  // generate the natural log of every element\n  log: function exp(arr) {\n    return jStat.map(arr, function(value) { return Math.log(value); });\n  },\n\n  // generate the absolute values of the vector\n  abs: function abs(arr) {\n    return jStat.map(arr, function(value) { return Math.abs(value); });\n  },\n\n  // computes the p-norm of the vector\n  // In the case that a matrix is passed, uses the first row as the vector\n  norm: function norm(arr, p) {\n    var nnorm = 0,\n    i = 0;\n    // check the p-value of the norm, and set for most common case\n    if (isNaN(p)) p = 2;\n    // check if multi-dimensional array, and make vector correction\n    if (isUsable(arr[0])) arr = arr[0];\n    // vector norm\n    for (; i < arr.length; i++) {\n      nnorm += Math.pow(Math.abs(arr[i]), p);\n    }\n    return Math.pow(nnorm, 1 / p);\n  },\n\n  // computes the angle between two vectors in rads\n  // In case a matrix is passed, this uses the first row as the vector\n  angle: function angle(arr, arg) {\n    return Math.acos(jStat.dot(arr, arg) / (jStat.norm(arr) * jStat.norm(arg)));\n  },\n\n  // augment one matrix by another\n  // Note: this function returns a matrix, not a jStat object\n  aug: function aug(a, b) {\n    var newarr = [];\n    for (var i = 0; i < a.length; i++) {\n      newarr.push(a[i].slice());\n    }\n    for (var i = 0; i < newarr.length; i++) {\n      push.apply(newarr[i], b[i]);\n    }\n    return newarr;\n  },\n\n  // The inv() function calculates the inverse of a matrix\n  // Create the inverse by augmenting the matrix by the identity matrix of the\n  // appropriate size, and then use G-J elimination on the augmented matrix.\n  inv: function inv(a) {\n    var rows = a.length;\n    var cols = a[0].length;\n    var b = jStat.identity(rows, cols);\n    var c = jStat.gauss_jordan(a, b);\n    var result = [];\n    var i = 0;\n    var j;\n\n    //We need to copy the inverse portion to a new matrix to rid G-J artifacts\n    for (; i < rows; i++) {\n      result[i] = [];\n      for (j = cols; j < c[0].length; j++)\n        result[i][j - cols] = c[i][j];\n    }\n    return result;\n  },\n\n  // calculate the determinant of a matrix\n  det: function det(a) {\n    var alen = a.length,\n    alend = alen * 2,\n    vals = new Array(alend),\n    rowshift = alen - 1,\n    colshift = alend - 1,\n    mrow = rowshift - alen + 1,\n    mcol = colshift,\n    i = 0,\n    result = 0,\n    j;\n    // check for special 2x2 case\n    if (alen === 2) {\n      return a[0][0] * a[1][1] - a[0][1] * a[1][0];\n    }\n    for (; i < alend; i++) {\n      vals[i] = 1;\n    }\n    for (var i = 0; i < alen; i++) {\n      for (j = 0; j < alen; j++) {\n        vals[(mrow < 0) ? mrow + alen : mrow ] *= a[i][j];\n        vals[(mcol < alen) ? mcol + alen : mcol ] *= a[i][j];\n        mrow++;\n        mcol--;\n      }\n      mrow = --rowshift - alen + 1;\n      mcol = --colshift;\n    }\n    for (var i = 0; i < alen; i++) {\n      result += vals[i];\n    }\n    for (; i < alend; i++) {\n      result -= vals[i];\n    }\n    return result;\n  },\n\n  gauss_elimination: function gauss_elimination(a, b) {\n    var i = 0,\n    j = 0,\n    n = a.length,\n    m = a[0].length,\n    factor = 1,\n    sum = 0,\n    x = [],\n    maug, pivot, temp, k;\n    a = jStat.aug(a, b);\n    maug = a[0].length;\n    for(var i = 0; i < n; i++) {\n      pivot = a[i][i];\n      j = i;\n      for (k = i + 1; k < m; k++) {\n        if (pivot < Math.abs(a[k][i])) {\n          pivot = a[k][i];\n          j = k;\n        }\n      }\n      if (j != i) {\n        for(k = 0; k < maug; k++) {\n          temp = a[i][k];\n          a[i][k] = a[j][k];\n          a[j][k] = temp;\n        }\n      }\n      for (j = i + 1; j < n; j++) {\n        factor = a[j][i] / a[i][i];\n        for(k = i; k < maug; k++) {\n          a[j][k] = a[j][k] - factor * a[i][k];\n        }\n      }\n    }\n    for (var i = n - 1; i >= 0; i--) {\n      sum = 0;\n      for (j = i + 1; j<= n - 1; j++) {\n        sum = sum + x[j] * a[i][j];\n      }\n      x[i] =(a[i][maug - 1] - sum) / a[i][i];\n    }\n    return x;\n  },\n\n  gauss_jordan: function gauss_jordan(a, b) {\n    var m = jStat.aug(a, b),\n    h = m.length,\n    w = m[0].length;\n    var c = 0;\n    // find max pivot\n    for (var y = 0; y < h; y++) {\n      var maxrow = y;\n      for (var y2 = y+1; y2 < h; y2++) {\n        if (Math.abs(m[y2][y]) > Math.abs(m[maxrow][y]))\n          maxrow = y2;\n      }\n      var tmp = m[y];\n      m[y] = m[maxrow];\n      m[maxrow] = tmp\n      for (var y2 = y+1; y2 < h; y2++) {\n        c = m[y2][y] / m[y][y];\n        for (var x = y; x < w; x++) {\n          m[y2][x] -= m[y][x] * c;\n        }\n      }\n    }\n    // backsubstitute\n    for (var y = h-1; y >= 0; y--) {\n      c = m[y][y];\n      for (var y2 = 0; y2 < y; y2++) {\n        for (var x = w-1; x > y-1; x--) {\n          m[y2][x] -= m[y][x] * m[y2][y] / c;\n        }\n      }\n      m[y][y] /= c;\n      for (var x = h; x < w; x++) {\n        m[y][x] /= c;\n      }\n    }\n    return m;\n  },\n\n  // solve equation\n  // Ax=b\n  // A is upper triangular matrix\n  // A=[[1,2,3],[0,4,5],[0,6,7]]\n  // b=[1,2,3]\n  // triaUpSolve(A,b) // -> [2.666,0.1666,1.666]\n  // if you use matrix style\n  // A=[[1,2,3],[0,4,5],[0,6,7]]\n  // b=[[1],[2],[3]]\n  // will return [[2.666],[0.1666],[1.666]]\n  triaUpSolve: function triaUpSolve(A, b) {\n    var size = A[0].length;\n    var x = jStat.zeros(1, size)[0];\n    var parts;\n    var matrix_mode = false;\n\n    if (b[0].length != undefined) {\n      b = b.map(function(i){ return i[0] });\n      matrix_mode = true;\n    }\n\n    jStat.arange(size - 1, -1, -1).forEach(function(i) {\n      parts = jStat.arange(i + 1, size).map(function(j) {\n        return x[j] * A[i][j];\n      });\n      x[i] = (b[i] - jStat.sum(parts)) / A[i][i];\n    });\n\n    if (matrix_mode)\n      return x.map(function(i){ return [i] });\n    return x;\n  },\n\n  triaLowSolve: function triaLowSolve(A, b) {\n    // like to triaUpSolve but A is lower triangular matrix\n    var size = A[0].length;\n    var x = jStat.zeros(1, size)[0];\n    var parts;\n\n    var matrix_mode=false;\n    if (b[0].length != undefined) {\n      b = b.map(function(i){ return i[0] });\n      matrix_mode = true;\n    }\n\n    jStat.arange(size).forEach(function(i) {\n      parts = jStat.arange(i).map(function(j) {\n        return A[i][j] * x[j];\n      });\n      x[i] = (b[i] - jStat.sum(parts)) / A[i][i];\n    })\n\n    if (matrix_mode)\n      return x.map(function(i){ return [i] });\n    return x;\n  },\n\n\n  // A -> [L,U]\n  // A=LU\n  // L is lower triangular matrix\n  // U is upper triangular matrix\n  lu: function lu(A) {\n    var size = A.length;\n    //var L=jStat.diagonal(jStat.ones(1,size)[0]);\n    var L = jStat.identity(size);\n    var R = jStat.zeros(A.length, A[0].length);\n    var parts;\n    jStat.arange(size).forEach(function(t) {\n      R[0][t] = A[0][t];\n    });\n    jStat.arange(1, size).forEach(function(l) {\n      jStat.arange(l).forEach(function(i) {\n        parts = jStat.arange(i).map(function(jj) {\n          return L[l][jj] * R[jj][i];\n        });\n        L[l][i] = (A[l][i] - jStat.sum(parts)) / R[i][i];\n      });\n      jStat.arange(l, size).forEach(function(j) {\n        parts = jStat.arange(l).map(function(jj) {\n          return L[l][jj] * R[jj][j];\n        });\n        R[l][j] = A[i][j] - jStat.sum(parts);\n      });\n    });\n    return [L, R];\n  },\n\n  // A -> T\n  // A=TT'\n  // T is lower triangular matrix\n  cholesky: function cholesky(A) {\n    var size = A.length;\n    var T = jStat.zeros(A.length, A[0].length);\n    var parts;\n    jStat.arange(size).forEach(function(i) {\n      parts = jStat.arange(i).map(function(t) {\n        return Math.pow(T[i][t],2);\n      });\n      T[i][i] = Math.sqrt(A[i][i] - jStat.sum(parts));\n      jStat.arange(i + 1, size).forEach(function(j) {\n        parts = jStat.arange(i).map(function(t) {\n          return T[i][t] * T[j][t];\n        });\n        T[j][i] = (A[i][j] - jStat.sum(parts)) / T[i][i];\n      });\n    });\n    return T;\n  },\n\n\n  gauss_jacobi: function gauss_jacobi(a, b, x, r) {\n    var i = 0;\n    var j = 0;\n    var n = a.length;\n    var l = [];\n    var u = [];\n    var d = [];\n    var xv, c, h, xk;\n    for (; i < n; i++) {\n      l[i] = [];\n      u[i] = [];\n      d[i] = [];\n      for (j = 0; j < n; j++) {\n        if (i > j) {\n          l[i][j] = a[i][j];\n          u[i][j] = d[i][j] = 0;\n        } else if (i < j) {\n          u[i][j] = a[i][j];\n          l[i][j] = d[i][j] = 0;\n        } else {\n          d[i][j] = a[i][j];\n          l[i][j] = u[i][j] = 0;\n        }\n      }\n    }\n    h = jStat.multiply(jStat.multiply(jStat.inv(d), jStat.add(l, u)), -1);\n    c = jStat.multiply(jStat.inv(d), b);\n    xv = x;\n    xk = jStat.add(jStat.multiply(h, x), c);\n    i = 2;\n    while (Math.abs(jStat.norm(jStat.subtract(xk,xv))) > r) {\n      xv = xk;\n      xk = jStat.add(jStat.multiply(h, xv), c);\n      i++;\n    }\n    return xk;\n  },\n\n  gauss_seidel: function gauss_seidel(a, b, x, r) {\n    var i = 0;\n    var n = a.length;\n    var l = [];\n    var u = [];\n    var d = [];\n    var j, xv, c, h, xk;\n    for (; i < n; i++) {\n      l[i] = [];\n      u[i] = [];\n      d[i] = [];\n      for (j = 0; j < n; j++) {\n        if (i > j) {\n          l[i][j] = a[i][j];\n          u[i][j] = d[i][j] = 0;\n        } else if (i < j) {\n          u[i][j] = a[i][j];\n          l[i][j] = d[i][j] = 0;\n        } else {\n          d[i][j] = a[i][j];\n          l[i][j] = u[i][j] = 0;\n        }\n      }\n    }\n    h = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d, l)), u), -1);\n    c = jStat.multiply(jStat.inv(jStat.add(d, l)), b);\n    xv = x;\n    xk = jStat.add(jStat.multiply(h, x), c);\n    i = 2;\n    while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {\n      xv = xk;\n      xk = jStat.add(jStat.multiply(h, xv), c);\n      i = i + 1;\n    }\n    return xk;\n  },\n\n  SOR: function SOR(a, b, x, r, w) {\n    var i = 0;\n    var n = a.length;\n    var l = [];\n    var u = [];\n    var d = [];\n    var j, xv, c, h, xk;\n    for (; i < n; i++) {\n      l[i] = [];\n      u[i] = [];\n      d[i] = [];\n      for (j = 0; j < n; j++) {\n        if (i > j) {\n          l[i][j] = a[i][j];\n          u[i][j] = d[i][j] = 0;\n        } else if (i < j) {\n          u[i][j] = a[i][j];\n          l[i][j] = d[i][j] = 0;\n        } else {\n          d[i][j] = a[i][j];\n          l[i][j] = u[i][j] = 0;\n        }\n      }\n    }\n    h = jStat.multiply(jStat.inv(jStat.add(d, jStat.multiply(l, w))),\n                       jStat.subtract(jStat.multiply(d, 1 - w),\n                                      jStat.multiply(u, w)));\n    c = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d,\n        jStat.multiply(l, w))), b), w);\n    xv = x;\n    xk = jStat.add(jStat.multiply(h, x), c);\n    i = 2;\n    while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {\n      xv = xk;\n      xk = jStat.add(jStat.multiply(h, xv), c);\n      i++;\n    }\n    return xk;\n  },\n\n  householder: function householder(a) {\n    var m = a.length;\n    var n = a[0].length;\n    var i = 0;\n    var w = [];\n    var p = [];\n    var alpha, r, k, j, factor;\n    for (; i < m - 1; i++) {\n      alpha = 0;\n      for (j = i + 1; j < n; j++)\n      alpha += (a[j][i] * a[j][i]);\n      factor = (a[i + 1][i] > 0) ? -1 : 1;\n      alpha = factor * Math.sqrt(alpha);\n      r = Math.sqrt((((alpha * alpha) - a[i + 1][i] * alpha) / 2));\n      w = jStat.zeros(m, 1);\n      w[i + 1][0] = (a[i + 1][i] - alpha) / (2 * r);\n      for (k = i + 2; k < m; k++) w[k][0] = a[k][i] / (2 * r);\n      p = jStat.subtract(jStat.identity(m, n),\n          jStat.multiply(jStat.multiply(w, jStat.transpose(w)), 2));\n      a = jStat.multiply(p, jStat.multiply(a, p));\n    }\n    return a;\n  },\n\n  // A -> [Q,R]\n  // Q is orthogonal matrix\n  // R is upper triangular\n  QR: (function() {\n    // x -> Q\n    // find a orthogonal matrix Q st.\n    // Qx=y\n    // y is [||x||,0,0,...]\n\n    // quick ref\n    var sum   = jStat.sum;\n    var range = jStat.arange;\n\n    function get_Q1(x) {\n      var size = x.length;\n      var norm_x = jStat.norm(x, 2);\n      var e1 = jStat.zeros(1, size)[0];\n      e1[0] = 1;\n      var u = jStat.add(jStat.multiply(jStat.multiply(e1, norm_x), -1), x);\n      var norm_u = jStat.norm(u, 2);\n      var v = jStat.divide(u, norm_u);\n      var Q = jStat.subtract(jStat.identity(size),\n                             jStat.multiply(jStat.outer(v, v), 2));\n      return Q;\n    }\n\n    function qr(A) {\n      var size = A[0].length;\n      var QList = [];\n      jStat.arange(size).forEach(function(i) {\n        var x = jStat.slice(A, { row: { start: i }, col: i });\n        var Q = get_Q1(x);\n        var Qn = jStat.identity(A.length);\n        Qn = jStat.sliceAssign(Qn, { row: { start: i }, col: { start: i }}, Q);\n        A = jStat.multiply(Qn, A);\n        QList.push(Qn);\n      });\n      var Q = QList.reduce(function(x, y){ return jStat.multiply(x,y) });\n      var R = A;\n      return [Q, R];\n    }\n\n    function qr2(x) {\n      // quick impletation\n      // https://www.stat.wisc.edu/~larget/math496/qr.html\n\n      var n = x.length;\n      var p = x[0].length;\n\n      x = jStat.copy(x);\n      r = jStat.zeros(p, p);\n\n      var i,j,k;\n      for(j = 0; j < p; j++){\n        r[j][j] = Math.sqrt(sum(range(n).map(function(i){\n          return x[i][j] * x[i][j];\n        })));\n        for(i = 0; i < n; i++){\n          x[i][j] = x[i][j] / r[j][j];\n        }\n        for(k = j+1; k < p; k++){\n          r[j][k] = sum(range(n).map(function(i){\n            return x[i][j] * x[i][k];\n          }));\n          for(i = 0; i < n; i++){\n            x[i][k] = x[i][k] - x[i][j]*r[j][k];\n          }\n        }\n      }\n      return [x, r];\n    }\n\n    return qr2;\n  }()),\n\n  lstsq: (function(A, b) {\n    // solve least squard problem for Ax=b as QR decomposition way if b is\n    // [[b1],[b2],[b3]] form will return [[x1],[x2],[x3]] array form solution\n    // else b is [b1,b2,b3] form will return [x1,x2,x3] array form solution\n    function R_I(A) {\n      A = jStat.copy(A);\n      var size = A.length;\n      var I = jStat.identity(size);\n      jStat.arange(size - 1, -1, -1).forEach(function(i) {\n        jStat.sliceAssign(\n            I, { row: i }, jStat.divide(jStat.slice(I, { row: i }), A[i][i]));\n        jStat.sliceAssign(\n            A, { row: i }, jStat.divide(jStat.slice(A, { row: i }), A[i][i]));\n        jStat.arange(i).forEach(function(j) {\n          var c = jStat.multiply(A[j][i], -1);\n          var Aj = jStat.slice(A, { row: j });\n          var cAi = jStat.multiply(jStat.slice(A, { row: i }), c);\n          jStat.sliceAssign(A, { row: j }, jStat.add(Aj, cAi));\n          var Ij = jStat.slice(I, { row: j });\n          var cIi = jStat.multiply(jStat.slice(I, { row: i }), c);\n          jStat.sliceAssign(I, { row: j }, jStat.add(Ij, cIi));\n        })\n      });\n      return I;\n    }\n\n    function qr_solve(A, b){\n      var array_mode = false;\n      if (b[0].length === undefined) {\n        // [c1,c2,c3] mode\n        b = b.map(function(x){ return [x] });\n        array_mode = true;\n      }\n      var QR = jStat.QR(A);\n      var Q = QR[0];\n      var R = QR[1];\n      var attrs = A[0].length;\n      var Q1 = jStat.slice(Q,{col:{end:attrs}});\n      var R1 = jStat.slice(R,{row:{end:attrs}});\n      var RI = R_I(R1);\n\t  var Q2 = jStat.transpose(Q1);\n\n\t  if(Q2[0].length === undefined){\n\t\t  Q2 = [Q2]; // The confusing jStat.multifly implementation threat nature process again.\n\t  }\n\n      var x = jStat.multiply(jStat.multiply(RI, Q2), b);\n\n\t  if(x.length === undefined){\n\t\t  x = [[x]]; // The confusing jStat.multifly implementation threat nature process again.\n\t  }\n\n\n      if (array_mode)\n        return x.map(function(i){ return i[0] });\n      return x;\n    }\n\n    return qr_solve;\n  }()),\n\n  jacobi: function jacobi(a) {\n    var condition = 1;\n    var count = 0;\n    var n = a.length;\n    var e = jStat.identity(n, n);\n    var ev = [];\n    var b, i, j, p, q, maxim, theta, s;\n    // condition === 1 only if tolerance is not reached\n    while (condition === 1) {\n      count++;\n      maxim = a[0][1];\n      p = 0;\n      q = 1;\n      for (var i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          if (i != j) {\n            if (maxim < Math.abs(a[i][j])) {\n              maxim = Math.abs(a[i][j]);\n              p = i;\n              q = j;\n            }\n          }\n        }\n      }\n      if (a[p][p] === a[q][q])\n        theta = (a[p][q] > 0) ? Math.PI / 4 : -Math.PI / 4;\n      else\n        theta = Math.atan(2 * a[p][q] / (a[p][p] - a[q][q])) / 2;\n      s = jStat.identity(n, n);\n      s[p][p] = Math.cos(theta);\n      s[p][q] = -Math.sin(theta);\n      s[q][p] = Math.sin(theta);\n      s[q][q] = Math.cos(theta);\n      // eigen vector matrix\n      e = jStat.multiply(e, s);\n      b = jStat.multiply(jStat.multiply(jStat.inv(s), a), s);\n      a = b;\n      condition = 0;\n      for (var i = 1; i < n; i++) {\n        for (j = 1; j < n; j++) {\n          if (i != j && Math.abs(a[i][j]) > 0.001) {\n            condition = 1;\n          }\n        }\n      }\n    }\n    for (var i = 0; i < n; i++) ev.push(a[i][i]);\n    //returns both the eigenvalue and eigenmatrix\n    return [e, ev];\n  },\n\n  rungekutta: function rungekutta(f, h, p, t_j, u_j, order) {\n    var k1, k2, u_j1, k3, k4;\n    if (order === 2) {\n      while (t_j <= p) {\n        k1 = h * f(t_j, u_j);\n        k2 = h * f(t_j + h, u_j + k1);\n        u_j1 = u_j + (k1 + k2) / 2;\n        u_j = u_j1;\n        t_j = t_j + h;\n      }\n    }\n    if (order === 4) {\n      while (t_j <= p) {\n        k1 = h * f(t_j, u_j);\n        k2 = h * f(t_j + h / 2, u_j + k1 / 2);\n        k3 = h * f(t_j + h / 2, u_j + k2 / 2);\n        k4 = h * f(t_j +h, u_j + k3);\n        u_j1 = u_j + (k1 + 2 * k2 + 2 * k3 + k4) / 6;\n        u_j = u_j1;\n        t_j = t_j + h;\n      }\n    }\n    return u_j;\n  },\n\n  romberg: function romberg(f, a, b, order) {\n    var i = 0;\n    var h = (b - a) / 2;\n    var x = [];\n    var h1 = [];\n    var g = [];\n    var m, a1, j, k, I, d;\n    while (i < order / 2) {\n      I = f(a);\n      for (j = a, k = 0; j <= b; j = j + h, k++) x[k] = j;\n      m = x.length;\n      for (j = 1; j < m - 1; j++) {\n        I += (((j % 2) !== 0) ? 4 : 2) * f(x[j]);\n      }\n      I = (h / 3) * (I + f(b));\n      g[i] = I;\n      h /= 2;\n      i++;\n    }\n    a1 = g.length;\n    m = 1;\n    while (a1 !== 1) {\n      for (j = 0; j < a1 - 1; j++)\n      h1[j] = ((Math.pow(4, m)) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);\n      a1 = h1.length;\n      g = h1;\n      h1 = [];\n      m++;\n    }\n    return g;\n  },\n\n  richardson: function richardson(X, f, x, h) {\n    function pos(X, x) {\n      var i = 0;\n      var n = X.length;\n      var p;\n      for (; i < n; i++)\n        if (X[i] === x) p = i;\n      return p;\n    }\n    var n = X.length,\n    h_min = Math.abs(x - X[pos(X, x) + 1]),\n    i = 0,\n    g = [],\n    h1 = [],\n    y1, y2, m, a, j;\n    while (h >= h_min) {\n      y1 = pos(X, x + h);\n      y2 = pos(X, x);\n      g[i] = (f[y1] - 2 * f[y2] + f[2 * y2 - y1]) / (h * h);\n      h /= 2;\n      i++;\n    }\n    a = g.length;\n    m = 1;\n    while (a != 1) {\n      for (j = 0; j < a - 1; j++)\n      h1[j] = ((Math.pow(4, m)) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);\n      a = h1.length;\n      g = h1;\n      h1 = [];\n      m++;\n    }\n    return g;\n  },\n\n  simpson: function simpson(f, a, b, n) {\n    var h = (b - a) / n;\n    var I = f(a);\n    var x = [];\n    var j = a;\n    var k = 0;\n    var i = 1;\n    var m;\n    for (; j <= b; j = j + h, k++)\n      x[k] = j;\n    m = x.length;\n    for (; i < m - 1; i++) {\n      I += ((i % 2 !== 0) ? 4 : 2) * f(x[i]);\n    }\n    return (h / 3) * (I + f(b));\n  },\n\n  hermite: function hermite(X, F, dF, value) {\n    var n = X.length;\n    var p = 0;\n    var i = 0;\n    var l = [];\n    var dl = [];\n    var A = [];\n    var B = [];\n    var j;\n    for (; i < n; i++) {\n      l[i] = 1;\n      for (j = 0; j < n; j++) {\n        if (i != j) l[i] *= (value - X[j]) / (X[i] - X[j]);\n      }\n      dl[i] = 0;\n      for (j = 0; j < n; j++) {\n        if (i != j) dl[i] += 1 / (X [i] - X[j]);\n      }\n      A[i] = (1 - 2 * (value - X[i]) * dl[i]) * (l[i] * l[i]);\n      B[i] = (value - X[i]) * (l[i] * l[i]);\n      p += (A[i] * F[i] + B[i] * dF[i]);\n    }\n    return p;\n  },\n\n  lagrange: function lagrange(X, F, value) {\n    var p = 0;\n    var i = 0;\n    var j, l;\n    var n = X.length;\n    for (; i < n; i++) {\n      l = F[i];\n      for (j = 0; j < n; j++) {\n        // calculating the lagrange polynomial L_i\n        if (i != j) l *= (value - X[j]) / (X[i] - X[j]);\n      }\n      // adding the lagrange polynomials found above\n      p += l;\n    }\n    return p;\n  },\n\n  cubic_spline: function cubic_spline(X, F, value) {\n    var n = X.length;\n    var i = 0, j;\n    var A = [];\n    var B = [];\n    var alpha = [];\n    var c = [];\n    var h = [];\n    var b = [];\n    var d = [];\n    for (; i < n - 1; i++)\n      h[i] = X[i + 1] - X[i];\n    alpha[0] = 0;\n    for (var i = 1; i < n - 1; i++) {\n      alpha[i] = (3 / h[i]) * (F[i + 1] - F[i]) -\n          (3 / h[i-1]) * (F[i] - F[i-1]);\n    }\n    for (var i = 1; i < n - 1; i++) {\n      A[i] = [];\n      B[i] = [];\n      A[i][i-1] = h[i-1];\n      A[i][i] = 2 * (h[i - 1] + h[i]);\n      A[i][i+1] = h[i];\n      B[i][0] = alpha[i];\n    }\n    c = jStat.multiply(jStat.inv(A), B);\n    for (j = 0; j < n - 1; j++) {\n      b[j] = (F[j + 1] - F[j]) / h[j] - h[j] * (c[j + 1][0] + 2 * c[j][0]) / 3;\n      d[j] = (c[j + 1][0] - c[j][0]) / (3 * h[j]);\n    }\n    for (j = 0; j < n; j++) {\n      if (X[j] > value) break;\n    }\n    j -= 1;\n    return F[j] + (value - X[j]) * b[j] + jStat.sq(value-X[j]) *\n        c[j] + (value - X[j]) * jStat.sq(value - X[j]) * d[j];\n  },\n\n  gauss_quadrature: function gauss_quadrature() {\n    throw new Error('gauss_quadrature not yet implemented');\n  },\n\n  PCA: function PCA(X) {\n    var m = X.length;\n    var n = X[0].length;\n    var flag = false;\n    var i = 0;\n    var j, temp1;\n    var u = [];\n    var D = [];\n    var result = [];\n    var temp2 = [];\n    var Y = [];\n    var Bt = [];\n    var B = [];\n    var C = [];\n    var V = [];\n    var Vt = [];\n    for (var i = 0; i < m; i++) {\n      u[i] = jStat.sum(X[i]) / n;\n    }\n    for (var i = 0; i < n; i++) {\n      B[i] = [];\n      for(j = 0; j < m; j++) {\n        B[i][j] = X[j][i] - u[j];\n      }\n    }\n    B = jStat.transpose(B);\n    for (var i = 0; i < m; i++) {\n      C[i] = [];\n      for (j = 0; j < m; j++) {\n        C[i][j] = (jStat.dot([B[i]], [B[j]])) / (n - 1);\n      }\n    }\n    result = jStat.jacobi(C);\n    V = result[0];\n    D = result[1];\n    Vt = jStat.transpose(V);\n    for (var i = 0; i < D.length; i++) {\n      for (j = i; j < D.length; j++) {\n        if(D[i] < D[j])  {\n          temp1 = D[i];\n          D[i] = D[j];\n          D[j] = temp1;\n          temp2 = Vt[i];\n          Vt[i] = Vt[j];\n          Vt[j] = temp2;\n        }\n      }\n    }\n    Bt = jStat.transpose(B);\n    for (var i = 0; i < m; i++) {\n      Y[i] = [];\n      for (j = 0; j < Bt.length; j++) {\n        Y[i][j] = jStat.dot([Vt[i]], [Bt[j]]);\n      }\n    }\n    return [X, D, Vt, Y];\n  }\n});\n\n// extend jStat.fn with methods that require one argument\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jStat.fn[passfunc] = function(arg, func) {\n      var tmpthis = this;\n      // check for callback\n      if (func) {\n        setTimeout(function() {\n          func.call(tmpthis, jStat.fn[passfunc].call(tmpthis, arg));\n        }, 15);\n        return this;\n      }\n      if (typeof jStat[passfunc](this, arg) === 'number')\n        return jStat[passfunc](this, arg);\n      else\n        return jStat(jStat[passfunc](this, arg));\n    };\n  }(funcs[i]));\n}('add divide multiply subtract dot pow exp log abs norm angle'.split(' ')));\n\n}(jStat, Math));\n(function(jStat, Math) {\n\nvar slice = [].slice;\nvar isNumber = jStat.utils.isNumber;\nvar isArray = jStat.utils.isArray;\n\n// flag==true denotes use of sample standard deviation\n// Z Statistics\njStat.extend({\n  // 2 different parameter lists:\n  // (value, mean, sd)\n  // (value, array, flag)\n  zscore: function zscore() {\n    var args = slice.call(arguments);\n    if (isNumber(args[1])) {\n      return (args[0] - args[1]) / args[2];\n    }\n    return (args[0] - jStat.mean(args[1])) / jStat.stdev(args[1], args[2]);\n  },\n\n  // 3 different paramter lists:\n  // (value, mean, sd, sides)\n  // (zscore, sides)\n  // (value, array, sides, flag)\n  ztest: function ztest() {\n    var args = slice.call(arguments);\n    var z;\n    if (isArray(args[1])) {\n      // (value, array, sides, flag)\n      z = jStat.zscore(args[0],args[1],args[3]);\n      return (args[2] === 1) ?\n        (jStat.normal.cdf(-Math.abs(z), 0, 1)) :\n        (jStat.normal.cdf(-Math.abs(z), 0, 1)*2);\n    } else {\n      if (args.length > 2) {\n        // (value, mean, sd, sides)\n        z = jStat.zscore(args[0],args[1],args[2]);\n        return (args[3] === 1) ?\n          (jStat.normal.cdf(-Math.abs(z),0,1)) :\n          (jStat.normal.cdf(-Math.abs(z),0,1)* 2);\n      } else {\n        // (zscore, sides)\n        z = args[0];\n        return (args[1] === 1) ?\n          (jStat.normal.cdf(-Math.abs(z),0,1)) :\n          (jStat.normal.cdf(-Math.abs(z),0,1)*2);\n      }\n    }\n  }\n});\n\njStat.extend(jStat.fn, {\n  zscore: function zscore(value, flag) {\n    return (value - this.mean()) / this.stdev(flag);\n  },\n\n  ztest: function ztest(value, sides, flag) {\n    var zscore = Math.abs(this.zscore(value, flag));\n    return (sides === 1) ?\n      (jStat.normal.cdf(-zscore, 0, 1)) :\n      (jStat.normal.cdf(-zscore, 0, 1) * 2);\n  }\n});\n\n// T Statistics\njStat.extend({\n  // 2 parameter lists\n  // (value, mean, sd, n)\n  // (value, array)\n  tscore: function tscore() {\n    var args = slice.call(arguments);\n    return (args.length === 4) ?\n      ((args[0] - args[1]) / (args[2] / Math.sqrt(args[3]))) :\n      ((args[0] - jStat.mean(args[1])) /\n       (jStat.stdev(args[1], true) / Math.sqrt(args[1].length)));\n  },\n\n  // 3 different paramter lists:\n  // (value, mean, sd, n, sides)\n  // (tscore, n, sides)\n  // (value, array, sides)\n  ttest: function ttest() {\n    var args = slice.call(arguments);\n    var tscore;\n    if (args.length === 5) {\n      tscore = Math.abs(jStat.tscore(args[0], args[1], args[2], args[3]));\n      return (args[4] === 1) ?\n        (jStat.studentt.cdf(-tscore, args[3]-1)) :\n        (jStat.studentt.cdf(-tscore, args[3]-1)*2);\n    }\n    if (isNumber(args[1])) {\n      tscore = Math.abs(args[0])\n      return (args[2] == 1) ?\n        (jStat.studentt.cdf(-tscore, args[1]-1)) :\n        (jStat.studentt.cdf(-tscore, args[1]-1) * 2);\n    }\n    tscore = Math.abs(jStat.tscore(args[0], args[1]))\n    return (args[2] == 1) ?\n      (jStat.studentt.cdf(-tscore, args[1].length-1)) :\n      (jStat.studentt.cdf(-tscore, args[1].length-1) * 2);\n  }\n});\n\njStat.extend(jStat.fn, {\n  tscore: function tscore(value) {\n    return (value - this.mean()) / (this.stdev(true) / Math.sqrt(this.cols()));\n  },\n\n  ttest: function ttest(value, sides) {\n    return (sides === 1) ?\n      (1 - jStat.studentt.cdf(Math.abs(this.tscore(value)), this.cols()-1)) :\n      (jStat.studentt.cdf(-Math.abs(this.tscore(value)), this.cols()-1)*2);\n  }\n});\n\n// F Statistics\njStat.extend({\n  // Paramter list is as follows:\n  // (array1, array2, array3, ...)\n  // or it is an array of arrays\n  // array of arrays conversion\n  anovafscore: function anovafscore() {\n    var args = slice.call(arguments),\n    expVar, sample, sampMean, sampSampMean, tmpargs, unexpVar, i, j;\n    if (args.length === 1) {\n      tmpargs = new Array(args[0].length);\n      for (var i = 0; i < args[0].length; i++) {\n        tmpargs[i] = args[0][i];\n      }\n      args = tmpargs;\n    }\n    // 2 sample case\n    if (args.length === 2) {\n      return jStat.variance(args[0]) / jStat.variance(args[1]);\n    }\n    // Builds sample array\n    sample = new Array();\n    for (var i = 0; i < args.length; i++) {\n      sample = sample.concat(args[i]);\n    }\n    sampMean = jStat.mean(sample);\n    // Computes the explained variance\n    expVar = 0;\n    for (var i = 0; i < args.length; i++) {\n      expVar = expVar + args[i].length * Math.pow(jStat.mean(args[i]) - sampMean, 2);\n    }\n    expVar /= (args.length - 1);\n    // Computes unexplained variance\n    unexpVar = 0;\n    for (var i = 0; i < args.length; i++) {\n      sampSampMean = jStat.mean(args[i]);\n      for (j = 0; j < args[i].length; j++) {\n        unexpVar += Math.pow(args[i][j] - sampSampMean, 2);\n      }\n    }\n    unexpVar /= (sample.length - args.length);\n    return expVar / unexpVar;\n  },\n\n  // 2 different paramter setups\n  // (array1, array2, array3, ...)\n  // (anovafscore, df1, df2)\n  anovaftest: function anovaftest() {\n    var args = slice.call(arguments),\n    df1, df2, n, i;\n    if (isNumber(args[0])) {\n      return 1 - jStat.centralF.cdf(args[0], args[1], args[2]);\n    }\n    anovafscore = jStat.anovafscore(args);\n    df1 = args.length - 1;\n    n = 0;\n    for (var i = 0; i < args.length; i++) {\n      n = n + args[i].length;\n    }\n    df2 = n - df1 - 1;\n    return 1 - jStat.centralF.cdf(anovafscore, df1, df2);\n  },\n\n  ftest: function ftest(fscore, df1, df2) {\n    return 1 - jStat.centralF.cdf(fscore, df1, df2);\n  }\n});\n\njStat.extend(jStat.fn, {\n  anovafscore: function anovafscore() {\n    return jStat.anovafscore(this.toArray());\n  },\n\n  anovaftes: function anovaftes() {\n    var n = 0;\n    var i;\n    for (var i = 0; i < this.length; i++) {\n      n = n + this[i].length;\n    }\n    return jStat.ftest(this.anovafscore(), this.length - 1, n - this.length);\n  }\n});\n\n// Tukey's range test\njStat.extend({\n  // 2 parameter lists\n  // (mean1, mean2, n1, n2, sd)\n  // (array1, array2, sd)\n  qscore: function qscore() {\n    var args = slice.call(arguments);\n    var mean1, mean2, n1, n2, sd;\n    if (isNumber(args[0])) {\n        mean1 = args[0];\n        mean2 = args[1];\n        n1 = args[2];\n        n2 = args[3];\n        sd = args[4];\n    } else {\n        mean1 = jStat.mean(args[0]);\n        mean2 = jStat.mean(args[1]);\n        n1 = args[0].length;\n        n2 = args[1].length;\n        sd = args[2];\n    }\n    return Math.abs(mean1 - mean2) / (sd * Math.sqrt((1 / n1 + 1 / n2) / 2));\n  },\n\n  // 3 different parameter lists:\n  // (qscore, n, k)\n  // (mean1, mean2, n1, n2, sd, n, k)\n  // (array1, array2, sd, n, k)\n  qtest: function qtest() {\n    var args = slice.call(arguments);\n\n    var qscore;\n    if (args.length === 3) {\n      qscore = args[0];\n      args = args.slice(1);\n    } else if (args.length === 7) {\n      qscore = jStat.qscore(args[0], args[1], args[2], args[3], args[4]);\n      args = args.slice(5);\n    } else {\n      qscore = jStat.qscore(args[0], args[1], args[2]);\n      args = args.slice(3);\n    }\n\n    var n = args[0];\n    var k = args[1];\n\n    return 1 - jStat.tukey.cdf(qscore, k, n - k);\n  },\n\n  tukeyhsd: function tukeyhsd(arrays) {\n    var sd = jStat.pooledstdev(arrays);\n    var means = arrays.map(function (arr) {return jStat.mean(arr);});\n    var n = arrays.reduce(function (n, arr) {return n + arr.length;}, 0);\n\n    var results = [];\n    for (var i = 0; i < arrays.length; ++i) {\n        for (var j = i + 1; j < arrays.length; ++j) {\n            var p = jStat.qtest(means[i], means[j], arrays[i].length, arrays[j].length, sd, n, arrays.length);\n            results.push([[i, j], p]);\n        }\n    }\n\n    return results;\n  }\n});\n\n// Error Bounds\njStat.extend({\n  // 2 different parameter setups\n  // (value, alpha, sd, n)\n  // (value, alpha, array)\n  normalci: function normalci() {\n    var args = slice.call(arguments),\n    ans = new Array(2),\n    change;\n    if (args.length === 4) {\n      change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) *\n                        args[2] / Math.sqrt(args[3]));\n    } else {\n      change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) *\n                        jStat.stdev(args[2]) / Math.sqrt(args[2].length));\n    }\n    ans[0] = args[0] - change;\n    ans[1] = args[0] + change;\n    return ans;\n  },\n\n  // 2 different parameter setups\n  // (value, alpha, sd, n)\n  // (value, alpha, array)\n  tci: function tci() {\n    var args = slice.call(arguments),\n    ans = new Array(2),\n    change;\n    if (args.length === 4) {\n      change = Math.abs(jStat.studentt.inv(args[1] / 2, args[3] - 1) *\n                        args[2] / Math.sqrt(args[3]));\n    } else {\n      change = Math.abs(jStat.studentt.inv(args[1] / 2, args[2].length - 1) *\n                        jStat.stdev(args[2], true) / Math.sqrt(args[2].length));\n    }\n    ans[0] = args[0] - change;\n    ans[1] = args[0] + change;\n    return ans;\n  },\n\n  significant: function significant(pvalue, alpha) {\n    return pvalue < alpha;\n  }\n});\n\njStat.extend(jStat.fn, {\n  normalci: function normalci(value, alpha) {\n    return jStat.normalci(value, alpha, this.toArray());\n  },\n\n  tci: function tci(value, alpha) {\n    return jStat.tci(value, alpha, this.toArray());\n  }\n});\n\n// internal method for calculating the z-score for a difference of proportions test\nfunction differenceOfProportions(p1, n1, p2, n2) {\n  if (p1 > 1 || p2 > 1 || p1 <= 0 || p2 <= 0) {\n    throw new Error(\"Proportions should be greater than 0 and less than 1\")\n  }\n  var pooled = (p1 * n1 + p2 * n2) / (n1 + n2);\n  var se = Math.sqrt(pooled * (1 - pooled) * ((1/n1) + (1/n2)));\n  return (p1 - p2) / se;\n}\n\n// Difference of Proportions\njStat.extend(jStat.fn, {\n  oneSidedDifferenceOfProportions: function oneSidedDifferenceOfProportions(p1, n1, p2, n2) {\n    var z = differenceOfProportions(p1, n1, p2, n2);\n    return jStat.ztest(z, 1);\n  },\n\n  twoSidedDifferenceOfProportions: function twoSidedDifferenceOfProportions(p1, n1, p2, n2) {\n    var z = differenceOfProportions(p1, n1, p2, n2);\n    return jStat.ztest(z, 2);\n  }\n});\n\n}(jStat, Math));\njStat.models = (function(){\n\n  function sub_regress(endog, exog) {\n    return ols(endog, exog);\n  }\n\n  function sub_regress(exog) {\n    var var_count = exog[0].length;\n    var modelList = jStat.arange(var_count).map(function(endog_index) {\n      var exog_index =\n          jStat.arange(var_count).filter(function(i){return i!==endog_index});\n      return ols(jStat.col(exog, endog_index).map(function(x){ return x[0] }),\n                 jStat.col(exog, exog_index))\n    });\n    return modelList;\n  }\n\n  // do OLS model regress\n  // exog have include const columns ,it will not generate it .In fact, exog is\n  // \"design matrix\" look at\n  //https://en.wikipedia.org/wiki/Design_matrix\n  function ols(endog, exog) {\n    var nobs = endog.length;\n    var df_model = exog[0].length - 1;\n    var df_resid = nobs-df_model - 1;\n    var coef = jStat.lstsq(exog, endog);\n    var predict =\n        jStat.multiply(exog, coef.map(function(x) { return [x] }))\n            .map(function(p) { return p[0] });\n    var resid = jStat.subtract(endog, predict);\n    var ybar = jStat.mean(endog);\n    // constant cause problem\n    // var SST = jStat.sum(endog.map(function(y) {\n    //   return Math.pow(y-ybar,2);\n    // }));\n    var SSE = jStat.sum(predict.map(function(f) {\n      return Math.pow(f - ybar, 2);\n    }));\n    var SSR = jStat.sum(endog.map(function(y, i) {\n      return Math.pow(y - predict[i], 2);\n    }));\n    var SST = SSE + SSR;\n    var R2 = (SSE / SST);\n    return {\n        exog:exog,\n        endog:endog,\n        nobs:nobs,\n        df_model:df_model,\n        df_resid:df_resid,\n        coef:coef,\n        predict:predict,\n        resid:resid,\n        ybar:ybar,\n        SST:SST,\n        SSE:SSE,\n        SSR:SSR,\n        R2:R2\n    };\n  }\n\n  // H0: b_I=0\n  // H1: b_I!=0\n  function t_test(model) {\n    var subModelList = sub_regress(model.exog);\n    //var sigmaHat=jStat.stdev(model.resid);\n    var sigmaHat = Math.sqrt(model.SSR / (model.df_resid));\n    var seBetaHat = subModelList.map(function(mod) {\n      var SST = mod.SST;\n      var R2 = mod.R2;\n      return sigmaHat / Math.sqrt(SST * (1 - R2));\n    });\n    var tStatistic = model.coef.map(function(coef, i) {\n      return (coef - 0) / seBetaHat[i];\n    });\n    var pValue = tStatistic.map(function(t) {\n      var leftppf = jStat.studentt.cdf(t, model.df_resid);\n      return (leftppf > 0.5 ? 1 - leftppf : leftppf) * 2;\n    });\n    var c = jStat.studentt.inv(0.975, model.df_resid);\n    var interval95 = model.coef.map(function(coef, i) {\n      var d = c * seBetaHat[i];\n      return [coef - d, coef + d];\n    })\n    return {\n        se: seBetaHat,\n        t: tStatistic,\n        p: pValue,\n        sigmaHat: sigmaHat,\n        interval95: interval95\n    };\n  }\n\n  function F_test(model) {\n    var F_statistic =\n        (model.R2 / model.df_model) / ((1 - model.R2) / model.df_resid);\n    var fcdf = function(x, n1, n2) {\n      return jStat.beta.cdf(x / (n2 / n1 + x), n1 / 2, n2 / 2)\n    }\n    var pvalue = 1 - fcdf(F_statistic, model.df_model, model.df_resid);\n    return { F_statistic: F_statistic, pvalue: pvalue };\n  }\n\n  function ols_wrap(endog, exog) {\n    var model = ols(endog,exog);\n    var ttest = t_test(model);\n    var ftest = F_test(model);\n    // Provide the Wherry / Ezekiel / McNemar / Cohen Adjusted R^2\n    // Which matches the 'adjusted R^2' provided by R's lm package\n    var adjust_R2 =\n        1 - (1 - model.R2) * ((model.nobs - 1) / (model.df_resid));\n    model.t = ttest;\n    model.f = ftest;\n    model.adjust_R2 = adjust_R2;\n    return model;\n  }\n\n  return { ols: ols_wrap };\n})();\n  // Make it compatible with previous version.\n  jStat.jStat = jStat;\n\n  return jStat;\n});\n","var utils = require('./utils');\nvar error = require('./error');\n\nexports.UNIQUE = function () {\n  var result = [];\n  for (var i = 0; i < arguments.length; ++i) {\n    var hasElement = false;\n    var element    = arguments[i];\n\n    // Check if we've already seen this element.\n    for (var j = 0; j < result.length; ++j) {\n      hasElement = result[j] === element;\n      if (hasElement) { break; }\n    }\n\n    // If we did not find it, add it to the result.\n    if (!hasElement) {\n      result.push(element);\n    }\n  }\n  return result;\n};\n\nexports.FLATTEN = utils.flatten;\n\nexports.ARGS2ARRAY = function () {\n  return Array.prototype.slice.call(arguments, 0);\n};\n\nexports.REFERENCE = function (context, reference) {\n  if (!arguments.length) {\n    return error.error;\n  }\n  try {\n    var path = reference.split('.');\n    var result = context;\n    for (var i = 0; i < path.length; ++i) {\n      var step = path[i];\n      if (step[step.length - 1] === ']') {\n        var opening = step.indexOf('[');\n        var index = step.substring(opening + 1, step.length - 1);\n        result = result[step.substring(0, opening)][index];\n      } else {\n        result = result[step];\n      }\n    }\n    return result;\n  } catch (error) {}\n};\n\nexports.JOIN = function (array, separator) {\n  return array.join(separator);\n};\n\nexports.NUMBERS = function () {\n  var possibleNumbers = utils.flatten(arguments);\n  return possibleNumbers.filter(function (el) {\n    return typeof el === 'number';\n  });\n};","var error = require('./error');\nvar jStat = require('jStat').jStat;\nvar text = require('./text');\nvar utils = require('./utils');\nvar bessel = require('bessel');\n\nfunction isValidBinaryNumber(number) {\n  return (/^[01]{1,10}$/).test(number);\n}\n\nexports.BESSELI = function(x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n\n  return bessel.besseli(x, n);\n};\n\nexports.BESSELJ = function(x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n\n  return bessel.besselj(x, n);\n};\n\nexports.BESSELK = function(x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n\n  return bessel.besselk(x, n);\n};\n\nexports.BESSELY = function(x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n\n  return bessel.bessely(x, n);\n};\n\nexports.BIN2DEC = function(number) {\n  // Return error if number is not binary or contains more than 10 characters (10 digits)\n  if (!isValidBinaryNumber(number)) {\n    return error.num;\n  }\n\n  // Convert binary number to decimal\n  var result = parseInt(number, 2);\n\n  // Handle negative numbers\n  var stringified = number.toString();\n  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\n    return parseInt(stringified.substring(1), 2) - 512;\n  } else {\n    return result;\n  }\n};\n\n\nexports.BIN2HEX = function(number, places) {\n  // Return error if number is not binary or contains more than 10 characters (10 digits)\n  if (!isValidBinaryNumber(number)) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character hexadecimal number if number is negative\n  var stringified = number.toString();\n  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\n    return (1099511627264 + parseInt(stringified.substring(1), 2)).toString(16);\n  }\n\n  // Convert binary number to hexadecimal\n  var result = parseInt(number, 2).toString(16);\n\n  // Return hexadecimal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.BIN2OCT = function(number, places) {\n  // Return error if number is not binary or contains more than 10 characters (10 digits)\n  if (!isValidBinaryNumber(number)) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character octal number if number is negative\n  var stringified = number.toString();\n  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\n    return (1073741312 + parseInt(stringified.substring(1), 2)).toString(8);\n  }\n\n  // Convert binary number to octal\n  var result = parseInt(number, 2).toString(8);\n\n  // Return octal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.BITAND = function(number1, number2) {\n  // Return error if either number is a non-numeric value\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return error if either number is less than 0\n  if (number1 < 0 || number2 < 0) {\n    return error.num;\n  }\n\n  // Return error if either number is a non-integer\n  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\n    return error.num;\n  }\n\n  // Return error if either number is greater than (2^48)-1\n  if (number1 > 281474976710655 || number2 > 281474976710655) {\n    return error.num;\n  }\n\n  // Return bitwise AND of two numbers\n  return number1 & number2;\n};\n\nexports.BITLSHIFT = function(number, shift) {\n  number = utils.parseNumber(number);\n  shift = utils.parseNumber(shift);\n  if (utils.anyIsError(number, shift)) {\n    return error.value;\n  }\n\n  // Return error if number is less than 0\n  if (number < 0) {\n    return error.num;\n  }\n\n  // Return error if number is a non-integer\n  if (Math.floor(number) !== number) {\n    return error.num;\n  }\n\n  // Return error if number is greater than (2^48)-1\n  if (number > 281474976710655) {\n    return error.num;\n  }\n\n  // Return error if the absolute value of shift is greater than 53\n  if (Math.abs(shift) > 53) {\n    return error.num;\n  }\n\n  // Return number shifted by shift bits to the left or to the right if shift is negative\n  return (shift >= 0) ? number << shift : number >> -shift;\n};\n\nexports.BITOR = function(number1, number2) {\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return error if either number is less than 0\n  if (number1 < 0 || number2 < 0) {\n    return error.num;\n  }\n\n  // Return error if either number is a non-integer\n  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\n    return error.num;\n  }\n\n  // Return error if either number is greater than (2^48)-1\n  if (number1 > 281474976710655 || number2 > 281474976710655) {\n    return error.num;\n  }\n\n  // Return bitwise OR of two numbers\n  return number1 | number2;\n};\n\nexports.BITRSHIFT = function(number, shift) {\n  number = utils.parseNumber(number);\n  shift = utils.parseNumber(shift);\n  if (utils.anyIsError(number, shift)) {\n    return error.value;\n  }\n\n  // Return error if number is less than 0\n  if (number < 0) {\n    return error.num;\n  }\n\n  // Return error if number is a non-integer\n  if (Math.floor(number) !== number) {\n    return error.num;\n  }\n\n  // Return error if number is greater than (2^48)-1\n  if (number > 281474976710655) {\n    return error.num;\n  }\n\n  // Return error if the absolute value of shift is greater than 53\n  if (Math.abs(shift) > 53) {\n    return error.num;\n  }\n\n  // Return number shifted by shift bits to the right or to the left if shift is negative\n  return (shift >= 0) ? number >> shift : number << -shift;\n};\n\nexports.BITXOR = function(number1, number2) {\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return error if either number is less than 0\n  if (number1 < 0 || number2 < 0) {\n    return error.num;\n  }\n\n  // Return error if either number is a non-integer\n  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\n    return error.num;\n  }\n\n  // Return error if either number is greater than (2^48)-1\n  if (number1 > 281474976710655 || number2 > 281474976710655) {\n    return error.num;\n  }\n\n  // Return bitwise XOR of two numbers\n  return number1 ^ number2;\n};\n\nexports.COMPLEX = function(real, imaginary, suffix) {\n  real = utils.parseNumber(real);\n  imaginary = utils.parseNumber(imaginary);\n  if (utils.anyIsError(real, imaginary)) {\n    return real;\n  }\n\n  // Set suffix\n  suffix = (suffix === undefined) ? 'i' : suffix;\n\n  // Return error if suffix is neither \"i\" nor \"j\"\n  if (suffix !== 'i' && suffix !== 'j') {\n    return error.value;\n  }\n\n  // Return complex number\n  if (real === 0 && imaginary === 0) {\n    return 0;\n  } else if (real === 0) {\n    return (imaginary === 1) ? suffix : imaginary.toString() + suffix;\n  } else if (imaginary === 0) {\n    return real.toString();\n  } else {\n    var sign = (imaginary > 0) ? '+' : '';\n    return real.toString() + sign + ((imaginary === 1) ? suffix : imaginary.toString() + suffix);\n  }\n};\n\nexports.CONVERT = function(number, from_unit, to_unit) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // List of units supported by CONVERT and units defined by the International System of Units\n  // [Name, Symbol, Alternate symbols, Quantity, ISU, CONVERT, Conversion ratio]\n  var units = [\n    [\"a.u. of action\", \"?\", null, \"action\", false, false, 1.05457168181818e-34],\n    [\"a.u. of charge\", \"e\", null, \"electric_charge\", false, false, 1.60217653141414e-19],\n    [\"a.u. of energy\", \"Eh\", null, \"energy\", false, false, 4.35974417757576e-18],\n    [\"a.u. of length\", \"a?\", null, \"length\", false, false, 5.29177210818182e-11],\n    [\"a.u. of mass\", \"m?\", null, \"mass\", false, false, 9.10938261616162e-31],\n    [\"a.u. of time\", \"?/Eh\", null, \"time\", false, false, 2.41888432650516e-17],\n    [\"admiralty knot\", \"admkn\", null, \"speed\", false, true, 0.514773333],\n    [\"ampere\", \"A\", null, \"electric_current\", true, false, 1],\n    [\"ampere per meter\", \"A/m\", null, \"magnetic_field_intensity\", true, false, 1],\n    [\"ångström\", \"Å\", [\"ang\"], \"length\", false, true, 1e-10],\n    [\"are\", \"ar\", null, \"area\", false, true, 100],\n    [\"astronomical unit\", \"ua\", null, \"length\", false, false, 1.49597870691667e-11],\n    [\"bar\", \"bar\", null, \"pressure\", false, false, 100000],\n    [\"barn\", \"b\", null, \"area\", false, false, 1e-28],\n    [\"becquerel\", \"Bq\", null, \"radioactivity\", true, false, 1],\n    [\"bit\", \"bit\", [\"b\"], \"information\", false, true, 1],\n    [\"btu\", \"BTU\", [\"btu\"], \"energy\", false, true, 1055.05585262],\n    [\"byte\", \"byte\", null, \"information\", false, true, 8],\n    [\"candela\", \"cd\", null, \"luminous_intensity\", true, false, 1],\n    [\"candela per square metre\", \"cd/m?\", null, \"luminance\", true, false, 1],\n    [\"coulomb\", \"C\", null, \"electric_charge\", true, false, 1],\n    [\"cubic ångström\", \"ang3\", [\"ang^3\"], \"volume\", false, true, 1e-30],\n    [\"cubic foot\", \"ft3\", [\"ft^3\"], \"volume\", false, true, 0.028316846592],\n    [\"cubic inch\", \"in3\", [\"in^3\"], \"volume\", false, true, 0.000016387064],\n    [\"cubic light-year\", \"ly3\", [\"ly^3\"], \"volume\", false, true, 8.46786664623715e-47],\n    [\"cubic metre\", \"m?\", null, \"volume\", true, true, 1],\n    [\"cubic mile\", \"mi3\", [\"mi^3\"], \"volume\", false, true, 4168181825.44058],\n    [\"cubic nautical mile\", \"Nmi3\", [\"Nmi^3\"], \"volume\", false, true, 6352182208],\n    [\"cubic Pica\", \"Pica3\", [\"Picapt3\", \"Pica^3\", \"Picapt^3\"], \"volume\", false, true, 7.58660370370369e-8],\n    [\"cubic yard\", \"yd3\", [\"yd^3\"], \"volume\", false, true, 0.764554857984],\n    [\"cup\", \"cup\", null, \"volume\", false, true, 0.0002365882365],\n    [\"dalton\", \"Da\", [\"u\"], \"mass\", false, false, 1.66053886282828e-27],\n    [\"day\", \"d\", [\"day\"], \"time\", false, true, 86400],\n    [\"degree\", \"°\", null, \"angle\", false, false, 0.0174532925199433],\n    [\"degrees Rankine\", \"Rank\", null, \"temperature\", false, true, 0.555555555555556],\n    [\"dyne\", \"dyn\", [\"dy\"], \"force\", false, true, 0.00001],\n    [\"electronvolt\", \"eV\", [\"ev\"], \"energy\", false, true, 1.60217656514141],\n    [\"ell\", \"ell\", null, \"length\", false, true, 1.143],\n    [\"erg\", \"erg\", [\"e\"], \"energy\", false, true, 1e-7],\n    [\"farad\", \"F\", null, \"electric_capacitance\", true, false, 1],\n    [\"fluid ounce\", \"oz\", null, \"volume\", false, true, 0.0000295735295625],\n    [\"foot\", \"ft\", null, \"length\", false, true, 0.3048],\n    [\"foot-pound\", \"flb\", null, \"energy\", false, true, 1.3558179483314],\n    [\"gal\", \"Gal\", null, \"acceleration\", false, false, 0.01],\n    [\"gallon\", \"gal\", null, \"volume\", false, true, 0.003785411784],\n    [\"gauss\", \"G\", [\"ga\"], \"magnetic_flux_density\", false, true, 1],\n    [\"grain\", \"grain\", null, \"mass\", false, true, 0.0000647989],\n    [\"gram\", \"g\", null, \"mass\", false, true, 0.001],\n    [\"gray\", \"Gy\", null, \"absorbed_dose\", true, false, 1],\n    [\"gross registered ton\", \"GRT\", [\"regton\"], \"volume\", false, true, 2.8316846592],\n    [\"hectare\", \"ha\", null, \"area\", false, true, 10000],\n    [\"henry\", \"H\", null, \"inductance\", true, false, 1],\n    [\"hertz\", \"Hz\", null, \"frequency\", true, false, 1],\n    [\"horsepower\", \"HP\", [\"h\"], \"power\", false, true, 745.69987158227],\n    [\"horsepower-hour\", \"HPh\", [\"hh\", \"hph\"], \"energy\", false, true, 2684519.538],\n    [\"hour\", \"h\", [\"hr\"], \"time\", false, true, 3600],\n    [\"imperial gallon (U.K.)\", \"uk_gal\", null, \"volume\", false, true, 0.00454609],\n    [\"imperial hundredweight\", \"lcwt\", [\"uk_cwt\", \"hweight\"], \"mass\", false, true, 50.802345],\n    [\"imperial quart (U.K)\", \"uk_qt\", null, \"volume\", false, true, 0.0011365225],\n    [\"imperial ton\", \"brton\", [\"uk_ton\", \"LTON\"], \"mass\", false, true, 1016.046909],\n    [\"inch\", \"in\", null, \"length\", false, true, 0.0254],\n    [\"international acre\", \"uk_acre\", null, \"area\", false, true, 4046.8564224],\n    [\"IT calorie\", \"cal\", null, \"energy\", false, true, 4.1868],\n    [\"joule\", \"J\", null, \"energy\", true, true, 1],\n    [\"katal\", \"kat\", null, \"catalytic_activity\", true, false, 1],\n    [\"kelvin\", \"K\", [\"kel\"], \"temperature\", true, true, 1],\n    [\"kilogram\", \"kg\", null, \"mass\", true, true, 1],\n    [\"knot\", \"kn\", null, \"speed\", false, true, 0.514444444444444],\n    [\"light-year\", \"ly\", null, \"length\", false, true, 9460730472580800],\n    [\"litre\", \"L\", [\"l\", \"lt\"], \"volume\", false, true, 0.001],\n    [\"lumen\", \"lm\", null, \"luminous_flux\", true, false, 1],\n    [\"lux\", \"lx\", null, \"illuminance\", true, false, 1],\n    [\"maxwell\", \"Mx\", null, \"magnetic_flux\", false, false, 1e-18],\n    [\"measurement ton\", \"MTON\", null, \"volume\", false, true, 1.13267386368],\n    [\"meter per hour\", \"m/h\", [\"m/hr\"], \"speed\", false, true, 0.00027777777777778],\n    [\"meter per second\", \"m/s\", [\"m/sec\"], \"speed\", true, true, 1],\n    [\"meter per second squared\", \"m?s??\", null, \"acceleration\", true, false, 1],\n    [\"parsec\", \"pc\", [\"parsec\"], \"length\", false, true, 30856775814671900],\n    [\"meter squared per second\", \"m?/s\", null, \"kinematic_viscosity\", true, false, 1],\n    [\"metre\", \"m\", null, \"length\", true, true, 1],\n    [\"miles per hour\", \"mph\", null, \"speed\", false, true, 0.44704],\n    [\"millimetre of mercury\", \"mmHg\", null, \"pressure\", false, false, 133.322],\n    [\"minute\", \"?\", null, \"angle\", false, false, 0.000290888208665722],\n    [\"minute\", \"min\", [\"mn\"], \"time\", false, true, 60],\n    [\"modern teaspoon\", \"tspm\", null, \"volume\", false, true, 0.000005],\n    [\"mole\", \"mol\", null, \"amount_of_substance\", true, false, 1],\n    [\"morgen\", \"Morgen\", null, \"area\", false, true, 2500],\n    [\"n.u. of action\", \"?\", null, \"action\", false, false, 1.05457168181818e-34],\n    [\"n.u. of mass\", \"m?\", null, \"mass\", false, false, 9.10938261616162e-31],\n    [\"n.u. of speed\", \"c?\", null, \"speed\", false, false, 299792458],\n    [\"n.u. of time\", \"?/(me?c??)\", null, \"time\", false, false, 1.28808866778687e-21],\n    [\"nautical mile\", \"M\", [\"Nmi\"], \"length\", false, true, 1852],\n    [\"newton\", \"N\", null, \"force\", true, true, 1],\n    [\"œrsted\", \"Oe \", null, \"magnetic_field_intensity\", false, false, 79.5774715459477],\n    [\"ohm\", \"Ω\", null, \"electric_resistance\", true, false, 1],\n    [\"ounce mass\", \"ozm\", null, \"mass\", false, true, 0.028349523125],\n    [\"pascal\", \"Pa\", null, \"pressure\", true, false, 1],\n    [\"pascal second\", \"Pa?s\", null, \"dynamic_viscosity\", true, false, 1],\n    [\"pferdestärke\", \"PS\", null, \"power\", false, true, 735.49875],\n    [\"phot\", \"ph\", null, \"illuminance\", false, false, 0.0001],\n    [\"pica (1/6 inch)\", \"pica\", null, \"length\", false, true, 0.00035277777777778],\n    [\"pica (1/72 inch)\", \"Pica\", [\"Picapt\"], \"length\", false, true, 0.00423333333333333],\n    [\"poise\", \"P\", null, \"dynamic_viscosity\", false, false, 0.1],\n    [\"pond\", \"pond\", null, \"force\", false, true, 0.00980665],\n    [\"pound force\", \"lbf\", null, \"force\", false, true, 4.4482216152605],\n    [\"pound mass\", \"lbm\", null, \"mass\", false, true, 0.45359237],\n    [\"quart\", \"qt\", null, \"volume\", false, true, 0.000946352946],\n    [\"radian\", \"rad\", null, \"angle\", true, false, 1],\n    [\"second\", \"?\", null, \"angle\", false, false, 0.00000484813681109536],\n    [\"second\", \"s\", [\"sec\"], \"time\", true, true, 1],\n    [\"short hundredweight\", \"cwt\", [\"shweight\"], \"mass\", false, true, 45.359237],\n    [\"siemens\", \"S\", null, \"electrical_conductance\", true, false, 1],\n    [\"sievert\", \"Sv\", null, \"equivalent_dose\", true, false, 1],\n    [\"slug\", \"sg\", null, \"mass\", false, true, 14.59390294],\n    [\"square ångström\", \"ang2\", [\"ang^2\"], \"area\", false, true, 1e-20],\n    [\"square foot\", \"ft2\", [\"ft^2\"], \"area\", false, true, 0.09290304],\n    [\"square inch\", \"in2\", [\"in^2\"], \"area\", false, true, 0.00064516],\n    [\"square light-year\", \"ly2\", [\"ly^2\"], \"area\", false, true, 8.95054210748189e+31],\n    [\"square meter\", \"m?\", null, \"area\", true, true, 1],\n    [\"square mile\", \"mi2\", [\"mi^2\"], \"area\", false, true, 2589988.110336],\n    [\"square nautical mile\", \"Nmi2\", [\"Nmi^2\"], \"area\", false, true, 3429904],\n    [\"square Pica\", \"Pica2\", [\"Picapt2\", \"Pica^2\", \"Picapt^2\"], \"area\", false, true, 0.00001792111111111],\n    [\"square yard\", \"yd2\", [\"yd^2\"], \"area\", false, true, 0.83612736],\n    [\"statute mile\", \"mi\", null, \"length\", false, true, 1609.344],\n    [\"steradian\", \"sr\", null, \"solid_angle\", true, false, 1],\n    [\"stilb\", \"sb\", null, \"luminance\", false, false, 0.0001],\n    [\"stokes\", \"St\", null, \"kinematic_viscosity\", false, false, 0.0001],\n    [\"stone\", \"stone\", null, \"mass\", false, true, 6.35029318],\n    [\"tablespoon\", \"tbs\", null, \"volume\", false, true, 0.0000147868],\n    [\"teaspoon\", \"tsp\", null, \"volume\", false, true, 0.00000492892],\n    [\"tesla\", \"T\", null, \"magnetic_flux_density\", true, true, 1],\n    [\"thermodynamic calorie\", \"c\", null, \"energy\", false, true, 4.184],\n    [\"ton\", \"ton\", null, \"mass\", false, true, 907.18474],\n    [\"tonne\", \"t\", null, \"mass\", false, false, 1000],\n    [\"U.K. pint\", \"uk_pt\", null, \"volume\", false, true, 0.00056826125],\n    [\"U.S. bushel\", \"bushel\", null, \"volume\", false, true, 0.03523907],\n    [\"U.S. oil barrel\", \"barrel\", null, \"volume\", false, true, 0.158987295],\n    [\"U.S. pint\", \"pt\", [\"us_pt\"], \"volume\", false, true, 0.000473176473],\n    [\"U.S. survey mile\", \"survey_mi\", null, \"length\", false, true, 1609.347219],\n    [\"U.S. survey/statute acre\", \"us_acre\", null, \"area\", false, true, 4046.87261],\n    [\"volt\", \"V\", null, \"voltage\", true, false, 1],\n    [\"watt\", \"W\", null, \"power\", true, true, 1],\n    [\"watt-hour\", \"Wh\", [\"wh\"], \"energy\", false, true, 3600],\n    [\"weber\", \"Wb\", null, \"magnetic_flux\", true, false, 1],\n    [\"yard\", \"yd\", null, \"length\", false, true, 0.9144],\n    [\"year\", \"yr\", null, \"time\", false, true, 31557600]\n  ];\n\n  // Binary prefixes\n  // [Name, Prefix power of 2 value, Previx value, Abbreviation, Derived from]\n  var binary_prefixes = {\n    Yi: [\"yobi\", 80, 1208925819614629174706176, \"Yi\", \"yotta\"],\n    Zi: [\"zebi\", 70, 1180591620717411303424, \"Zi\", \"zetta\"],\n    Ei: [\"exbi\", 60, 1152921504606846976, \"Ei\", \"exa\"],\n    Pi: [\"pebi\", 50, 1125899906842624, \"Pi\", \"peta\"],\n    Ti: [\"tebi\", 40, 1099511627776, \"Ti\", \"tera\"],\n    Gi: [\"gibi\", 30, 1073741824, \"Gi\", \"giga\"],\n    Mi: [\"mebi\", 20, 1048576, \"Mi\", \"mega\"],\n    ki: [\"kibi\", 10, 1024, \"ki\", \"kilo\"]\n  };\n\n  // Unit prefixes\n  // [Name, Multiplier, Abbreviation]\n  var unit_prefixes = {\n    Y: [\"yotta\", 1e+24, \"Y\"],\n    Z: [\"zetta\", 1e+21, \"Z\"],\n    E: [\"exa\", 1e+18, \"E\"],\n    P: [\"peta\", 1e+15, \"P\"],\n    T: [\"tera\", 1e+12, \"T\"],\n    G: [\"giga\", 1e+09, \"G\"],\n    M: [\"mega\", 1e+06, \"M\"],\n    k: [\"kilo\", 1e+03, \"k\"],\n    h: [\"hecto\", 1e+02, \"h\"],\n    e: [\"dekao\", 1e+01, \"e\"],\n    d: [\"deci\", 1e-01, \"d\"],\n    c: [\"centi\", 1e-02, \"c\"],\n    m: [\"milli\", 1e-03, \"m\"],\n    u: [\"micro\", 1e-06, \"u\"],\n    n: [\"nano\", 1e-09, \"n\"],\n    p: [\"pico\", 1e-12, \"p\"],\n    f: [\"femto\", 1e-15, \"f\"],\n    a: [\"atto\", 1e-18, \"a\"],\n    z: [\"zepto\", 1e-21, \"z\"],\n    y: [\"yocto\", 1e-24, \"y\"]\n  };\n\n  // Initialize units and multipliers\n  var from = null;\n  var to = null;\n  var base_from_unit = from_unit;\n  var base_to_unit = to_unit;\n  var from_multiplier = 1;\n  var to_multiplier = 1;\n  var alt;\n\n  // Lookup from and to units\n  for (var i = 0; i < units.length; i++) {\n    alt = (units[i][2] === null) ? [] : units[i][2];\n    if (units[i][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {\n      from = units[i];\n    }\n    if (units[i][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {\n      to = units[i];\n    }\n  }\n\n  // Lookup from prefix\n  if (from === null) {\n    var from_binary_prefix = binary_prefixes[from_unit.substring(0, 2)];\n    var from_unit_prefix = unit_prefixes[from_unit.substring(0, 1)];\n\n    // Handle dekao unit prefix (only unit prefix with two characters)\n    if (from_unit.substring(0, 2) === 'da') {\n      from_unit_prefix = [\"dekao\", 1e+01, \"da\"];\n    }\n\n    // Handle binary prefixes first (so that 'Yi' is processed before 'Y')\n    if (from_binary_prefix) {\n      from_multiplier = from_binary_prefix[2];\n      base_from_unit = from_unit.substring(2);\n    } else if (from_unit_prefix) {\n      from_multiplier = from_unit_prefix[1];\n      base_from_unit = from_unit.substring(from_unit_prefix[2].length);\n    }\n\n    // Lookup from unit\n    for (var j = 0; j < units.length; j++) {\n      alt = (units[j][2] === null) ? [] : units[j][2];\n      if (units[j][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {\n        from = units[j];\n      }\n    }\n  }\n\n  // Lookup to prefix\n  if (to === null) {\n    var to_binary_prefix = binary_prefixes[to_unit.substring(0, 2)];\n    var to_unit_prefix = unit_prefixes[to_unit.substring(0, 1)];\n\n    // Handle dekao unit prefix (only unit prefix with two characters)\n    if (to_unit.substring(0, 2) === 'da') {\n      to_unit_prefix = [\"dekao\", 1e+01, \"da\"];\n    }\n\n    // Handle binary prefixes first (so that 'Yi' is processed before 'Y')\n    if (to_binary_prefix) {\n      to_multiplier = to_binary_prefix[2];\n      base_to_unit = to_unit.substring(2);\n    } else if (to_unit_prefix) {\n      to_multiplier = to_unit_prefix[1];\n      base_to_unit = to_unit.substring(to_unit_prefix[2].length);\n    }\n\n    // Lookup to unit\n    for (var k = 0; k < units.length; k++) {\n      alt = (units[k][2] === null) ? [] : units[k][2];\n      if (units[k][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {\n        to = units[k];\n      }\n    }\n  }\n\n  // Return error if a unit does not exist\n  if (from === null || to === null) {\n    return error.na;\n  }\n\n  // Return error if units represent different quantities\n  if (from[3] !== to[3]) {\n    return error.na;\n  }\n\n  // Return converted number\n  return number * from[6] * from_multiplier / (to[6] * to_multiplier);\n};\n\nexports.DEC2BIN = function(number, places) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // Return error if number is not decimal, is lower than -512, or is greater than 511\n  if (!/^-?[0-9]{1,3}$/.test(number) || number < -512 || number > 511) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character binary number if number is negative\n  if (number < 0) {\n    return '1' + text.REPT('0', 9 - (512 + number).toString(2).length) + (512 + number).toString(2);\n  }\n\n  // Convert decimal number to binary\n  var result = parseInt(number, 10).toString(2);\n\n  // Return binary number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.DEC2HEX = function(number, places) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // Return error if number is not decimal, is lower than -549755813888, or is greater than 549755813887\n  if (!/^-?[0-9]{1,12}$/.test(number) || number < -549755813888 || number > 549755813887) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character hexadecimal number if number is negative\n  if (number < 0) {\n    return (1099511627776 + number).toString(16);\n  }\n\n  // Convert decimal number to hexadecimal\n  var result = parseInt(number, 10).toString(16);\n\n  // Return hexadecimal number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.DEC2OCT = function(number, places) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // Return error if number is not decimal, is lower than -549755813888, or is greater than 549755813887\n  if (!/^-?[0-9]{1,9}$/.test(number) || number < -536870912 || number > 536870911) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character octal number if number is negative\n  if (number < 0) {\n    return (1073741824 + number).toString(8);\n  }\n\n  // Convert decimal number to octal\n  var result = parseInt(number, 10).toString(8);\n\n  // Return octal number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.DELTA = function(number1, number2) {\n  // Set number2 to zero if undefined\n  number2 = (number2 === undefined) ? 0 : number2;\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return delta\n  return (number1 === number2) ? 1 : 0;\n};\n\n// TODO: why is upper_bound not used ? The excel documentation has no examples with upper_bound\nexports.ERF = function(lower_bound, upper_bound) {\n  // Set number2 to zero if undefined\n  upper_bound = (upper_bound === undefined) ? 0 : upper_bound;\n\n  lower_bound = utils.parseNumber(lower_bound);\n  upper_bound = utils.parseNumber(upper_bound);\n  if (utils.anyIsError(lower_bound, upper_bound)) {\n    return error.value;\n  }\n\n  return jStat.erf(lower_bound);\n};\n\n// TODO\nexports.ERF.PRECISE = function() {\n  throw new Error('ERF.PRECISE is not implemented');\n};\n\nexports.ERFC = function(x) {\n  // Return error if x is not a number\n  if (isNaN(x)) {\n    return error.value;\n  }\n\n  return jStat.erfc(x);\n};\n\n// TODO\nexports.ERFC.PRECISE = function() {\n  throw new Error('ERFC.PRECISE is not implemented');\n};\n\nexports.GESTEP = function(number, step) {\n  step = step || 0;\n  number = utils.parseNumber(number);\n  if (utils.anyIsError(step, number)) {\n    return number;\n  }\n\n  // Return delta\n  return (number >= step) ? 1 : 0;\n};\n\nexports.HEX2BIN = function(number, places) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Check if number is negative\n  var negative = (number.length === 10 && number.substring(0, 1).toLowerCase() === 'f') ? true : false;\n\n  // Convert hexadecimal number to decimal\n  var decimal = (negative) ? parseInt(number, 16) - 1099511627776 : parseInt(number, 16);\n\n  // Return error if number is lower than -512 or greater than 511\n  if (decimal < -512 || decimal > 511) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character binary number if number is negative\n  if (negative) {\n    return '1' + text.REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);\n  }\n\n  // Convert decimal number to binary\n  var result = decimal.toString(2);\n\n  // Return binary number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.HEX2DEC = function(number) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert hexadecimal number to decimal\n  var decimal = parseInt(number, 16);\n\n  // Return decimal number\n  return (decimal >= 549755813888) ? decimal - 1099511627776 : decimal;\n};\n\nexports.HEX2OCT = function(number, places) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert hexadecimal number to decimal\n  var decimal = parseInt(number, 16);\n\n  // Return error if number is positive and greater than 0x1fffffff (536870911)\n  if (decimal > 536870911 && decimal < 1098974756864) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character octal number if number is negative\n  if (decimal >= 1098974756864) {\n    return (decimal - 1098437885952).toString(8);\n  }\n\n  // Convert decimal number to octal\n  var result = decimal.toString(8);\n\n  // Return octal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.IMABS = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return absolute value of complex number\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n};\n\nexports.IMAGINARY = function(inumber) {\n  if (inumber === undefined || inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Return 0 if inumber is equal to 0\n  if (inumber === 0 || inumber === '0') {\n    return 0;\n  }\n\n  // Handle special cases\n  if (['i', 'j'].indexOf(inumber) >= 0) {\n    return 1;\n  }\n\n  // Normalize imaginary coefficient\n  inumber = inumber.replace('+i', '+1i').replace('-i', '-1i').replace('+j', '+1j').replace('-j', '-1j');\n\n  // Lookup sign\n  var plus = inumber.indexOf('+');\n  var minus = inumber.indexOf('-');\n  if (plus === 0) {\n    plus = inumber.indexOf('+', 1);\n  }\n\n  if (minus === 0) {\n    minus = inumber.indexOf('-', 1);\n  }\n\n  // Lookup imaginary unit\n  var last = inumber.substring(inumber.length - 1, inumber.length);\n  var unit = (last === 'i' || last === 'j');\n\n  if (plus >= 0 || minus >= 0) {\n    // Return error if imaginary unit is neither i nor j\n    if (!unit) {\n      return error.num;\n    }\n\n    // Return imaginary coefficient of complex number\n    if (plus >= 0) {\n      return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ?\n        error.num :\n        Number(inumber.substring(plus + 1, inumber.length - 1));\n    } else {\n      return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ?\n        error.num :\n        -Number(inumber.substring(minus + 1, inumber.length - 1));\n    }\n  } else {\n    if (unit) {\n      return (isNaN(inumber.substring(0, inumber.length - 1))) ? error.num : inumber.substring(0, inumber.length - 1);\n    } else {\n      return (isNaN(inumber)) ? error.num : 0;\n    }\n  }\n};\n\nexports.IMARGUMENT = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return error if inumber is equal to zero\n  if (x === 0 && y === 0) {\n    return error.div0;\n  }\n\n  // Return PI/2 if x is equal to zero and y is positive\n  if (x === 0 && y > 0) {\n    return Math.PI / 2;\n  }\n\n  // Return -PI/2 if x is equal to zero and y is negative\n  if (x === 0 && y < 0) {\n    return -Math.PI / 2;\n  }\n\n  // Return zero if x is negative and y is equal to zero\n  if (y === 0 && x > 0) {\n    return 0;\n  }\n\n  // Return zero if x is negative and y is equal to zero\n  if (y === 0 && x < 0) {\n    return -Math.PI;\n  }\n\n  // Return argument of complex number\n  if (x > 0) {\n    return Math.atan(y / x);\n  } else if (x < 0 && y >= 0) {\n    return Math.atan(y / x) + Math.PI;\n  } else {\n    return Math.atan(y / x) - Math.PI;\n  }\n};\n\nexports.IMCONJUGATE = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return conjugate of complex number\n  return (y !== 0) ? exports.COMPLEX(x, -y, unit) : inumber;\n};\n\nexports.IMCOS = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return cosine of complex number\n  return exports.COMPLEX(Math.cos(x) * (Math.exp(y) + Math.exp(-y)) / 2, -Math.sin(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);\n};\n\nexports.IMCOSH = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return hyperbolic cosine of complex number\n  return exports.COMPLEX(Math.cos(y) * (Math.exp(x) + Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) - Math.exp(-x)) / 2, unit);\n};\n\nexports.IMCOT = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return cotangent of complex number\n  return exports.IMDIV(exports.IMCOS(inumber), exports.IMSIN(inumber));\n};\n\nexports.IMDIV = function(inumber1, inumber2) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var a = exports.IMREAL(inumber1);\n  var b = exports.IMAGINARY(inumber1);\n  var c = exports.IMREAL(inumber2);\n  var d = exports.IMAGINARY(inumber2);\n\n  if (utils.anyIsError(a, b, c, d)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit1 = inumber1.substring(inumber1.length - 1);\n  var unit2 = inumber2.substring(inumber2.length - 1);\n  var unit = 'i';\n  if (unit1 === 'j') {\n    unit = 'j';\n  } else if (unit2 === 'j') {\n    unit = 'j';\n  }\n\n  // Return error if inumber2 is null\n  if (c === 0 && d === 0) {\n    return error.num;\n  }\n\n  // Return exponential of complex number\n  var den = c * c + d * d;\n  return exports.COMPLEX((a * c + b * d) / den, (b * c - a * d) / den, unit);\n};\n\nexports.IMEXP = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return exponential of complex number\n  var e = Math.exp(x);\n  return exports.COMPLEX(e * Math.cos(y), e * Math.sin(y), unit);\n};\n\nexports.IMLN = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return exponential of complex number\n  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)), Math.atan(y / x), unit);\n};\n\nexports.IMLOG10 = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return exponential of complex number\n  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(10), Math.atan(y / x) / Math.log(10), unit);\n};\n\nexports.IMLOG2 = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return exponential of complex number\n  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(2), Math.atan(y / x) / Math.log(2), unit);\n};\n\nexports.IMPOWER = function(inumber, number) {\n  number = utils.parseNumber(number);\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(number, x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Calculate power of modulus\n  var p = Math.pow(exports.IMABS(inumber), number);\n\n  // Calculate argument\n  var t = exports.IMARGUMENT(inumber);\n\n  // Return exponential of complex number\n  return exports.COMPLEX(p * Math.cos(number * t), p * Math.sin(number * t), unit);\n};\n\nexports.IMPRODUCT = function() {\n  // Initialize result\n  var result = arguments[0];\n\n  if (!arguments.length) {\n    return error.value;\n  }\n\n  // Loop on all numbers\n  for (var i = 1; i < arguments.length; i++) {\n    // Lookup coefficients of two complex numbers\n    var a = exports.IMREAL(result);\n    var b = exports.IMAGINARY(result);\n    var c = exports.IMREAL(arguments[i]);\n    var d = exports.IMAGINARY(arguments[i]);\n\n    if (utils.anyIsError(a, b, c, d)) {\n      return error.value;\n    }\n\n    // Complute product of two complex numbers\n    result = exports.COMPLEX(a * c - b * d, a * d + b * c);\n  }\n\n  // Return product of complex numbers\n  return result;\n};\n\nexports.IMREAL = function(inumber) {\n  if (inumber === undefined || inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Return 0 if inumber is equal to 0\n  if (inumber === 0 || inumber === '0') {\n    return 0;\n  }\n\n  // Handle special cases\n  if (['i', '+i', '1i', '+1i', '-i', '-1i', 'j', '+j', '1j', '+1j', '-j', '-1j'].indexOf(inumber) >= 0) {\n    return 0;\n  }\n\n  // Lookup sign\n  var plus = inumber.indexOf('+');\n  var minus = inumber.indexOf('-');\n  if (plus === 0) {\n    plus = inumber.indexOf('+', 1);\n  }\n  if (minus === 0) {\n    minus = inumber.indexOf('-', 1);\n  }\n\n  // Lookup imaginary unit\n  var last = inumber.substring(inumber.length - 1, inumber.length);\n  var unit = (last === 'i' || last === 'j');\n\n  if (plus >= 0 || minus >= 0) {\n    // Return error if imaginary unit is neither i nor j\n    if (!unit) {\n      return error.num;\n    }\n\n    // Return real coefficient of complex number\n    if (plus >= 0) {\n      return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ?\n        error.num :\n        Number(inumber.substring(0, plus));\n    } else {\n      return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ?\n        error.num :\n        Number(inumber.substring(0, minus));\n    }\n  } else {\n    if (unit) {\n      return (isNaN(inumber.substring(0, inumber.length - 1))) ? error.num : 0;\n    } else {\n      return (isNaN(inumber)) ? error.num : inumber;\n    }\n  }\n};\n\nexports.IMSEC = function(inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return secant of complex number\n  return exports.IMDIV('1', exports.IMCOS(inumber));\n};\n\nexports.IMSECH = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return hyperbolic secant of complex number\n  return exports.IMDIV('1', exports.IMCOSH(inumber));\n};\n\nexports.IMSIN = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return sine of complex number\n  return exports.COMPLEX(Math.sin(x) * (Math.exp(y) + Math.exp(-y)) / 2, Math.cos(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);\n};\n\nexports.IMSINH = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return hyperbolic sine of complex number\n  return exports.COMPLEX(Math.cos(y) * (Math.exp(x) - Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) + Math.exp(-x)) / 2, unit);\n};\n\nexports.IMSQRT = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Calculate power of modulus\n  var s = Math.sqrt(exports.IMABS(inumber));\n\n  // Calculate argument\n  var t = exports.IMARGUMENT(inumber);\n\n  // Return exponential of complex number\n  return exports.COMPLEX(s * Math.cos(t / 2), s * Math.sin(t / 2), unit);\n};\n\nexports.IMCSC = function (inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.num;\n  }\n\n  // Return cosecant of complex number\n  return exports.IMDIV('1', exports.IMSIN(inumber));\n};\n\nexports.IMCSCH = function (inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.num;\n  }\n\n  // Return hyperbolic cosecant of complex number\n  return exports.IMDIV('1', exports.IMSINH(inumber));\n};\n\nexports.IMSUB = function(inumber1, inumber2) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var a = this.IMREAL(inumber1);\n  var b = this.IMAGINARY(inumber1);\n  var c = this.IMREAL(inumber2);\n  var d = this.IMAGINARY(inumber2);\n\n  if (utils.anyIsError(a, b, c, d)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit1 = inumber1.substring(inumber1.length - 1);\n  var unit2 = inumber2.substring(inumber2.length - 1);\n  var unit = 'i';\n  if (unit1 === 'j') {\n    unit = 'j';\n  } else if (unit2 === 'j') {\n    unit = 'j';\n  }\n\n  // Return _ of two complex numbers\n  return this.COMPLEX(a - c, b - d, unit);\n};\n\nexports.IMSUM = function() {\n  if (!arguments.length) {\n    return error.value;\n  }\n  var args = utils.flatten(arguments);\n\n  // Initialize result\n  var result = args[0];\n\n  // Loop on all numbers\n  for (var i = 1; i < args.length; i++) {\n    // Lookup coefficients of two complex numbers\n    var a = this.IMREAL(result);\n    var b = this.IMAGINARY(result);\n    var c = this.IMREAL(args[i]);\n    var d = this.IMAGINARY(args[i]);\n\n    if (utils.anyIsError(a, b, c, d)) {\n      return error.value;\n    }\n\n    // Complute product of two complex numbers\n    result = this.COMPLEX(a + c, b + d);\n  }\n\n  // Return sum of complex numbers\n  return result;\n};\n\nexports.IMTAN = function(inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return tangent of complex number\n  return this.IMDIV(this.IMSIN(inumber), this.IMCOS(inumber));\n};\n\nexports.OCT2BIN = function(number, places) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-7]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Check if number is negative\n  var negative = (number.length === 10 && number.substring(0, 1) === '7') ? true : false;\n\n  // Convert octal number to decimal\n  var decimal = (negative) ? parseInt(number, 8) - 1073741824 : parseInt(number, 8);\n\n  // Return error if number is lower than -512 or greater than 511\n  if (decimal < -512 || decimal > 511) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character binary number if number is negative\n  if (negative) {\n    return '1' + text.REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);\n  }\n\n  // Convert decimal number to binary\n  var result = decimal.toString(2);\n\n  // Return binary number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.OCT2DEC = function(number) {\n  // Return error if number is not octal or contains more than ten characters (10 digits)\n  if (!/^[0-7]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert octal number to decimal\n  var decimal = parseInt(number, 8);\n\n  // Return decimal number\n  return (decimal >= 536870912) ? decimal - 1073741824 : decimal;\n};\n\nexports.OCT2HEX = function(number, places) {\n  // Return error if number is not octal or contains more than ten characters (10 digits)\n  if (!/^[0-7]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert octal number to decimal\n  var decimal = parseInt(number, 8);\n\n  // Ignore places and return a 10-character octal number if number is negative\n  if (decimal >= 536870912) {\n    return 'ff' + (decimal + 3221225472).toString(16);\n  }\n\n  // Convert decimal number to hexadecimal\n  var result = decimal.toString(16);\n\n  // Return hexadecimal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n","function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\n","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,8],$V2=[1,6],$V3=[1,7],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,17],$Vc=[1,18],$Vd=[1,23],$Ve=[1,25],$Vf=[1,26],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[1,30],$Vk=[1,31],$Vl=[1,32],$Vm=[1,33],$Vn=[1,34],$Vo=[5,9,10,11,13,14,15,16,17,18,19,20,35,36],$Vp=[5,9,10,11,13,14,15,16,17,18,19,20,35,36,38],$Vq=[5,9,10,11,13,14,15,16,17,18,19,20,35,36,40],$Vr=[5,10,11,13,14,15,16,17,35,36],$Vs=[5,10,13,14,15,16,35,36],$Vt=[5,10,11,13,14,15,16,17,18,19,35,36],$Vu=[13,35,36];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"expressions\":3,\"expression\":4,\"EOF\":5,\"variableSequence\":6,\"number\":7,\"STRING\":8,\"&\":9,\"=\":10,\"+\":11,\"(\":12,\")\":13,\"<\":14,\">\":15,\"NOT\":16,\"-\":17,\"*\":18,\"/\":19,\"^\":20,\"FUNCTION\":21,\"expseq\":22,\"ARRAYCONSTANT\":23,\"ARRAY\":24,\"cell\":25,\"refCell\":26,\"range\":27,\"refRange\":28,\"ABSOLUTE_CELL\":29,\"RELATIVE_CELL\":30,\"MIXED_CELL\":31,\"REFSHEET\":32,\"!\":33,\":\":34,\";\":35,\",\":36,\"VARIABLE\":37,\"DECIMAL\":38,\"NUMBER\":39,\"%\":40,\"ERROR\":41,\"$accept\":0,\"$end\":1},\nterminals_: {5:\"EOF\",8:\"STRING\",9:\"&\",10:\"=\",11:\"+\",12:\"(\",13:\")\",14:\"<\",15:\">\",16:\"NOT\",17:\"-\",18:\"*\",19:\"/\",20:\"^\",21:\"FUNCTION\",23:\"ARRAYCONSTANT\",24:\"ARRAY\",29:\"ABSOLUTE_CELL\",30:\"RELATIVE_CELL\",31:\"MIXED_CELL\",32:\"REFSHEET\",33:\"!\",34:\":\",35:\";\",36:\",\",37:\"VARIABLE\",38:\"DECIMAL\",39:\"NUMBER\",40:\"%\",41:\"ERROR\"},\nproductions_: [0,[3,2],[4,1],[4,1],[4,1],[4,3],[4,3],[4,3],[4,3],[4,4],[4,4],[4,4],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,2],[4,3],[4,4],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,2],[25,1],[25,1],[25,1],[26,3],[26,3],[26,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[28,5],[28,5],[28,5],[28,5],[28,5],[28,5],[28,5],[28,5],[28,5],[22,1],[22,3],[22,3],[6,1],[6,3],[7,1],[7,3],[7,2],[2,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\n      return $$[$0-1];\n    \nbreak;\ncase 2:\n\n      this.$ = yy.callVariable($$[$0][0]);\n    \nbreak;\ncase 3:\n\n      this.$ = yy.toNumber($$[$0]);\n    \nbreak;\ncase 4:\n\n      this.$ = yy.trimEdges($$[$0]);\n    \nbreak;\ncase 5:\n\n      this.$ = yy.evaluateByOperator('&', [$$[$0-2], $$[$0]]);\n    \nbreak;\ncase 6:\n\n      this.$ = yy.evaluateByOperator('=', [$$[$0-2], $$[$0]]);\n    \nbreak;\ncase 7:\n\n      this.$ = yy.evaluateByOperator('+', [$$[$0-2], $$[$0]]);\n    \nbreak;\ncase 8:\n\n      this.$ = $$[$0-1];\n    \nbreak;\ncase 9:\n\n      this.$ = yy.evaluateByOperator('<=', [$$[$0-3], $$[$0]]);\n    \nbreak;\ncase 10:\n\n      this.$ = yy.evaluateByOperator('>=', [$$[$0-3], $$[$0]]);\n    \nbreak;\ncase 11:\n\n      this.$ = yy.evaluateByOperator('<>', [$$[$0-3], $$[$0]]);\n    \nbreak;\ncase 12:\n\n      this.$ = yy.evaluateByOperator('NOT', [$$[$0-2], $$[$0]]);\n    \nbreak;\ncase 13:\n\n      this.$ = yy.evaluateByOperator('>', [$$[$0-2], $$[$0]]);\n    \nbreak;\ncase 14:\n\n      this.$ = yy.evaluateByOperator('<', [$$[$0-2], $$[$0]]);\n    \nbreak;\ncase 15:\n\n      this.$ = yy.evaluateByOperator('-', [$$[$0-2], $$[$0]]);\n    \nbreak;\ncase 16:\n\n      this.$ = yy.evaluateByOperator('*', [$$[$0-2], $$[$0]]);\n    \nbreak;\ncase 17:\n\n      this.$ = yy.evaluateByOperator('/', [$$[$0-2], $$[$0]]);\n    \nbreak;\ncase 18:\n\n      this.$ = yy.evaluateByOperator('^', [$$[$0-2], $$[$0]]);\n    \nbreak;\ncase 19:\n\n      var n1 = yy.invertNumber($$[$0]);\n\n      this.$ = n1;\n\n      if (isNaN(this.$)) {\n          this.$ = 0;\n      }\n    \nbreak;\ncase 20:\n\n      var n1 = yy.toNumber($$[$0]);\n\n      this.$ = n1;\n\n      if (isNaN(this.$)) {\n          this.$ = 0;\n      }\n    \nbreak;\ncase 21:\n\n      this.$ = yy.callFunction($$[$0-2]);\n    \nbreak;\ncase 22:\n\n      this.$ = yy.callFunction($$[$0-3], $$[$0-1]);\n    \nbreak;\ncase 23:\n\n      var result = [];\n\n      var textInArray = yytext.replace('{','').replace('}','');\n\n      var arr = textInArray.split(';');\n      if(arr.length <= 1) {\n        var arr = eval(\"[[\" + arr + \"]]\");\n        arr.forEach(function(item) {\n          result.push(item);\n        });\n      } else {\n        for(var i = 0; i < arr.length; i++) {\n          result.push(eval(\"[\" + arr[i] + \"]\"));\n        }\n      }\n\n      this.$ = result;\n  \nbreak;\ncase 24:\n\n      var result = [];\n      var arr = eval(\"[\" + yytext + \"]\");\n\n      arr.forEach(function(item) {\n        result.push(item);\n      });\n      this.$ = result;\n  \nbreak;\ncase 31: case 32: case 33:\n\n      this.$ = yy.cellValue($$[$0]);\n    \nbreak;\ncase 34:\n\n\n      this.$ = yy.cellValue($$[$0], $$[$0-2].replace(/'/g, \"\"));\n    \nbreak;\ncase 35:\n\n      this.$ = yy.cellValue($$[$0], $$[$0-2].replace(/'/g, \"\"));\n    \nbreak;\ncase 36:\n\n    this.$ = yy.cellValue($$[$0], $$[$0-2].replace(/'/g, \"\"));\n  \nbreak;\ncase 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45:\n\n      this.$ = yy.rangeValue($$[$0-2], $$[$0]);\n    \nbreak;\ncase 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54:\n\n      this.$ = yy.rangeValue($$[$0-2], $$[$0], $$[$0-4].replace(/'/g, \"\"));\n    \nbreak;\ncase 55: case 58:\n\n      this.$ = [$$[$0]];\n    \nbreak;\ncase 56: case 57:\n\n      $$[$0-2].push($$[$0]);\n      this.$ = $$[$0-2];\n    \nbreak;\ncase 59:\n\n      this.$ = (Array.isArray($$[$0-2]) ? $$[$0-2] : [$$[$0-2]]);\n      this.$.push($$[$0]);\n    \nbreak;\ncase 60:\n\n      this.$ = $$[$0];\n    \nbreak;\ncase 61:\n\n      this.$ = ($$[$0-2] + '.' + $$[$0]) * 1;\n    \nbreak;\ncase 62:\n\n      this.$ = $$[$0-1] * 0.01;\n    \nbreak;\ncase 63:\n\n      this.$ = yy.throwError($$[$0]);\n    \nbreak;\n}\n},\ntable: [{2:16,3:1,4:2,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{1:[3]},{5:[1,24],9:$Ve,10:$Vf,11:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn},o($Vo,[2,2],{38:[1,35]}),o($Vo,[2,3],{40:[1,36]}),o($Vo,[2,4]),{2:16,4:37,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:38,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:39,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{12:[1,40]},o($Vo,[2,23]),o($Vo,[2,24]),o($Vo,[2,25]),o($Vo,[2,26]),o($Vo,[2,27]),o($Vo,[2,28]),o($Vo,[2,29],{2:41,41:$Vd}),o($Vp,[2,58]),o($Vq,[2,60],{38:[1,42]}),o($Vo,[2,31],{34:[1,43]}),o($Vo,[2,32],{34:[1,44]}),o($Vo,[2,33],{34:[1,45]}),{33:[1,46]},o([5,9,10,11,13,14,15,16,17,18,19,20,35,36,41],[2,63]),{1:[2,1]},{2:16,4:47,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:48,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:49,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:52,6:3,7:4,8:$V0,10:[1,50],11:$V1,12:$V2,15:[1,51],17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:54,6:3,7:4,8:$V0,10:[1,53],11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:55,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:56,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:57,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:58,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:59,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{37:[1,60]},o($Vq,[2,62]),{9:$Ve,10:$Vf,11:$Vg,13:[1,61],14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn},o($Vr,[2,19],{9:$Ve,18:$Vl,19:$Vm,20:$Vn}),o($Vr,[2,20],{9:$Ve,18:$Vl,19:$Vm,20:$Vn}),{2:16,4:64,6:3,7:4,8:$V0,11:$V1,12:$V2,13:[1,62],17:$V3,21:$V4,22:63,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},o($Vo,[2,30]),{39:[1,65]},{29:[1,66],30:[1,67],31:[1,68]},{29:[1,69],30:[1,70],31:[1,71]},{29:[1,72],30:[1,73],31:[1,74]},{29:[1,75],30:[1,76],31:[1,77]},o($Vo,[2,5]),o([5,10,13,35,36],[2,6],{9:$Ve,11:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vr,[2,7],{9:$Ve,18:$Vl,19:$Vm,20:$Vn}),{2:16,4:78,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:79,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},o($Vs,[2,14],{9:$Ve,11:$Vg,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),{2:16,4:80,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},o($Vs,[2,13],{9:$Ve,11:$Vg,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o([5,10,13,16,35,36],[2,12],{9:$Ve,11:$Vg,14:$Vh,15:$Vi,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vr,[2,15],{9:$Ve,18:$Vl,19:$Vm,20:$Vn}),o($Vt,[2,16],{9:$Ve,20:$Vn}),o($Vt,[2,17],{9:$Ve,20:$Vn}),o([5,10,11,13,14,15,16,17,18,19,20,35,36],[2,18],{9:$Ve}),o($Vp,[2,59]),o($Vo,[2,8]),o($Vo,[2,21]),{13:[1,81],35:[1,82],36:[1,83]},o($Vu,[2,55],{9:$Ve,10:$Vf,11:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vq,[2,61]),o($Vo,[2,37]),o($Vo,[2,38]),o($Vo,[2,39]),o($Vo,[2,40]),o($Vo,[2,41]),o($Vo,[2,42]),o($Vo,[2,43]),o($Vo,[2,44]),o($Vo,[2,45]),o($Vo,[2,34],{34:[1,84]}),o($Vo,[2,35],{34:[1,85]}),o($Vo,[2,36],{34:[1,86]}),o($Vs,[2,9],{9:$Ve,11:$Vg,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vs,[2,11],{9:$Ve,11:$Vg,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vs,[2,10],{9:$Ve,11:$Vg,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vo,[2,22]),{2:16,4:87,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:88,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{29:[1,89],30:[1,90],31:[1,91]},{29:[1,92],30:[1,93],31:[1,94]},{29:[1,95],30:[1,96],31:[1,97]},o($Vu,[2,56],{9:$Ve,10:$Vf,11:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vu,[2,57],{9:$Ve,10:$Vf,11:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vo,[2,46]),o($Vo,[2,47]),o($Vo,[2,48]),o($Vo,[2,49]),o($Vo,[2,50]),o($Vo,[2,51]),o($Vo,[2,52]),o($Vo,[2,53]),o($Vo,[2,54])],\ndefaultActions: {24:[2,1]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse (input) {\n    var self = this,\n        stack = [0],\n        tstack = [], // token stack\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    var args = lstack.slice.call(arguments, 1);\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    // copy state\n    for (var k in this.yy) {\n      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n        sharedState.yy[k] = this.yy[k];\n      }\n    }\n\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n\n    var ranges = lexer.options && lexer.options.ranges;\n\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n\n    function popStack (n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n_token_stack:\n    var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n_handle_error:\n        // handle parse error\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var error_rule_depth;\n            var errStr = '';\n\n            // Return the rule stack depth where the nearest error rule can be found.\n            // Return FALSE when no error recovery rule was found.\n            function locateNearestErrorRecoveryRule(state) {\n                var stack_probe = stack.length - 1;\n                var depth = 0;\n\n                // try to recover from error\n                for(;;) {\n                    // check for error recovery rule in this state\n                    if ((TERROR.toString()) in table[state]) {\n                        return depth;\n                    }\n                    if (state === 0 || stack_probe < 2) {\n                        return false; // No suitable error recovery rule available.\n                    }\n                    stack_probe -= 2; // popStack(1): [symbol, action]\n                    state = stack[stack_probe];\n                    ++depth;\n                }\n            }\n\n            if (!recovering) {\n                // first see if there's any chance at hitting an error recovery rule:\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n\n                // Report error\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == EOF ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected,\n                    recoverable: (error_rule_depth !== false)\n                });\n            } else if (preErrorSymbol !== EOF) {\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol === EOF || preErrorSymbol === EOF) {\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            if (error_rule_depth === false) {\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\n            }\n            popStack(error_rule_depth);\n\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(lexer.yytext);\n                lstack.push(lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = lexer.yyleng;\n                    yytext = lexer.yytext;\n                    yylineno = lexer.yylineno;\n                    yyloc = lexer.yylloc;\n                    if (recovering > 0) {\n                        recovering--;\n                    }\n                } else {\n                    // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2:\n                // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                if (ranges) {\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\n                }\n                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3:\n                // accept\n                return true;\n        }\n\n    }\n\n    return true;\n}};\n\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:\nbreak;\ncase 1:return 8;\nbreak;\ncase 2:return 32;\nbreak;\ncase 3:return 8;\nbreak;\ncase 4:return 21;\nbreak;\ncase 5:return 41;\nbreak;\ncase 6:return 29;\nbreak;\ncase 7:return 31;\nbreak;\ncase 8:return 31;\nbreak;\ncase 9:return 30;\nbreak;\ncase 10:return 32;\nbreak;\ncase 11:return 21;\nbreak;\ncase 12:return 37;\nbreak;\ncase 13:return 37;\nbreak;\ncase 14:return 39;\nbreak;\ncase 15:return 24;\nbreak;\ncase 16:return 23;\nbreak;\ncase 17:return 9;\nbreak;\ncase 18:return ' ';\nbreak;\ncase 19:return 38;\nbreak;\ncase 20:return 34;\nbreak;\ncase 21:return 35;\nbreak;\ncase 22:return 36;\nbreak;\ncase 23:return 18;\nbreak;\ncase 24:return 19;\nbreak;\ncase 25:return 17;\nbreak;\ncase 26:return 11;\nbreak;\ncase 27:return 20;\nbreak;\ncase 28:return 12;\nbreak;\ncase 29:return 13;\nbreak;\ncase 30:return 15;\nbreak;\ncase 31:return 14;\nbreak;\ncase 32:return 16;\nbreak;\ncase 33:return '\"';\nbreak;\ncase 34:return \"'\";\nbreak;\ncase 35:return \"!\";\nbreak;\ncase 36:return 10;\nbreak;\ncase 37:return 40;\nbreak;\ncase 38:return '{';\nbreak;\ncase 39:return '}';\nbreak;\ncase 40:return '#';\nbreak;\ncase 41:return 5;\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:\"(\\\\[\"]|[^\"])*\")/,/^(?:'((?![\\\\\\/\\[\\]\\*\\?\\:]).)+?'(?=))/,/^(?:'(\\\\[']|[^'])*')/,/^(?:[A-Za-z]{1,}[A-Za-z_0-9\\.]+(?=[(]))/,/^(?:#[A-Z0-9\\/]+(!|\\?)?)/,/^(?:\\$[A-Za-z]+\\$[0-9]+)/,/^(?:\\$[A-Za-z]+[0-9]+)/,/^(?:[A-Za-z]+\\$[0-9]+)/,/^(?:[A-Za-z]+[0-9]+(?![!]))/,/^(?:[A-Za-z_\\.\\d]+(?=[!]))/,/^(?:[A-Za-z\\.]+(?=[(]))/,/^(?:[A-Za-z]{1,}[A-Za-z_0-9]+)/,/^(?:[A-Za-z_]+)/,/^(?:[0-9]+)/,/^(?:\\[([\\w\\,\\;\\s]*)?\\])/,/^(?:\\{([\\w\\,\\;\\\"\\.\\s]*)?\\})/,/^(?:&)/,/^(?: )/,/^(?:[.])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\\*)/,/^(?:\\/)/,/^(?:-)/,/^(?:\\+)/,/^(?:\\^)/,/^(?:\\()/,/^(?:\\))/,/^(?:>)/,/^(?:<)/,/^(?:NOT\\b)/,/^(?:\")/,/^(?:')/,/^(?:!)/,/^(?:=)/,/^(?:%)/,/^(?:\\{)/,/^(?:\\})/,/^(?:[#])/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = parser;\nexports.Parser = parser.Parser;\nexports.parse = function () { return parser.parse.apply(parser, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","var mathTrig = require('./math-trig');\nvar statistical = require('./statistical');\nvar engineering = require('./engineering');\nvar dateTime = require('./date-time');\n\nfunction set(fn, root) {\n  if (root) {\n    for (var i in root) {\n      fn[i] = root[i];\n    }\n  }\n\n  return fn;\n}\n\nexports.BETADIST = statistical.BETA.DIST;\nexports.BETAINV = statistical.BETA.INV;\nexports.BINOMDIST = statistical.BINOM.DIST;\nexports.CEILING = exports.ISOCEILING = set(mathTrig.CEILING.MATH, mathTrig.CEILING);\nexports.CEILINGMATH = mathTrig.CEILING.MATH;\nexports.CEILINGPRECISE = mathTrig.CEILING.PRECISE;\nexports.CHIDIST = statistical.CHISQ.DIST;\nexports.CHIDISTRT = statistical.CHISQ.DIST.RT;\nexports.CHIINV = statistical.CHISQ.INV;\nexports.CHIINVRT = statistical.CHISQ.INV.RT;\nexports.CHITEST = statistical.CHISQ.TEST;\nexports.CONFIDENCE = set(statistical.CONFIDENCE.NORM, statistical.CONFIDENCE);\nexports.COVAR = statistical.COVARIANCE.P;\nexports.COVARIANCEP = statistical.COVARIANCE.P;\nexports.COVARIANCES = statistical.COVARIANCE.S;\nexports.CRITBINOM = statistical.BINOM.INV;\nexports.EXPONDIST = statistical.EXPON.DIST;\nexports.ERFCPRECISE = engineering.ERFC.PRECISE;\nexports.ERFPRECISE = engineering.ERF.PRECISE;\nexports.FDIST = statistical.F.DIST;\nexports.FDISTRT = statistical.F.DIST.RT;\nexports.FINVRT = statistical.F.INV.RT;\nexports.FINV = statistical.F.INV;\nexports.FLOOR = set(mathTrig.FLOOR.MATH, mathTrig.FLOOR);\nexports.FLOORMATH = mathTrig.FLOOR.MATH;\nexports.FLOORPRECISE = mathTrig.FLOOR.PRECISE;\nexports.FTEST = statistical.F.TEST;\nexports.GAMMADIST = statistical.GAMMA.DIST;\nexports.GAMMAINV = statistical.GAMMA.INV;\nexports.GAMMALNPRECISE = statistical.GAMMALN.PRECISE;\nexports.HYPGEOMDIST = statistical.HYPGEOM.DIST;\nexports.LOGINV = statistical.LOGNORM.INV;\nexports.LOGNORMINV = statistical.LOGNORM.INV;\nexports.LOGNORMDIST = statistical.LOGNORM.DIST;\nexports.MODE = set(statistical.MODE.SNGL, statistical.MODE);\nexports.MODEMULT = statistical.MODE.MULT;\nexports.MODESNGL = statistical.MODE.SNGL;\nexports.NEGBINOMDIST = statistical.NEGBINOM.DIST;\nexports.NETWORKDAYSINTL = dateTime.NETWORKDAYS.INTL;\nexports.NORMDIST = statistical.NORM.DIST;\nexports.NORMINV = statistical.NORM.INV;\nexports.NORMSDIST = statistical.NORM.S.DIST;\nexports.NORMSINV = statistical.NORM.S.INV;\nexports.PERCENTILE = set(statistical.PERCENTILE.EXC, statistical.PERCENTILE);\nexports.PERCENTILEEXC = statistical.PERCENTILE.EXC;\nexports.PERCENTILEINC = statistical.PERCENTILE.INC;\nexports.PERCENTRANK = set(statistical.PERCENTRANK.INC, statistical.PERCENTRANK);\nexports.PERCENTRANKEXC = statistical.PERCENTRANK.EXC;\nexports.PERCENTRANKINC = statistical.PERCENTRANK.INC;\nexports.POISSON = set(statistical.POISSON.DIST, statistical.POISSON);\nexports.POISSONDIST = statistical.POISSON.DIST;\nexports.QUARTILE = set(statistical.QUARTILE.INC, statistical.QUARTILE);\nexports.QUARTILEEXC = statistical.QUARTILE.EXC;\nexports.QUARTILEINC = statistical.QUARTILE.INC;\nexports.RANK = set(statistical.RANK.EQ, statistical.RANK);\nexports.RANKAVG = statistical.RANK.AVG;\nexports.RANKEQ = statistical.RANK.EQ;\nexports.SKEWP = statistical.SKEW.P;\nexports.STDEV = set(statistical.STDEV.S, statistical.STDEV);\nexports.STDEVP = statistical.STDEV.P;\nexports.STDEVS = statistical.STDEV.S;\nexports.TDIST = statistical.T.DIST;\nexports.TDISTRT = statistical.T.DIST.RT;\nexports.TINV = statistical.T.INV;\nexports.TTEST = statistical.T.TEST;\nexports.VAR = set(statistical.VAR.S, statistical.VAR);\nexports.VARP = statistical.VAR.P;\nexports.VARS = statistical.VAR.S;\nexports.WEIBULL = set(statistical.WEIBULL.DIST, statistical.WEIBULL);\nexports.WEIBULLDIST = statistical.WEIBULL.DIST;\nexports.WORKDAYINTL = dateTime.WORKDAY.INTL;\nexports.ZTEST = statistical.Z.TEST;\n","var M = Math;\nfunction _horner(arr, v) { return arr.reduce(function(z,w){return v * z + w;},0); };\nfunction _bessel_iter(x, n, f0, f1, sign) {\n  if(!sign) sign = -1;\n  var tdx = 2 / x, f2;\n  if(n === 0) return f0;\n  if(n === 1) return f1;\n  for(var o = 1; o != n; ++o) {\n    f2 = f1 * o * tdx + sign * f0;\n    f0 = f1; f1 = f2;\n  }\n  return f1;\n}\nfunction _bessel_wrap(bessel0, bessel1, name, nonzero, sign) {\n  return function bessel(x,n) {\n    if(n === 0) return bessel0(x);\n    if(n === 1) return bessel1(x);\n    if(n < 0) throw name + ': Order (' + n + ') must be nonnegative';\n    if(nonzero == 1 && x === 0) throw name + ': Undefined when x == 0';\n    if(nonzero == 2 && x <= 0) throw name + ': Undefined when x <= 0';\n    var b0 = bessel0(x), b1 = bessel1(x);\n    return _bessel_iter(x, n, b0, b1, sign);\n  };\n}\nvar besselj = (function() {\n  var b0_a1a = [57568490574.0,-13362590354.0,651619640.7,-11214424.18,77392.33017,-184.9052456].reverse();\n  var b0_a2a = [57568490411.0,1029532985.0,9494680.718,59272.64853,267.8532712,1.0].reverse();\n  var b0_a1b = [1.0, -0.1098628627e-2, 0.2734510407e-4, -0.2073370639e-5, 0.2093887211e-6].reverse();\n  var b0_a2b = [-0.1562499995e-1, 0.1430488765e-3, -0.6911147651e-5, 0.7621095161e-6, -0.934935152e-7].reverse();\n  var W = 0.636619772; // 2 / Math.PI\n\n  function bessel0(x) {\n    var a, a1, a2, y = x * x, xx = M.abs(x) - 0.785398164;\n    if(M.abs(x) < 8) {\n      a1 = _horner(b0_a1a, y);\n      a2 = _horner(b0_a2a, y);\n      a = a1/a2;\n    }\n    else {\n      y = 64 / y;\n      a1 = _horner(b0_a1b, y);\n      a2 = _horner(b0_a2b, y);\n      a = M.sqrt(W/M.abs(x))*(M.cos(xx)*a1-M.sin(xx)*a2*8/M.abs(x));\n    }\n    return a;\n  }\n  var b1_a1a = [72362614232.0,-7895059235.0,242396853.1,-2972611.439, 15704.48260, -30.16036606].reverse();\n  var b1_a2a = [144725228442.0, 2300535178.0, 18583304.74, 99447.43394, 376.9991397, 1.0].reverse();\n  var b1_a1b = [1.0, 0.183105e-2, -0.3516396496e-4, 0.2457520174e-5, -0.240337019e-6].reverse();\n  var b1_a2b = [0.04687499995, -0.2002690873e-3, 0.8449199096e-5, -0.88228987e-6, 0.105787412e-6].reverse();\n  function bessel1(x) {\n    var a, a1, a2, y = x*x, xx = M.abs(x) - 2.356194491;\n    if(Math.abs(x)< 8) {\n      a1 = x*_horner(b1_a1a, y);\n      a2 = _horner(b1_a2a, y);\n      a = a1 / a2;\n    } else {\n      y = 64 / y;\n      a1=_horner(b1_a1b, y);\n      a2=_horner(b1_a2b, y);\n      a=M.sqrt(W/M.abs(x))*(M.cos(xx)*a1-M.sin(xx)*a2*8/M.abs(x));\n      if(x < 0) a = -a;\n    }\n    return a;\n  }\n  return function besselj(x, n) {\n    n = Math.round(n);\n    if(n === 0) return bessel0(M.abs(x));\n    if(n === 1) return bessel1(M.abs(x));\n    if(n < 0) throw 'BESSELJ: Order (' + n + ') must be nonnegative';\n    if(M.abs(x) === 0) return 0;\n\n    var ret, j, tox = 2 / M.abs(x), m, jsum, sum, bjp, bj, bjm;\n    if(M.abs(x) > n) {\n      ret = _bessel_iter(x, n, bessel0(M.abs(x)), bessel1(M.abs(x)),-1);\n    } else {\n      m=2*M.floor((n+M.floor(M.sqrt(40*n)))/2);\n      jsum=0;\n      bjp=ret=sum=0.0;\n      bj=1.0;\n      for (j=m;j>0;j--) {\n        bjm=j*tox*bj-bjp;\n        bjp=bj;\n        bj=bjm;\n        if (M.abs(bj) > 1E10) {\n          bj *= 1E-10;\n          bjp *= 1E-10;\n          ret *= 1E-10;\n          sum *= 1E-10;\n        }\n        if (jsum) sum += bj;\n        jsum=!jsum;\n        if (j == n) ret=bjp;\n      }\n      sum=2.0*sum-bj;\n      ret /= sum;\n    }\n    return x < 0 && (n%2) ? -ret : ret;\n  };\n})();\nvar bessely = (function() {\n  var b0_a1a = [-2957821389.0, 7062834065.0, -512359803.6, 10879881.29, -86327.92757, 228.4622733].reverse();\n  var b0_a2a = [40076544269.0, 745249964.8, 7189466.438, 47447.26470, 226.1030244, 1.0].reverse();\n  var b0_a1b = [1.0, -0.1098628627e-2, 0.2734510407e-4, -0.2073370639e-5, 0.2093887211e-6].reverse();\n  var b0_a2b = [-0.1562499995e-1, 0.1430488765e-3, -0.6911147651e-5, 0.7621095161e-6, -0.934945152e-7].reverse();\n\n  var W = 0.636619772;\n  function bessel0(x) {\n    var a, a1, a2, y = x * x, xx = x - 0.785398164;\n    if(x < 8) {\n      a1 = _horner(b0_a1a, y);\n      a2 = _horner(b0_a2a, y);\n      a = a1/a2 + W * besselj(x,0) * M.log(x);\n    } else {\n      y = 64 / y;\n      a1 = _horner(b0_a1b, y);\n      a2 = _horner(b0_a2b, y);\n      a = M.sqrt(W/x)*(M.sin(xx)*a1+M.cos(xx)*a2*8/x);\n    }\n    return a;\n  }\n\n  var b1_a1a = [-0.4900604943e13, 0.1275274390e13, -0.5153438139e11, 0.7349264551e9, -0.4237922726e7, 0.8511937935e4].reverse();\n  var b1_a2a = [0.2499580570e14, 0.4244419664e12, 0.3733650367e10, 0.2245904002e8, 0.1020426050e6, 0.3549632885e3, 1].reverse();\n  var b1_a1b = [1.0, 0.183105e-2, -0.3516396496e-4, 0.2457520174e-5, -0.240337019e-6].reverse();\n  var b1_a2b = [0.04687499995, -0.2002690873e-3, 0.8449199096e-5, -0.88228987e-6, 0.105787412e-6].reverse();\n  function bessel1(x) {\n    var a, a1, a2, y = x*x, xx = x - 2.356194491;\n    if(x < 8) {\n      a1 = x*_horner(b1_a1a, y);\n      a2 = _horner(b1_a2a, y);\n      a = a1/a2 + W * (besselj(x,1) * M.log(x) - 1 / x);\n    } else {\n      y = 64 / y;\n      a1=_horner(b1_a1b, y);\n      a2=_horner(b1_a2b, y);\n      a=M.sqrt(W/x)*(M.sin(xx)*a1+M.cos(xx)*a2*8/x);\n    }\n    return a;\n  }\n\n  return _bessel_wrap(bessel0, bessel1, 'BESSELY', 1, -1);\n})();\nvar besseli = (function() {\n  var b0_a = [1.0, 3.5156229, 3.0899424, 1.2067492, 0.2659732, 0.360768e-1, 0.45813e-2].reverse();\n  var b0_b = [0.39894228, 0.1328592e-1, 0.225319e-2, -0.157565e-2, 0.916281e-2, -0.2057706e-1, 0.2635537e-1, -0.1647633e-1, 0.392377e-2].reverse();\n  function bessel0(x) {\n    if(x <= 3.75) return _horner(b0_a, x*x/(3.75*3.75));\n    return M.exp(M.abs(x))/M.sqrt(M.abs(x))*_horner(b0_b, 3.75/M.abs(x));\n  }\n\n  var b1_a = [0.5, 0.87890594, 0.51498869, 0.15084934, 0.2658733e-1, 0.301532e-2, 0.32411e-3].reverse();\n  var b1_b = [0.39894228, -0.3988024e-1, -0.362018e-2, 0.163801e-2, -0.1031555e-1, 0.2282967e-1, -0.2895312e-1, 0.1787654e-1, -0.420059e-2].reverse();\n  function bessel1(x) {\n    if(x < 3.75) return x * _horner(b1_a, x*x/(3.75*3.75));\n    return (x < 0 ? -1 : 1) * M.exp(M.abs(x))/M.sqrt(M.abs(x))*_horner(b1_b, 3.75/M.abs(x));\n  }\n\n  return function besseli(x, n) {\n    n = Math.round(n);\n    if(n === 0) return bessel0(x);\n    if(n == 1) return bessel1(x);\n    if(n < 0) throw 'BESSELI Order (' + n + ') must be nonnegative';\n    if(M.abs(x) === 0) return 0;\n\n    var ret, j, tox = 2 / M.abs(x), m, bip, bi, bim;\n    m=2*M.round((n+M.round(M.sqrt(40*n)))/2);\n    bip=ret=0.0;\n    bi=1.0;\n    for (j=m;j>0;j--) {\n      bim=j*tox*bi + bip;\n      bip=bi; bi=bim;\n      if (M.abs(bi) > 1E10) {\n        bi *= 1E-10;\n        bip *= 1E-10;\n        ret *= 1E-10;\n      }\n      if(j == n) ret = bip;\n    }\n    ret *= besseli(x, 0) / bi;\n    return x < 0 && (n%2) ? -ret : ret;\n  };\n\n})();\n\nvar besselk = (function() {\n  var b0_a = [-0.57721566, 0.42278420, 0.23069756, 0.3488590e-1, 0.262698e-2, 0.10750e-3, 0.74e-5].reverse();\n  var b0_b = [1.25331414, -0.7832358e-1, 0.2189568e-1, -0.1062446e-1, 0.587872e-2, -0.251540e-2, 0.53208e-3].reverse();\n  function bessel0(x) {\n    if(x <= 2) return -M.log(x/2)*besseli(x,0) + _horner(b0_a, x*x/4);\n    return M.exp(-x)/M.sqrt(x)*_horner(b0_b, 2/x);\n  }\n\n  var b1_a = [1.0, 0.15443144, -0.67278579, -0.18156897, -0.1919402e-1, -0.110404e-2, -0.4686e-4].reverse();\n  var b1_b = [1.25331414, 0.23498619, -0.3655620e-1, 0.1504268e-1, -0.780353e-2, 0.325614e-2, -0.68245e-3].reverse();\n  function bessel1(x) {\n    if(x <= 2) return M.log(x/2)*besseli(x,1) + (1/x)*_horner(b1_a, x*x/4);\n    return M.exp(-x)/M.sqrt(x)*_horner(b1_b, 2/x);\n  }\n\n  return _bessel_wrap(bessel0, bessel1, 'BESSELK', 2, 1);\n})();\nif(typeof exports !== \"undefined\") {\n  exports.besselj = besselj;\n  exports.bessely = bessely;\n  exports.besseli = besseli;\n  exports.besselk = besselk;\n}\n\n","var error = require('./error');\nvar stats = require('./statistical');\nvar maths = require('./math-trig');\nvar utils = require('./utils');\n\nfunction compact(array) {\n  var result = [];\n\n  utils.arrayEach(array, function(value) {\n    if (value) {\n      result.push(value);\n    }\n  });\n\n  return result;\n}\n\nexports.FINDFIELD = function(database, title) {\n  var index = null;\n\n  utils.arrayEach(database, function(value, i) {\n    if (value[0] === title) {\n      index = i;\n      return false;\n    }\n  });\n\n  // Return error if the input field title is incorrect\n  if (index == null) {\n    return error.value;\n  }\n\n  return index;\n};\n\nfunction findResultIndex(database, criterias) {\n  var matches = {};\n  for (var i = 1; i < database[0].length; ++i) {\n    matches[i] = true;\n  }\n  var maxCriteriaLength = criterias[0].length;\n  for (i = 1; i < criterias.length; ++i) {\n    if (criterias[i].length > maxCriteriaLength) {\n      maxCriteriaLength = criterias[i].length;\n    }\n  }\n\n  for (var k = 1; k < database.length; ++k) {\n    for (var l = 1; l < database[k].length; ++l) {\n      var currentCriteriaResult = false;\n      var hasMatchingCriteria   = false;\n      for (var j = 0; j < criterias.length; ++j) {\n        var criteria = criterias[j];\n        if (criteria.length < maxCriteriaLength) {\n          continue;\n        }\n\n        var criteriaField = criteria[0];\n        if (database[k][0] !== criteriaField) {\n          continue;\n        }\n        hasMatchingCriteria = true;\n        for (var p = 1; p < criteria.length; ++p) {\n          currentCriteriaResult = currentCriteriaResult || eval(database[k][l] + criteria[p]);  // jshint ignore:line\n        }\n      }\n      if (hasMatchingCriteria) {\n        matches[l] = matches[l] && currentCriteriaResult;\n      }\n    }\n  }\n\n  var result = [];\n  for (var n = 0; n < database[0].length; ++n) {\n    if (matches[n]) {\n      result.push(n - 1);\n    }\n  }\n\n  return result;\n}\n\n// Database functions\nexports.DAVERAGE = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var sum = 0;\n\n  utils.arrayEach(resultIndexes, function(value) {\n    sum += targetFields[value];\n  });\n\n  return resultIndexes.length === 0 ? error.div0 : sum / resultIndexes.length;\n};\n\nexports.DCOUNT = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return stats.COUNT(targetValues);\n};\n\nexports.DCOUNTA = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return stats.COUNTA(targetValues);\n};\n\nexports.DGET = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  // Return error if no record meets the criteria\n  if (resultIndexes.length === 0) {\n    return error.value;\n  }\n  // Returns the #NUM! error value because more than one record meets the\n  // criteria\n  if (resultIndexes.length > 1) {\n    return error.num;\n  }\n\n  return targetFields[resultIndexes[0]];\n};\n\nexports.DMAX = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var maxValue = targetFields[resultIndexes[0]];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    if (maxValue < targetFields[value]) {\n      maxValue = targetFields[value];\n    }\n  });\n\n  return maxValue;\n};\n\nexports.DMIN = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var minValue = targetFields[resultIndexes[0]];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    if (minValue > targetFields[value]) {\n      minValue = targetFields[value];\n    }\n  });\n\n  return minValue;\n};\n\nexports.DPRODUCT = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n  targetValues = compact(targetValues);\n\n  var result = 1;\n\n  utils.arrayEach(targetValues, function(value) {\n    result *= value;\n  });\n\n  return result;\n};\n\nexports.DSTDEV = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n  targetValues = compact(targetValues);\n\n  return stats.STDEV.S(targetValues);\n};\n\nexports.DSTDEVP = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n  targetValues = compact(targetValues);\n\n  return stats.STDEV.P(targetValues);\n};\n\nexports.DSUM = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return maths.SUM(targetValues);\n};\n\nexports.DVAR = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return stats.VAR.S(targetValues);\n};\n\nexports.DVARP = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return stats.VAR.P(targetValues);\n};\n","var error = require('./error');\nvar utils = require('./utils');\nvar information = require('./information');\n\nexports.AND = function() {\n  var args = utils.flatten(arguments);\n  var result = true;\n  for (var i = 0; i < args.length; i++) {\n    if (!args[i]) {\n      result = false;\n    }\n  }\n  return result;\n};\n\nexports.CHOOSE = function() {\n  if (arguments.length < 2) {\n    return error.na;\n  }\n\n  var index = arguments[0];\n  if (index < 1 || index > 254) {\n    return error.value;\n  }\n\n  if (arguments.length < index + 1) {\n    return error.value;\n  }\n\n  return arguments[index];\n};\n\nexports.FALSE = function() {\n  return false;\n};\n\nexports.IF = function(test, then_value, otherwise_value) {\n  return test ? then_value : otherwise_value;\n};\n\nexports.IFERROR = function(value, valueIfError) {\n  if (information.ISERROR(value)) {\n    return valueIfError;\n  }\n  return value;\n};\n\nexports.IFNA = function(value, value_if_na) {\n  return value === error.na ? value_if_na : value;\n};\n\nexports.NOT = function(logical) {\n  return !logical;\n};\n\nexports.OR = function() {\n  var args = utils.flatten(arguments);\n  var result = false;\n  for (var i = 0; i < args.length; i++) {\n    if (args[i]) {\n      result = true;\n    }\n  }\n  return result;\n};\n\nexports.TRUE = function() {\n  return true;\n};\n\nexports.XOR = function() {\n  var args = utils.flatten(arguments);\n  var result = 0;\n  for (var i = 0; i < args.length; i++) {\n    if (args[i]) {\n      result++;\n    }\n  }\n  return (Math.floor(Math.abs(result)) & 1) ? true : false;\n};\n\nexports.SWITCH = function () {\n  var result;\n\n  if (arguments.length > 0)  {\n    var targetValue = arguments[0];\n    var argc = arguments.length - 1;\n    var switchCount = Math.floor(argc / 2);\n    var switchSatisfied = false;\n    var hasDefaultClause = argc % 2 !== 0;\n    var defaultClause = argc % 2 === 0 ? null : arguments[arguments.length - 1];\n\n    if (switchCount) {\n      for (var index = 0; index < switchCount; index++) {\n        if (targetValue === arguments[index * 2 + 1]) {\n          result = arguments[index * 2 + 2];\n          switchSatisfied = true;\n          break;\n        }\n      }\n    }\n\n    if (!switchSatisfied) {\n      result = hasDefaultClause ? defaultClause : error.na;\n    }\n  } else {\n    result = error.value;\n  }\n\n  return result;\n};\n","var error = require('./error');\nvar dateTime = require('./date-time');\nvar utils = require('./utils');\n\nfunction validDate(d) {\n  return d && d.getTime && !isNaN(d.getTime());\n}\n\nfunction ensureDate(d) {\n  return (d instanceof Date)?d:new Date(d);\n}\n\nexports.ACCRINT = function(issue, first, settlement, rate, par, frequency, basis) {\n  // Return error if either date is invalid\n  issue      = ensureDate(issue);\n  first      = ensureDate(first);\n  settlement = ensureDate(settlement);\n  if (!validDate(issue) || !validDate(first) || !validDate(settlement)) {\n    return error.value;\n  }\n\n  // Return error if either rate or par are lower than or equal to zero\n  if (rate <= 0 || par <= 0) {\n    return error.num;\n  }\n\n  // Return error if frequency is neither 1, 2, or 4\n  if ([1, 2, 4].indexOf(frequency) === -1) {\n    return error.num;\n  }\n\n  // Return error if basis is neither 0, 1, 2, 3, or 4\n  if ([0, 1, 2, 3, 4].indexOf(basis) === -1) {\n    return error.num;\n  }\n\n  // Return error if settlement is before or equal to issue\n  if (settlement <= issue) {\n    return error.num;\n  }\n\n  // Set default values\n  par   = par   || 0;\n  basis = basis || 0;\n\n  // Compute accrued interest\n  return par * rate * dateTime.YEARFRAC(issue, settlement, basis);\n};\n\n// TODO\nexports.ACCRINTM = function() {\n  throw new Error('ACCRINTM is not implemented');\n};\n\n// TODO\nexports.AMORDEGRC = function() {\n  throw new Error('AMORDEGRC is not implemented');\n};\n\n// TODO\nexports.AMORLINC = function() {\n  throw new Error('AMORLINC is not implemented');\n};\n\n// TODO\nexports.COUPDAYBS = function() {\n  throw new Error('COUPDAYBS is not implemented');\n};\n\n// TODO\nexports.COUPDAYS = function() {\n  throw new Error('COUPDAYS is not implemented');\n};\n\n// TODO\nexports.COUPDAYSNC = function() {\n  throw new Error('COUPDAYSNC is not implemented');\n};\n\n// TODO\nexports.COUPNCD = function() {\n  throw new Error('COUPNCD is not implemented');\n};\n\n// TODO\nexports.COUPNUM = function() {\n  throw new Error('COUPNUM is not implemented');\n};\n\n// TODO\nexports.COUPPCD = function() {\n  throw new Error('COUPPCD is not implemented');\n};\n\nexports.CUMIPMT = function(rate, periods, value, start, end, type) {\n  // Credits: algorithm inspired by Apache OpenOffice\n  // Credits: Hannes Stiebitzhofer for the translations of function and variable names\n  // Requires exports.FV() and exports.PMT() from exports.js [http://stoic.com/exports/]\n\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  value = utils.parseNumber(value);\n  if (utils.anyIsError(rate, periods, value)) {\n    return error.value;\n  }\n\n  // Return error if either rate, periods, or value are lower than or equal to zero\n  if (rate <= 0 || periods <= 0 || value <= 0) {\n    return error.num;\n  }\n\n  // Return error if start < 1, end < 1, or start > end\n  if (start < 1 || end < 1 || start > end) {\n    return error.num;\n  }\n\n  // Return error if type is neither 0 nor 1\n  if (type !== 0 && type !== 1) {\n    return error.num;\n  }\n\n  // Compute cumulative interest\n  var payment = exports.PMT(rate, periods, value, 0, type);\n  var interest = 0;\n\n  if (start === 1) {\n    if (type === 0) {\n      interest = -value;\n      start++;\n    }\n  }\n\n  for (var i = start; i <= end; i++) {\n    if (type === 1) {\n      interest += exports.FV(rate, i - 2, payment, value, 1) - payment;\n    } else {\n      interest += exports.FV(rate, i - 1, payment, value, 0);\n    }\n  }\n  interest *= rate;\n\n  // Return cumulative interest\n  return interest;\n};\n\nexports.CUMPRINC = function(rate, periods, value, start, end, type) {\n  // Credits: algorithm inspired by Apache OpenOffice\n  // Credits: Hannes Stiebitzhofer for the translations of function and variable names\n\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  value = utils.parseNumber(value);\n  if (utils.anyIsError(rate, periods, value)) {\n    return error.value;\n  }\n\n  // Return error if either rate, periods, or value are lower than or equal to zero\n  if (rate <= 0 || periods <= 0 || value <= 0) {\n    return error.num;\n  }\n\n  // Return error if start < 1, end < 1, or start > end\n  if (start < 1 || end < 1 || start > end) {\n    return error.num;\n  }\n\n  // Return error if type is neither 0 nor 1\n  if (type !== 0 && type !== 1) {\n    return error.num;\n  }\n\n  // Compute cumulative principal\n  var payment = exports.PMT(rate, periods, value, 0, type);\n  var principal = 0;\n  if (start === 1) {\n    if (type === 0) {\n      principal = payment + value * rate;\n    } else {\n      principal = payment;\n    }\n    start++;\n  }\n  for (var i = start; i <= end; i++) {\n    if (type > 0) {\n      principal += payment - (exports.FV(rate, i - 2, payment, value, 1) - payment) * rate;\n    } else {\n      principal += payment - exports.FV(rate, i - 1, payment, value, 0) * rate;\n    }\n  }\n\n  // Return cumulative principal\n  return principal;\n};\n\nexports.DB = function(cost, salvage, life, period, month) {\n  // Initialize month\n  month = (month === undefined) ? 12 : month;\n\n  cost = utils.parseNumber(cost);\n  salvage = utils.parseNumber(salvage);\n  life = utils.parseNumber(life);\n  period = utils.parseNumber(period);\n  month = utils.parseNumber(month);\n  if (utils.anyIsError(cost, salvage, life, period, month)) {\n    return error.value;\n  }\n\n  // Return error if any of the parameters is negative\n  if (cost < 0 || salvage < 0 || life < 0 || period < 0) {\n    return error.num;\n  }\n\n  // Return error if month is not an integer between 1 and 12\n  if ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].indexOf(month) === -1) {\n    return error.num;\n  }\n\n  // Return error if period is greater than life\n  if (period > life) {\n    return error.num;\n  }\n\n  // Return 0 (zero) if salvage is greater than or equal to cost\n  if (salvage >= cost) {\n    return 0;\n  }\n\n  // Rate is rounded to three decimals places\n  var rate = (1 - Math.pow(salvage / cost, 1 / life)).toFixed(3);\n\n  // Compute initial depreciation\n  var initial = cost * rate * month / 12;\n\n  // Compute total depreciation\n  var total = initial;\n  var current = 0;\n  var ceiling = (period === life) ? life - 1 : period;\n  for (var i = 2; i <= ceiling; i++) {\n    current = (cost - total) * rate;\n    total += current;\n  }\n\n  // Depreciation for the first and last periods are special cases\n  if (period === 1) {\n    // First period\n    return initial;\n  } else if (period === life) {\n    // Last period\n    return (cost - total) * rate;\n  } else {\n    return current;\n  }\n};\n\nexports.DDB = function(cost, salvage, life, period, factor) {\n  // Initialize factor\n  factor = (factor === undefined) ? 2 : factor;\n\n  cost = utils.parseNumber(cost);\n  salvage = utils.parseNumber(salvage);\n  life = utils.parseNumber(life);\n  period = utils.parseNumber(period);\n  factor = utils.parseNumber(factor);\n  if (utils.anyIsError(cost, salvage, life, period, factor)) {\n    return error.value;\n  }\n\n  // Return error if any of the parameters is negative or if factor is null\n  if (cost < 0 || salvage < 0 || life < 0 || period < 0 || factor <= 0) {\n    return error.num;\n  }\n\n  // Return error if period is greater than life\n  if (period > life) {\n    return error.num;\n  }\n\n  // Return 0 (zero) if salvage is greater than or equal to cost\n  if (salvage >= cost) {\n    return 0;\n  }\n\n  // Compute depreciation\n  var total = 0;\n  var current = 0;\n  for (var i = 1; i <= period; i++) {\n    current = Math.min((cost - total) * (factor / life), (cost - salvage - total));\n    total += current;\n  }\n\n  // Return depreciation\n  return current;\n};\n\n// TODO\nexports.DISC = function() {\n  throw new Error('DISC is not implemented');\n};\n\nexports.DOLLARDE = function(dollar, fraction) {\n  // Credits: algorithm inspired by Apache OpenOffice\n\n  dollar = utils.parseNumber(dollar);\n  fraction = utils.parseNumber(fraction);\n  if (utils.anyIsError(dollar, fraction)) {\n    return error.value;\n  }\n\n  // Return error if fraction is negative\n  if (fraction < 0) {\n    return error.num;\n  }\n\n  // Return error if fraction is greater than or equal to 0 and less than 1\n  if (fraction >= 0 && fraction < 1) {\n    return error.div0;\n  }\n\n  // Truncate fraction if it is not an integer\n  fraction = parseInt(fraction, 10);\n\n  // Compute integer part\n  var result = parseInt(dollar, 10);\n\n  // Add decimal part\n  result += (dollar % 1) * Math.pow(10, Math.ceil(Math.log(fraction) / Math.LN10)) / fraction;\n\n  // Round result\n  var power = Math.pow(10, Math.ceil(Math.log(fraction) / Math.LN2) + 1);\n  result = Math.round(result * power) / power;\n\n  // Return converted dollar price\n  return result;\n};\n\nexports.DOLLARFR = function(dollar, fraction) {\n  // Credits: algorithm inspired by Apache OpenOffice\n\n  dollar = utils.parseNumber(dollar);\n  fraction = utils.parseNumber(fraction);\n  if (utils.anyIsError(dollar, fraction)) {\n    return error.value;\n  }\n\n  // Return error if fraction is negative\n  if (fraction < 0) {\n    return error.num;\n  }\n\n  // Return error if fraction is greater than or equal to 0 and less than 1\n  if (fraction >= 0 && fraction < 1) {\n    return error.div0;\n  }\n\n  // Truncate fraction if it is not an integer\n  fraction = parseInt(fraction, 10);\n\n  // Compute integer part\n  var result = parseInt(dollar, 10);\n\n  // Add decimal part\n  result += (dollar % 1) * Math.pow(10, -Math.ceil(Math.log(fraction) / Math.LN10)) * fraction;\n\n  // Return converted dollar price\n  return result;\n};\n\n// TODO\nexports.DURATION = function() {\n  throw new Error('DURATION is not implemented');\n};\n\nexports.EFFECT = function(rate, periods) {\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  if (utils.anyIsError(rate, periods)) {\n    return error.value;\n  }\n\n  // Return error if rate <=0 or periods < 1\n  if (rate <= 0 || periods < 1) {\n    return error.num;\n  }\n\n  // Truncate periods if it is not an integer\n  periods = parseInt(periods, 10);\n\n  // Return effective annual interest rate\n  return Math.pow(1 + rate / periods, periods) - 1;\n};\n\nexports.FV = function(rate, periods, payment, value, type) {\n  // Credits: algorithm inspired by Apache OpenOffice\n\n  value = value || 0;\n  type = type || 0;\n\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  payment = utils.parseNumber(payment);\n  value = utils.parseNumber(value);\n  type = utils.parseNumber(type);\n  if (utils.anyIsError(rate, periods, payment, value, type)) {\n    return error.value;\n  }\n\n  // Return future value\n  var result;\n  if (rate === 0) {\n    result = value + payment * periods;\n  } else {\n    var term = Math.pow(1 + rate, periods);\n    if (type === 1) {\n      result = value * term + payment * (1 + rate) * (term - 1) / rate;\n    } else {\n      result = value * term + payment * (term - 1) / rate;\n    }\n  }\n  return -result;\n};\n\nexports.FVSCHEDULE = function(principal, schedule) {\n  principal = utils.parseNumber(principal);\n  schedule = utils.parseNumberArray(utils.flatten(schedule));\n  if (utils.anyIsError(principal, schedule)) {\n    return error.value;\n  }\n\n  var n = schedule.length;\n  var future = principal;\n\n  // Apply all interests in schedule\n  for (var i = 0; i < n; i++) {\n    // Apply scheduled interest\n    future *= 1 + schedule[i];\n  }\n\n  // Return future value\n  return future;\n};\n\n// TODO\nexports.INTRATE = function() {\n  throw new Error('INTRATE is not implemented');\n};\n\nexports.IPMT = function(rate, period, periods, present, future, type) {\n  // Credits: algorithm inspired by Apache OpenOffice\n\n  future = future || 0;\n  type = type || 0;\n\n  rate = utils.parseNumber(rate);\n  period = utils.parseNumber(period);\n  periods = utils.parseNumber(periods);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  type = utils.parseNumber(type);\n  if (utils.anyIsError(rate, period, periods, present, future, type)) {\n    return error.value;\n  }\n\n  // Compute payment\n  var payment = exports.PMT(rate, periods, present, future, type);\n\n  // Compute interest\n  var interest;\n  if (period === 1) {\n    if (type === 1) {\n      interest = 0;\n    } else {\n      interest = -present;\n    }\n  } else {\n    if (type === 1) {\n      interest = exports.FV(rate, period - 2, payment, present, 1) - payment;\n    } else {\n      interest = exports.FV(rate, period - 1, payment, present, 0);\n    }\n  }\n\n  // Return interest\n  return interest * rate;\n};\n\nexports.IRR = function(values, guess) {\n  // Credits: algorithm inspired by Apache OpenOffice\n\n  guess = guess || 0;\n\n  values = utils.parseNumberArray(utils.flatten(values));\n  guess = utils.parseNumber(guess);\n  if (utils.anyIsError(values, guess)) {\n    return error.value;\n  }\n\n  // Calculates the resulting amount\n  var irrResult = function(values, dates, rate) {\n    var r = rate + 1;\n    var result = values[0];\n    for (var i = 1; i < values.length; i++) {\n      result += values[i] / Math.pow(r, (dates[i] - dates[0]) / 365);\n    }\n    return result;\n  };\n\n  // Calculates the first derivation\n  var irrResultDeriv = function(values, dates, rate) {\n    var r = rate + 1;\n    var result = 0;\n    for (var i = 1; i < values.length; i++) {\n      var frac = (dates[i] - dates[0]) / 365;\n      result -= frac * values[i] / Math.pow(r, frac + 1);\n    }\n    return result;\n  };\n\n  // Initialize dates and check that values contains at least one positive value and one negative value\n  var dates = [];\n  var positive = false;\n  var negative = false;\n  for (var i = 0; i < values.length; i++) {\n    dates[i] = (i === 0) ? 0 : dates[i - 1] + 365;\n    if (values[i] > 0) {\n      positive = true;\n    }\n    if (values[i] < 0) {\n      negative = true;\n    }\n  }\n\n  // Return error if values does not contain at least one positive value and one negative value\n  if (!positive || !negative) {\n    return error.num;\n  }\n\n  // Initialize guess and resultRate\n  guess = (guess === undefined) ? 0.1 : guess;\n  var resultRate = guess;\n\n  // Set maximum epsilon for end of iteration\n  var epsMax = 1e-10;\n\n  // Implement Newton's method\n  var newRate, epsRate, resultValue;\n  var contLoop = true;\n  do {\n    resultValue = irrResult(values, dates, resultRate);\n    newRate = resultRate - resultValue / irrResultDeriv(values, dates, resultRate);\n    epsRate = Math.abs(newRate - resultRate);\n    resultRate = newRate;\n    contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);\n  } while (contLoop);\n\n  // Return internal rate of return\n  return resultRate;\n};\n\nexports.ISPMT = function(rate, period, periods, value) {\n  rate = utils.parseNumber(rate);\n  period = utils.parseNumber(period);\n  periods = utils.parseNumber(periods);\n  value = utils.parseNumber(value);\n  if (utils.anyIsError(rate, period, periods, value)) {\n    return error.value;\n  }\n\n  // Return interest\n  return value * rate * (period / periods - 1);\n};\n\n// TODO\nexports.MDURATION = function() {\n  throw new Error('MDURATION is not implemented');\n};\n\nexports.MIRR = function(values, finance_rate, reinvest_rate) {\n  values = utils.parseNumberArray(utils.flatten(values));\n  finance_rate = utils.parseNumber(finance_rate);\n  reinvest_rate = utils.parseNumber(reinvest_rate);\n  if (utils.anyIsError(values, finance_rate, reinvest_rate)) {\n    return error.value;\n  }\n\n  // Initialize number of values\n  var n = values.length;\n\n  // Lookup payments (negative values) and incomes (positive values)\n  var payments = [];\n  var incomes = [];\n  for (var i = 0; i < n; i++) {\n    if (values[i] < 0) {\n      payments.push(values[i]);\n    } else {\n      incomes.push(values[i]);\n    }\n  }\n\n  // Return modified internal rate of return\n  var num = -exports.NPV(reinvest_rate, incomes) * Math.pow(1 + reinvest_rate, n - 1);\n  var den = exports.NPV(finance_rate, payments) * (1 + finance_rate);\n  return Math.pow(num / den, 1 / (n - 1)) - 1;\n};\n\nexports.NOMINAL = function(rate, periods) {\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  if (utils.anyIsError(rate, periods)) {\n    return error.value;\n  }\n\n  // Return error if rate <=0 or periods < 1\n  if (rate <= 0 || periods < 1) {\n    return error.num;\n  }\n\n  // Truncate periods if it is not an integer\n  periods = parseInt(periods, 10);\n\n  // Return nominal annual interest rate\n  return (Math.pow(rate + 1, 1 / periods) - 1) * periods;\n};\n\nexports.NPER = function(rate, payment, present, future, type) {\n  type = (type === undefined) ? 0 : type;\n  future = (future === undefined) ? 0 : future;\n\n  rate = utils.parseNumber(rate);\n  payment = utils.parseNumber(payment);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  type = utils.parseNumber(type);\n  if (utils.anyIsError(rate, payment, present, future, type)) {\n    return error.value;\n  }\n\n  // Return number of periods\n  var num = payment * (1 + rate * type) - future * rate;\n  var den = (present * rate + payment * (1 + rate * type));\n  return Math.log(num / den) / Math.log(1 + rate);\n};\n\nexports.NPV = function() {\n  var args = utils.parseNumberArray(utils.flatten(arguments));\n  if (args instanceof Error) {\n    return args;\n  }\n\n  // Lookup rate\n  var rate = args[0];\n\n  // Initialize net present value\n  var value = 0;\n\n  // Loop on all values\n  for (var j = 1; j < args.length; j++) {\n    value += args[j] / Math.pow(1 + rate, j);\n  }\n\n  // Return net present value\n  return value;\n};\n\n// TODO\nexports.ODDFPRICE = function() {\n  throw new Error('ODDFPRICE is not implemented');\n};\n\n// TODO\nexports.ODDFYIELD = function() {\n  throw new Error('ODDFYIELD is not implemented');\n};\n\n// TODO\nexports.ODDLPRICE = function() {\n  throw new Error('ODDLPRICE is not implemented');\n};\n\n// TODO\nexports.ODDLYIELD = function() {\n  throw new Error('ODDLYIELD is not implemented');\n};\n\nexports.PDURATION = function(rate, present, future) {\n  rate = utils.parseNumber(rate);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  if (utils.anyIsError(rate, present, future)) {\n    return error.value;\n  }\n\n  // Return error if rate <=0\n  if (rate <= 0) {\n    return error.num;\n  }\n\n  // Return number of periods\n  return (Math.log(future) - Math.log(present)) / Math.log(1 + rate);\n};\n\nexports.PMT = function(rate, periods, present, future, type) {\n  // Credits: algorithm inspired by Apache OpenOffice\n  if (present === undefined) {\n    return 0;\n  }\n\n  future = future || 0;\n  type = type || 0;\n\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  type = utils.parseNumber(type);\n  if (utils.anyIsError(rate, periods, present, future, type)) {\n    return error.value;\n  }\n\n  // Return payment\n  var result;\n  if (rate === 0) {\n    result = (present + future) / periods;\n  } else {\n    var term = Math.pow(1 + rate, periods);\n    if (type === 1) {\n      result = (future * rate / (term - 1) + present * rate / (1 - 1 / term)) / (1 + rate);\n    } else {\n      result = future * rate / (term - 1) + present * rate / (1 - 1 / term);\n    }\n  }\n  return -result;\n};\n\nexports.PPMT = function(rate, period, periods, present, future, type) {\n  future = future || 0;\n  type = type || 0;\n\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  type = utils.parseNumber(type);\n  if (utils.anyIsError(rate, periods, present, future, type)) {\n    return error.value;\n  }\n\n  return exports.PMT(rate, periods, present, future, type) - exports.IPMT(rate, period, periods, present, future, type);\n};\n\n// TODO\nexports.PRICE = function() {\n  throw new Error('PRICE is not implemented');\n};\n\n// TODO\nexports.PRICEDISC = function() {\n  throw new Error('PRICEDISC is not implemented');\n};\n\n// TODO\nexports.PRICEMAT = function() {\n  throw new Error('PRICEMAT is not implemented');\n};\n\nexports.PV = function(rate, periods, payment, future, type) {\n  future = future || 0;\n  type = type || 0;\n\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  payment = utils.parseNumber(payment);\n  future = utils.parseNumber(future);\n  type = utils.parseNumber(type);\n  if (utils.anyIsError(rate, periods, payment, future, type)) {\n    return error.value;\n  }\n\n  // Return present value\n  if (rate === 0) {\n    return -payment * periods - future;\n  } else {\n    return (((1 - Math.pow(1 + rate, periods)) / rate) * payment * (1 + rate * type) - future) / Math.pow(1 + rate, periods);\n  }\n};\n\nexports.RATE = function(periods, payment, present, future, type, guess) {\n  // Credits: rabugento\n\n  guess = (guess === undefined) ? 0.01 : guess;\n  future = (future === undefined) ? 0 : future;\n  type = (type === undefined) ? 0 : type;\n\n  periods = utils.parseNumber(periods);\n  payment = utils.parseNumber(payment);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  type = utils.parseNumber(type);\n  guess = utils.parseNumber(guess);\n  if (utils.anyIsError(periods, payment, present, future, type, guess)) {\n    return error.value;\n  }\n\n  // Set maximum epsilon for end of iteration\n  var epsMax = 1e-10;\n\n  // Set maximum number of iterations\n  var iterMax = 50;\n\n  // Implement Newton's method\n  var y, y0, y1, x0, x1 = 0,\n    f = 0,\n    i = 0;\n  var rate = guess;\n  if (Math.abs(rate) < epsMax) {\n    y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;\n  } else {\n    f = Math.exp(periods * Math.log(1 + rate));\n    y = present * f + payment * (1 / rate + type) * (f - 1) + future;\n  }\n  y0 = present + payment * periods + future;\n  y1 = present * f + payment * (1 / rate + type) * (f - 1) + future;\n  i = x0 = 0;\n  x1 = rate;\n  while ((Math.abs(y0 - y1) > epsMax) && (i < iterMax)) {\n    rate = (y1 * x0 - y0 * x1) / (y1 - y0);\n    x0 = x1;\n    x1 = rate;\n    if (Math.abs(rate) < epsMax) {\n      y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;\n    } else {\n      f = Math.exp(periods * Math.log(1 + rate));\n      y = present * f + payment * (1 / rate + type) * (f - 1) + future;\n    }\n    y0 = y1;\n    y1 = y;\n    ++i;\n  }\n  return rate;\n};\n\n// TODO\nexports.RECEIVED = function() {\n  throw new Error('RECEIVED is not implemented');\n};\n\nexports.RRI = function(periods, present, future) {\n  periods = utils.parseNumber(periods);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  if (utils.anyIsError(periods, present, future)) {\n    return error.value;\n  }\n\n  // Return error if periods or present is equal to 0 (zero)\n  if (periods === 0 || present === 0) {\n    return error.num;\n  }\n\n  // Return equivalent interest rate\n  return Math.pow(future / present, 1 / periods) - 1;\n};\n\nexports.SLN = function(cost, salvage, life) {\n  cost = utils.parseNumber(cost);\n  salvage = utils.parseNumber(salvage);\n  life = utils.parseNumber(life);\n  if (utils.anyIsError(cost, salvage, life)) {\n    return error.value;\n  }\n\n  // Return error if life equal to 0 (zero)\n  if (life === 0) {\n    return error.num;\n  }\n\n  // Return straight-line depreciation\n  return (cost - salvage) / life;\n};\n\nexports.SYD = function(cost, salvage, life, period) {\n  // Return error if any of the parameters is not a number\n  cost = utils.parseNumber(cost);\n  salvage = utils.parseNumber(salvage);\n  life = utils.parseNumber(life);\n  period = utils.parseNumber(period);\n  if (utils.anyIsError(cost, salvage, life, period)) {\n    return error.value;\n  }\n\n  // Return error if life equal to 0 (zero)\n  if (life === 0) {\n    return error.num;\n  }\n\n  // Return error if period is lower than 1 or greater than life\n  if (period < 1 || period > life) {\n    return error.num;\n  }\n\n  // Truncate period if it is not an integer\n  period = parseInt(period, 10);\n\n  // Return straight-line depreciation\n  return ((cost - salvage) * (life - period + 1) * 2) / (life * (life + 1));\n};\n\nexports.TBILLEQ = function(settlement, maturity, discount) {\n  settlement = utils.parseDate(settlement);\n  maturity = utils.parseDate(maturity);\n  discount = utils.parseNumber(discount);\n  if (utils.anyIsError(settlement, maturity, discount)) {\n    return error.value;\n  }\n\n  // Return error if discount is lower than or equal to zero\n  if (discount <= 0) {\n    return error.num;\n  }\n\n  // Return error if settlement is greater than maturity\n  if (settlement > maturity) {\n    return error.num;\n  }\n\n  // Return error if maturity is more than one year after settlement\n  if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {\n    return error.num;\n  }\n\n  // Return bond-equivalent yield\n  return (365 * discount) / (360 - discount * dateTime.DAYS360(settlement, maturity, false));\n};\n\nexports.TBILLPRICE = function(settlement, maturity, discount) {\n  settlement = utils.parseDate(settlement);\n  maturity = utils.parseDate(maturity);\n  discount = utils.parseNumber(discount);\n  if (utils.anyIsError(settlement, maturity, discount)) {\n    return error.value;\n  }\n\n  // Return error if discount is lower than or equal to zero\n  if (discount <= 0) {\n    return error.num;\n  }\n\n  // Return error if settlement is greater than maturity\n  if (settlement > maturity) {\n    return error.num;\n  }\n\n  // Return error if maturity is more than one year after settlement\n  if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {\n    return error.num;\n  }\n\n  // Return bond-equivalent yield\n  return 100 * (1 - discount * dateTime.DAYS360(settlement, maturity, false) / 360);\n};\n\nexports.TBILLYIELD = function(settlement, maturity, price) {\n  settlement = utils.parseDate(settlement);\n  maturity = utils.parseDate(maturity);\n  price = utils.parseNumber(price);\n  if (utils.anyIsError(settlement, maturity, price)) {\n    return error.value;\n  }\n\n  // Return error if price is lower than or equal to zero\n  if (price <= 0) {\n    return error.num;\n  }\n\n  // Return error if settlement is greater than maturity\n  if (settlement > maturity) {\n    return error.num;\n  }\n\n  // Return error if maturity is more than one year after settlement\n  if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {\n    return error.num;\n  }\n\n  // Return bond-equivalent yield\n  return (100 - price) * 360 / (price * dateTime.DAYS360(settlement, maturity, false));\n};\n\n// TODO\nexports.VDB = function() {\n  throw new Error('VDB is not implemented');\n};\n\n// TODO needs better support for date\n// exports.XIRR = function(values, dates, guess) {\n//   // Credits: algorithm inspired by Apache OpenOffice\n//\n//   values = utils.parseNumberArray(utils.flatten(values));\n//   dates = utils.parseDateArray(utils.flatten(dates));\n//   guess = utils.parseNumber(guess);\n//\n//   if (utils.anyIsError(values, dates, guess)) {\n//     return error.value;\n//   }\n//\n//   // Calculates the resulting amount\n//   var irrResult = function(values, dates, rate) {\n//     var r = rate + 1;\n//     var result = values[0];\n//     for (var i = 1; i < values.length; i++) {\n//       result += values[i] / Math.pow(r, dateTime.DAYS(dates[i], dates[0]) / 365);\n//     }\n//     return result;\n//   };\n//\n//   // Calculates the first derivation\n//   var irrResultDeriv = function(values, dates, rate) {\n//     var r = rate + 1;\n//     var result = 0;\n//     for (var i = 1; i < values.length; i++) {\n//       var frac = dateTime.DAYS(dates[i], dates[0]) / 365;\n//       result -= frac * values[i] / Math.pow(r, frac + 1);\n//     }\n//     return result;\n//   };\n//\n//   // Check that values contains at least one positive value and one negative value\n//   var positive = false;\n//   var negative = false;\n//   for (var i = 0; i < values.length; i++) {\n//     if (values[i] > 0) {\n//       positive = true;\n//     }\n//     if (values[i] < 0) {\n//       negative = true;\n//     }\n//   }\n//\n//   // Return error if values does not contain at least one positive value and one negative value\n//   if (!positive || !negative) {\n//     return error.num;\n//   }\n//\n//   // Initialize guess and resultRate\n//   guess = guess || 0.1;\n//   var resultRate = guess;\n//\n//   // Set maximum epsilon for end of iteration\n//   var epsMax = 1e-10;\n//\n//   // Implement Newton's method\n//   var newRate, epsRate, resultValue;\n//   var contLoop = true;\n//   do {\n//     resultValue = irrResult(values, dates, resultRate);\n//     newRate = resultRate - resultValue / irrResultDeriv(values, dates, resultRate);\n//     epsRate = Math.abs(newRate - resultRate);\n//     resultRate = newRate;\n//     contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);\n//   } while (contLoop);\n//\n//   // Return internal rate of return\n//   return resultRate;\n// };\n\nexports.XNPV = function(rate, values, dates) {\n  rate = utils.parseNumber(rate);\n  values = utils.parseNumberArray(utils.flatten(values));\n  dates = utils.parseDateArray(utils.flatten(dates));\n  if (utils.anyIsError(rate, values, dates)) {\n    return error.value;\n  }\n\n  var result = 0;\n  for (var i = 0; i < values.length; i++) {\n    result += values[i] / Math.pow(1 + rate, dateTime.DAYS(dates[i], dates[0]) / 365);\n  }\n  return result;\n};\n\n// TODO\nexports.YIELD = function() {\n  throw new Error('YIELD is not implemented');\n};\n\n// TODO\nexports.YIELDDISC = function() {\n  throw new Error('YIELDDISC is not implemented');\n};\n\n// TODO\nexports.YIELDMAT = function() {\n  throw new Error('YIELDMAT is not implemented');\n};\n","var error = require('./error');\nvar utils = require('./utils');\n\nexports.INDEX = function(lookupArray, lookupRow, lookupColumn) {\n  if (!lookupArray && !lookupRow) {\n    return error.na;\n  }\n\n  if (!(lookupArray instanceof Array)) {\n    return error.na;\n  }\n\n  if (arguments.length === 2) {\n    if (lookupArray[0].length === 1) {\n      lookupArray = lookupArray.flatten();\n    }\n    return lookupArray[lookupRow - 1];\n  } else {\n    return lookupArray[lookupRow - 1][lookupColumn - 1];\n  }\n};\n\nexports.MATCH = function(lookupValue, lookupArray, matchType) {\n  if (matchType === true) {\n    matchType = 1;\n  }\n\n  if (!lookupValue && !lookupArray) {\n    return error.na;\n  }\n\n  if (arguments.length === 2) {\n    matchType = 1;\n  }\n  if (!(lookupArray instanceof Array)) {\n    return error.na;\n  }\n\n  if (matchType !== -1 && matchType !== 0 && matchType !== 1) {\n    return error.na;\n  }\n\n  lookupArray = lookupArray.flatten();\n\n  var index;\n  var indexValue;\n  for (var idx = 0; idx < lookupArray.length; idx++) {\n    if (matchType === 1) {\n      if (lookupArray[idx] === lookupValue) {\n        return idx + 1;\n      } else if (lookupArray[idx] < lookupValue) {\n        if (!indexValue) {\n          index = idx + 1;\n          indexValue = lookupArray[idx];\n        } else if (lookupArray[idx] > indexValue) {\n          index = idx + 1;\n          indexValue = lookupArray[idx];\n        }\n      }\n    } else if (matchType === 0) {\n      if (typeof lookupValue === 'string') {\n        lookupValue = lookupValue.replace(/\\?/g, '.');\n        if (lookupArray[idx].toLowerCase().match(lookupValue.toLowerCase())) {\n          return idx + 1;\n        }\n      } else {\n        if (lookupArray[idx] === lookupValue) {\n          return idx + 1;\n        }\n      }\n    } else if (matchType === -1) {\n      if (lookupArray[idx] === lookupValue) {\n        return idx + 1;\n      } else if (lookupArray[idx] > lookupValue) {\n        if (!indexValue) {\n          index = idx + 1;\n          indexValue = lookupArray[idx];\n        } else if (lookupArray[idx] < indexValue) {\n          index = idx + 1;\n          indexValue = lookupArray[idx];\n        }\n      }\n    }\n  }\n\n  return index ? index : error.na;\n};\n\nexports.VLOOKUP = function (needle, table, index, rangeLookup = true) {\n  if ((!needle && needle !== 0) || !table || !index) {\n    return '';\n  }\n\n  for (var i = 0; i < table.length; i++) {\n    var row = table[i];\n    if (!rangeLookup) {\n      if (row[0] === needle) {\n        return (index < (row.length + 1) ? row[index - 1] : error.ref);\n      }\n    } else {\n      if (!isNaN(needle)) {\n        needle = utils.parseNumber(needle);\n        var startRange = utils.parseNumber(row[0]);\n        var isLastIndex = i === (table.length - 1) ? true : false;\n        if (isLastIndex) {\n          return (index < (row.length + 1) ? row[index - 1] : error.ref);\n        } else {\n          var endRange = utils.parseNumber(table[i + 1][0]) - 1;\n          if (needle >= startRange && needle <= endRange) {\n            return (index < (row.length + 1) ? row[index - 1] : error.ref);\n          }\n        }\n      } else {\n        if (row[0].toLowerCase().indexOf(needle.toLowerCase()) !== -1) {\n          return (index < (row.length + 1) ? row[index - 1] : error.ref);\n        }\n      }\n    }\n  }\n\n  return needle == true ? 0 : error.na;\n};\n\nexports.HLOOKUP = function (needle, table, index, rangeLookup) {\n  if ((!needle && needle !== 0) || !table || !index) {\n    return error.na;\n  }\n\n  rangeLookup = rangeLookup || false;\n\n  var transposedTable = utils.transpose(table);\n\n  for (var i = 0; i < transposedTable.length; i++) {\n    var row = transposedTable[i];\n    if ((!rangeLookup && row[0] === needle) ||\n      ((row[0] === needle) ||\n        (rangeLookup && typeof row[0] === \"string\" && row[0].toLowerCase().indexOf(needle.toLowerCase()) !== -1))) {\n      return (index < (row.length + 1) ? row[index - 1] : error.ref);\n    }\n  }\n\n  return error.na;\n};\n\nexports.LOOKUP = function() {\n  var lookupValue, lookupArray, lookupVector, resultsVector;\n  if (arguments.length === 2) { // array form\n\n    lookupValue = arguments[0].valueOf();\n    lookupArray = arguments[1];\n\n    for (var i = 0; i < lookupArray.length; i++) {\n      if (typeof lookupArray[i] !== 'undefined' && lookupValue === lookupArray[i].valueOf()) {\n        return lookupArray[i];\n      }\n    }\n  } else if (arguments.length === 3) { // vector form\n    lookupValue = arguments[0].valueOf();\n    lookupVector = arguments[1];\n    resultsVector = arguments[2];\n\n    for (var i = 0; i < lookupVector.length; i++) {\n      if (typeof lookupVector[i] !== 'undefined' && lookupValue === lookupVector[i].valueOf()) {\n        return resultsVector[i];\n      }\n    }\n    var sortedLookup = lookupVector.concat(lookupValue).sort(function(a,b) {\n      return a - b;\n    });\n    var sortedIndex = sortedLookup.indexOf(lookupValue);\n    if (resultsVector[sortedIndex-1]) {\n      return resultsVector[sortedIndex-1];\n    }\n  }\n\n  return error.na;\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","/**\r\n * Convert value into number.\r\n *\r\n * @param {String|Number} number\r\n * @returns {*}\r\n */\r\nexport function toNumber(number) {\r\n  let result;\r\n\r\n  if (typeof number === 'number') {\r\n    result = number;\r\n\r\n  } else if (typeof number === 'string') {\r\n    result = number.indexOf('.') > -1 ? parseFloat(number) : parseInt(number, 10);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Invert provided number.\r\n *\r\n * @param {Number} number\r\n * @returns {Number} Returns inverted number.\r\n */\r\nexport function invertNumber(number) {\r\n  return -1 * toNumber(number);\r\n}\r\n","export const ERROR = 'ERROR';\r\nexport const ERROR_DIV_ZERO = 'DIV/0';\r\nexport const ERROR_NAME = 'NAME';\r\nexport const ERROR_NOT_AVAILABLE = 'N/A';\r\nexport const ERROR_NULL = 'NULL';\r\nexport const ERROR_NUM = 'NUM';\r\nexport const ERROR_REF = 'REF';\r\nexport const ERROR_VALUE = 'VALUE';\r\n\r\nconst errors = {\r\n  [ERROR]: '#ERROR!',\r\n  [ERROR_DIV_ZERO]: '#DIV/0!',\r\n  [ERROR_NAME]: '#NAME?',\r\n  [ERROR_NOT_AVAILABLE]: '#N/A',\r\n  [ERROR_NULL]: '#NULL!',\r\n  [ERROR_NUM]: '#NUM!',\r\n  [ERROR_REF]: '#REF!',\r\n  [ERROR_VALUE]: '#VALUE!',\r\n};\r\n\r\n/**\r\n * Return error type based on provided error id.\r\n *\r\n * @param {String} type Error type.\r\n * @returns {String|null} Returns error id.\r\n */\r\nexport default function error(type) {\r\n  let error;\r\n\r\n  type = (type + '').replace(/#|!|\\?/g, '');\r\n\r\n  if (errors[type]) {\r\n    error = errors[type];\r\n  }\r\n\r\n  return error ? error : null;\r\n}\r\n\r\n/**\r\n * Check if error type is strict valid with knows errors.\r\n *\r\n * @param {String} Error type.\r\n * @return {Boolean}\r\n */\r\nexport function isValidStrict(type) {\r\n  let valid = false;\r\n\r\n  for (var i in errors) {\r\n    if (errors.hasOwnProperty(i) && errors[i] === type) {\r\n      valid = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return valid;\r\n}\r\n","export function undefinedCell(value) {\r\n  if (value === undefined || value === '' || value === true) {\r\n    return 0;\r\n  } else {\r\n    return value;\r\n  }\r\n}\r\n","/*\r\n *\r\n *  decimal.js v10.0.2\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n *  https://github.com/MikeMcl/decimal.js/LICENCE\r\n *\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { name: '[object Decimal]' };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * Math.pow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = Math.pow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = Math.pow(4, -k).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(Math.pow(5, -k));\r\n\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '1e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n// Add aliases to match BigDecimal method names.\r\n// P.add = P.plus;\r\nP.subtract = P.minus;\r\nP.multiply = P.times;\r\nP.divide = P.div;\r\nP.remainder = P.mod;\r\nP.compareTo = P.cmp;\r\nP.negate = P.neg;\r\n */\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, y,\r\n    len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = Math.pow(4, -k).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  // Max k before Math.pow precision loss is 22\r\n  x = x.times(Math.pow(5, -k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (v instanceof Decimal) {\r\n      x.s = v.s;\r\n      x.e = v.e;\r\n      x.d = (v = v.d) ? v.slice() : v;\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n        x.e = e;\r\n        x.d = [v];\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if (v.charCodeAt(0) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n","import {toNumber} from './../../helper/number';\r\nimport {ERROR_VALUE} from './../../error';\r\nimport {undefinedCell} from './../../helper/undefined-cell';\r\nimport Decimal from 'decimal.js';\r\n\r\nexport const SYMBOL = '+';\r\n\r\nexport default function func(first, ...rest) {\r\n  try {\r\n    first = undefinedCell(first);\r\n\r\n    for (var i = 0; i < rest.length; i++) {\r\n      rest[i] = undefinedCell(rest[i]);\r\n    }\r\n\r\n    const result = rest.reduce((acc, value) => {\r\n      return (new Decimal(acc)).plus(new Decimal(value)).toNumber();\r\n    }, first);\r\n\r\n    if (isNaN(result)) {\r\n      throw Error(ERROR_VALUE);\r\n    }\r\n\r\n    return result;\r\n  } catch (error) {\r\n    throw Error(ERROR_VALUE);\r\n  }\r\n};\r\n\r\nfunc.SYMBOL = SYMBOL;\r\n","export const SYMBOL = '&';\r\n\r\nexport default function func(...params) {\r\n  return params.reduce((acc, value) => acc + value.toString(), '');\r\n};\r\n\r\nfunc.SYMBOL = SYMBOL;\r\n","import { toNumber } from './../../helper/number';\r\nimport { ERROR_DIV_ZERO, ERROR_VALUE } from './../../error';\r\nimport {undefinedCell} from './../../helper/undefined-cell';\r\nimport Decimal from 'decimal.js';\r\n\r\nexport const SYMBOL = '/';\r\n\r\nexport default function func(first, ...rest) {\r\n  try {\r\n    first = undefinedCell(first);\r\n\r\n    for (var i = 0; i < rest.length; i++) {\r\n      rest[i] = undefinedCell(rest[i]);\r\n      if (rest[i] === 0) {\r\n        return 0;\r\n      }\r\n    }\r\n\r\n    const result = rest.reduce((acc, value) => {\r\n      const tempValue = (new Decimal(acc)).div(new Decimal(toNumber(value))).toNumber();\r\n      if (tempValue === Infinity || tempValue === -Infinity) {\r\n        throw Error(ERROR_DIV_ZERO);\r\n      }\r\n\r\n      return tempValue;\r\n    }, toNumber(first));\r\n\r\n    if (isNaN(result)) {\r\n      throw Error(ERROR_VALUE);\r\n    }\r\n\r\n    return result;\r\n  } catch (error) {\r\n    if (error.message === ERROR_DIV_ZERO) {\r\n      throw Error(ERROR_DIV_ZERO);\r\n    }\r\n\r\n    throw Error(ERROR_VALUE);\r\n  }\r\n};\r\n\r\nfunc.SYMBOL = SYMBOL;\r\n","export const SYMBOL = '=';\r\n\r\nexport default function func(exp1, exp2) {\r\n  if ((typeof exp1 === 'string') && (typeof exp2 === 'string')) {\r\n    return exp1.toUpperCase() === exp2.toUpperCase();\r\n  } else if ((exp1 == false || exp1 === undefined) && (exp2 == false || exp2 === undefined)) {\r\n    return true;\r\n  } else {\r\n    return exp1 === exp2;\r\n  }\r\n};\r\n\r\nfunc.SYMBOL = SYMBOL;\r\n","const SUPPORTED_FORMULAS = [\n  'ABS',\n  'ACCRINT',\n  'ACOS',\n  'ACOSH',\n  'ACOT',\n  'ACOTH',\n  'ADD',\n  'AGGREGATE',\n  'AND',\n  'ARABIC',\n  'ARGS2ARRAY',\n  'ASIN',\n  'ASINH',\n  'ATAN',\n  'ATAN2',\n  'ATANH',\n  'AVEDEV',\n  'AVERAGE',\n  'AVERAGEA',\n  'AVERAGEIF',\n  'AVERAGEIFS',\n  'BASE',\n  'BESSELI',\n  'BESSELJ',\n  'BESSELK',\n  'BESSELY',\n  'BETA.DIST',\n  'BETA.INV',\n  'BETADIST',\n  'BETAINV',\n  'BIN2DEC',\n  'BIN2HEX',\n  'BIN2OCT',\n  'BINOM.DIST',\n  'BINOM.DIST.RANGE',\n  'BINOM.INV',\n  'BINOMDIST',\n  'BITAND',\n  'BITLSHIFT',\n  'BITOR',\n  'BITRSHIFT',\n  'BITXOR',\n  'CEILING',\n  'CEILINGMATH',\n  'CEILINGPRECISE',\n  'CHAR',\n  'CHISQ.DIST',\n  'CHISQ.DIST.RT',\n  'CHISQ.INV',\n  'CHISQ.INV.RT',\n  'CHOOSE',\n  'CHOOSE',\n  'CLEAN',\n  'CODE',\n  'COLUMN',\n  'COLUMNS',\n  'COMBIN',\n  'COMBINA',\n  'COMPLEX',\n  'CONCATENATE',\n  'CONFIDENCE',\n  'CONFIDENCE.NORM',\n  'CONFIDENCE.T',\n  'CONVERT',\n  'CORREL',\n  'COS',\n  'COSH',\n  'COT',\n  'COTH',\n  'COUNT',\n  'COUNTA',\n  'COUNTBLANK',\n  'COUNTIF',\n  'COUNTIFS',\n  'COUNTIN',\n  'COUNTUNIQUE',\n  'COVARIANCE.P',\n  'COVARIANCE.S',\n  'CSC',\n  'CSCH',\n  'CUMIPMT',\n  'CUMPRINC',\n  'DATE',\n  'DATEDIF',\n  'DATEVALUE',\n  'DAY',\n  'DAYS',\n  'DAYS360',\n  'DB',\n  'DDB',\n  'DEC2BIN',\n  'DEC2HEX',\n  'DEC2OCT',\n  'DECIMAL',\n  'DEGREES',\n  'DELTA',\n  'DEVSQ',\n  'DIVIDE',\n  'DOLLAR',\n  'DOLLARDE',\n  'DOLLARFR',\n  'E',\n  'EDATE',\n  'EFFECT',\n  'EOMONTH',\n  'EQ',\n  'ERF',\n  'ERFC',\n  'EVEN',\n  'EXACT',\n  'EXPON.DIST',\n  'EXPONDIST',\n  'F.DIST',\n  'F.DIST.RT',\n  'F.INV',\n  'F.INV.RT',\n  'FACT',\n  'FACTDOUBLE',\n  'FALSE',\n  'FDIST',\n  'FDISTRT',\n  'FIND',\n  'FINV',\n  'FINVRT',\n  'FISHER',\n  'FISHERINV',\n  'FIXED',\n  'FLATTEN',\n  'FLOOR',\n  'FORECAST',\n  'FREQUENCY',\n  'FV',\n  'FVSCHEDULE',\n  'GAMMA',\n  'GAMMA.DIST',\n  'GAMMA.INV',\n  'GAMMADIST',\n  'GAMMAINV',\n  'GAMMALN',\n  'GAMMALN.PRECISE',\n  'GAUSS',\n  'GCD',\n  'GEOMEAN',\n  'GESTEP',\n  'GROWTH',\n  'GTE',\n  'HARMEAN',\n  'HEX2BIN',\n  'HEX2DEC',\n  'HEX2OCT',\n  'HOUR',\n  'HTML2TEXT',\n  'HYPGEOM.DIST',\n  'HYPGEOMDIST',\n  'IF',\n  'IFERROR',\n  'IMABS',\n  'IMAGINARY',\n  'IMARGUMENT',\n  'IMCONJUGATE',\n  'IMCOS',\n  'IMCOSH',\n  'IMCOT',\n  'IMCSC',\n  'IMCSCH',\n  'IMDIV',\n  'IMEXP',\n  'IMLN',\n  'IMLOG10',\n  'IMLOG2',\n  'IMPOWER',\n  'IMPRODUCT',\n  'IMREAL',\n  'IMSEC',\n  'IMSECH',\n  'IMSIN',\n  'IMSINH',\n  'IMSQRT',\n  'IMSUB',\n  'IMSUM',\n  'IMTAN',\n  'INDEX',\n  'INT',\n  'INTERCEPT',\n  'INTERVAL',\n  'IPMT',\n  'IRR',\n  'ISBINARY',\n  'ISBLANK',\n  'ISEVEN',\n  'ISLOGICAL',\n  'ISNA',\n  'ISNONTEXT',\n  'ISNUMBER',\n  'ISODD',\n  'ISODD',\n  'ISOWEEKNUM',\n  'ISPMT',\n  'ISTEXT',\n  'JOIN',\n  'KURT',\n  'LARGE',\n  'LCM',\n  'LEFT',\n  'LEN',\n  'LINEST',\n  'LN',\n  'LOG',\n  'LOG10',\n  'LOGEST',\n  'LOGNORM.DIST',\n  'LOGNORM.INV',\n  'LOGNORMDIST',\n  'LOGNORMINV',\n  'LOOKUP',\n  'LOWER',\n  'LT',\n  'LTE',\n  'MATCH',\n  'MAX',\n  'MAXA',\n  'MEDIAN',\n  'MID',\n  'MIN',\n  'MINA',\n  'MINUS',\n  'MINUTE',\n  'MIRR',\n  'MOD',\n  'MODE.MULT',\n  'MODE.SNGL',\n  'MODEMULT',\n  'MODESNGL',\n  'MONTH',\n  'MROUND',\n  'MULTINOMIAL',\n  'MULTIPLY',\n  'NA',\n  'NE',\n  'NEGBINOM.DIST',\n  'NEGBINOMDIST',\n  'NETWORKDAYS',\n  'NOMINAL',\n  'NORM.DIST',\n  'NORM.INV',\n  'NORM.S.DIST',\n  'NORM.S.INV',\n  'NORMDIST',\n  'NORMINV',\n  'NORMSDIST',\n  'NORMSINV',\n  'NOT',\n  'NOW',\n  'NPER',\n  'NPV',\n  'NUMBERS',\n  'NUMERAL',\n  'OCT2BIN',\n  'OCT2DEC',\n  'OCT2HEX',\n  'ODD',\n  'OR',\n  'PDURATION',\n  'PEARSON',\n  'PERCENTILEEXC',\n  'PERCENTILEINC',\n  'PERCENTRANKEXC',\n  'PERCENTRANKINC',\n  'PERMUT',\n  'PERMUTATIONA',\n  'PHI',\n  'PI',\n  'PMT',\n  'POISSON.DIST',\n  'POISSONDIST',\n  'POW',\n  'POWER',\n  'PPMT',\n  'PROB',\n  'PRODUCT',\n  'PROPER',\n  'PV',\n  'QUARTILE.EXC',\n  'QUARTILE.INC',\n  'QUARTILEEXC',\n  'QUARTILEINC',\n  'QUOTIENT',\n  'RADIANS',\n  'RAND',\n  'RANDBETWEEN',\n  'RANK.AVG',\n  'RANK.EQ',\n  'RANKAVG',\n  'RANKEQ',\n  'RATE',\n  'REFERENCE',\n  'REGEXEXTRACT',\n  'REGEXMATCH',\n  'REGEXREPLACE',\n  'REPLACE',\n  'REPT',\n  'RIGHT',\n  'ROMAN',\n  'ROUND',\n  'ROUNDDOWN',\n  'ROUNDUP',\n  'ROW',\n  'ROWS',\n  'RRI',\n  'RSQ',\n  'SEARCH',\n  'SEC',\n  'SECH',\n  'SECOND',\n  'SERIESSUM',\n  'SIGN',\n  'SIN',\n  'SINH',\n  'SKEW',\n  'SKEW.P',\n  'SKEWP',\n  'SLN',\n  'SLOPE',\n  'SMALL',\n  'SPLIT',\n  'SPLIT',\n  'SQRT',\n  'SQRTPI',\n  'STANDARDIZE',\n  'STDEV.P',\n  'STDEV.S',\n  'STDEVA',\n  'STDEVP',\n  'STDEVPA',\n  'STDEVS',\n  'STEYX',\n  'SUBSTITUTE',\n  'SUBTOTAL',\n  'SUM',\n  'SUMIF',\n  'SUMIFS',\n  'SUMPRODUCT',\n  'SUMSQ',\n  'SUMX2MY2',\n  'SUMX2PY2',\n  'SUMXMY2',\n  'SWITCH',\n  'SYD',\n  'T',\n  'T.DIST',\n  'T.DIST.2T',\n  'T.DIST.RT',\n  'T.INV',\n  'T.INV.2T',\n  'TAN',\n  'TANH',\n  'TBILLEQ',\n  'TBILLPRICE',\n  'TBILLYIELD',\n  'TDIST',\n  'TDIST2T',\n  'TDISTRT',\n  'TEXT',\n  'TIME',\n  'TIMEVALUE',\n  'TINV',\n  'TINV2T',\n  'TODAY',\n  'TRANSPOSE',\n  'TREND',\n  'TRIM',\n  'TRIMMEAN',\n  'TRUE',\n  'TRUNC',\n  'UNICHAR',\n  'UNICODE',\n  'UNIQUE',\n  'UPPER',\n  'VALUE',\n  'VAR.P',\n  'VAR.S',\n  'VARA',\n  'VARP',\n  'VARPA',\n  'VARS',\n  'WEEKDAY',\n  'WEEKNUM',\n  'WEIBULL.DIST',\n  'WEIBULLDIST',\n  'WORKDAY',\n  'XIRR',\n  'XNPV',\n  'XOR',\n  'YEAR',\n  'YEARFRAC',\n  'VLOOKUP',\n  'HLOOKUP',\n  'IFERROR',\n  'IFNA'\n];\n\nexport {SUPPORTED_FORMULAS as default};\n","import SUPPORTED_FORMULAS from './../../supported-formulas';\r\nimport {ERROR_NAME} from './../../error';\r\nimport * as formulajs from 'formulajs';\r\n\r\nexport const SYMBOL = SUPPORTED_FORMULAS;\r\n\r\nexport default function func(symbol) {\r\n  return function(...params) {\r\n    symbol = symbol.toUpperCase();\r\n\r\n    const symbolParts = symbol.split('.');\r\n    let foundFormula = false;\r\n    let result;\r\n\r\n    if (symbolParts.length === 1) {\r\n      if (formulajs[symbolParts[0]]) {\r\n        foundFormula = true;\r\n        result = formulajs[symbolParts[0]](...params);\r\n      }\r\n    } else {\r\n      const length = symbolParts.length;\r\n      let index = 0;\r\n      let nestedFormula = formulajs;\r\n\r\n      while (index < length) {\r\n        nestedFormula = nestedFormula[symbolParts[index]];\r\n        index++;\r\n\r\n        if (!nestedFormula) {\r\n          nestedFormula = null;\r\n          break;\r\n        }\r\n      }\r\n      if (nestedFormula) {\r\n        foundFormula = true;\r\n        result = nestedFormula(...params);\r\n      }\r\n    }\r\n\r\n    if (!foundFormula) {\r\n      throw Error(ERROR_NAME);\r\n    }\r\n\r\n    return result;\r\n  };\r\n};\r\n\r\nfunc.isFactory = true;\r\nfunc.SYMBOL = SYMBOL;\r\n","export const SYMBOL = '>';\r\n\r\nexport default function func(exp1, exp2) {\r\n  return exp1 > exp2;\r\n};\r\n\r\nfunc.SYMBOL = SYMBOL;\r\n","export const SYMBOL = '>=';\r\n\r\nexport default function func(exp1, exp2) {\r\n  return exp1 >= exp2;\r\n};\r\n\r\nfunc.SYMBOL = SYMBOL;\r\n","export const SYMBOL = '<';\r\n\r\nexport default function func(exp1, exp2) {\r\n  return exp1 < exp2;\r\n};\r\n\r\nfunc.SYMBOL = SYMBOL;\r\n","export const SYMBOL = '<=';\r\n\r\nexport default function func(exp1, exp2) {\r\n  return exp1 <= exp2;\r\n};\r\n\r\nfunc.SYMBOL = SYMBOL;\r\n","import {toNumber} from './../../helper/number';\r\nimport {ERROR_VALUE} from './../../error';\r\nimport {undefinedCell} from './../../helper/undefined-cell';\r\nimport Decimal from 'decimal.js';\r\n\r\nexport const SYMBOL = '-';\r\n\r\nexport default function func(first, ...rest) {\r\n  try {\r\n    first = undefinedCell(first);\r\n\r\n    for (var i = 0; i < rest.length; i++) {\r\n      rest[i] = undefinedCell(rest[i]);\r\n    }\r\n\r\n    const result = rest.reduce((acc, value) => {\r\n      return (new Decimal(acc)).minus(new Decimal(value)).toNumber();\r\n    }, first);\r\n\r\n    if (isNaN(result)) {\r\n      throw Error(ERROR_VALUE);\r\n    }\r\n\r\n    return result;\r\n  } catch (error) {\r\n    throw Error(ERROR_VALUE);\r\n  }\r\n};\r\n\r\nfunc.SYMBOL = SYMBOL;\r\n","import { toNumber } from './../../helper/number';\r\nimport { ERROR_VALUE, } from './../../error';\r\nimport {undefinedCell} from './../../helper/undefined-cell';\r\nimport Decimal from 'decimal.js';\r\n\r\nexport const SYMBOL = '*';\r\n\r\nexport default function func(first, ...rest) {\r\n  try {\r\n    first = undefinedCell(first);\r\n\r\n    for (var i = 0; i < rest.length; i++) {\r\n      rest[i] = undefinedCell(rest[i]);\r\n    }\r\n\r\n    const result = rest.reduce((acc, value) => {\r\n      return (new Decimal(acc)).mul(new Decimal(value)).toNumber();\r\n    }, first);\r\n\r\n    if (isNaN(result)) {\r\n      throw Error(ERROR_VALUE);\r\n    }\r\n\r\n    return result;\r\n  } catch (error) {\r\n    throw Error(ERROR_VALUE);\r\n  }\r\n};\r\n\r\nfunc.SYMBOL = SYMBOL;\r\n","export const SYMBOL = '<>';\r\n\r\nexport default function func(exp1, exp2) {\r\n  return exp1 !== exp2;\r\n};\r\n\r\nfunc.SYMBOL = SYMBOL;\r\n","import { toNumber } from './../../helper/number';\r\nimport { ERROR_VALUE } from './../../error';\r\nimport Decimal from 'decimal.js';\r\n\r\nexport const SYMBOL = '^';\r\n\r\nexport default function func(exp1, exp2) {\r\n  if (!Number.isInteger(toNumber(exp2))) {\r\n    throw Error(ERROR_VALUE);\r\n  }\r\n\r\n  const result = (new Decimal(toNumber(exp1)).toPower(toNumber(exp2))).toNumber();\r\n  if (isNaN(result)) {\r\n    throw Error(ERROR_VALUE);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nfunc.SYMBOL = SYMBOL;\r\n","import {default as add} from './operator/add';\r\nimport {default as ampersand} from './operator/ampersand';\r\nimport {default as divide} from './operator/divide';\r\nimport {default as equal} from './operator/equal';\r\nimport {default as formulaFunction} from './operator/formula-function';\r\nimport {default as greaterThan} from './operator/greater-than';\r\nimport {default as greaterThanOrEqual} from './operator/greater-than-or-equal';\r\nimport {default as lessThan} from './operator/less-than';\r\nimport {default as lessThanOrEqual} from './operator/less-than-or-equal';\r\nimport {default as minus} from './operator/minus';\r\nimport {default as multiply} from './operator/multiply';\r\nimport {default as notEqual} from './operator/not-equal';\r\nimport {default as power} from './operator/power';\r\nimport {ERROR_NAME} from './../error';\r\nimport Decimal from 'decimal.js';\r\n\r\nconst availableOperators = Object.create(null);\r\n\r\n// Configuration\r\n\r\nDecimal.set({ precision: 15 });\r\n\r\nregisterOperation(add.SYMBOL, add);\r\nregisterOperation(ampersand.SYMBOL, ampersand);\r\nregisterOperation(divide.SYMBOL, divide);\r\nregisterOperation(equal.SYMBOL, equal);\r\nregisterOperation(power.SYMBOL, power);\r\nregisterOperation(formulaFunction.SYMBOL, formulaFunction);\r\nregisterOperation(greaterThan.SYMBOL, greaterThan);\r\nregisterOperation(greaterThanOrEqual.SYMBOL, greaterThanOrEqual);\r\nregisterOperation(lessThan.SYMBOL, lessThan);\r\nregisterOperation(lessThanOrEqual.SYMBOL, lessThanOrEqual);\r\nregisterOperation(multiply.SYMBOL, multiply);\r\nregisterOperation(notEqual.SYMBOL, notEqual);\r\nregisterOperation(minus.SYMBOL, minus);\r\n\r\n/**\r\n * Evaluate values by operator id.git\r\n *\r\n * @param {String} operator Operator id.\r\n * @param {Array} [params=[]] Arguments to evaluate.\r\n * @returns {*}\r\n */\r\nexport default function evaluateByOperator(operator, params = []) {\r\n  operator = operator.toUpperCase();\r\n\r\n  if (!availableOperators[operator]) {\r\n    throw Error(ERROR_NAME);\r\n  }\r\n\r\n  return availableOperators[operator](...params);\r\n}\r\n\r\n/**\r\n * Register operator.\r\n *\r\n * @param {String|Array} symbol Symbol to register.\r\n * @param {Function} func Logic to register for this symbol.\r\n */\r\nexport function registerOperation(symbol, func) {\r\n  if (!Array.isArray(symbol)) {\r\n    symbol = [symbol.toUpperCase()];\r\n  }\r\n  symbol.forEach((s) => {\r\n    if (func.isFactory) {\r\n      availableOperators[s] = func(s);\r\n    } else {\r\n      availableOperators[s] = func;\r\n    }\r\n  });\r\n}\r\n","/**\r\n * Trim value by cutting character starting from the beginning and ending at the same time.\r\n *\r\n * @param {String} string String to trimming.\r\n * @param {Number} [margin=1] Number of character to cut.\r\n * @returns {String}\r\n */\r\nexport function trimEdges(string, margin = 1) {\r\n  string = string.substring(margin, string.length - margin);\r\n\r\n  return string;\r\n}\r\n","const LABEL_EXTRACT_REGEXP = /^([$])?([A-Za-z]+)([$])?([0-9]+)$/;\r\n\r\n/**\r\n * Extract cell coordinates.\r\n *\r\n * @param {String} label Cell coordinates (eq. 'A1', '$B6', '$N$98').\r\n * @returns {Array} Returns an array of objects.\r\n */\r\nexport function extractLabel(label) {\r\n  if (typeof label !== 'string' || !LABEL_EXTRACT_REGEXP.test(label)) {\r\n    return [];\r\n  }\r\n  const [, columnAbs, column, rowAbs, row] = label.toUpperCase().match(LABEL_EXTRACT_REGEXP);\r\n\r\n  return [\r\n    {\r\n      index: rowLabelToIndex(row),\r\n      label: row,\r\n      isAbsolute: rowAbs === '$',\r\n    },\r\n    {\r\n      index: columnLabelToIndex(column),\r\n      label: column,\r\n      isAbsolute: columnAbs === '$'\r\n    }\r\n  ];\r\n}\r\n\r\n/**\r\n * Convert row and column indexes into cell label.\r\n *\r\n * @param {Object} row Object with `index` and `isAbsolute` properties.\r\n * @param {Object} column Object with `index` and `isAbsolute` properties.\r\n * @returns {String} Returns cell label.\r\n */\r\nexport function toLabel(row, column) {\r\n  const rowLabel = (row.isAbsolute ? '$' : '') + rowIndexToLabel(row.index);\r\n  const columnLabel = (column.isAbsolute ? '$' : '') + columnIndexToLabel(column.index);\r\n\r\n  return columnLabel + rowLabel;\r\n}\r\n\r\nconst COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\nconst COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\r\n\r\n/**\r\n * Convert column label to index.\r\n *\r\n * @param {String} label Column label (eq. 'ABB', 'CNQ')\r\n * @returns {Number} Returns -1 if label is not recognized otherwise proper column index.\r\n */\r\nexport function columnLabelToIndex(label) {\r\n  let result = 0;\r\n\r\n  if (typeof label === 'string') {\r\n    label = label.toUpperCase();\r\n\r\n    for (let i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\r\n      result += Math.pow(COLUMN_LABEL_BASE_LENGTH, j) * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\r\n    }\r\n  }\r\n  --result;\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Convert column index to label.\r\n *\r\n * @param {Number} column Column index.\r\n * @returns {String} Returns column label (eq. 'ABB', 'CNQ').\r\n */\r\nexport function columnIndexToLabel(column) {\r\n  let result = '';\r\n\r\n  while (column >= 0) {\r\n    result = String.fromCharCode(column % COLUMN_LABEL_BASE_LENGTH + 97) + result;\r\n    column = Math.floor(column / COLUMN_LABEL_BASE_LENGTH) - 1;\r\n  }\r\n\r\n  return result.toUpperCase();\r\n}\r\n\r\n/**\r\n * Convert row label to index.\r\n *\r\n * @param {String} label Row label (eq. '1', '5')\r\n * @returns {Number} Returns -1 if label is not recognized otherwise proper row index.\r\n */\r\nexport function rowLabelToIndex(label) {\r\n  let result = parseInt(label, 10);\r\n\r\n  if (isNaN(result)) {\r\n    result = -1;\r\n  } else {\r\n    result = Math.max(result - 1, -1);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Convert row index to label.\r\n *\r\n * @param {Number} row Row index.\r\n * @returns {String} Returns row label (eq. '1', '7').\r\n */\r\nexport function rowIndexToLabel(row) {\r\n  let result = '';\r\n\r\n  if (row >= 0) {\r\n    result = `${row + 1}`;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import Emitter from 'tiny-emitter';\r\nimport evaluateByOperator from './evaluate-by-operator/evaluate-by-operator';\r\nimport {Parser as GrammarParser} from './grammar-parser/grammar-parser';\r\nimport {trimEdges} from './helper/string';\r\nimport {toNumber, invertNumber} from './helper/number';\r\nimport {default as errorParser, isValidStrict as isErrorValid, ERROR, ERROR_NAME} from './error';\r\nimport {extractLabel, toLabel} from './helper/cell';\r\n\r\nexport {default as SUPPORTED_FORMULAS} from './supported-formulas';\r\n\r\n/**\r\n * @class Parser\r\n */\r\nclass Parser extends Emitter {\r\n  constructor() {\r\n    super();\r\n    this.parser = new GrammarParser();\r\n    this.parser.yy = {\r\n      toNumber,\r\n      trimEdges,\r\n      invertNumber,\r\n      throwError: (errorName) => this._throwError(errorName),\r\n      callVariable: (variable) => this._callVariable(variable),\r\n      evaluateByOperator,\r\n      callFunction: evaluateByOperator,\r\n      cellValue: (value, sheet) => this._callCellValue(value, sheet),\r\n      rangeValue: (start, end, sheet) => this._callRangeValue(start, end, sheet),\r\n    };\r\n    this.variables = Object.create(null);\r\n\r\n    this\r\n      .setVariable('TRUE', true)\r\n      .setVariable('FALSE', false)\r\n      .setVariable('NULL', null);\r\n  }\r\n\r\n  /**\r\n   * Parse formula expression.\r\n   *\r\n   * @param {String} expression to parse.\r\n   * @return {*} Returns an object with tow properties `error` and `result`.\r\n   */\r\n  parse(expression) {\r\n    let result = null;\r\n    let error = null;\r\n\r\n    try {\r\n      if (expression === '') {\r\n        result = '';\r\n      } else {\r\n        result = this.parser.parse(expression);\r\n      }\r\n    } catch (ex) {\r\n      const message = errorParser(ex.message);\r\n\r\n      if (message) {\r\n        error = message;\r\n      } else {\r\n        error = errorParser(ERROR);\r\n      }\r\n    }\r\n\r\n    if (result instanceof Error) {\r\n      error = errorParser(result.message) || errorParser(ERROR);\r\n      result = null;\r\n    }\r\n\r\n    return {\r\n      error: error,\r\n      result: result\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Set predefined variable name which can be visible while parsing formula expression.\r\n   *\r\n   * @param {String} name Variable name.\r\n   * @param {*} value Variable value.\r\n   * @returns {Parser}\r\n   */\r\n  setVariable(name, value) {\r\n    this.variables[name] = value;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get variable name.\r\n   *\r\n   * @param {String} name Variable name.\r\n   * @returns {*}\r\n   */\r\n  getVariable(name) {\r\n    return this.variables[name];\r\n  }\r\n\r\n  /**\r\n   * Retrieve variable value by its name.\r\n   *\r\n   * @param name Variable name.\r\n   * @returns {*}\r\n   * @private\r\n   */\r\n  _callVariable(name) {\r\n    let value = this.getVariable(name);\r\n\r\n    this.emit('callVariable', name, (newValue) => {\r\n      if (newValue !== void 0) {\r\n        value = newValue;\r\n      }\r\n    });\r\n\r\n    if (value === void 0) {\r\n      throw Error(ERROR_NAME);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Retrieve value by its label (`B3`, `B$3`, `B$3`, `$B$3`).\r\n   *\r\n   * @param {String} label Coordinates.\r\n   * @param {String} sheet Reference sheet name\r\n   * @returns {*}\r\n   * @private\r\n   */\r\n  _callCellValue(label, sheet) {\r\n    label = label.toUpperCase();\r\n    const [row, column] = extractLabel(label);\r\n    let value = void 0;\r\n\r\n    let cellCoordinate = sheet ? {label, row, column, sheet} : {label, row, column};\r\n\r\n    this.emit('callCellValue', cellCoordinate, (_value) => {\r\n      value = _value;\r\n    });\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Retrieve value by its label (`B3:A1`, `B$3:A1`, `B$3:$A1`, `$B$3:A$1`).\r\n   *\r\n   * @param {String} startLabel Coordinates of the first cell.\r\n   * @param {String} endLabel Coordinates of the last cell.\r\n   * @param {String} sheet Reference sheet name\r\n   * @returns {Array} Returns an array of mixed values.\r\n   * @private\r\n   */\r\n  _callRangeValue(startLabel, endLabel, sheet) {\r\n    startLabel = startLabel.toUpperCase();\r\n    endLabel = endLabel.toUpperCase();\r\n\r\n    const [startRow, startColumn] = extractLabel(startLabel);\r\n    const [endRow, endColumn] = extractLabel(endLabel);\r\n    let startCell = {};\r\n    let endCell = {};\r\n\r\n    if (startRow.index <= endRow.index) {\r\n      startCell.row = startRow;\r\n      endCell.row = endRow;\r\n    } else {\r\n      startCell.row = endRow;\r\n      endCell.row = startRow;\r\n    }\r\n\r\n    if (startColumn.index <= endColumn.index) {\r\n      startCell.column = startColumn;\r\n      endCell.column = endColumn;\r\n    } else {\r\n      startCell.column = endColumn;\r\n      endCell.column = startColumn;\r\n    }\r\n\r\n    startCell.label = toLabel(startCell.row, startCell.column);\r\n    endCell.label = toLabel(endCell.row, endCell.column);\r\n\r\n    if (sheet) {\r\n      startCell.sheet = sheet;\r\n      endCell.sheet = sheet;\r\n    }\r\n\r\n    let value = [];\r\n\r\n    this.emit('callRangeValue', startCell, endCell, (_value = []) => {\r\n      value = _value;\r\n    });\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Try to throw error by its name.\r\n   *\r\n   * @param {String} errorName Error name.\r\n   * @returns {String}\r\n   * @private\r\n   */\r\n  _throwError(errorName) {\r\n    if (isErrorValid(errorName)) {\r\n      throw Error(errorName);\r\n    }\r\n\r\n    throw Error(ERROR);\r\n  }\r\n}\r\n\r\nexport {Parser};\r\n","import {Parser, SUPPORTED_FORMULAS} from './src/parser';\r\nimport {\r\n  default as error,\r\n  ERROR,\r\n  ERROR_DIV_ZERO,\r\n  ERROR_NAME,\r\n  ERROR_NOT_AVAILABLE,\r\n  ERROR_NULL,\r\n  ERROR_NUM,\r\n  ERROR_REF,\r\n  ERROR_VALUE\r\n} from './src/error';\r\nimport {\r\n  extractLabel,\r\n  toLabel,\r\n  columnIndexToLabel,\r\n  columnLabelToIndex,\r\n  rowIndexToLabel,\r\n  rowLabelToIndex\r\n} from './src/helper/cell';\r\n\r\nexport {\r\n  SUPPORTED_FORMULAS,\r\n  ERROR,\r\n  ERROR_DIV_ZERO,\r\n  ERROR_NAME,\r\n  ERROR_NOT_AVAILABLE,\r\n  ERROR_NULL,\r\n  ERROR_NUM,\r\n  ERROR_REF,\r\n  ERROR_VALUE,\r\n  Parser,\r\n  error,\r\n  extractLabel,\r\n  toLabel,\r\n  columnIndexToLabel,\r\n  columnLabelToIndex,\r\n  rowIndexToLabel,\r\n  rowLabelToIndex\r\n};\r\n"],"sourceRoot":""}