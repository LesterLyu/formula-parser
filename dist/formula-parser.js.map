{"version":3,"sources":["webpack://formulaParser/webpack/universalModuleDefinition","webpack://formulaParser/webpack/bootstrap","webpack://formulaParser/./node_modules/formulajs/lib/error.js","webpack://formulaParser/./node_modules/formulajs/lib/utils.js","webpack://formulaParser/./src/error.js","webpack://formulaParser/./src/helper/number.js","webpack://formulaParser/./node_modules/formulajs/lib/math-trig.js","webpack://formulaParser/./node_modules/formulajs/lib/statistical.js","webpack://formulaParser/./node_modules/formulajs/lib/text.js","webpack://formulaParser/./node_modules/formulajs/lib/information.js","webpack://formulaParser/./node_modules/formulajs/lib/date-time.js","webpack://formulaParser/./node_modules/jStat/dist/jstat.js","webpack://formulaParser/./node_modules/formulajs/lib/miscellaneous.js","webpack://formulaParser/./node_modules/formulajs/lib/engineering.js","webpack://formulaParser/./src/supported-formulas.js","webpack://formulaParser/./src/helper/cell.js","webpack://formulaParser/./src/index.js","webpack://formulaParser/./src/parser.js","webpack://formulaParser/./node_modules/tiny-emitter/index.js","webpack://formulaParser/./src/evaluate-by-operator/evaluate-by-operator.js","webpack://formulaParser/./src/evaluate-by-operator/operator/add.js","webpack://formulaParser/./src/evaluate-by-operator/operator/ampersand.js","webpack://formulaParser/./src/evaluate-by-operator/operator/divide.js","webpack://formulaParser/./src/evaluate-by-operator/operator/equal.js","webpack://formulaParser/./src/evaluate-by-operator/operator/formula-function.js","webpack://formulaParser/./node_modules/formulajs/index.js","webpack://formulaParser/./node_modules/formulajs/lib/compatibility.js","webpack://formulaParser/./node_modules/bessel/bessel.js","webpack://formulaParser/./node_modules/formulajs/lib/database.js","webpack://formulaParser/./node_modules/formulajs/lib/logical.js","webpack://formulaParser/./node_modules/formulajs/lib/financial.js","webpack://formulaParser/./node_modules/formulajs/lib/lookup-reference.js","webpack://formulaParser/./src/evaluate-by-operator/operator/greater-than.js","webpack://formulaParser/./src/evaluate-by-operator/operator/greater-than-or-equal.js","webpack://formulaParser/./src/evaluate-by-operator/operator/less-than.js","webpack://formulaParser/./src/evaluate-by-operator/operator/less-than-or-equal.js","webpack://formulaParser/./src/evaluate-by-operator/operator/minus.js","webpack://formulaParser/./src/evaluate-by-operator/operator/multiply.js","webpack://formulaParser/./src/evaluate-by-operator/operator/not-equal.js","webpack://formulaParser/./src/evaluate-by-operator/operator/power.js","webpack://formulaParser/./src/grammar-parser/grammar-parser.js","webpack://formulaParser/(webpack)/buildin/module.js","webpack://formulaParser/./node_modules/process/browser.js","webpack://formulaParser/./src/helper/string.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","nil","Error","div0","ref","num","na","error","data","flattenShallow","array","reduce","concat","apply","isFlat","length","Array","isArray","flatten","result","argsToArray","arguments","args","arrayEach","push","numbers","this","filter","el","cleanFloat","number","Math","round","parseBool","bool","up","toUpperCase","Date","isNaN","parseNumber","string","undefined","parseFloat","parseNumberArray","arr","len","parsed","parseMatrix","matrix","pnarr","d1900","UTC","parseDate","date","parseInt","getTime","parseDateArray","anyIsError","arrayValuesToNumbers","rest","idx","slice","initial","iteratee","index","transpose","map","col","row","type","replace","errors","valid","_defineProperty","_errors","toNumber","indexOf","utils","statistical","information","ABS","abs","ACOS","acos","ACOSH","log","sqrt","ACOT","atan","ACOTH","AGGREGATE","function_num","options","ref1","ref2","AVERAGE","COUNT","COUNTA","MAX","MIN","PRODUCT","STDEV","S","P","SUM","VAR","MEDIAN","MODE","SNGL","LARGE","SMALL","PERCENTILE","INC","QUARTILE","EXC","ARABIC","text","test","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","ASIN","asin","ASINH","ATAN","ATAN2","number_x","number_y","atan2","ATANH","BASE","radix","min_length","toString","max","join","CEILING","significance","precision","floor","ROUND","ceil","MATH","PRECISE","COMBIN","number_chosen","FACT","COMBINA","COS","cos","COSH","exp","COT","tan","COTH","e2","CSC","sin","CSCH","DECIMAL","DEGREES","PI","EVEN","EXP","MEMOIZED_FACT","FACTDOUBLE","FLOOR","GCD","range","r0","x","ri","y","INT","ISO","LCM","j","pop","splice","LN","LN10","LN2","LOG10E","LOG2E","LOG","base","LOG10","MOD","dividend","divisor","modulus","MROUND","multiple","MULTINOMIAL","sum","ODD","temp","E","POWER","power","pow","QUOTIENT","numerator","denominator","RADIANS","RAND","random","RANDBETWEEN","bottom","top","ROMAN","digits","String","split","roman","ROUNDDOWN","ROUNDUP","SEC","SECH","SERIESSUM","coefficients","SIGN","SIN","SINH","SQRT","SQRTPI","SQRT1_2","SQRT2","SUBTOTAL","function_code","ADD","num1","num2","MINUS","DIVIDE","MULTIPLY","factor1","factor2","GTE","LT","LTE","EQ","value1","value2","NE","POW","exponent","SUMIF","criteria","sumRange","includes","eval","toLowerCase","SUMIFS","shift","n_range_elements","n_criterias","condition","SUMPRODUCT","product","k","_i","_ij","arrays","SUMSQ","ISNUMBER","SUMX2MY2","array_x","array_y","SUMX2PY2","SUMXMY2","TAN","TANH","TRUNC","mathTrig","jStat","misc","SQRT2PI","AVEDEV","subtract","mean","count","AVERAGEA","AVERAGEIF","average_range","average_count","AVERAGEIFS","average","BETA","DIST","alpha","beta","cumulative","A","B","cdf","pdf","INV","probability","inv","BINOM","successes","trials","binomial","RANGE","successes2","CHISQ","chisquare","RT","TEST","observed","expected","tmp","dof","xsqr","Pi","a","ChiSq","COLUMN","COLUMNS","cols","CONFIDENCE","NORM","sd","normalci","T","tci","CORREL","array1","array2","corrcoeff","COUNTBLANK","COUNTIN","element","blanks","COUNTIF","matches","COUNTIFS","results","COUNTUNIQUE","UNIQUE","COVARIANCE","mean1","mean2","covariance","DEVSQ","EXPON","lambda","exponential","F","d1","d2","centralF","sumOfSquares","values","x1","x2","FISHER","FISHERINV","e2y","FORECAST","data_y","data_x","xmean","ymean","den","b","FREQUENCY","bins","GAMMA","gammafn","gamma","GAMMALN","gammaln","GAUSS","z","normal","GEOMEAN","geomean","GROWTH","known_y","known_x","new_x","use_const","avg_x","avg_y","avg_xy","avg_xx","new_y","HARMEAN","HYPGEOM","N","INTERCEPT","KURT","sigma","stdev","sort","LINEST","LOGEST","LOGNORM","lognormal","MAXA","median","min","MINA","MULT","currentItem","maxItems","NEGBINOM","negbin","PEARSON","den1","den2","fl","PERCENTRANK","uniques","match","PERMUT","PERMUTATIONA","PHI","POISSON","poisson","PROB","lower","upper","sorted","quart","RANK","AVG","order","ROW","ROWS","rows","RSQ","SKEW","m2","m3","SLOPE","STANDARDIZE","v","STDEVA","VARA","STDEVPA","VARPA","STEYX","lft","TRANSPOSE","df","studentt","mean_x","mean_y","s_x","s_y","TREND","new_data_x","linest","forEach","TRIMMEAN","percent","trim","WEIBULL","Z","ASC","BAHTTEXT","CHAR","fromCharCode","CLEAN","CODE","charCodeAt","CONCATENATE","trueFound","falseFound","DBCS","DOLLAR","EXACT","text1","text2","FIND","find_text","within_text","position","FIXED","HTML2TEXT","line","LEFT","substring","LEN","LOWER","MID","start","begin","end","NUMBERVALUE","decimal_separator","group_separator","Number","PRONETIC","PROPER","txt","charAt","substr","REGEXEXTRACT","regular_expression","RegExp","REGEXMATCH","full","REGEXREPLACE","replacement","REPLACE","new_text","REPT","RIGHT","SEARCH","foundAt","SPLIT","separator","SUBSTITUTE","old_text","occurrence","TEXT","TRIM","UNICHAR","UNICODE","UPPER","VALUE","CELL","ERROR","TYPE","error_val","INFO","ISBLANK","ISBINARY","ISERR","isFinite","ISERROR","ISEVEN","ISFORMULA","ISLOGICAL","ISNA","ISNONTEXT","ISODD","ISREF","ISTEXT","NA","SHEET","SHEETS","WEEK_STARTS","WEEK_TYPES","WEEKEND_TYPES","isLeapYear","year","getMonth","daysBetween","start_date","end_date","serial","addOn","DATE","month","day","DATEDIF","interval","difference","DATEVALUE","date_text","modifier","parse","DAY","serial_number","getDate","DAYS","DAYS360","method","ed","sm","em","smd","getFullYear","emd","EDATE","months","setMonth","EOMONTH","HOUR","getHours","INTERVAL","second","hour","sec","ISOWEEKNUM","setHours","setDate","getDay","yearStart","MINUTE","getMinutes","MONTH","NETWORKDAYS","holidays","INTL","weekend","h","days","total","getTimezoneOffset","getUTCDay","dec","holiday","NOW","SECOND","getSeconds","TIME","minute","TIMEVALUE","time_text","TODAY","WEEKDAY","return_type","WEEKNUM","week_start","jan","inc","WORKDAY","YEAR","YEARFRAC","basis","sy","ey","ylength","date1","date2","year1","mar1year1","year2","mar1year2","feb29Between","years","isFunction","ascNum","clip","arg","sumsqrd","sumsqerr","sumrow","prod","low","high","unique","hash","_arr","meansqerr","arrlen","cumsum","cumreduce","cumprod","diff","diffs","arrLen","rank","ranks","first","last","lastIndexOf","val","maxCount","numMaxCount","mode_arr","variance","flag","pooledvariance","samples","deviation","dev","pooledstdev","meandev","meddev","coeffvar","quartiles","quantiles","quantilesArray","alphap","betap","aleph","sortedArray","quantileVals","percentile","realIndex","frac","percentileOfScore","score","kind","counter","strict","histogram","binCnt","binWidth","arr1","arr2","u","arr1Len","sq_dev","spearmancoeff","stanMoment","mu","skewSum","skewness","kurtosis","jProto","funcs","passfunc","fullbool","func","tmpthis","setTimeout","toVector","callbackFunction","argsToPass","curriedFunction","vector","calcRdx","isNumber","_init","retZero","retOne","retIdent","fn","seq","toArray","constructor","extend","obj","dimensions","rowa","submat","arange","ind","column","cola","diag","nrow","res","antidiag","objArr","toAlter","ncol","alter","zeros","ones","rand","identity","symmetric","size","clear","cnt","hival","step","current","rl","_slice","list","copy","rcSlice","colSlice","rowSlice","sliceAssign","nl","ml","diagonal","diagArray","mat","self","Function","xx","cof","ser","yi","q","fact","xden","xnum","Infinity","gammap","lowRegGamma","an","aln","ap","del","ITMAX","NaN","factorialln","factorial","combination","combinationln","permutation","betafn","betaln","betacf","aa","qab","qap","qam","gammapinv","pp","lna1","afac","a1","gln","erf","ty","isneg","dd","erfc","erfcinv","err","ibetainv","lna","lnb","al","w","b1","ibeta","bt","randn","randg","shape","a2","oalph","tukeyWprob","rr","cc","xleg","aleg","qsqz","wincr","pr_w","blb","binc","bub","einsum","cc1","wi","elsum","jj","ac","qexpo","rinsum","callee","_a","_b","_c","newthis","sample","vals","fnfunc","df1","df2","cauchy","local","scale","rate","invgamma","kumaraswamy","noncentralt","ncp","flip","prob","lastvalue","std","pareto","dof2","weibull","uniform","binomarr","hypgeom","scaledPDF","samplesDone","scaledCDF","factor","sumarr","triangular","arcsine","laplace","tukey","nmeans","xlegq","alegq","ulen","f2","f2lf","f21","ff4","ans","otsum","twa1","t1","x0","ps","tukeyQinv","valx0","valx1","iter","isUsable","add","divide","multiply","nrescols","rescols","outer","dot","left","right","norm","nnorm","angle","aug","newarr","gauss_jordan","det","alen","alend","rowshift","colshift","mrow","mcol","gauss_elimination","maug","pivot","maxrow","y2","triaUpSolve","parts","matrix_mode","triaLowSolve","lu","R","cholesky","gauss_jacobi","xv","xk","gauss_seidel","SOR","householder","QR","lstsq","array_mode","Q","attrs","Q1","RI","Aj","cAi","Ij","cIi","R_I","Q2","jacobi","maxim","theta","e","ev","rungekutta","f","t_j","u_j","k1","k2","k3","romberg","h1","g","richardson","pos","y1","h_min","simpson","hermite","dF","dl","lagrange","cubic_spline","sq","gauss_quadrature","PCA","temp1","Bt","temp2","Y","Vt","differenceOfProportions","p1","n1","p2","n2","pooled","zscore","ztest","sides","tscore","ttest","anovafscore","expVar","sampMean","sampSampMean","tmpargs","unexpVar","anovaftest","ftest","fscore","anovaftes","qscore","qtest","tukeyhsd","means","change","significant","pvalue","oneSidedDifferenceOfProportions","twoSidedDifferenceOfProportions","models","ols","endog","exog","nobs","df_model","df_resid","coef","predict","resid","ybar","SSE","SSR","SST","R2","t_test","model","var_count","subModelList","endog_index","exog_index","sigmaHat","seBetaHat","mod","tStatistic","pValue","leftppf","interval95","se","F_statistic","F_test","adjust_R2","hasElement","FLATTEN","ARGS2ARRAY","REFERENCE","context","reference","path","opening","JOIN","NUMBERS","bessel","isValidBinaryNumber","BESSELI","besseli","BESSELJ","besselj","BESSELK","besselk","BESSELY","bessely","BIN2DEC","stringified","BIN2HEX","places","BIN2OCT","BITAND","number1","number2","BITLSHIFT","BITOR","BITRSHIFT","BITXOR","COMPLEX","real","imaginary","suffix","sign","CONVERT","from_unit","to_unit","alt","units","binary_prefixes","Yi","Zi","Ei","Ti","Gi","Mi","ki","unit_prefixes","G","from","to","base_from_unit","base_to_unit","from_multiplier","to_multiplier","from_binary_prefix","from_unit_prefix","to_binary_prefix","to_unit_prefix","DEC2BIN","DEC2HEX","DEC2OCT","DELTA","ERF","lower_bound","upper_bound","ERFC","GESTEP","HEX2BIN","negative","decimal","HEX2DEC","HEX2OCT","IMABS","inumber","IMREAL","IMAGINARY","plus","minus","unit","IMARGUMENT","IMCONJUGATE","IMCOS","IMCOSH","IMCOT","IMDIV","IMSIN","inumber1","inumber2","unit1","unit2","IMEXP","IMLN","IMLOG10","IMLOG2","IMPOWER","IMPRODUCT","IMSEC","IMSECH","IMSINH","IMSQRT","IMCSC","IMCSCH","IMSUB","IMSUM","IMTAN","OCT2BIN","OCT2DEC","OCT2HEX","rowLabelToIndex","label","rowIndexToLabel","LABEL_EXTRACT_REGEXP","_label$toUpperCase$ma2","columnAbs","rowAbs","isAbsolute","columnLabelToIndex","rowLabel","columnIndexToLabel","COLUMN_LABEL_BASE","COLUMN_LABEL_BASE_LENGTH","_parser","_interopRequireDefault","_supportedFormulas","_error","_interopRequireWildcard","_cell","_tinyEmitter","_evaluateByOperator","_grammarParser","_string","_number","Parser","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","parser","GrammarParser","yy","trimEdges","invertNumber","throwError","errorName","_throwError","callVariable","variable","_callVariable","evaluateByOperator","callFunction","params","_callFunction","cellValue","sheet","_callCellValue","rangeValue","_callRangeValue","variables","functions","setVariable","Emitter","expression","ex","message","default","getVariable","emit","newValue","ERROR_NAME","getFunction","_extractLabel2","_slicedToArray","extractLabel","cellCoordinate","_value","startLabel","endLabel","_extractLabel4","startRow","startColumn","_extractLabel6","endRow","endColumn","startCell","endCell","toLabel","isValidStrict","on","callback","ctx","once","listener","off","_","evtArr","evts","liveEvents","operator","availableOperators","_add","_ampersand","_divide","_equal","_formulaFunction","_greaterThan","_greaterThanOrEqual","_lessThan","_lessThanOrEqual","_minus","_multiply","_notEqual","_power","registerOperation","symbol","isFactory","SYMBOL","ampersand","equal","formulaFunction","greaterThan","greaterThanOrEqual","lessThan","lessThanOrEqual","notEqual","_len","_key","acc","ERROR_VALUE","ERROR_DIV_ZERO","exp1","exp2","formulajs","SUPPORTED_FORMULAS","symbolParts","foundFormula","nestedFormula","categories","category","engineering","dateTime","set","BETADIST","BETAINV","BINOMDIST","ISOCEILING","CEILINGMATH","CEILINGPRECISE","CHIDIST","CHIDISTRT","CHIINV","CHIINVRT","CHITEST","COVAR","COVARIANCEP","COVARIANCES","CRITBINOM","EXPONDIST","ERFCPRECISE","ERFPRECISE","FDIST","FDISTRT","FINVRT","FINV","FLOORMATH","FLOORPRECISE","FTEST","GAMMADIST","GAMMAINV","GAMMALNPRECISE","HYPGEOMDIST","LOGINV","LOGNORMINV","LOGNORMDIST","MODEMULT","MODESNGL","NEGBINOMDIST","NETWORKDAYSINTL","NORMDIST","NORMINV","NORMSDIST","NORMSINV","PERCENTILEEXC","PERCENTILEINC","PERCENTRANKEXC","PERCENTRANKINC","POISSONDIST","QUARTILEEXC","QUARTILEINC","RANKAVG","RANKEQ","SKEWP","STDEVP","STDEVS","TDIST","TDISTRT","TINV","TTEST","VARP","VARS","WEIBULLDIST","WORKDAYINTL","ZTEST","_horner","_bessel_iter","f0","f1","tdx","_bessel_wrap","bessel0","bessel1","nonzero","b0_a1a","reverse","b0_a2a","b0_a1b","b0_a2b","W","b1_a1a","b1_a2a","b1_a1b","b1_a2b","ret","jsum","bjp","bj","bjm","tox","b0_a","b0_b","b1_a","b1_b","bip","bi","bim","stats","maths","compact","findResultIndex","database","criterias","maxCriteriaLength","currentCriteriaResult","hasMatchingCriteria","criteriaField","FINDFIELD","title","DAVERAGE","field","resultIndexes","targetFields","DCOUNT","targetValues","DCOUNTA","DGET","DMAX","maxValue","DMIN","minValue","DPRODUCT","DSTDEV","DSTDEVP","DSUM","DVAR","DVARP","AND","CHOOSE","FALSE","IF","then_value","otherwise_value","IFERROR","valueIfError","IFNA","value_if_na","NOT","logical","OR","TRUE","XOR","SWITCH","targetValue","argc","switchCount","switchSatisfied","hasDefaultClause","defaultClause","validDate","ensureDate","ACCRINT","issue","settlement","par","frequency","ACCRINTM","AMORDEGRC","AMORLINC","COUPDAYBS","COUPDAYS","COUPDAYSNC","COUPNCD","COUPNUM","COUPPCD","CUMIPMT","periods","payment","PMT","interest","FV","CUMPRINC","principal","DB","cost","salvage","life","period","toFixed","ceiling","DDB","DISC","DOLLARDE","dollar","fraction","DOLLARFR","DURATION","EFFECT","term","FVSCHEDULE","schedule","future","INTRATE","IPMT","present","IRR","guess","irrResult","dates","irrResultDeriv","positive","newRate","epsRate","resultValue","resultRate","contLoop","ISPMT","MDURATION","MIRR","finance_rate","reinvest_rate","payments","incomes","NPV","NOMINAL","NPER","ODDFPRICE","ODDFYIELD","ODDLPRICE","ODDLYIELD","PDURATION","PPMT","PRICE","PRICEDISC","PRICEMAT","PV","RATE","y0","RECEIVED","RRI","SLN","SYD","TBILLEQ","maturity","discount","TBILLPRICE","TBILLYIELD","price","VDB","XNPV","YIELD","YIELDDISC","YIELDMAT","INDEX","lookupArray","lookupRow","lookupColumn","MATCH","lookupValue","matchType","indexValue","VLOOKUP","needle","table","rangeLookup","startRange","endRange","HLOOKUP","transposedTable","LOOKUP","lookupVector","resultsVector","valueOf","sortedIndex","grammarParser","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","$Vb","$Vc","$Vd","$Ve","$Vf","$Vg","$Vh","$Vi","$Vj","$Vk","$Vl","$Vm","$Vn","$Vo","$Vp","$Vq","$Vr","$Vs","$Vt","$Vu","trace","symbols_","expressions","EOF","variableSequence","STRING","&","=","+","(",")","<",">","-","*","/","^","FUNCTION","expseq","ARRAYCONSTANT","ARRAY","cell","refCell","refRange","ABSOLUTE_CELL","RELATIVE_CELL","MIXED_CELL","REFSHEET","!",":",";",",","VARIABLE","NUMBER","%","$accept","$end","terminals_","5","8","9","10","11","12","13","14","15","16","17","18","19","20","21","23","24","29","30","31","32","33","34","35","36","37","38","39","40","41","productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","textInArray","item","2","3","4","6","7","25","26","27","28","1","22","defaultActions","parseError","str","recoverable","input","stack","vstack","lstack","recovering","lexer","sharedState","setInput","yylloc","yyloc","ranges","getPrototypeOf","preErrorSymbol","state","action","newState","lex","token","yyval","error_rule_depth","locateNearestErrorRecoveryRule","stack_probe","depth","errStr","showPosition","loc","first_line","last_line","first_column","last_column","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","unput","lines","oldLines","more","reject","backtrack_lexer","less","pastInput","past","upcomingInput","next","pre","test_match","indexed_rule","backup","tempMatch","rules","_currentRules","flex","popState","conditions","topState","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","INITIAL","inclusive","require","main","process","argv","webpackPolyfill","deprecate","paths","children","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","browser","env","version","versions","addListener","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","margin"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,GAAAH,GACA,iBAAAC,QACAA,QAAA,cAAAD,IAEAD,EAAA,cAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oBClFAvC,EAAAwC,IAAA,IAAAC,MAAA,UACAzC,EAAA0C,KAAA,IAAAD,MAAA,WACAzC,EAAAyB,MAAA,IAAAgB,MAAA,WACAzC,EAAA2C,IAAA,IAAAF,MAAA,SACAzC,EAAAe,KAAA,IAAA0B,MAAA,UACAzC,EAAA4C,IAAA,IAAAH,MAAA,SACAzC,EAAA6C,GAAA,IAAAJ,MAAA,QACAzC,EAAA8C,MAAA,IAAAL,MAAA,WACAzC,EAAA+C,KAAA,IAAAN,MAAA,kCCRA,IAAAK,EAAYxC,EAAQ,GAEpBN,EAAAgD,eAAA,SAAAC,GACA,OAAAA,KAAAC,OAGA,GAAAC,OAAAC,MAAA,GAAAH,GAFAA,GAKAjD,EAAAqD,OAAA,SAAAJ,GACA,IAAAA,EACA,SAGA,QAAAzC,EAAA,EAAiBA,EAAAyC,EAAAK,SAAkB9C,EACnC,GAAA+C,MAAAC,QAAAP,EAAAzC,IACA,SAIA,UAGAR,EAAAyD,QAAA,WAGA,IAFA,IAAAC,EAAA1D,EAAA2D,YAAAP,MAAA,KAAAQ,YAEA5D,EAAAqD,OAAAK,IACAA,EAAA1D,EAAAgD,eAAAU,GAGA,OAAAA,GAGA1D,EAAA2D,YAAA,SAAAE,GACA,IAAAH,EAAA,GAMA,OAJA1D,EAAA8D,UAAAD,EAAA,SAAApC,GACAiC,EAAAK,KAAAtC,KAGAiC,GAGA1D,EAAAgE,QAAA,WAEA,OADAC,KAAAR,QAAAL,MAAA,KAAAQ,WACAM,OAAA,SAAAC,GACA,uBAAAA,KAIAnE,EAAAoE,WAAA,SAAAC,GAEA,OAAAC,KAAAC,MADA,KACAF,GADA,MAIArE,EAAAwE,UAAA,SAAAC,GACA,qBAAAA,EACA,OAAAA,EAGA,GAAAA,aAAAhC,MACA,OAAAgC,EAGA,oBAAAA,EACA,WAAAA,EAGA,oBAAAA,EAAA,CACA,IAAAC,EAAAD,EAAAE,cACA,YAAAD,EACA,SAGA,aAAAA,EACA,SAIA,OAAAD,aAAAG,OAAAC,MAAAJ,IAIA3B,EAAArB,OAGAzB,EAAA8E,YAAA,SAAAC,GACA,YAAAC,IAAAD,GAAA,KAAAA,EACAjC,EAAArB,MAEAoD,MAAAE,GAIAjC,EAAArB,MAHAwD,WAAAF,IAMA/E,EAAAkF,iBAAA,SAAAC,GACA,IAAAC,EAMAC,EAJA,IAAAF,GAAA,KAAAC,EAAAD,EAAA7B,QACA,OAAAR,EAAArB,MAKA,KAAA2D,KAAA,CAEA,IADAC,EAAArF,EAAA8E,YAAAK,EAAAC,OACAtC,EAAArB,MACA,OAAA4D,EAEAF,EAAAC,GAAAC,EAGA,OAAAF,GAGAnF,EAAAsF,YAAA,SAAAC,GACA,IAKAC,EAHA,IAAAD,GAAA,IAAAA,EAAAjC,OACA,OAAAR,EAAArB,MAIA,QAAAjB,EAAA,EAAiBA,EAAA+E,EAAAjC,OAAmB9C,IAIpC,GAHAgF,EAAAxF,EAAAkF,iBAAAK,EAAA/E,IACA+E,EAAA/E,GAAAgF,EAEAA,aAAA/C,MACA,OAAA+C,EAIA,OAAAD,GAGA,IAAAE,EAAA,IAAAb,UAAAc,IAAA,WACA1F,EAAA2F,UAAA,SAAAC,GACA,IAAAf,MAAAe,GAAA,CACA,GAAAA,aAAAhB,KACA,WAAAA,KAAAgB,GAEA,IAAA9E,EAAA+E,SAAAD,EAAA,IACA,OAAA9E,EAAA,EACAgC,EAAAF,IAEA9B,GAAA,GACA,IAAA8D,KAAAa,EAAAK,UAAA,OAAAhF,EAAA,IAEA,IAAA8D,KAAAa,EAAAK,UAAA,OAAAhF,EAAA,IAEA,uBAAA8E,IACAA,EAAA,IAAAhB,KAAAgB,GACAf,MAAAe,IAIA9C,EAAArB,MAHAmE,GAMA5F,EAAA+F,eAAA,SAAAZ,GAGA,IAFA,IACAE,EADAD,EAAAD,EAAA7B,OAEA8B,KAAA,CAEA,IADAC,EAAApB,KAAA0B,UAAAR,EAAAC,OACAtC,EAAArB,MACA,OAAA4D,EAEAF,EAAAC,GAAAC,EAEA,OAAAF,GAGAnF,EAAAgG,WAAA,WAEA,IADA,IAAA/D,EAAA2B,UAAAN,OACArB,KACA,GAAA2B,UAAA3B,aAAAQ,MACA,SAGA,UAGAzC,EAAAiG,qBAAA,SAAAd,GAGA,IAFA,IACAhB,EADAlC,EAAAkD,EAAA7B,OAEArB,KAEA,oBADAkC,EAAAgB,EAAAlD,IAIA,QAAAkC,EAIA,QAAAA,GAIA,oBAAAA,EAAA,CACA,IAAAE,EAAAJ,KAAAa,YAAAX,GACAE,aAAA5B,MACA0C,EAAAlD,GAAA,EAEAkD,EAAAlD,GAAAoC,QARAc,EAAAlD,GAAA,OAJAkD,EAAAlD,GAAA,EAgBA,OAAAkD,GAGAnF,EAAAkG,KAAA,SAAAjD,EAAAkD,GAEA,OADAA,KAAA,EACAlD,GAAA,mBAAAA,EAAAmD,MAGAnD,EAAAmD,MAAAD,GAFAlD,GAKAjD,EAAAqG,QAAA,SAAApD,EAAAkD,GAEA,OADAA,KAAA,EACAlD,GAAA,mBAAAA,EAAAmD,MAGAnD,EAAAmD,MAAA,EAAAnD,EAAAK,OAAA6C,GAFAlD,GAKAjD,EAAA8D,UAAA,SAAAb,EAAAqD,GAGA,IAFA,IAAAC,GAAA,EAAAjD,EAAAL,EAAAK,SAEAiD,EAAAjD,IACA,IAAAgD,EAAArD,EAAAsD,KAAAtD,KAKA,OAAAA,GAGAjD,EAAAwG,UAAA,SAAAjB,GACA,OAAAA,EAIAA,EAAA,GAAAkB,IAAA,SAAAC,EAAAlG,GACA,OAAA+E,EAAAkB,IAAA,SAAAE,GACA,OAAAA,EAAAnG,OALAsC,EAAArB,8NCxNe,SAAemF,GAC5B,IAAIlD,EAEJkD,EAAO,GAAAzD,OAAIyD,GAAQC,QAAQ,UAAW,IAElCC,EAAOF,KACTlD,EAASoD,EAAOF,IAGlB,OAAOlD,GAAkB,sBASpB,SAAuBkD,GAC5B,IAAIG,GAAQ,EAEZ,IAAK,IAAMvG,KAAKsG,EACd,GAAI5F,OAAOkB,UAAUC,eAAe1B,KAAKmG,EAAQtG,IAAMsG,EAAOtG,KAAOoG,EAAM,CACzEG,GAAQ,EACR,MAIJ,OAAOA,iIAtDY,yBACS,qBACJ,6BACS,mBACT,mBACD,kBACA,oBACE,QAE3B,IAAMD,GAAME,EAAAC,EAAA,GATS,QAUV,WADCD,EAAAC,EARkB,QAUV,WAFRD,EAAAC,EAPc,OAUV,UAHJD,EAAAC,EANuB,MAUV,QAJbD,EAAAC,EALc,OAUV,UALJD,EAAAC,EAJa,MAUV,SANHD,EAAAC,EAHa,MAUV,SAPHD,EAAAC,EAFe,QAUV,WARLA,iCCHL,SAASC,EAAS7C,GACvB,IAAIX,EASJ,MAPsB,iBAAXW,EACTX,EAASW,EAEkB,iBAAXA,IAChBX,EAASW,EAAO8C,QAAQ,MAAQ,EAAIlC,WAAWZ,GAAUwB,SAASxB,EAAQ,KAGrEX,+EASF,SAAsBW,GAC3B,OAAQ,EAAI6C,EAAS7C,kDC1BvB,IAAA+C,MAAY9G,oBAAQ,GACpBwC,MAAYxC,oBAAQ,GACpB+G,YAAkB/G,oBAAQ,GAC1BgH,YAAkBhH,oBAAQ,GAE1BN,QAAAuH,IAAA,SAAAlD,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAC,KAAAkD,IAAAnD,IAKArE,QAAAyH,KAAA,SAAApD,GAEA,IADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA,OAAA4B,EAEA,IAAAX,EAAAY,KAAAoD,KAAArD,GAMA,OAJAQ,MAAAnB,KACAA,EAAAZ,MAAAF,KAGAc,GAGA1D,QAAA2H,MAAA,SAAAtD,GAEA,IADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA,OAAA4B,EAEA,IAAAX,EAAAY,KAAAsD,IAAAvD,EAAAC,KAAAuD,KAAAxD,IAAA,IAMA,OAJAQ,MAAAnB,KACAA,EAAAZ,MAAAF,KAGAc,GAGA1D,QAAA8H,KAAA,SAAAzD,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAC,KAAAyD,KAAA,EAAA1D,IAKArE,QAAAgI,MAAA,SAAA3D,GAEA,IADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA,OAAA4B,EAEA,IAAAX,EAAA,GAAAY,KAAAsD,KAAAvD,EAAA,IAAAA,EAAA,IAMA,OAJAQ,MAAAnB,KACAA,EAAAZ,MAAAF,KAGAc,GAIA1D,QAAAiI,UAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAGA,GAFAH,EAAAd,MAAAtC,YAAAoD,GACAC,EAAAf,MAAAtC,YAAAoD,GACAd,MAAApB,WAAAkC,EAAAC,GACA,OAAArF,MAAArB,MAEA,OAAAyG,GACA,OACA,OAAAb,YAAAiB,QAAAF,GACA,OACA,OAAAf,YAAAkB,MAAAH,GACA,OACA,OAAAf,YAAAmB,OAAAJ,GACA,OACA,OAAAf,YAAAoB,IAAAL,GACA,OACA,OAAAf,YAAAqB,IAAAN,GACA,OACA,OAAApI,QAAA2I,QAAAP,GACA,OACA,OAAAf,YAAAuB,MAAAC,EAAAT,GACA,OACA,OAAAf,YAAAuB,MAAAE,EAAAV,GACA,OACA,OAAApI,QAAA+I,IAAAX,GACA,QACA,OAAAf,YAAA2B,IAAAH,EAAAT,GACA,QACA,OAAAf,YAAA2B,IAAAF,EAAAV,GACA,QACA,OAAAf,YAAA4B,OAAAb,GACA,QACA,OAAAf,YAAA6B,KAAAC,KAAAf,GACA,QACA,OAAAf,YAAA+B,MAAAhB,EAAAC,GACA,QACA,OAAAhB,YAAAgC,MAAAjB,EAAAC,GACA,QACA,OAAAhB,YAAAiC,WAAAC,IAAAnB,EAAAC,GACA,QACA,OAAAhB,YAAAmC,SAAAD,IAAAnB,EAAAC,GACA,QACA,OAAAhB,YAAAiC,WAAAG,IAAArB,EAAAC,GACA,QACA,OAAAhB,YAAAmC,SAAAC,IAAArB,EAAAC,KAIArI,QAAA0J,OAAA,SAAAC,GAEA,iEAA0DC,KAAAD,GAC1D,OAAA7G,MAAArB,MAEA,IAAAH,EAAA,EAkBA,OAjBAqI,EAAA9C,QAAA,wCAAArG,GACAc,GAAA,CACAuI,EAAA,IACAC,GAAA,IACAC,EAAA,IACAC,GAAA,IACAC,EAAA,IACAC,GAAA,GACAC,EAAA,GACAC,GAAA,GACAC,EAAA,GACAC,GAAA,EACAC,EAAA,EACAC,GAAA,EACAC,EAAA,GACKjK,KAELc,GAGAtB,QAAA0K,KAAA,SAAArG,GAEA,IADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA,OAAA4B,EAEA,IAAAX,EAAAY,KAAAqG,KAAAtG,GAMA,OAJAQ,MAAAnB,KACAA,EAAAZ,MAAAF,KAGAc,GAGA1D,QAAA4K,MAAA,SAAAvG,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAC,KAAAsD,IAAAvD,EAAAC,KAAAuD,KAAAxD,IAAA,KAGArE,QAAA6K,KAAA,SAAAxG,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAC,KAAAyD,KAAA1D,IAGArE,QAAA8K,MAAA,SAAAC,EAAAC,GAGA,OAFAD,EAAA3D,MAAAtC,YAAAiG,GACAC,EAAA5D,MAAAtC,YAAAkG,GACA5D,MAAApB,WAAA+E,EAAAC,GACAlI,MAAArB,MAEA6C,KAAA2G,MAAAF,EAAAC,IAGAhL,QAAAkL,MAAA,SAAA7G,GAEA,IADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA,OAAA4B,EAEA,IAAAX,EAAAY,KAAAsD,KAAA,EAAAvD,IAAA,EAAAA,IAAA,EAMA,OAJAQ,MAAAnB,KACAA,EAAAZ,MAAAF,KAGAc,GAGA1D,QAAAmL,KAAA,SAAA9G,EAAA+G,EAAAC,GAMA,GALAA,KAAA,EAEAhH,EAAA+C,MAAAtC,YAAAT,GACA+G,EAAAhE,MAAAtC,YAAAsG,GACAC,EAAAjE,MAAAtC,YAAAuG,GACAjE,MAAApB,WAAA3B,EAAA+G,EAAAC,GACA,OAAAvI,MAAArB,MAEA4J,OAAArG,IAAAqG,EAAA,EAAAA,EACA,IAAA3H,EAAAW,EAAAiH,SAAAF,GACA,WAAA7H,MAAAe,KAAAiH,IAAAF,EAAA,EAAA3H,EAAAJ,OAAA,IAAAkI,KAAA,KAAA9H,GAGA1D,QAAAyL,QAAA,SAAApH,EAAAqH,EAAA/J,GAOA,GANA+J,OAAA1G,IAAA0G,EAAA,EAAApH,KAAAkD,IAAAkE,GACA/J,KAAA,EAEA0C,EAAA+C,MAAAtC,YAAAT,GACAqH,EAAAtE,MAAAtC,YAAA4G,GACA/J,EAAAyF,MAAAtC,YAAAnD,GACAyF,MAAApB,WAAA3B,EAAAqH,EAAA/J,GACA,OAAAmB,MAAArB,MAEA,OAAAiK,EACA,SAEA,IAAAC,GAAArH,KAAAsH,MAAAtH,KAAAsD,IAAA8D,GAAApH,KAAAsD,IAAA,KACA,OAAAvD,GAAA,EACArE,QAAA6L,MAAAvH,KAAAwH,KAAAzH,EAAAqH,KAAAC,GAEA,IAAAhK,GACA3B,QAAA6L,MAAAvH,KAAAsH,MAAAtH,KAAAkD,IAAAnD,GAAAqH,KAAAC,IAEA3L,QAAA6L,MAAAvH,KAAAwH,KAAAxH,KAAAkD,IAAAnD,GAAAqH,KAAAC,IAKA3L,QAAAyL,QAAAM,KAAA/L,QAAAyL,QAEAzL,QAAAyL,QAAAO,QAAAhM,QAAAyL,QAEAzL,QAAAiM,OAAA,SAAA5H,EAAA6H,GAGA,OAFA7H,EAAA+C,MAAAtC,YAAAT,GACA6H,EAAA9E,MAAAtC,YAAAoH,GACA9E,MAAApB,WAAA3B,EAAA6H,GACApJ,MAAArB,MAEAzB,QAAAmM,KAAA9H,IAAArE,QAAAmM,KAAAD,GAAAlM,QAAAmM,KAAA9H,EAAA6H,KAGAlM,QAAAoM,QAAA,SAAA/H,EAAA6H,GAGA,OAFA7H,EAAA+C,MAAAtC,YAAAT,GACA6H,EAAA9E,MAAAtC,YAAAoH,GACA9E,MAAApB,WAAA3B,EAAA6H,GACApJ,MAAArB,MAEA,IAAA4C,GAAA,IAAA6H,EAAA,EAAAlM,QAAAiM,OAAA5H,EAAA6H,EAAA,EAAA7H,EAAA,IAGArE,QAAAqM,IAAA,SAAAhI,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAC,KAAAgI,IAAAjI,IAGArE,QAAAuM,KAAA,SAAAlI,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,GAEAC,KAAAkI,IAAAnI,GAAAC,KAAAkI,KAAAnI,IAAA,GAGArE,QAAAyM,IAAA,SAAApI,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEA,EAAAC,KAAAoI,IAAArI,IAGArE,QAAA2M,KAAA,SAAAtI,GAEA,IADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA,OAAA4B,EAEA,IAAAuI,EAAAtI,KAAAkI,IAAA,EAAAnI,GACA,OAAAuI,EAAA,IAAAA,EAAA,IAGA5M,QAAA6M,IAAA,SAAAxI,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEA,EAAAC,KAAAwI,IAAAzI,IAGArE,QAAA+M,KAAA,SAAA1I,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEA,GAAAC,KAAAkI,IAAAnI,GAAAC,KAAAkI,KAAAnI,KAGArE,QAAAgN,QAAA,SAAA3I,EAAA+G,GACA,OAAAxH,UAAAN,OAAA,EACAR,MAAArB,MAGAoE,SAAAxB,EAAA+G,IAGApL,QAAAiN,QAAA,SAAA5I,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEA,IAAAA,EAAAC,KAAA4I,IAGAlN,QAAAmN,KAAA,SAAA9I,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEArE,QAAAyL,QAAApH,GAAA,OAGArE,QAAAoN,IAAA,SAAA/I,GACA,OAAAT,UAAAN,OAAA,EACAR,MAAAD,GAEA,iBAAAwB,GAAAT,UAAAN,OAAA,EACAR,YAGAuB,EAAAC,KAAAkI,IAAAnI,IAKA,IAAAgJ,cAAA,GACArN,QAAAmM,KAAA,SAAA9H,GAEA,IADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA,OAAA4B,EAEA,IAAApC,EAAAqC,KAAAsH,MAAAvH,GACA,WAAApC,GAAA,IAAAA,EACA,EACGoL,cAAApL,GAAA,EACHoL,cAAApL,IAEAoL,cAAApL,GAAAjC,QAAAmM,KAAAlK,EAAA,GAAAA,EACAoL,cAAApL,KAIAjC,QAAAsN,WAAA,SAAAjJ,GAEA,IADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA,OAAA4B,EAEA,IAAApC,EAAAqC,KAAAsH,MAAAvH,GACA,OAAApC,GAAA,EACA,EAEAA,EAAAjC,QAAAsN,WAAArL,EAAA,IAIAjC,QAAAuN,MAAA,SAAAlJ,EAAAqH,GAGA,GAFArH,EAAA+C,MAAAtC,YAAAT,GACAqH,EAAAtE,MAAAtC,YAAA4G,GACAtE,MAAApB,WAAA3B,EAAAqH,GACA,OAAA5I,MAAArB,MAEA,OAAAiK,EACA,SAGA,KAAArH,EAAA,GAAAqH,EAAA,GAAArH,EAAA,GAAAqH,EAAA,GACA,OAAA5I,MAAAF,IAGA8I,EAAApH,KAAAkD,IAAAkE,GACA,IAAAC,GAAArH,KAAAsH,MAAAtH,KAAAsD,IAAA8D,GAAApH,KAAAsD,IAAA,KACA,OAAAvD,GAAA,EACArE,QAAA6L,MAAAvH,KAAAsH,MAAAvH,EAAAqH,KAAAC,IAEA3L,QAAA6L,MAAAvH,KAAAwH,KAAAxH,KAAAkD,IAAAnD,GAAAqH,GAAAC,IAKA3L,QAAAuN,MAAAxB,KAAA,SAAA1H,EAAAqH,EAAA/J,GAOA,GANA+J,OAAA1G,IAAA0G,EAAA,EAAAA,EACA/J,OAAAqD,IAAArD,EAAA,EAAAA,EAEA0C,EAAA+C,MAAAtC,YAAAT,GACAqH,EAAAtE,MAAAtC,YAAA4G,GACA/J,EAAAyF,MAAAtC,YAAAnD,GACAyF,MAAApB,WAAA3B,EAAAqH,EAAA/J,GACA,OAAAmB,MAAArB,MAEA,OAAAiK,EACA,SAGAA,IAAApH,KAAAkD,IAAAkE,GAAA,EACA,IAAAC,GAAArH,KAAAsH,MAAAtH,KAAAsD,IAAA8D,GAAApH,KAAAsD,IAAA,KACA,OAAAvD,GAAA,EACArE,QAAA6L,MAAAvH,KAAAsH,MAAAvH,EAAAqH,KAAAC,GACG,IAAAhK,QAAAqD,IAAArD,GACH3B,QAAA6L,MAAAvH,KAAAwH,KAAAxH,KAAAkD,IAAAnD,GAAAqH,KAAAC,IAEA3L,QAAA6L,MAAAvH,KAAAsH,MAAAtH,KAAAkD,IAAAnD,GAAAqH,KAAAC,IAIA3L,QAAAuN,MAAAvB,QAAAhM,QAAAuN,MAAAxB,KAGA/L,QAAAwN,IAAA,WACA,IAAAC,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,GAAA6J,aAAAhL,MACA,OAAAgL,EAKA,IAHA,IAAAxL,EAAAwL,EAAAnK,OACAoK,EAAAD,EAAA,GACAE,EAAAD,EAAA,GAAAA,IACAlN,EAAA,EAAiBA,EAAAyB,EAAOzB,IAAA,CAGxB,IAFA,IAAAoN,EAAAH,EAAAjN,GACAqN,EAAAD,EAAA,GAAAA,IACAD,GAAAE,GACAF,EAAAE,EACAF,GAAAE,EAEAA,GAAAF,EAGAA,GAAAE,EAEA,OAAAF,GAIA3N,QAAA8N,IAAA,SAAAzJ,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAC,KAAAsH,MAAAvH,IAIArE,QAAA+N,IAAA,CACAtC,QAAAzL,QAAAyL,SAGAzL,QAAAgO,IAAA,WAEA,IAAA/M,EAAAmG,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,GAAA3C,aAAAwB,MACA,OAAAxB,EAEA,QAAAT,EAAAyN,EAAAhM,EAAAnB,EAAAQ,EAAA,OACA0D,KAAA/C,EAAAhB,EAAAiN,QACA,KAAAjM,EAAA,IACA,GAAAA,EAAA,GACA,IAAAzB,EAAA,EAAAyN,EAAA3J,KAAAsH,MAAAtH,KAAAuD,KAAA5F,IAAiDzB,GAAAyN,GAAAhM,EAAAzB,EAAiBA,GAAA,GAGlEM,EAAAN,GAAAyN,EAAAzN,EAAAyB,OAEAnB,EAAA,EAEA,IAAAmB,GAAAnB,EAAAQ,GAAAR,EAAAN,EAAAS,EAAAqC,OAAwC9C,EACxCS,IAAAT,GAAAM,GAAA,OAAAG,EAAAT,IAAAM,IAAAG,EAAAkN,OAAA3N,EAAA,KAKA,OAAAc,GAGAtB,QAAAoO,GAAA,SAAA/J,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAC,KAAAsD,IAAAvD,IAGArE,QAAAqO,KAAA,WACA,OAAA/J,KAAAsD,IAAA,KAGA5H,QAAAsO,IAAA,WACA,OAAAhK,KAAAsD,IAAA,IAGA5H,QAAAuO,OAAA,WACA,OAAAjK,KAAAiK,QAGAvO,QAAAwO,MAAA,WACA,OAAAlK,KAAAkK,OAGAxO,QAAAyO,IAAA,SAAApK,EAAAqK,GAGA,OAFArK,EAAA+C,MAAAtC,YAAAT,GACAqK,EAAAtH,MAAAtC,YAAA4J,GACAtH,MAAApB,WAAA3B,EAAAqK,GACA5L,MAAArB,OAEAiN,OAAA1J,IAAA0J,EAAA,GAAAA,EACApK,KAAAsD,IAAAvD,GAAAC,KAAAsD,IAAA8G,KAGA1O,QAAA2O,MAAA,SAAAtK,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAC,KAAAsD,IAAAvD,GAAAC,KAAAsD,IAAA,KAGA5H,QAAA4O,IAAA,SAAAC,EAAAC,GAGA,GAFAD,EAAAzH,MAAAtC,YAAA+J,GACAC,EAAA1H,MAAAtC,YAAAgK,GACA1H,MAAApB,WAAA6I,EAAAC,GACA,OAAAhM,MAAArB,MAEA,OAAAqN,EACA,OAAAhM,MAAAJ,KAEA,IAAAqM,EAAAzK,KAAAkD,IAAAqH,EAAAC,GACA,OAAAA,EAAA,EAAAC,MAGA/O,QAAAgP,OAAA,SAAA3K,EAAA4K,GAGA,OAFA5K,EAAA+C,MAAAtC,YAAAT,GACA4K,EAAA7H,MAAAtC,YAAAmK,GACA7H,MAAApB,WAAA3B,EAAA4K,GACAnM,MAAArB,MAEA4C,EAAA4K,EAAA,EACAnM,MAAAF,IAGA0B,KAAAC,MAAAF,EAAA4K,MAGAjP,QAAAkP,YAAA,WACA,IAAArL,EAAAuD,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,GAAAC,aAAApB,MACA,OAAAoB,EAIA,IAFA,IAAAsL,EAAA,EACAL,EAAA,EACAtO,EAAA,EAAiBA,EAAAqD,EAAAP,OAAiB9C,IAClC2O,GAAAtL,EAAArD,GACAsO,GAAA9O,QAAAmM,KAAAtI,EAAArD,IAEA,OAAAR,QAAAmM,KAAAgD,GAAAL,GAGA9O,QAAAoP,IAAA,SAAA/K,GAEA,IADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA,OAAA4B,EAEA,IAAAgL,EAAA/K,KAAAwH,KAAAxH,KAAAkD,IAAAnD,IAEA,OADAgL,EAAA,EAAAA,MAAA,EACAhL,EAAA,EAAAgL,MAGArP,QAAAkN,GAAA,WACA,OAAA5I,KAAA4I,IAGAlN,QAAAsP,EAAA,WACA,OAAAhL,KAAAgL,GAGAtP,QAAAuP,MAAA,SAAAlL,EAAAmL,GAGA,GAFAnL,EAAA+C,MAAAtC,YAAAT,GACAmL,EAAApI,MAAAtC,YAAA0K,GACApI,MAAApB,WAAA3B,EAAAmL,GACA,OAAA1M,MAAArB,MAEA,IAAAiC,EAAAY,KAAAmL,IAAApL,EAAAmL,GACA,OAAA3K,MAAAnB,GACAZ,MAAAF,IAGAc,GAGA1D,QAAA2I,QAAA,WACA,IAAA9E,EAAAuD,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,GAAAC,aAAApB,MACA,OAAAoB,EAGA,IADA,IAAAH,EAAA,EACAlD,EAAA,EAAiBA,EAAAqD,EAAAP,OAAiB9C,IAClCkD,GAAAG,EAAArD,GAEA,OAAAkD,GAGA1D,QAAA0P,SAAA,SAAAC,EAAAC,GAGA,OAFAD,EAAAvI,MAAAtC,YAAA6K,GACAC,EAAAxI,MAAAtC,YAAA8K,GACAxI,MAAApB,WAAA2J,EAAAC,GACA9M,MAAArB,MAEAoE,SAAA8J,EAAAC,EAAA,KAGA5P,QAAA6P,QAAA,SAAAxL,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAA,EAAAC,KAAA4I,GAAA,KAGAlN,QAAA8P,KAAA,WACA,OAAAxL,KAAAyL,UAGA/P,QAAAgQ,YAAA,SAAAC,EAAAC,GAGA,OAFAD,EAAA7I,MAAAtC,YAAAmL,GACAC,EAAA9I,MAAAtC,YAAAoL,GACA9I,MAAApB,WAAAiK,EAAAC,GACApN,MAAArB,MAIAwO,EAAA3L,KAAAwH,MAAAoE,EAAAD,EAAA,GAAA3L,KAAAyL,UAAA,GAIA/P,QAAAmQ,MAAA,SAAA9L,GAEA,IADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA,OAAA4B,EAQA,IAJA,IAAA+L,EAAAC,OAAAhM,GAAAiM,MAAA,IACAvO,EAAA,wJACAwO,EAAA,GACA/P,EAAA,EACAA,KACA+P,GAAAxO,GAAAqO,EAAAlC,MAAA,GAAA1N,IAAA,IAAA+P,EAEA,WAAAhN,OAAA6M,EAAA5E,KAAA,OAAAA,KAAA,KAAA+E,GAGAvQ,QAAA6L,MAAA,SAAAxH,EAAA+L,GAGA,OAFA/L,EAAA+C,MAAAtC,YAAAT,GACA+L,EAAAhJ,MAAAtC,YAAAsL,GACAhJ,MAAApB,WAAA3B,EAAA+L,GACAtN,MAAArB,MAEA6C,KAAAC,MAAAF,EAAAC,KAAAmL,IAAA,GAAAW,IAAA9L,KAAAmL,IAAA,GAAAW,IAGApQ,QAAAwQ,UAAA,SAAAnM,EAAA+L,GAGA,OAFA/L,EAAA+C,MAAAtC,YAAAT,GACA+L,EAAAhJ,MAAAtC,YAAAsL,GACAhJ,MAAApB,WAAA3B,EAAA+L,GACAtN,MAAArB,OAEA4C,EAAA,QACAC,KAAAsH,MAAAtH,KAAAkD,IAAAnD,GAAAC,KAAAmL,IAAA,GAAAW,IAAA9L,KAAAmL,IAAA,GAAAW,IAGApQ,QAAAyQ,QAAA,SAAApM,EAAA+L,GAGA,OAFA/L,EAAA+C,MAAAtC,YAAAT,GACA+L,EAAAhJ,MAAAtC,YAAAsL,GACAhJ,MAAApB,WAAA3B,EAAA+L,GACAtN,MAAArB,OAEA4C,EAAA,QACAC,KAAAwH,KAAAxH,KAAAkD,IAAAnD,GAAAC,KAAAmL,IAAA,GAAAW,IAAA9L,KAAAmL,IAAA,GAAAW,IAGApQ,QAAA0Q,IAAA,SAAArM,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEA,EAAAC,KAAAgI,IAAAjI,IAGArE,QAAA2Q,KAAA,SAAAtM,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEA,GAAAC,KAAAkI,IAAAnI,GAAAC,KAAAkI,KAAAnI,KAGArE,QAAA4Q,UAAA,SAAAjD,EAAA1L,EAAArB,EAAAiQ,GAKA,GAJAlD,EAAAvG,MAAAtC,YAAA6I,GACA1L,EAAAmF,MAAAtC,YAAA7C,GACArB,EAAAwG,MAAAtC,YAAAlE,GACAiQ,EAAAzJ,MAAAlC,iBAAA2L,GACAzJ,MAAApB,WAAA2H,EAAA1L,EAAArB,EAAAiQ,GACA,OAAA/N,MAAArB,MAGA,IADA,IAAAiC,EAAAmN,EAAA,GAAAvM,KAAAmL,IAAA9B,EAAA1L,GACAzB,EAAA,EAAiBA,EAAAqQ,EAAAvN,OAAyB9C,IAC1CkD,GAAAmN,EAAArQ,GAAA8D,KAAAmL,IAAA9B,EAAA1L,EAAAzB,EAAAI,GAEA,OAAA8C,GAGA1D,QAAA8Q,KAAA,SAAAzM,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAA,EAAA,GACA,EACG,IAAAA,EACH,EAEA,GAIArE,QAAA+Q,IAAA,SAAA1M,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAC,KAAAwI,IAAAzI,IAGArE,QAAAgR,KAAA,SAAA3M,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,GAEAC,KAAAkI,IAAAnI,GAAAC,KAAAkI,KAAAnI,IAAA,GAGArE,QAAAiR,KAAA,SAAA5M,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAA,EAAA,EACAvB,MAAAF,IAEA0B,KAAAuD,KAAAxD,IAGArE,QAAAkR,OAAA,SAAA7M,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAC,KAAAuD,KAAAxD,EAAAC,KAAA4I,KAGAlN,QAAAmR,QAAA,WACA,SAAA7M,KAAAuD,KAAA,IAGA7H,QAAAoR,MAAA,WACA,OAAA9M,KAAAuD,KAAA,IAGA7H,QAAAqR,SAAA,SAAAC,EAAAlJ,GAEA,IADAkJ,EAAAlK,MAAAtC,YAAAwM,cACA7O,MACA,OAAA6O,EAEA,OAAAA,GACA,OACA,OAAAjK,YAAAiB,QAAAF,GACA,OACA,OAAAf,YAAAkB,MAAAH,GACA,OACA,OAAAf,YAAAmB,OAAAJ,GACA,OACA,OAAAf,YAAAoB,IAAAL,GACA,OACA,OAAAf,YAAAqB,IAAAN,GACA,OACA,OAAApI,QAAA2I,QAAAP,GACA,OACA,OAAAf,YAAAuB,MAAAC,EAAAT,GACA,OACA,OAAAf,YAAAuB,MAAAE,EAAAV,GACA,OACA,OAAApI,QAAA+I,IAAAX,GACA,QACA,OAAAf,YAAA2B,IAAAH,EAAAT,GACA,QACA,OAAAf,YAAA2B,IAAAF,EAAAV,GAEA,SACA,OAAAf,YAAAiB,QAAAF,GACA,SACA,OAAAf,YAAAkB,MAAAH,GACA,SACA,OAAAf,YAAAmB,OAAAJ,GACA,SACA,OAAAf,YAAAoB,IAAAL,GACA,SACA,OAAAf,YAAAqB,IAAAN,GACA,SACA,OAAApI,QAAA2I,QAAAP,GACA,SACA,OAAAf,YAAAuB,MAAAC,EAAAT,GACA,SACA,OAAAf,YAAAuB,MAAAE,EAAAV,GACA,SACA,OAAApI,QAAA+I,IAAAX,GACA,SACA,OAAAf,YAAA2B,IAAAH,EAAAT,GACA,SACA,OAAAf,YAAA2B,IAAAF,EAAAV,KAKApI,QAAAuR,IAAA,SAAAC,EAAAC,GACA,WAAA7N,UAAAN,OACAR,MAAAD,IAGA2O,EAAApK,MAAAtC,YAAA0M,GACAC,EAAArK,MAAAtC,YAAA2M,GACArK,MAAApB,WAAAwL,EAAAC,GACA3O,MAAArB,MAGA+P,EAAAC,IAGAzR,QAAA0R,MAAA,SAAAF,EAAAC,GACA,WAAA7N,UAAAN,OACAR,MAAAD,IAGA2O,EAAApK,MAAAtC,YAAA0M,GACAC,EAAArK,MAAAtC,YAAA2M,GACArK,MAAApB,WAAAwL,EAAAC,GACA3O,MAAArB,MAGA+P,EAAAC,IAGAzR,QAAA2R,OAAA,SAAA9C,EAAAC,GACA,WAAAlL,UAAAN,OACAR,MAAAD,IAGAgM,EAAAzH,MAAAtC,YAAA+J,GACAC,EAAA1H,MAAAtC,YAAAgK,GACA1H,MAAApB,WAAA6I,EAAAC,GACAhM,MAAArB,MAGA,IAAAqN,EACAhM,MAAAJ,KAGAmM,EAAAC,IAGA9O,QAAA4R,SAAA,SAAAC,EAAAC,GACA,WAAAlO,UAAAN,OACAR,MAAAD,IAGAgP,EAAAzK,MAAAtC,YAAA+M,GACAC,EAAA1K,MAAAtC,YAAAgN,GACA1K,MAAApB,WAAA6L,EAAAC,GACAhP,MAAArB,MAGAoQ,EAAAC,IAGA9R,QAAA+R,IAAA,SAAAP,EAAAC,GACA,WAAA7N,UAAAN,OACAR,MAAAD,IAGA2O,EAAApK,MAAAtC,YAAA0M,GACAC,EAAArK,MAAAtC,YAAA2M,GACArK,MAAApB,WAAAwL,EAAAC,GACA3O,YAGA0O,GAAAC,IAGAzR,QAAAgS,GAAA,SAAAR,EAAAC,GACA,WAAA7N,UAAAN,OACAR,MAAAD,IAGA2O,EAAApK,MAAAtC,YAAA0M,GACAC,EAAArK,MAAAtC,YAAA2M,GACArK,MAAApB,WAAAwL,EAAAC,GACA3O,YAGA0O,EAAAC,IAIAzR,QAAAiS,IAAA,SAAAT,EAAAC,GACA,WAAA7N,UAAAN,OACAR,MAAAD,IAGA2O,EAAApK,MAAAtC,YAAA0M,GACAC,EAAArK,MAAAtC,YAAA2M,GACArK,MAAApB,WAAAwL,EAAAC,GACA3O,YAGA0O,GAAAC,IAGAzR,QAAAkS,GAAA,SAAAC,EAAAC,GACA,WAAAxO,UAAAN,OACAR,MAAAD,GAGAsP,IAAAC,GAGApS,QAAAqS,GAAA,SAAAF,EAAAC,GACA,WAAAxO,UAAAN,OACAR,MAAAD,GAGAsP,IAAAC,GAGApS,QAAAsS,IAAA,SAAA5D,EAAA6D,GACA,WAAA3O,UAAAN,OACAR,MAAAD,IAGA6L,EAAAtH,MAAAtC,YAAA4J,GACA6D,EAAAnL,MAAAtC,YAAAyN,GACAnL,MAAApB,WAAA0I,EAAA6D,GACAzP,YAGA9C,QAAAuP,MAAAb,EAAA6D,KAGAvS,QAAA+I,IAAA,WACA,IAAArF,EAAA,EAgBA,OAdA0D,MAAAtD,UAAAsD,MAAAzD,YAAAC,WAAA,SAAAnC,GACA,oBAAAA,EACAiC,GAAAjC,OAEK,oBAAAA,EAAA,CACL,IAAA4D,EAAAJ,WAAAxD,IAEAoD,MAAAQ,KAAA3B,GAAA2B,QAEK9B,MAAAC,QAAA/B,KACLiC,GAAA1D,QAAA+I,IAAA3F,MAAA,KAAA3B,MAIAiC,GAGA1D,QAAAwS,MAAA,SAAA/E,MAAAgF,SAAAC,UACAjF,MAAArG,MAAA3D,QAAAgK,OAEAiF,cADA1N,IAAA0N,SACAtL,MAAA3D,QAAAiP,UAGAjF,MAEA,IAAA/J,OAAA,EAEA,GAAA+O,SAAAE,SAAA,MAAAF,SAAAE,SAAA,MAAAF,SAAAE,SAAA,MACAF,kBAAA5L,QAAA,WAAAA,QAAA,YACA,QAAArG,EAAA,EAAmBA,EAAAiN,MAAAnK,OAAkB9C,IACrCkD,QAAAkP,KAAA,IAAAnF,MAAAjN,GAAA,IAAAiS,UAAAC,SAAAlS,GAAA,OAKA,QAAAA,EAAA,EAAmBA,EAAAiN,MAAAnK,OAAkB9C,IACrCkD,SAAA,GAAA+J,MAAAjN,IAAAqS,iBAAAJ,SAAA,IAAAI,cAAAH,SAAAlS,GAAA,EAIA,OAAAkD,QAGA1D,QAAA8S,OAAA,WACA,IAAAjP,KAAAuD,MAAAzD,YAAAC,WACA6J,MAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAI,KAAAkP,UACA,GAAAtF,iBAAAhL,MACA,OAAAgL,MAQA,IANA,IAAAgF,SAAA5O,KAEAmP,iBAAAvF,MAAAnK,OACA2P,YAAAR,SAAAnP,OAEAI,OAAA,EACAlD,EAAA,EAAiBA,EAAAwS,iBAAsBxS,IAAA,CAGvC,IAFA,IAAA2D,GAAAsJ,MAAAjN,GACA0S,UAAA,GACArS,EAAA,EAAmBA,EAAAoS,YAAiBpS,IACpCqS,WAAA/O,GAAAsO,SAAA5R,GACAA,IAAAoS,YAAA,IACAC,WAAA,MAGAN,KAAAM,aACAxP,QAAAS,IAGA,OAAAT,QAGA1D,QAAAmT,WAAA,WACA,IAAAvP,WAAA,IAAAA,UAAAN,OACA,OAAAR,MAAArB,MAQA,IANA,IAEA2R,EACAC,EACAC,EACAC,EALAC,EAAA5P,UAAAN,OAAA,EACAI,EAAA,EAKAlD,EAAA,EAAiBA,EAAAoD,UAAA,GAAAN,OAAyB9C,IAC1C,GAAAoD,UAAA,GAAApD,aAAA+C,MAWA,QAAA0K,EAAA,EAAqBA,EAAArK,UAAA,GAAApD,GAAA8C,OAA4B2K,IAAA,CAEjD,IADAmF,EAAA,EACAC,EAAA,EAAmBA,EAAAG,EAAYH,IAAA,CAE/B,IADAE,EAAAnM,MAAAtC,YAAAlB,UAAAyP,EAAA,GAAA7S,GAAAyN,eACAxL,MACA,OAAA8Q,EAEAH,GAAAG,EAEA7P,GAAA0P,MApBA,CAEA,IADAA,EAAA,EACAC,EAAA,EAAiBA,EAAAG,EAAYH,IAAA,CAE7B,IADAC,EAAAlM,MAAAtC,YAAAlB,UAAAyP,EAAA,GAAA7S,eACAiC,MACA,OAAA6Q,EAEAF,GAAAE,EAEA5P,GAAA0P,EAeA,OAAA1P,GAGA1D,QAAAyT,MAAA,WACA,IAAAzP,EAAAoD,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,GAAAI,aAAAvB,MACA,OAAAuB,EAIA,IAFA,IAAAN,EAAA,EACAJ,EAAAU,EAAAV,OACA9C,EAAA,EAAiBA,EAAA8C,EAAY9C,IAC7BkD,GAAA4D,YAAAoM,SAAA1P,EAAAxD,IAAAwD,EAAAxD,GAAAwD,EAAAxD,GAAA,EAEA,OAAAkD,GAGA1D,QAAA2T,SAAA,SAAAC,EAAAC,GAGA,GAFAD,EAAAxM,MAAAlC,iBAAAkC,MAAA3D,QAAAmQ,IACAC,EAAAzM,MAAAlC,iBAAAkC,MAAA3D,QAAAoQ,IACAzM,MAAApB,WAAA4N,EAAAC,GACA,OAAA/Q,MAAArB,MAGA,IADA,IAAAiC,EAAA,EACAlD,EAAA,EAAiBA,EAAAoT,EAAAtQ,OAAoB9C,IACrCkD,GAAAkQ,EAAApT,GAAAoT,EAAApT,GAAAqT,EAAArT,GAAAqT,EAAArT,GAEA,OAAAkD,GAGA1D,QAAA8T,SAAA,SAAAF,EAAAC,GAGA,GAFAD,EAAAxM,MAAAlC,iBAAAkC,MAAA3D,QAAAmQ,IACAC,EAAAzM,MAAAlC,iBAAAkC,MAAA3D,QAAAoQ,IACAzM,MAAApB,WAAA4N,EAAAC,GACA,OAAA/Q,MAAArB,MAEA,IAAAiC,EAAA,EACAkQ,EAAAxM,MAAAlC,iBAAAkC,MAAA3D,QAAAmQ,IACAC,EAAAzM,MAAAlC,iBAAAkC,MAAA3D,QAAAoQ,IACA,QAAArT,EAAA,EAAiBA,EAAAoT,EAAAtQ,OAAoB9C,IACrCkD,GAAAkQ,EAAApT,GAAAoT,EAAApT,GAAAqT,EAAArT,GAAAqT,EAAArT,GAEA,OAAAkD,GAGA1D,QAAA+T,QAAA,SAAAH,EAAAC,GAGA,GAFAD,EAAAxM,MAAAlC,iBAAAkC,MAAA3D,QAAAmQ,IACAC,EAAAzM,MAAAlC,iBAAAkC,MAAA3D,QAAAoQ,IACAzM,MAAApB,WAAA4N,EAAAC,GACA,OAAA/Q,MAAArB,MAEA,IAAAiC,EAAA,EACAkQ,EAAAxM,MAAA3D,QAAAmQ,GACAC,EAAAzM,MAAA3D,QAAAoQ,GACA,QAAArT,EAAA,EAAiBA,EAAAoT,EAAAtQ,OAAoB9C,IACrCkD,GAAAY,KAAAmL,IAAAmE,EAAApT,GAAAqT,EAAArT,GAAA,GAEA,OAAAkD,GAGA1D,QAAAgU,IAAA,SAAA3P,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEAC,KAAAoI,IAAArI,IAGArE,QAAAiU,KAAA,SAAA5P,GAEA,IADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA,OAAA4B,EAEA,IAAAuI,EAAAtI,KAAAkI,IAAA,EAAAnI,GACA,OAAAuI,EAAA,IAAAA,EAAA,IAGA5M,QAAAkU,MAAA,SAAA7P,EAAA+L,GAIA,OAHAA,OAAApL,IAAAoL,EAAA,EAAAA,EACA/L,EAAA+C,MAAAtC,YAAAT,GACA+L,EAAAhJ,MAAAtC,YAAAsL,GACAhJ,MAAApB,WAAA3B,EAAA+L,GACAtN,MAAArB,OAEA4C,EAAA,QACAC,KAAAsH,MAAAtH,KAAAkD,IAAAnD,GAAAC,KAAAmL,IAAA,GAAAW,IAAA9L,KAAAmL,IAAA,GAAAW,kDCzoCA,IAAA+D,SAAe7T,oBAAQ,GACvBqJ,KAAWrJ,oBAAQ,GACnB8T,MAAY9T,oBAAQ,GAAO8T,MAC3BhN,MAAY9G,oBAAQ,GACpBwC,MAAYxC,oBAAQ,GACpB+T,KAAW/T,oBAAQ,IAEnBgU,QAAA,mBAEAtU,QAAAuU,OAAA,WACA,IAAA9G,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,OAAA6J,aAAAhL,MACAgL,EAEA2G,MAAAjF,IAAAiF,MAAA3G,GAAA+G,SAAAJ,MAAAK,KAAAhH,IAAAjG,MAAA,IAAAiG,EAAAnK,QAGAtD,QAAAsI,QAAA,WAOA,IANA,IAIA5E,EAJA+J,EAAArG,MAAApD,QAAAoD,MAAA3D,QAAAG,YACA3B,EAAAwL,EAAAnK,OACA6L,EAAA,EACAuF,EAAA,EAGAlU,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxB2O,GAAA1B,EAAAjN,GACAkU,GAAA,EAQA,OANAhR,EAAAyL,EAAAuF,EAEA7P,MAAAnB,KACAA,EAAAZ,MAAAF,KAGAc,GAGA1D,QAAA2U,SAAA,WAMA,IALA,IAIAjR,EAJA+J,EAAArG,MAAA3D,QAAAG,WACA3B,EAAAwL,EAAAnK,OACA6L,EAAA,EACAuF,EAAA,EAEAlU,EAAA,EAAiBA,EAAAyB,EAAOzB,IAAA,CACxB,IAAA2D,EAAAsJ,EAAAjN,GACA,iBAAA2D,IACAgL,GAAAhL,IAEA,IAAAA,GACAgL,IAEA,OAAAhL,GACAuQ,IASA,OANAhR,EAAAyL,EAAAuF,EAEA7P,MAAAnB,KACAA,EAAAZ,MAAAF,KAGAc,GAGA1D,QAAA4U,UAAA,SAAAnH,MAAAgF,SAAAoC,eACA,GAAAjR,UAAAN,QAAA,EACA,OAAAR,MAAAD,GAKA,GAHAgS,6BAAApH,MACAA,MAAArG,MAAA3D,QAAAgK,OACAoH,cAAAzN,MAAAlC,iBAAAkC,MAAA3D,QAAAoR,gBACAA,yBAAApS,MACA,OAAAoS,cAIA,IAFA,IAAAC,cAAA,EACApR,OAAA,EACAlD,EAAA,EAAiBA,EAAAiN,MAAAnK,OAAkB9C,IACnCoS,KAAAnF,MAAAjN,GAAAiS,YACA/O,QAAAmR,cAAArU,GACAsU,iBAGA,OAAApR,OAAAoR,eAGA9U,QAAA+U,WAAA,WAQA,IALA,IAAAlR,KAAAuD,MAAAzD,YAAAC,WACA6O,UAAA5O,KAAAP,OAAA,KACAmK,MAAArG,MAAA3D,QAAAI,KAAA,IACA6Q,MAAA,EACAhR,OAAA,EACAlD,EAAA,EAAiBA,EAAAiN,MAAAnK,OAAkB9C,IAAA,CAEnC,IADA,IAAA0S,UAAA,GACAjF,EAAA,EAAmBA,EAAAwE,SAAcxE,IACjCiF,WAAArP,KAAA,EAAAoK,EAAA,GAAAzN,GAAAqD,KAAA,EAAAoK,EAAA,GACAA,IAAAwE,SAAA,IACAS,WAAA,MAGAN,KAAAM,aACAxP,QAAA+J,MAAAjN,GACAkU,SAIA,IAAAM,QAAAtR,OAAAgR,MACA,OAAA7P,MAAAmQ,SACA,EAEAA,SAIAhV,QAAAiV,KAAA,GAEAjV,QAAAiV,KAAAC,KAAA,SAAAvH,EAAAwH,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAA3R,UAAAN,OAAA,EACAR,MAAArB,OAGA6T,OAAAtQ,IAAAsQ,EAAA,EAAAA,EACAC,OAAAvQ,IAAAuQ,EAAA,EAAAA,EAEA5H,EAAAvG,MAAAtC,YAAA6I,GACAwH,EAAA/N,MAAAtC,YAAAqQ,GACAC,EAAAhO,MAAAtC,YAAAsQ,GACAE,EAAAlO,MAAAtC,YAAAwQ,GACAC,EAAAnO,MAAAtC,YAAAyQ,GACAnO,MAAApB,WAAA2H,EAAAwH,EAAAC,EAAAE,EAAAC,GACAzS,MAAArB,OAGAkM,KAAA2H,IAAAC,EAAAD,GACA,EAAAlB,MAAAgB,KAAAI,IAAA7H,EAAAwH,EAAAC,GAAAhB,MAAAgB,KAAAK,IAAA9H,EAAAwH,EAAAC,MAGApV,QAAAiV,KAAAS,IAAA,SAAAC,EAAAR,EAAAC,EAAAE,EAAAC,GASA,OARAD,OAAAtQ,IAAAsQ,EAAA,EAAAA,EACAC,OAAAvQ,IAAAuQ,EAAA,EAAAA,EAEAI,EAAAvO,MAAAtC,YAAA6Q,GACAR,EAAA/N,MAAAtC,YAAAqQ,GACAC,EAAAhO,MAAAtC,YAAAsQ,GACAE,EAAAlO,MAAAtC,YAAAwQ,GACAC,EAAAnO,MAAAtC,YAAAyQ,GACAnO,MAAApB,WAAA2P,EAAAR,EAAAC,EAAAE,EAAAC,GACAzS,MAAArB,MAGA2S,MAAAgB,KAAAQ,IAAAD,EAAAR,EAAAC,IAAAG,EAAAD,MAGAtV,QAAA6V,MAAA,GAEA7V,QAAA6V,MAAAX,KAAA,SAAAY,EAAAC,EAAAJ,EAAAN,GAKA,OAJAS,EAAA1O,MAAAtC,YAAAgR,GACAC,EAAA3O,MAAAtC,YAAAiR,GACAJ,EAAAvO,MAAAtC,YAAA6Q,GACAN,EAAAjO,MAAAtC,YAAAuQ,GACAjO,MAAApB,WAAA8P,EAAAC,EAAAJ,EAAAN,GACAvS,MAAArB,MAEA,EAAA2S,MAAA4B,SAAAR,IAAAM,EAAAC,EAAAJ,GAAAvB,MAAA4B,SAAAP,IAAAK,EAAAC,EAAAJ,IAGA3V,QAAA6V,MAAAX,KAAAe,MAAA,SAAAF,EAAAJ,EAAAG,EAAAI,GAOA,GANAA,OAAAlR,IAAAkR,EAAAJ,EAAAI,EAEAH,EAAA3O,MAAAtC,YAAAiR,GACAJ,EAAAvO,MAAAtC,YAAA6Q,GACAG,EAAA1O,MAAAtC,YAAAgR,GACAI,EAAA9O,MAAAtC,YAAAoR,GACA9O,MAAApB,WAAA+P,EAAAJ,EAAAG,EAAAI,GACA,OAAApT,MAAArB,MAIA,IADA,IAAAiC,EAAA,EACAlD,EAAAsV,EAAyBtV,GAAA0V,EAAiB1V,IAC1CkD,GAAAyQ,SAAAlI,OAAA8J,EAAAvV,GAAA8D,KAAAmL,IAAAkG,EAAAnV,GAAA8D,KAAAmL,IAAA,EAAAkG,EAAAI,EAAAvV,GAEA,OAAAkD,GAGA1D,QAAA6V,MAAAH,IAAA,SAAAK,EAAAJ,EAAAR,GAIA,GAHAY,EAAA3O,MAAAtC,YAAAiR,GACAJ,EAAAvO,MAAAtC,YAAA6Q,GACAR,EAAA/N,MAAAtC,YAAAqQ,GACA/N,MAAApB,WAAA+P,EAAAJ,EAAAR,GACA,OAAArS,MAAArB,MAIA,IADA,IAAAkM,EAAA,EACAA,GAAAoI,GAAA,CACA,GAAA3B,MAAA4B,SAAAR,IAAA7H,EAAAoI,EAAAJ,IAAAR,EACA,OAAAxH,EAEAA,MAIA3N,QAAAmW,MAAA,GAEAnW,QAAAmW,MAAAjB,KAAA,SAAAvH,EAAA0F,EAAAgC,GAGA,OAFA1H,EAAAvG,MAAAtC,YAAA6I,GACA0F,EAAAjM,MAAAtC,YAAAuO,GACAjM,MAAApB,WAAA2H,EAAA0F,GACAvQ,MAAArB,MAGA,EAAA2S,MAAAgC,UAAAZ,IAAA7H,EAAA0F,GAAAe,MAAAgC,UAAAX,IAAA9H,EAAA0F,IAGArT,QAAAmW,MAAAjB,KAAAmB,GAAA,SAAA1I,EAAA0F,GACA,OAAA1F,GAAA0F,EACAvQ,MAAAD,GAGA8K,EAAA,GAAA0F,EAAA/O,KAAAmL,IAAA,OACA3M,MAAAF,IAGA,iBAAA+K,GAAA,iBAAA0F,EACAvQ,MAAArB,MAGA,EAAA2S,MAAAgC,UAAAZ,IAAA7H,EAAA0F,IAGArT,QAAAmW,MAAAT,IAAA,SAAAC,EAAAtC,GAGA,OAFAsC,EAAAvO,MAAAtC,YAAA6Q,GACAtC,EAAAjM,MAAAtC,YAAAuO,GACAjM,MAAApB,WAAA2P,EAAAtC,GACAvQ,MAAArB,MAEA2S,MAAAgC,UAAAR,IAAAD,EAAAtC,IAGArT,QAAAmW,MAAAT,IAAAW,GAAA,SAAA/T,EAAA+Q,GACA,OAAA/Q,GAAA+Q,EACAvQ,MAAAD,GAGAP,EAAA,GAAAA,EAAA,GAAA+Q,EAAA,GAAAA,EAAA/O,KAAAmL,IAAA,OACA3M,MAAAF,IAGA,iBAAAN,GAAA,iBAAA+Q,EACAvQ,MAAArB,MAGA2S,MAAAgC,UAAAR,IAAA,EAAAtT,EAAA+Q,IAGArT,QAAAmW,MAAAG,KAAA,SAAAC,EAAAC,GACA,OAAA5S,UAAAN,OACA,OAAAR,MAAAD,GAGA,KAAA0T,aAAAhT,OAAAiT,aAAAjT,OACA,OAAAT,MAAArB,MAGA,GAAA8U,EAAAjT,SAAAkT,EAAAlT,OACA,OAAAR,MAAArB,MAGA,GAAA8U,EAAA,IAAAC,EAAA,IACAD,EAAA,GAAAjT,SAAAkT,EAAA,GAAAlT,OACA,OAAAR,MAAArB,MAGA,IACAgV,EAAAjW,EAAAyN,EADAtH,EAAA4P,EAAAjT,OAIA,IAAA9C,EAAA,EAAaA,EAAAmG,EAASnG,IACtB+V,EAAA/V,aAAA+C,QACAkT,EAAAF,EAAA/V,GACA+V,EAAA/V,GAAA,GACA+V,EAAA/V,GAAAuD,KAAA0S,IAEAD,EAAAhW,aAAA+C,QACAkT,EAAAD,EAAAhW,GACAgW,EAAAhW,GAAA,GACAgW,EAAAhW,GAAAuD,KAAA0S,IAIA,IAAA/P,EAAA6P,EAAA,GAAAjT,OACAoT,EAAA,IAAAhQ,EAAAC,EAAA,GAAAA,EAAA,IAAAD,EAAA,GACAiQ,EAAA,EACAC,EAAAtS,KAAA4I,GAEA,IAAA1M,EAAA,EAAaA,EAAAmG,EAASnG,IACtB,IAAAyN,EAAA,EAAeA,EAAAvH,EAASuH,IACxB0I,GAAArS,KAAAmL,IAAA8G,EAAA/V,GAAAyN,GAAAuI,EAAAhW,GAAAyN,GAAA,GAAAuI,EAAAhW,GAAAyN,GAyBA,OAAA3J,KAAAC,MAAA,IApBA,SAAAoS,EAAAD,GACA,IAAApU,EAAAgC,KAAAkI,KAAA,GAAAmK,GACAD,EAAA,OACApU,GAAAgC,KAAAuD,KAAA,EAAA8O,EAAAC,IAGA,IADA,IAAAvD,EAAAqD,EACArD,GAAA,GACA/Q,IAAAqU,EAAAtD,EACAA,GAAA,EAIA,IAFA,IAAA3R,EAAAY,EACAuU,EAAAH,EACAhV,EAAA,MAAAY,GAGAA,GADAZ,IAAAiV,GADAE,GAAA,GAIA,SAAAvU,EAGAwU,CAAAH,EAAAD,IAAA,KAGA1W,QAAA+W,OAAA,SAAAxR,EAAAgB,GACA,WAAA3C,UAAAN,OACAR,MAAAD,GAGA0D,EAAA,EACAzD,MAAAF,IAGA2C,aAAAhC,OAAA,iBAAAgD,EAIA,IAAAhB,EAAAjC,OAIA8Q,MAAA1N,IAAAnB,EAAAgB,QAJA,EAHAzD,MAAArB,OAUAzB,QAAAgX,QAAA,SAAAzR,GACA,WAAA3B,UAAAN,OACAR,MAAAD,GAGA0C,aAAAhC,MAIA,IAAAgC,EAAAjC,OACA,EAGA8Q,MAAA6C,KAAA1R,GAPAzC,MAAArB,OAUAzB,QAAAkX,WAAA,GAEAlX,QAAAkX,WAAAC,KAAA,SAAAhC,EAAAiC,EAAAnV,GAIA,OAHAkT,EAAA/N,MAAAtC,YAAAqQ,GACAiC,EAAAhQ,MAAAtC,YAAAsS,GACAnV,EAAAmF,MAAAtC,YAAA7C,GACAmF,MAAApB,WAAAmP,EAAAiC,EAAAnV,GACAa,MAAArB,MAEA2S,MAAAiD,SAAA,EAAAlC,EAAAiC,EAAAnV,GAAA,MAGAjC,QAAAkX,WAAAI,EAAA,SAAAnC,EAAAiC,EAAAnV,GAIA,OAHAkT,EAAA/N,MAAAtC,YAAAqQ,GACAiC,EAAAhQ,MAAAtC,YAAAsS,GACAnV,EAAAmF,MAAAtC,YAAA7C,GACAmF,MAAApB,WAAAmP,EAAAiC,EAAAnV,GACAa,MAAArB,MAEA2S,MAAAmD,IAAA,EAAApC,EAAAiC,EAAAnV,GAAA,MAGAjC,QAAAwX,OAAA,SAAAC,EAAAC,GAGA,OAFAD,EAAArQ,MAAAlC,iBAAAkC,MAAA3D,QAAAgU,IACAC,EAAAtQ,MAAAlC,iBAAAkC,MAAA3D,QAAAiU,IACAtQ,MAAApB,WAAAyR,EAAAC,GACA5U,MAAArB,MAEA2S,MAAAuD,UAAAF,EAAAC,IAGA1X,QAAAuI,MAAA,WACA,OAAAnB,MAAApD,QAAAoD,MAAA3D,QAAAG,YAAAN,QAGAtD,QAAAwI,OAAA,WACA,IAAAiF,EAAArG,MAAA3D,QAAAG,WACA,OAAA6J,EAAAnK,OAAAtD,QAAA4X,WAAAnK,IAGAzN,QAAA6X,QAAA,SAAApK,EAAAhM,GACA,IAAAiC,EAAA,EAEA+J,EAAArG,MAAA3D,QAAAgK,GAEA,QAAAjN,EAAA,EAAiBA,EAAAiN,EAAAnK,OAAkB9C,IACnCiN,EAAAjN,KAAAiB,GACAiC,IAGA,OAAAA,GAIA1D,QAAA4X,WAAA,WAIA,IAHA,IAEAE,EAFArK,EAAArG,MAAA3D,QAAAG,WACAmU,EAAA,EAEAvX,EAAA,EAAiBA,EAAAiN,EAAAnK,OAAkB9C,IAEnC,QADAsX,EAAArK,EAAAjN,KACA,KAAAsX,GACAC,IAGA,OAAAA,GAGA/X,QAAAgY,QAAA,SAAAvK,MAAAgF,UACAhF,MAAArG,MAAA3D,QAAAgK,OACA,SAAA7D,KAAA6I,YACAA,SAAA,MAAAA,SAAA,KAGA,IADA,IAAAwF,QAAA,EACAzX,EAAA,EAAiBA,EAAAiN,MAAAnK,OAAkB9C,IACnC,iBAAAiN,MAAAjN,GACAoS,KAAAnF,MAAAjN,GAAAiS,WACAwF,UAGArF,KAAA,IAAAnF,MAAAjN,GAAA,IAAAiS,WACAwF,UAIA,OAAAA,SAGAjY,QAAAkY,SAAA,WAGA,IAFA,IAAArU,KAAAuD,MAAAzD,YAAAC,WACAuU,QAAA,IAAA5U,MAAA6D,MAAA3D,QAAAI,KAAA,IAAAP,QACA9C,EAAA,EAAiBA,EAAA2X,QAAA7U,OAAoB9C,IACrC2X,QAAA3X,IAAA,EAEA,IAAAA,EAAA,EAAaA,EAAAqD,KAAAP,OAAiB9C,GAAA,GAC9B,IAAAiN,MAAArG,MAAA3D,QAAAI,KAAArD,IACAiS,SAAA5O,KAAArD,EAAA,GACA,SAAAoJ,KAAA6I,YACAA,SAAA,MAAAA,SAAA,KAEA,QAAAxE,EAAA,EAAmBA,EAAAR,MAAAnK,OAAkB2K,IACrC,iBAAAR,MAAAQ,GACAkK,QAAAlK,GAAAkK,QAAAlK,IAAA2E,KAAAnF,MAAAQ,GAAAwE,UAEA0F,QAAAlK,GAAAkK,QAAAlK,IAAA2E,KAAA,IAAAnF,MAAAQ,GAAA,IAAAwE,UAIA,IAAA/O,OAAA,EACA,IAAAlD,EAAA,EAAaA,EAAA2X,QAAA7U,OAAoB9C,IACjC2X,QAAA3X,IACAkD,SAGA,OAAAA,QAGA1D,QAAAoY,YAAA,WACA,OAAA/D,KAAAgE,OAAAjV,MAAA,KAAAgE,MAAA3D,QAAAG,YAAAN,QAGAtD,QAAAsY,WAAA,GAEAtY,QAAAsY,WAAAxP,EAAA,SAAA2O,EAAAC,GAGA,GAFAD,EAAArQ,MAAAlC,iBAAAkC,MAAA3D,QAAAgU,IACAC,EAAAtQ,MAAAlC,iBAAAkC,MAAA3D,QAAAiU,IACAtQ,MAAApB,WAAAyR,EAAAC,GACA,OAAA5U,MAAArB,MAMA,IAJA,IAAA8W,EAAAnE,MAAAK,KAAAgD,GACAe,EAAApE,MAAAK,KAAAiD,GACAhU,EAAA,EACAzB,EAAAwV,EAAAnU,OACA9C,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxBkD,IAAA+T,EAAAjX,GAAA+X,IAAAb,EAAAlX,GAAAgY,GAEA,OAAA9U,EAAAzB,GAGAjC,QAAAsY,WAAAzP,EAAA,SAAA4O,EAAAC,GAGA,OAFAD,EAAArQ,MAAAlC,iBAAAkC,MAAA3D,QAAAgU,IACAC,EAAAtQ,MAAAlC,iBAAAkC,MAAA3D,QAAAiU,IACAtQ,MAAApB,WAAAyR,EAAAC,GACA5U,MAAArB,MAEA2S,MAAAqE,WAAAhB,EAAAC,IAGA1X,QAAA0Y,MAAA,WACA,IAAAjL,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,GAAA6J,aAAAhL,MACA,OAAAgL,EAIA,IAFA,IAAAgH,EAAAL,MAAAK,KAAAhH,GACA/J,EAAA,EACAlD,EAAA,EAAiBA,EAAAiN,EAAAnK,OAAkB9C,IACnCkD,GAAAY,KAAAmL,IAAAhC,EAAAjN,GAAAiU,EAAA,GAEA,OAAA/Q,GAGA1D,QAAA2Y,MAAA,GAEA3Y,QAAA2Y,MAAAzD,KAAA,SAAAvH,EAAAiL,EAAAvD,GAGA,OAFA1H,EAAAvG,MAAAtC,YAAA6I,GACAiL,EAAAxR,MAAAtC,YAAA8T,GACAxR,MAAApB,WAAA2H,EAAAiL,GACA9V,MAAArB,MAEA,EAAA2S,MAAAyE,YAAArD,IAAA7H,EAAAiL,GAAAxE,MAAAyE,YAAApD,IAAA9H,EAAAiL,IAGA5Y,QAAA8Y,EAAA,GAEA9Y,QAAA8Y,EAAA5D,KAAA,SAAAvH,EAAAoL,EAAAC,EAAA3D,GAIA,OAHA1H,EAAAvG,MAAAtC,YAAA6I,GACAoL,EAAA3R,MAAAtC,YAAAiU,GACAC,EAAA5R,MAAAtC,YAAAkU,GACA5R,MAAApB,WAAA2H,EAAAoL,EAAAC,GACAlW,MAAArB,MAEA,EAAA2S,MAAA6E,SAAAzD,IAAA7H,EAAAoL,EAAAC,GAAA5E,MAAA6E,SAAAxD,IAAA9H,EAAAoL,EAAAC,IAGAhZ,QAAA8Y,EAAA5D,KAAAmB,GAAA,SAAA1I,EAAAoL,EAAAC,GACA,WAAApV,UAAAN,OACAR,MAAAD,GAGA8K,EAAA,GAAAoL,EAAA,GAAAC,EAAA,EACAlW,MAAAF,IAGA,iBAAA+K,GAAA,iBAAAoL,GAAA,iBAAAC,EACAlW,MAAArB,MAGA,EAAA2S,MAAA6E,SAAAzD,IAAA7H,EAAAoL,EAAAC,IAGAhZ,QAAA8Y,EAAApD,IAAA,SAAAC,EAAAoD,EAAAC,GAIA,OAHArD,EAAAvO,MAAAtC,YAAA6Q,GACAoD,EAAA3R,MAAAtC,YAAAiU,GACAC,EAAA5R,MAAAtC,YAAAkU,GACA5R,MAAApB,WAAA2P,EAAAoD,EAAAC,GACAlW,MAAArB,MAEAkU,GAAA,GAAAA,EAAA,EACA7S,MAAAF,IAGAwR,MAAA6E,SAAArD,IAAAD,EAAAoD,EAAAC,IAGAhZ,QAAA8Y,EAAApD,IAAAW,GAAA,SAAA/T,EAAAyW,EAAAC,GACA,WAAApV,UAAAN,OACAR,MAAAD,GAGAP,EAAA,GAAAA,EAAA,GAAAyW,EAAA,GAAAA,EAAAzU,KAAAmL,IAAA,QAAAuJ,EAAA,GAAAA,EAAA1U,KAAAmL,IAAA,OACA3M,MAAAF,IAGA,iBAAAN,GAAA,iBAAAyW,GAAA,iBAAAC,EACAlW,MAAArB,MAGA2S,MAAA6E,SAAArD,IAAA,EAAAtT,EAAAyW,EAAAC,IAGAhZ,QAAA8Y,EAAAxC,KAAA,SAAAmB,EAAAC,GACA,IAAAD,IAAAC,EACA,OAAA5U,MAAAD,GAGA,KAAA4U,aAAAlU,OAAAmU,aAAAnU,OACA,OAAAT,MAAAD,GAGA,GAAA4U,EAAAnU,OAAA,GAAAoU,EAAApU,OAAA,EACA,OAAAR,MAAAJ,KAGA,IAAAwW,EAAA,SAAAC,EAAAC,GAEA,IADA,IAAAjK,EAAA,EACA3O,EAAA,EAAmBA,EAAA2Y,EAAA7V,OAAmB9C,IACtC2O,GAAA7K,KAAAmL,IAAA0J,EAAA3Y,GAAA4Y,EAAA,GAEA,OAAAjK,GAGAiK,EAAAjF,SAAApL,IAAA0O,KAAAnU,OACA+V,EAAAlF,SAAApL,IAAA2O,KAAApU,OAIA,OAHA4V,EAAAzB,EAAA2B,IAAA3B,EAAAnU,OAAA,IACA4V,EAAAxB,EAAA2B,IAAA3B,EAAApU,OAAA,KAKAtD,QAAAsZ,OAAA,SAAA3L,GAEA,OADAA,EAAAvG,MAAAtC,YAAA6I,cACAlL,MACAkL,EAEArJ,KAAAsD,KAAA,EAAA+F,IAAA,EAAAA,IAAA,GAGA3N,QAAAuZ,UAAA,SAAA1L,GAEA,IADAA,EAAAzG,MAAAtC,YAAA+I,cACApL,MACA,OAAAoL,EAEA,IAAA2L,EAAAlV,KAAAkI,IAAA,EAAAqB,GACA,OAAA2L,EAAA,IAAAA,EAAA,IAGAxZ,QAAAyZ,SAAA,SAAA9L,EAAA+L,EAAAC,GAIA,GAHAhM,EAAAvG,MAAAtC,YAAA6I,GACA+L,EAAAtS,MAAAlC,iBAAAkC,MAAA3D,QAAAiW,IACAC,EAAAvS,MAAAlC,iBAAAkC,MAAA3D,QAAAkW,IACAvS,MAAApB,WAAA2H,EAAA+L,EAAAC,GACA,OAAA7W,MAAArB,MAOA,IALA,IAAAmY,EAAAxF,MAAAK,KAAAkF,GACAE,EAAAzF,MAAAK,KAAAiF,GACAzX,EAAA0X,EAAArW,OACAV,EAAA,EACAkX,EAAA,EACAtZ,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxBoC,IAAA+W,EAAAnZ,GAAAoZ,IAAAF,EAAAlZ,GAAAqZ,GACAC,GAAAxV,KAAAmL,IAAAkK,EAAAnZ,GAAAoZ,EAAA,GAEA,IAAAG,EAAAnX,EAAAkX,EAEA,OADAD,EAAAE,EAAAH,EACAG,EAAApM,GAGA3N,QAAAga,UAAA,SAAAjX,EAAAkX,GAGA,GAFAlX,EAAAqE,MAAAlC,iBAAAkC,MAAA3D,QAAAV,IACAkX,EAAA7S,MAAAlC,iBAAAkC,MAAA3D,QAAAwW,IACA7S,MAAApB,WAAAjD,EAAAkX,GACA,OAAAnX,MAAArB,MAKA,IAHA,IAAAQ,EAAAc,EAAAO,OACAyW,EAAAE,EAAA3W,OACAhC,EAAA,GACAd,EAAA,EAAiBA,GAAAuZ,EAAQvZ,IAAA,CACzBc,EAAAd,GAAA,EACA,QAAAyN,EAAA,EAAmBA,EAAAhM,EAAOgM,IAC1B,IAAAzN,EACAuC,EAAAkL,IAAAgM,EAAA,KACA3Y,EAAA,OAEOd,EAAAuZ,EACPhX,EAAAkL,GAAAgM,EAAAzZ,EAAA,IAAAuC,EAAAkL,IAAAgM,EAAAzZ,KACAc,EAAAd,IAAA,GAEOA,IAAAuZ,GACPhX,EAAAkL,GAAAgM,EAAAF,EAAA,KACAzY,EAAAyY,IAAA,GAKA,OAAAzY,GAIAtB,QAAAka,MAAA,SAAA7V,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAGA,IAAAA,EACAvB,MAAAF,IAGAiD,SAAAxB,EAAA,MAAAA,KAAA,EACAvB,MAAAF,IAGAwR,MAAA+F,QAAA9V,IAGArE,QAAAka,MAAAhF,KAAA,SAAAzT,EAAA0T,EAAAC,EAAAC,GACA,WAAAzR,UAAAN,OACAR,MAAAD,GAGApB,EAAA,GAAA0T,GAAA,GAAAC,GAAA,EACAtS,MAAArB,MAGA,iBAAAA,GAAA,iBAAA0T,GAAA,iBAAAC,EACAtS,MAAArB,MAGA4T,EAAAjB,MAAAgG,MAAA5E,IAAA/T,EAAA0T,EAAAC,GAAA,GAAAhB,MAAAgG,MAAA3E,IAAAhU,EAAA0T,EAAAC,GAAA,IAGApV,QAAAka,MAAAxE,IAAA,SAAAC,EAAAR,EAAAC,GACA,WAAAxR,UAAAN,OACAR,MAAAD,GAGA8S,EAAA,GAAAA,EAAA,GAAAR,GAAA,GAAAC,GAAA,EACAtS,MAAAF,IAGA,iBAAA+S,GAAA,iBAAAR,GAAA,iBAAAC,EACAtS,MAAArB,MAGA2S,MAAAgG,MAAAxE,IAAAD,EAAAR,EAAAC,IAGApV,QAAAqa,QAAA,SAAAhW,GAEA,OADAA,EAAA+C,MAAAtC,YAAAT,cACA5B,MACA4B,EAEA+P,MAAAkG,QAAAjW,IAGArE,QAAAqa,QAAArO,QAAA,SAAA2B,GACA,WAAA/J,UAAAN,OACAR,MAAAD,GAGA8K,GAAA,EACA7K,MAAAF,IAGA,iBAAA+K,EACA7K,MAAArB,MAGA2S,MAAAkG,QAAA3M,IAGA3N,QAAAua,MAAA,SAAAC,GAEA,OADAA,EAAApT,MAAAtC,YAAA0V,cACA/X,MACA+X,EAEApG,MAAAqG,OAAAjF,IAAAgF,EAAA,SAGAxa,QAAA0a,QAAA,WACA,IAAA7W,EAAAuD,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,OAAAC,aAAApB,MACAoB,EAEAuQ,MAAAuG,QAAA9W,IAGA7D,QAAA4a,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAIA,IADAH,EAAAzT,MAAAlC,iBAAA2V,cACApY,MACA,OAAAoY,EAIA,IAAAra,EACA,QAAAwE,IAAA8V,EAEA,IADAA,EAAA,GACAta,EAAA,EAAeA,GAAAqa,EAAAvX,OAAqB9C,IACpCsa,EAAA/W,KAAAvD,GAGA,QAAAwE,IAAA+V,EAEA,IADAA,EAAA,GACAva,EAAA,EAAeA,GAAAqa,EAAAvX,OAAqB9C,IACpCua,EAAAhX,KAAAvD,GAMA,GAFAsa,EAAA1T,MAAAlC,iBAAA4V,GACAC,EAAA3T,MAAAlC,iBAAA6V,GACA3T,MAAApB,WAAA8U,EAAAC,GACA,OAAAjY,MAAArB,WAIAuD,IAAAgW,IACAA,GAAA,GAIA,IAmBA5F,EACAD,EApBAlT,EAAA4Y,EAAAvX,OACA2X,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACA,IAAA5a,EAAA,EAAaA,EAAAyB,EAAOzB,IAAA,CACpB,IAAAmN,EAAAmN,EAAAta,GACAqN,EAAAvJ,KAAAsD,IAAAiT,EAAAra,IACAya,GAAAtN,EACAuN,GAAArN,EACAsN,GAAAxN,EAAAE,EACAuN,GAAAzN,IAEAsN,GAAAhZ,EACAiZ,GAAAjZ,EACAkZ,GAAAlZ,EACAmZ,GAAAnZ,EAKA+Y,EAEA7F,EAAA+F,GADA9F,GAAA+F,EAAAF,EAAAC,IAAAE,EAAAH,MACAA,GAEA7F,EAAA+F,EAAAC,EACAjG,EAAA,GAIA,IAAAkG,EAAA,GACA,IAAA7a,EAAA,EAAaA,EAAAua,EAAAzX,OAAkB9C,IAC/B6a,EAAAtX,KAAAO,KAAAkI,IAAA2I,EAAAC,EAAA2F,EAAAva,KAEA,OAAA6a,GAGArb,QAAAsb,QAAA,WACA,IAAA7N,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,GAAA6J,aAAAhL,MACA,OAAAgL,EAIA,IAFA,IAAAxL,EAAAwL,EAAAnK,OACAwW,EAAA,EACAtZ,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxBsZ,GAAA,EAAArM,EAAAjN,GAEA,OAAAyB,EAAA6X,GAGA9Z,QAAAub,QAAA,GAEAvb,QAAAub,QAAArG,KAAA,SAAAvH,EAAA1L,EAAA4H,EAAA2R,EAAAnG,GAKA,GAJA1H,EAAAvG,MAAAtC,YAAA6I,GACA1L,EAAAmF,MAAAtC,YAAA7C,GACA4H,EAAAzC,MAAAtC,YAAA+E,GACA2R,EAAApU,MAAAtC,YAAA0W,GACApU,MAAApB,WAAA2H,EAAA1L,EAAA4H,EAAA2R,GACA,OAAA1Y,MAAArB,MAGA,SAAAgU,EAAA9H,EAAA1L,EAAA4H,EAAA2R,GACA,OAAArH,SAAAlI,OAAApC,EAAA8D,GAAAwG,SAAAlI,OAAAuP,EAAA3R,EAAA5H,EAAA0L,GAAAwG,SAAAlI,OAAAuP,EAAAvZ,GAWA,SARA,SAAA0L,EAAA1L,EAAA4H,EAAA2R,GAEA,IADA,IAAA9X,EAAA,EACAlD,EAAA,EAAmBA,GAAAmN,EAAQnN,IAC3BkD,GAAA+R,EAAAjV,EAAAyB,EAAA4H,EAAA2R,GAEA,OAAA9X,EAGA8R,CAAA7H,EAAA1L,EAAA4H,EAAA2R,GAAA/F,EAAA9H,EAAA1L,EAAA4H,EAAA2R,IAGAxb,QAAAyb,UAAA,SAAAZ,EAAAC,GAGA,OAFAD,EAAAzT,MAAAlC,iBAAA2V,GACAC,EAAA1T,MAAAlC,iBAAA4V,GACA1T,MAAApB,WAAA6U,EAAAC,GACAhY,MAAArB,MAEAoZ,EAAAvX,SAAAwX,EAAAxX,OACAR,MAAAD,GAEA7C,QAAAyZ,SAAA,EAAAoB,EAAAC,IAGA9a,QAAA0b,KAAA,WACA,IAAAjO,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,GAAA6J,aAAAhL,MACA,OAAAgL,EAKA,IAHA,IAAAgH,EAAAL,MAAAK,KAAAhH,GACAxL,EAAAwL,EAAAnK,OACAqY,EAAA,EACAnb,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxBmb,GAAArX,KAAAmL,IAAAhC,EAAAjN,GAAAiU,EAAA,GAGA,OAAAxS,KAAA,KAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,KADA0Z,GAAArX,KAAAmL,IAAA2E,MAAAwH,MAAAnO,GAAA,OACA,GAAAxL,EAAA,IAAAA,EAAA,KAAAA,EAAA,IAAAA,EAAA,KAGAjC,QAAAoJ,MAAA,SAAAqE,EAAA4F,GAGA,OAFA5F,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAgK,IACA4F,EAAAjM,MAAAtC,YAAAuO,GACAjM,MAAApB,WAAAyH,EAAA4F,GACA5F,EAEAA,EAAAoO,KAAA,SAAAhF,EAAAkD,GACA,OAAAA,EAAAlD,IACGxD,EAAA,IAGHrT,QAAA8b,OAAA,SAAApC,EAAAC,GAGA,GAFAD,EAAAtS,MAAAlC,iBAAAkC,MAAA3D,QAAAiW,IACAC,EAAAvS,MAAAlC,iBAAAkC,MAAA3D,QAAAkW,IACAvS,MAAApB,WAAA0T,EAAAC,GACA,OAAA7W,MAAArB,MAOA,IALA,IAAAoY,EAAAzF,MAAAK,KAAAiF,GACAE,EAAAxF,MAAAK,KAAAkF,GACA1X,EAAA0X,EAAArW,OACAV,EAAA,EACAkX,EAAA,EACAtZ,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxBoC,IAAA+W,EAAAnZ,GAAAoZ,IAAAF,EAAAlZ,GAAAqZ,GACAC,GAAAxV,KAAAmL,IAAAkK,EAAAnZ,GAAAoZ,EAAA,GAEA,IAAAhZ,EAAAgC,EAAAkX,EAEA,OAAAlZ,EADAiZ,EAAAjZ,EAAAgZ,IAQA5Z,QAAA+b,OAAA,SAAArC,EAAAC,GAGA,GAFAD,EAAAtS,MAAAlC,iBAAAkC,MAAA3D,QAAAiW,IACAC,EAAAvS,MAAAlC,iBAAAkC,MAAA3D,QAAAkW,IACAvS,MAAApB,WAAA0T,EAAAC,GACA,OAAA7W,MAAArB,MAEA,QAAAjB,EAAA,EAAiBA,EAAAkZ,EAAApW,OAAmB9C,IACpCkZ,EAAAlZ,GAAA8D,KAAAsD,IAAA8R,EAAAlZ,IAGA,IAAAkD,EAAA1D,QAAA8b,OAAApC,EAAAC,GAGA,OAFAjW,EAAA,GAAAY,KAAAC,MAAA,IAAAD,KAAAkI,IAAA9I,EAAA,SACAA,EAAA,GAAAY,KAAAC,MAAA,IAAAD,KAAAkI,IAAA9I,EAAA,SACAA,GAGA1D,QAAAgc,QAAA,GAEAhc,QAAAgc,QAAA9G,KAAA,SAAAvH,EAAA8G,EAAA2C,EAAA/B,GAIA,OAHA1H,EAAAvG,MAAAtC,YAAA6I,GACA8G,EAAArN,MAAAtC,YAAA2P,GACA2C,EAAAhQ,MAAAtC,YAAAsS,GACAhQ,MAAApB,WAAA2H,EAAA8G,EAAA2C,GACAtU,MAAArB,MAEA,EAAA2S,MAAA6H,UAAAzG,IAAA7H,EAAA8G,EAAA2C,GAAAhD,MAAA6H,UAAAxG,IAAA9H,EAAA8G,EAAA2C,IAGApX,QAAAgc,QAAAtG,IAAA,SAAAC,EAAAlB,EAAA2C,GAIA,OAHAzB,EAAAvO,MAAAtC,YAAA6Q,GACAlB,EAAArN,MAAAtC,YAAA2P,GACA2C,EAAAhQ,MAAAtC,YAAAsS,GACAhQ,MAAApB,WAAA2P,EAAAlB,EAAA2C,GACAtU,MAAArB,MAEA2S,MAAA6H,UAAArG,IAAAD,EAAAlB,EAAA2C,IAGApX,QAAAyI,IAAA,WACA,IAAAgF,EAAArG,MAAApD,QAAAoD,MAAA3D,QAAAG,YACA,WAAA6J,EAAAnK,OAAA,EAAAgB,KAAAiH,IAAAnI,MAAAkB,KAAAmJ,IAGAzN,QAAAkc,KAAA,WACA,IAAAzO,EAAArG,MAAAnB,qBAAAmB,MAAA3D,QAAAG,YACA,WAAA6J,EAAAnK,OAAA,EAAAgB,KAAAiH,IAAAnI,MAAAkB,KAAAmJ,IAGAzN,QAAAiJ,OAAA,WACA,IAAAwE,EAAArG,MAAAnB,qBAAAmB,MAAA3D,QAAAG,YACAF,EAAA0Q,MAAA+H,OAAA1O,GAMA,OAJA5I,MAAAnB,KACAA,EAAAZ,MAAAF,KAGAc,GAGA1D,QAAA0I,IAAA,WACA,IAAA+E,EAAArG,MAAApD,QAAAoD,MAAA3D,QAAAG,YACA,WAAA6J,EAAAnK,OAAA,EAAAgB,KAAA8X,IAAAhZ,MAAAkB,KAAAmJ,IAGAzN,QAAAqc,KAAA,WACA,IAAA5O,EAAArG,MAAAnB,qBAAAmB,MAAA3D,QAAAG,YACA,WAAA6J,EAAAnK,OAAA,EAAAgB,KAAA8X,IAAAhZ,MAAAkB,KAAAmJ,IAGAzN,QAAAkJ,KAAA,GAEAlJ,QAAAkJ,KAAAoT,KAAA,WAEA,IAAA7O,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,GAAA6J,aAAAhL,MACA,OAAAgL,EAQA,IANA,IAIA8O,EAJAta,EAAAwL,EAAAnK,OACAoR,EAAA,GACA8H,EAAA,GACAjR,EAAA,EAGA/K,EAAA,EAAiBA,EAAAyB,EAAOzB,IAExBkU,EADA6H,EAAA9O,EAAAjN,IACAkU,EAAA6H,GAAA7H,EAAA6H,GAAA,IACA7H,EAAA6H,GAAAhR,IACAA,EAAAmJ,EAAA6H,GACAC,EAAA,IAEA9H,EAAA6H,KAAAhR,IACAiR,IAAAlZ,QAAAiZ,GAGA,OAAAC,GAGAxc,QAAAkJ,KAAAC,KAAA,WACA,IAAAsE,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,OAAA6J,aAAAhL,MACAgL,EAEAzN,QAAAkJ,KAAAoT,KAAA7O,GAAAoO,KAAA,SAAAhF,EAAAkD,GACA,OAAAlD,EAAAkD,IACG,IAGH/Z,QAAAyc,SAAA,GAEAzc,QAAAyc,SAAAvH,KAAA,SAAA7B,EAAA/R,EAAAgB,EAAA+S,GAIA,OAHAhC,EAAAjM,MAAAtC,YAAAuO,GACA/R,EAAA8F,MAAAtC,YAAAxD,GACAgB,EAAA8E,MAAAtC,YAAAxC,GACA8E,MAAApB,WAAAqN,EAAA/R,EAAAgB,GACAQ,MAAArB,MAEA,EAAA2S,MAAAsI,OAAAlH,IAAAnC,EAAA/R,EAAAgB,GAAA8R,MAAAsI,OAAAjH,IAAApC,EAAA/R,EAAAgB,IAGAtC,QAAAmX,KAAA,GAEAnX,QAAAmX,KAAAjC,KAAA,SAAAvH,EAAA8G,EAAA2C,EAAA/B,GAIA,OAHA1H,EAAAvG,MAAAtC,YAAA6I,GACA8G,EAAArN,MAAAtC,YAAA2P,GACA2C,EAAAhQ,MAAAtC,YAAAsS,GACAhQ,MAAApB,WAAA2H,EAAA8G,EAAA2C,GACAtU,MAAArB,MAEA2V,GAAA,EACAtU,MAAAF,IAIA,EAAAwR,MAAAqG,OAAAjF,IAAA7H,EAAA8G,EAAA2C,GAAAhD,MAAAqG,OAAAhF,IAAA9H,EAAA8G,EAAA2C,IAGApX,QAAAmX,KAAAzB,IAAA,SAAAC,EAAAlB,EAAA2C,GAIA,OAHAzB,EAAAvO,MAAAtC,YAAA6Q,GACAlB,EAAArN,MAAAtC,YAAA2P,GACA2C,EAAAhQ,MAAAtC,YAAAsS,GACAhQ,MAAApB,WAAA2P,EAAAlB,EAAA2C,GACAtU,MAAArB,MAEA2S,MAAAqG,OAAA7E,IAAAD,EAAAlB,EAAA2C,IAGApX,QAAAmX,KAAAtO,EAAA,GAEA7I,QAAAmX,KAAAtO,EAAAqM,KAAA,SAAAsF,EAAAnF,GAEA,OADAmF,EAAApT,MAAAtC,YAAA0V,cACA/X,MACAK,MAAArB,MAEA,EAAA2S,MAAAqG,OAAAjF,IAAAgF,EAAA,KAAApG,MAAAqG,OAAAhF,IAAA+E,EAAA,MAGAxa,QAAAmX,KAAAtO,EAAA6M,IAAA,SAAAC,GAEA,OADAA,EAAAvO,MAAAtC,YAAA6Q,cACAlT,MACAK,MAAArB,MAEA2S,MAAAqG,OAAA7E,IAAAD,EAAA,MAGA3V,QAAA2c,QAAA,SAAAhD,EAAAD,GAGA,GAFAA,EAAAtS,MAAAlC,iBAAAkC,MAAA3D,QAAAiW,IACAC,EAAAvS,MAAAlC,iBAAAkC,MAAA3D,QAAAkW,IACAvS,MAAApB,WAAA0T,EAAAC,GACA,OAAA7W,MAAArB,MAQA,IANA,IAAAmY,EAAAxF,MAAAK,KAAAkF,GACAE,EAAAzF,MAAAK,KAAAiF,GACAzX,EAAA0X,EAAArW,OACAV,EAAA,EACAga,EAAA,EACAC,EAAA,EACArc,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxBoC,IAAA+W,EAAAnZ,GAAAoZ,IAAAF,EAAAlZ,GAAAqZ,GACA+C,GAAAtY,KAAAmL,IAAAkK,EAAAnZ,GAAAoZ,EAAA,GACAiD,GAAAvY,KAAAmL,IAAAiK,EAAAlZ,GAAAqZ,EAAA,GAEA,OAAAjX,EAAA0B,KAAAuD,KAAA+U,EAAAC,IAGA7c,QAAAsJ,WAAA,GAEAtJ,QAAAsJ,WAAAG,IAAA,SAAAxG,EAAAoQ,GAGA,GAFApQ,EAAAmE,MAAAlC,iBAAAkC,MAAA3D,QAAAR,IACAoQ,EAAAjM,MAAAtC,YAAAuO,GACAjM,MAAApB,WAAA/C,EAAAoQ,GACA,OAAAvQ,MAAArB,MAOA,IAAAQ,GALAgB,IAAA4Y,KAAA,SAAAhF,EAAAkD,GAEA,OAAAlD,EAAAkD,KAGAzW,OACA,GAAA+P,EAAA,GAAApR,EAAA,IAAAoR,EAAA,KAAApR,EAAA,GACA,OAAAa,MAAAF,IAEA,IAAAnC,EAAA4S,GAAApR,EAAA,KACA6a,EAAAxY,KAAAsH,MAAAnL,GACA,OAAA2G,MAAAhD,WAAA3D,IAAAqc,EAAA7Z,EAAAxC,GAAAwC,EAAA6Z,IAAArc,EAAAqc,IAAA7Z,EAAA6Z,EAAA,GAAA7Z,EAAA6Z,MAGA9c,QAAAsJ,WAAAC,IAAA,SAAAtG,EAAAoQ,GAGA,GAFApQ,EAAAmE,MAAAlC,iBAAAkC,MAAA3D,QAAAR,IACAoQ,EAAAjM,MAAAtC,YAAAuO,GACAjM,MAAApB,WAAA/C,EAAAoQ,GACA,OAAAvQ,MAAArB,MAKA,IACAhB,EAAA4S,IAJApQ,IAAA4Y,KAAA,SAAAhF,EAAAkD,GACA,OAAAlD,EAAAkD,KAEAzW,OACA,GACAwZ,EAAAxY,KAAAsH,MAAAnL,GACA,OAAA2G,MAAAhD,WAAA3D,IAAAqc,EAAA7Z,EAAAxC,GAAAwC,EAAA6Z,IAAArc,EAAAqc,IAAA7Z,EAAA6Z,EAAA,GAAA7Z,EAAA6Z,MAGA9c,QAAA+c,YAAA,GAEA/c,QAAA+c,YAAAtT,IAAA,SAAAxG,EAAA0K,EAAAjC,GAKA,GAJAA,OAAA1G,IAAA0G,EAAA,EAAAA,EACAzI,EAAAmE,MAAAlC,iBAAAkC,MAAA3D,QAAAR,IACA0K,EAAAvG,MAAAtC,YAAA6I,GACAjC,EAAAtE,MAAAtC,YAAA4G,GACAtE,MAAApB,WAAA/C,EAAA0K,EAAAjC,GACA,OAAA5I,MAAArB,MAEAwB,IAAA4Y,KAAA,SAAAhF,EAAAkD,GACA,OAAAlD,EAAAkD,IASA,IAPA,IAAAiD,EAAA3I,KAAAgE,OAAAjV,MAAA,KAAAH,GACAhB,EAAAgB,EAAAK,OACA1C,EAAAoc,EAAA1Z,OACAkM,EAAAlL,KAAAmL,IAAA,GAAA/D,GACAhI,EAAA,EACAuZ,GAAA,EACAzc,EAAA,GACAyc,GAAAzc,EAAAI,GACA+M,IAAAqP,EAAAxc,IACAkD,GAAAT,EAAAkE,QAAA6V,EAAAxc,IAAA,IAAAyB,EAAA,GACAgb,GAAA,GACKtP,GAAAqP,EAAAxc,KAAAmN,EAAAqP,EAAAxc,EAAA,IAAAA,IAAAI,EAAA,KACL8C,GAAAT,EAAAkE,QAAA6V,EAAAxc,IAAA,GAAAmN,EAAAqP,EAAAxc,KAAAwc,EAAAxc,EAAA,GAAAwc,EAAAxc,MAAAyB,EAAA,GACAgb,GAAA,GAEAzc,IAEA,OAAA8D,KAAAsH,MAAAlI,EAAA8L,MAGAxP,QAAA+c,YAAAxT,IAAA,SAAAtG,EAAA0K,EAAAjC,GAKA,GAJAA,OAAA1G,IAAA0G,EAAA,EAAAA,EACAzI,EAAAmE,MAAAlC,iBAAAkC,MAAA3D,QAAAR,IACA0K,EAAAvG,MAAAtC,YAAA6I,GACAjC,EAAAtE,MAAAtC,YAAA4G,GACAtE,MAAApB,WAAA/C,EAAA0K,EAAAjC,GACA,OAAA5I,MAAArB,MAEAwB,IAAA4Y,KAAA,SAAAhF,EAAAkD,GACA,OAAAlD,EAAAkD,IASA,IAPA,IAAAiD,EAAA3I,KAAAgE,OAAAjV,MAAA,KAAAH,GACAhB,EAAAgB,EAAAK,OACA1C,EAAAoc,EAAA1Z,OACAkM,EAAAlL,KAAAmL,IAAA,GAAA/D,GACAhI,EAAA,EACAuZ,GAAA,EACAzc,EAAA,GACAyc,GAAAzc,EAAAI,GACA+M,IAAAqP,EAAAxc,IACAkD,EAAAT,EAAAkE,QAAA6V,EAAAxc,KAAAyB,EAAA,GACAgb,GAAA,GACKtP,GAAAqP,EAAAxc,KAAAmN,EAAAqP,EAAAxc,EAAA,IAAAA,IAAAI,EAAA,KACL8C,GAAAT,EAAAkE,QAAA6V,EAAAxc,KAAAmN,EAAAqP,EAAAxc,KAAAwc,EAAAxc,EAAA,GAAAwc,EAAAxc,MAAAyB,EAAA,GACAgb,GAAA,GAEAzc,IAEA,OAAA8D,KAAAsH,MAAAlI,EAAA8L,MAGAxP,QAAAkd,OAAA,SAAA7Y,EAAA6H,GAGA,OAFA7H,EAAA+C,MAAAtC,YAAAT,GACA6H,EAAA9E,MAAAtC,YAAAoH,GACA9E,MAAApB,WAAA3B,EAAA6H,GACApJ,MAAArB,MAEA0S,SAAAhI,KAAA9H,GAAA8P,SAAAhI,KAAA9H,EAAA6H,IAGAlM,QAAAmd,aAAA,SAAA9Y,EAAA6H,GAGA,OAFA7H,EAAA+C,MAAAtC,YAAAT,GACA6H,EAAA9E,MAAAtC,YAAAoH,GACA9E,MAAApB,WAAA3B,EAAA6H,GACApJ,MAAArB,MAEA6C,KAAAmL,IAAApL,EAAA6H,IAGAlM,QAAAod,IAAA,SAAAzP,GAEA,OADAA,EAAAvG,MAAAtC,YAAA6I,cACAlL,MACAK,MAAArB,MAEA6C,KAAAkI,KAAA,GAAAmB,KAAA2G,SAGAtU,QAAAqd,QAAA,GAEArd,QAAAqd,QAAAnI,KAAA,SAAAvH,EAAA8G,EAAAY,GAGA,OAFA1H,EAAAvG,MAAAtC,YAAA6I,GACA8G,EAAArN,MAAAtC,YAAA2P,GACArN,MAAApB,WAAA2H,EAAA8G,GACA3R,MAAArB,MAEA,EAAA2S,MAAAkJ,QAAA9H,IAAA7H,EAAA8G,GAAAL,MAAAkJ,QAAA7H,IAAA9H,EAAA8G,IAGAzU,QAAAud,KAAA,SAAA9P,EAAAkI,EAAA6H,EAAAC,GACA,QAAAzY,IAAAwY,EACA,SAQA,GANAC,OAAAzY,IAAAyY,EAAAD,EAAAC,EAEAhQ,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAgK,IACAkI,EAAAvO,MAAAlC,iBAAAkC,MAAA3D,QAAAkS,IACA6H,EAAApW,MAAAtC,YAAA0Y,GACAC,EAAArW,MAAAtC,YAAA2Y,GACArW,MAAApB,WAAAyH,EAAAkI,EAAA6H,EAAAC,GACA,OAAA3a,MAAArB,MAGA,GAAA+b,IAAAC,EACA,OAAAhQ,EAAAtG,QAAAqW,IAAA,EAAA7H,EAAAlI,EAAAtG,QAAAqW,IAAA,EAQA,IALA,IAAAE,EAAAjQ,EAAAoO,KAAA,SAAAhF,EAAAkD,GACA,OAAAlD,EAAAkD,IAEA9X,EAAAyb,EAAApa,OACAI,EAAA,EACAlD,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxBkd,EAAAld,IAAAgd,GAAAE,EAAAld,IAAAid,IACA/Z,GAAAiS,EAAAlI,EAAAtG,QAAAuW,EAAAld,MAGA,OAAAkD,GAGA1D,QAAAwJ,SAAA,GAEAxJ,QAAAwJ,SAAAC,IAAA,SAAAgE,EAAAkQ,GAGA,GAFAlQ,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAgK,IACAkQ,EAAAvW,MAAAtC,YAAA6Y,GACAvW,MAAApB,WAAAyH,EAAAkQ,GACA,OAAA7a,MAAArB,MAEA,OAAAkc,GACA,OACA,OAAA3d,QAAAsJ,WAAAG,IAAAgE,EAAA,KACA,OACA,OAAAzN,QAAAsJ,WAAAG,IAAAgE,EAAA,IACA,OACA,OAAAzN,QAAAsJ,WAAAG,IAAAgE,EAAA,KACA,QACA,OAAA3K,MAAAF,MAIA5C,QAAAwJ,SAAAD,IAAA,SAAAkE,EAAAkQ,GAGA,GAFAlQ,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAgK,IACAkQ,EAAAvW,MAAAtC,YAAA6Y,GACAvW,MAAApB,WAAAyH,EAAAkQ,GACA,OAAA7a,MAAArB,MAEA,OAAAkc,GACA,OACA,OAAA3d,QAAAsJ,WAAAC,IAAAkE,EAAA,KACA,OACA,OAAAzN,QAAAsJ,WAAAC,IAAAkE,EAAA,IACA,OACA,OAAAzN,QAAAsJ,WAAAC,IAAAkE,EAAA,KACA,QACA,OAAA3K,MAAAF,MAIA5C,QAAA4d,KAAA,GAEA5d,QAAA4d,KAAAC,IAAA,SAAAxZ,EAAAoJ,EAAAqQ,GAGA,GAFAzZ,EAAA+C,MAAAtC,YAAAT,GACAoJ,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAgK,IACArG,MAAApB,WAAA3B,EAAAoJ,GACA,OAAA3K,MAAArB,MAaA,IATA,IAAAoa,GADAiC,MAAA,GACA,SAAAjH,EAAAkD,GACA,OAAAlD,EAAAkD,GACG,SAAAlD,EAAAkD,GACH,OAAAA,EAAAlD,GAIAvT,GAFAmK,GAPAA,EAAArG,MAAA3D,QAAAgK,IAOAoO,SAEAvY,OACAoR,EAAA,EACAlU,EAAA,EAAiBA,EAAA8C,EAAY9C,IAC7BiN,EAAAjN,KAAA6D,GACAqQ,IAIA,OAAAA,EAAA,KAAAjH,EAAAtG,QAAA9C,GAAAqQ,EAAA,KAAAjH,EAAAtG,QAAA9C,GAAA,GAGArE,QAAA4d,KAAA1L,GAAA,SAAA7N,EAAAoJ,EAAAqQ,GAGA,GAFAzZ,EAAA+C,MAAAtC,YAAAT,GACAoJ,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAgK,IACArG,MAAApB,WAAA3B,EAAAoJ,GACA,OAAA3K,MAAArB,MAGA,IAAAoa,GADAiC,MAAA,GACA,SAAAjH,EAAAkD,GACA,OAAAlD,EAAAkD,GACG,SAAAlD,EAAAkD,GACH,OAAAA,EAAAlD,GAGA,OADApJ,IAAAoO,SACA1U,QAAA9C,GAAA,GAGArE,QAAA+d,IAAA,SAAAxY,EAAAgB,GACA,WAAA3C,UAAAN,OACAR,MAAAD,GAGA0D,EAAA,EACAzD,MAAAF,IAGA2C,aAAAhC,OAAA,iBAAAgD,EAIA,IAAAhB,EAAAjC,OAIA8Q,MAAAzN,IAAApB,EAAAgB,QAJA,EAHAzD,MAAArB,OAUAzB,QAAAge,KAAA,SAAAzY,GACA,WAAA3B,UAAAN,OACAR,MAAAD,GAGA0C,aAAAhC,MAIA,IAAAgC,EAAAjC,OACA,EAGA8Q,MAAA6J,KAAA1Y,GAPAzC,MAAArB,OAUAzB,QAAAke,IAAA,SAAAvE,EAAAD,GAGA,OAFAC,EAAAvS,MAAAlC,iBAAAkC,MAAA3D,QAAAkW,IACAD,EAAAtS,MAAAlC,iBAAAkC,MAAA3D,QAAAiW,IACAtS,MAAApB,WAAA2T,EAAAD,GACA5W,MAAArB,MAEA6C,KAAAmL,IAAAzP,QAAA2c,QAAAhD,EAAAD,GAAA,IAGA1Z,QAAAme,KAAA,WACA,IAAA1Q,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,GAAA6J,aAAAhL,MACA,OAAAgL,EAKA,IAHA,IAAAgH,EAAAL,MAAAK,KAAAhH,GACAxL,EAAAwL,EAAAnK,OACAqY,EAAA,EACAnb,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxBmb,GAAArX,KAAAmL,IAAAhC,EAAAjN,GAAAiU,EAAA,GAEA,OAAAxS,EAAA0Z,IAAA1Z,EAAA,IAAAA,EAAA,GAAAqC,KAAAmL,IAAA2E,MAAAwH,MAAAnO,GAAA,QAGAzN,QAAAme,KAAArV,EAAA,WACA,IAAA2E,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAG,YACA,GAAA6J,aAAAhL,MACA,OAAAgL,EAMA,IAJA,IAAAgH,EAAAL,MAAAK,KAAAhH,GACAxL,EAAAwL,EAAAnK,OACA8a,EAAA,EACAC,EAAA,EACA7d,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxB6d,GAAA/Z,KAAAmL,IAAAhC,EAAAjN,GAAAiU,EAAA,GACA2J,GAAA9Z,KAAAmL,IAAAhC,EAAAjN,GAAAiU,EAAA,GAIA,OADA2J,GAAAnc,GADAoc,GAAApc,GAEAqC,KAAAmL,IAAA2O,EAAA,MAGApe,QAAAse,MAAA,SAAA5E,EAAAC,GAGA,GAFAD,EAAAtS,MAAAlC,iBAAAkC,MAAA3D,QAAAiW,IACAC,EAAAvS,MAAAlC,iBAAAkC,MAAA3D,QAAAkW,IACAvS,MAAApB,WAAA0T,EAAAC,GACA,OAAA7W,MAAArB,MAOA,IALA,IAAAmY,EAAAxF,MAAAK,KAAAkF,GACAE,EAAAzF,MAAAK,KAAAiF,GACAzX,EAAA0X,EAAArW,OACAV,EAAA,EACAkX,EAAA,EACAtZ,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxBoC,IAAA+W,EAAAnZ,GAAAoZ,IAAAF,EAAAlZ,GAAAqZ,GACAC,GAAAxV,KAAAmL,IAAAkK,EAAAnZ,GAAAoZ,EAAA,GAEA,OAAAhX,EAAAkX,GAGA9Z,QAAAqJ,MAAA,SAAAoE,EAAA4F,GAGA,OAFA5F,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAgK,IACA4F,EAAAjM,MAAAtC,YAAAuO,GACAjM,MAAApB,WAAAyH,EAAA4F,GACA5F,EAEAA,EAAAoO,KAAA,SAAAhF,EAAAkD,GACA,OAAAlD,EAAAkD,IACG1G,EAAA,IAGHrT,QAAAue,YAAA,SAAA5Q,EAAA8G,EAAA2C,GAIA,OAHAzJ,EAAAvG,MAAAtC,YAAA6I,GACA8G,EAAArN,MAAAtC,YAAA2P,GACA2C,EAAAhQ,MAAAtC,YAAAsS,GACAhQ,MAAApB,WAAA2H,EAAA8G,EAAA2C,GACAtU,MAAArB,OAEAkM,EAAA8G,GAAA2C,GAGApX,QAAA4I,MAAA,GAEA5I,QAAA4I,MAAAE,EAAA,WACA,IAAA0V,EAAAxe,QAAAgJ,IAAAF,EAAA1F,MAAAa,KAAAL,WACAF,EAAAY,KAAAuD,KAAA2W,GAMA,OAJA3Z,MAAAnB,KACAA,EAAAZ,MAAAF,KAGAc,GAGA1D,QAAA4I,MAAAC,EAAA,WACA,IAAA2V,EAAAxe,QAAAgJ,IAAAH,EAAAzF,MAAAa,KAAAL,WAGA,OAFAU,KAAAuD,KAAA2W,IAKAxe,QAAAye,OAAA,WACA,IAAAD,EAAAxe,QAAA0e,KAAAtb,MAAAa,KAAAL,WAGA,OAFAU,KAAAuD,KAAA2W,IAKAxe,QAAA2e,QAAA,WACA,IAAAH,EAAAxe,QAAA4e,MAAAxb,MAAAa,KAAAL,WACAF,EAAAY,KAAAuD,KAAA2W,GAMA,OAJA3Z,MAAAnB,KACAA,EAAAZ,MAAAF,KAGAc,GAIA1D,QAAA6e,MAAA,SAAAnF,EAAAC,GAGA,GAFAD,EAAAtS,MAAAlC,iBAAAkC,MAAA3D,QAAAiW,IACAC,EAAAvS,MAAAlC,iBAAAkC,MAAA3D,QAAAkW,IACAvS,MAAApB,WAAA0T,EAAAC,GACA,OAAA7W,MAAArB,MAQA,IANA,IAAAmY,EAAAxF,MAAAK,KAAAkF,GACAE,EAAAzF,MAAAK,KAAAiF,GACAzX,EAAA0X,EAAArW,OACAwb,EAAA,EACAlc,EAAA,EACAkX,EAAA,EACAtZ,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxBse,GAAAxa,KAAAmL,IAAAiK,EAAAlZ,GAAAqZ,EAAA,GACAjX,IAAA+W,EAAAnZ,GAAAoZ,IAAAF,EAAAlZ,GAAAqZ,GACAC,GAAAxV,KAAAmL,IAAAkK,EAAAnZ,GAAAoZ,EAAA,GAEA,OAAAtV,KAAAuD,MAAAiX,EAAAlc,IAAAkX,IAAA7X,EAAA,KAGAjC,QAAA+e,UAAA,SAAAxZ,GACA,OAAAA,EAGA6O,MAAA5N,UAAAjB,GAFAzC,MAAAD,IAKA7C,QAAAsX,EAAA3N,KAAA2N,EAEAtX,QAAAsX,EAAApC,KAAA,SAAAvH,EAAAqR,EAAA3J,GAGA,OAFA1H,EAAAvG,MAAAtC,YAAA6I,GACAqR,EAAA5X,MAAAtC,YAAAka,GACA5X,MAAApB,WAAA2H,EAAAqR,GACAlc,MAAArB,MAEA,EAAA2S,MAAA6K,SAAAzJ,IAAA7H,EAAAqR,GAAA5K,MAAA6K,SAAAxJ,IAAA9H,EAAAqR,IAGAhf,QAAAsX,EAAApC,KAAA,eAAAvH,EAAAqR,GACA,WAAApb,UAAAN,OACAR,MAAAD,GAGA8K,EAAA,GAAAqR,EAAA,EACAlc,MAAAF,IAGA,iBAAA+K,GAAA,iBAAAqR,EACAlc,MAAArB,MAGA,KAAA2S,MAAA6K,SAAAzJ,IAAA7H,EAAAqR,KAGAhf,QAAAsX,EAAApC,KAAAmB,GAAA,SAAA1I,EAAAqR,GACA,WAAApb,UAAAN,OACAR,MAAAD,GAGA8K,EAAA,GAAAqR,EAAA,EACAlc,MAAAF,IAGA,iBAAA+K,GAAA,iBAAAqR,EACAlc,MAAArB,MAGA,EAAA2S,MAAA6K,SAAAzJ,IAAA7H,EAAAqR,IAGAhf,QAAAsX,EAAA5B,IAAA,SAAAC,EAAAqJ,GAGA,OAFArJ,EAAAvO,MAAAtC,YAAA6Q,GACAqJ,EAAA5X,MAAAtC,YAAAka,GACA5X,MAAApB,WAAA2P,EAAAqJ,GACAlc,MAAArB,MAEA2S,MAAA6K,SAAArJ,IAAAD,EAAAqJ,IAGAhf,QAAAsX,EAAA5B,IAAA,eAAAC,EAAAqJ,GAGA,OAFArJ,EAAAvO,MAAAtC,YAAA6Q,GACAqJ,EAAA5X,MAAAtC,YAAAka,GACArJ,GAAA,GAAAA,EAAA,GAAAqJ,EAAA,EACAlc,MAAAF,IAEAwE,MAAApB,WAAA2P,EAAAqJ,GACAlc,MAAArB,MAEA6C,KAAAkD,IAAA4M,MAAA6K,SAAArJ,IAAAD,EAAA,EAAAqJ,KAKAhf,QAAAsX,EAAAhB,KAAA,SAAAqD,EAAAD,GAGA,GAFAC,EAAAvS,MAAAlC,iBAAAkC,MAAA3D,QAAAkW,IACAD,EAAAtS,MAAAlC,iBAAAkC,MAAA3D,QAAAiW,IACAtS,MAAApB,WAAA2T,EAAAD,GACA,OAAA5W,MAAArB,MAGA,IAIAjB,EAJA0e,EAAA9K,MAAAK,KAAAkF,GACAwF,EAAA/K,MAAAK,KAAAiF,GACA0F,EAAA,EACAC,EAAA,EAGA,IAAA7e,EAAA,EAAaA,EAAAmZ,EAAArW,OAAmB9C,IAChC4e,GAAA9a,KAAAmL,IAAAkK,EAAAnZ,GAAA0e,EAAA,GAEA,IAAA1e,EAAA,EAAaA,EAAAkZ,EAAApW,OAAmB9C,IAChC6e,GAAA/a,KAAAmL,IAAAiK,EAAAlZ,GAAA2e,EAAA,GAGAC,GAAAzF,EAAArW,OAAA,EACA+b,GAAA3F,EAAApW,OAAA,EAEA,IAAA5B,EAAA4C,KAAAkD,IAAA0X,EAAAC,GAAA7a,KAAAuD,KAAAuX,EAAAzF,EAAArW,OAAA+b,EAAA3F,EAAApW,QAEA,OAAAtD,QAAAsX,EAAApC,KAAA,MAAAxT,EAAAiY,EAAArW,OAAAoW,EAAApW,OAAA,IAGAtD,QAAAsf,MAAA,SAAA5F,EAAAC,EAAA4F,GAIA,GAHA7F,EAAAtS,MAAAlC,iBAAAkC,MAAA3D,QAAAiW,IACAC,EAAAvS,MAAAlC,iBAAAkC,MAAA3D,QAAAkW,IACA4F,EAAAnY,MAAAlC,iBAAAkC,MAAA3D,QAAA8b,IACAnY,MAAApB,WAAA0T,EAAAC,EAAA4F,GACA,OAAAzc,MAAArB,MAEA,IAAA+d,EAAAxf,QAAA8b,OAAApC,EAAAC,GACA/Y,EAAA4e,EAAA,GACAzF,EAAAyF,EAAA,GACA9b,EAAA,GAMA,OAJA6b,EAAAE,QAAA,SAAA9R,GACAjK,EAAAK,KAAAnD,EAAA+M,EAAAoM,KAGArW,GAGA1D,QAAA0f,SAAA,SAAAjS,EAAAkS,GAGA,GAFAlS,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAgK,IACAkS,EAAAvY,MAAAtC,YAAA6a,GACAvY,MAAApB,WAAAyH,EAAAkS,GACA,OAAA7c,MAAArB,MAEA,IAAAme,EAAAzL,SAAA5G,MAAAE,EAAAnK,OAAAqc,EAAA,KACA,OAAAvL,MAAAK,KAAArN,MAAAf,QAAAe,MAAAlB,KAAAuH,EAAAoO,KAAA,SAAAhF,EAAAkD,GACA,OAAAlD,EAAAkD,IACG6F,QAGH5f,QAAAgJ,IAAA,GAEAhJ,QAAAgJ,IAAAF,EAAA,WAMA,IALA,IAIApF,EAJA+J,EAAArG,MAAApD,QAAAoD,MAAA3D,QAAAG,YACA3B,EAAAwL,EAAAnK,OACAqY,EAAA,EACAlH,EAAAzU,QAAAsI,QAAAmF,GAEAjN,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxBmb,GAAArX,KAAAmL,IAAAhC,EAAAjN,GAAAiU,EAAA,GAQA,OANA/Q,EAAAiY,EAAA1Z,EAEA4C,MAAAnB,KACAA,EAAAZ,MAAAF,KAGAc,GAGA1D,QAAAgJ,IAAAH,EAAA,WAKA,IAJA,IAAA4E,EAAArG,MAAApD,QAAAoD,MAAA3D,QAAAG,YACA3B,EAAAwL,EAAAnK,OACAqY,EAAA,EACAlH,EAAAzU,QAAAsI,QAAAmF,GACAjN,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxBmb,GAAArX,KAAAmL,IAAAhC,EAAAjN,GAAAiU,EAAA,GAEA,OAAAkH,GAAA1Z,EAAA,IAGAjC,QAAA0e,KAAA,WAMA,IALA,IAAAjR,EAAArG,MAAA3D,QAAAG,WACA3B,EAAAwL,EAAAnK,OACAqY,EAAA,EACAjH,EAAA,EACAD,EAAAzU,QAAA2U,SAAAlH,GACAjN,EAAA,EAAiBA,EAAAyB,EAAOzB,IAAA,CACxB,IAAA2D,EAAAsJ,EAAAjN,GAEAmb,GADA,iBAAAxX,EACAG,KAAAmL,IAAAtL,EAAAsQ,EAAA,IACK,IAAAtQ,EACLG,KAAAmL,IAAA,EAAAgF,EAAA,GAEAnQ,KAAAmL,IAAA,EAAAgF,EAAA,GAGA,OAAAtQ,GACAuQ,IAGA,OAAAiH,GAAAjH,EAAA,IAGA1U,QAAA4e,MAAA,WAOA,IANA,IAKAlb,EALA+J,EAAArG,MAAA3D,QAAAG,WACA3B,EAAAwL,EAAAnK,OACAqY,EAAA,EACAjH,EAAA,EACAD,EAAAzU,QAAA2U,SAAAlH,GAEAjN,EAAA,EAAiBA,EAAAyB,EAAOzB,IAAA,CACxB,IAAA2D,EAAAsJ,EAAAjN,GAEAmb,GADA,iBAAAxX,EACAG,KAAAmL,IAAAtL,EAAAsQ,EAAA,IACK,IAAAtQ,EACLG,KAAAmL,IAAA,EAAAgF,EAAA,GAEAnQ,KAAAmL,IAAA,EAAAgF,EAAA,GAGA,OAAAtQ,GACAuQ,IASA,OANAhR,EAAAiY,EAAAjH,EAEA7P,MAAAnB,KACAA,EAAAZ,MAAAF,KAGAc,GAGA1D,QAAA6f,QAAA,GAEA7f,QAAA6f,QAAA3K,KAAA,SAAAvH,EAAAwH,EAAAC,EAAAC,GAIA,OAHA1H,EAAAvG,MAAAtC,YAAA6I,GACAwH,EAAA/N,MAAAtC,YAAAqQ,GACAC,EAAAhO,MAAAtC,YAAAsQ,GACAhO,MAAApB,WAAA2H,EAAAwH,EAAAC,GACAtS,MAAArB,MAEA,IAAA6C,KAAAkI,KAAAlI,KAAAmL,IAAA9B,EAAAyH,EAAAD,IAAA7Q,KAAAmL,IAAA9B,EAAAwH,EAAA,GAAA7Q,KAAAkI,KAAAlI,KAAAmL,IAAA9B,EAAAyH,EAAAD,MAAA7Q,KAAAmL,IAAA2F,EAAAD,IAGAnV,QAAA8f,EAAA,GAEA9f,QAAA8f,EAAAxJ,KAAA,SAAA7I,EAAAE,EAAAyJ,GAGA,GAFA3J,EAAArG,MAAAlC,iBAAAkC,MAAA3D,QAAAgK,IACAE,EAAAvG,MAAAtC,YAAA6I,GACAvG,MAAApB,WAAAyH,EAAAE,GACA,OAAA7K,MAAArB,MAGA2V,KAAApX,QAAA4I,MAAAC,EAAA4E,GACA,IAAAxL,EAAAwL,EAAAnK,OACA,SAAAtD,QAAAmX,KAAAtO,EAAAqM,MAAAlV,QAAAsI,QAAAmF,GAAAE,IAAAyJ,EAAA9S,KAAAuD,KAAA5F,KAAA,qBCvwDA,IAAAmF,EAAY9G,EAAQ,GACpBwC,EAAYxC,EAAQ,GAGpBN,EAAA+f,IAAA,WACA,UAAAtd,MAAA,2BAIAzC,EAAAggB,SAAA,WACA,UAAAvd,MAAA,gCAGAzC,EAAAigB,KAAA,SAAA5b,GAEA,OADAA,EAAA+C,EAAAtC,YAAAT,cACA5B,MACA4B,EAEAgM,OAAA6P,aAAA7b,IAGArE,EAAAmgB,MAAA,SAAAxW,GAGA,OAFAA,KAAA,IAEA9C,QADA,aACA,KAGA7G,EAAAogB,KAAA,SAAAzW,GAEA,IAAAjG,GADAiG,KAAA,IACA0W,WAAA,GAKA,OAHAxb,MAAAnB,KACAA,EAAAZ,EAAAD,IAEAa,GAGA1D,EAAAsgB,YAAA,WAIA,IAHA,IAAAzc,EAAAuD,EAAA3D,QAAAG,WAEA2c,EAAA,GACAA,EAAA1c,EAAAsD,SAAA,QACAtD,EAAA0c,GAAA,OAIA,IADA,IAAAC,EAAA,GACAA,EAAA3c,EAAAsD,SAAA,QACAtD,EAAA2c,GAAA,QAGA,OAAA3c,EAAA2H,KAAA,KAIAxL,EAAAygB,KAAA,WACA,UAAAhe,MAAA,4BAIAzC,EAAA0gB,OAAA,WACA,UAAAje,MAAA,8BAGAzC,EAAA2gB,MAAA,SAAAC,EAAAC,GACA,WAAAjd,UAAAN,OACAR,EAAAD,GAEA+d,IAAAC,GAGA7gB,EAAA8gB,KAAA,SAAAC,EAAAC,EAAAC,GACA,OAAArd,UAAAN,OAAA,EACAR,EAAAD,IAEAoe,OAAAjc,IAAAic,EAAA,EAAAA,EACAD,IAAA7Z,QAAA4Z,EAAAE,EAAA,YAIAjhB,EAAAkhB,MAAA,WACA,UAAAze,MAAA,6BAGAzC,EAAAmhB,UAAA,SAAA1f,GACA,IAAAiC,EAAA,GAeA,OAbAjC,IACAA,aAAA8B,MACA9B,EAAAge,QAAA,SAAA2B,GACA,KAAA1d,IACAA,GAAA,MAEAA,GAAA0d,EAAAva,QAAA,uBAGAnD,EAAAjC,EAAAoF,QAAA,sBAIAnD,GAGA1D,EAAAqhB,KAAA,SAAA1X,EAAAtF,GAGA,OAFAA,OAAAW,IAAAX,EAAA,EAAAA,GACAA,EAAA+C,EAAAtC,YAAAT,cACA5B,OAAA,iBAAAkH,EACA7G,EAAArB,MAEAkI,IAAA2X,UAAA,EAAAjd,GAAA,MAGArE,EAAAuhB,IAAA,SAAA5X,GACA,WAAA/F,UAAAN,OACAR,QAGA,iBAAA6G,EACAA,IAAArG,OAAA,EAGAqG,EAAArG,OACAqG,EAAArG,OAGAR,EAAArB,OAGAzB,EAAAwhB,MAAA,SAAA7X,GACA,uBAAAA,EACA7G,EAAArB,MAEAkI,IAAAkJ,cAAAlJ,GAGA3J,EAAAyhB,IAAA,SAAA9X,EAAA+X,EAAArd,GAGA,GAFAqd,EAAAta,EAAAtC,YAAA4c,GACArd,EAAA+C,EAAAtC,YAAAT,GACA+C,EAAApB,WAAA0b,EAAArd,IAAA,iBAAAsF,EACA,OAAAtF,EAGA,IAAAsd,EAAAD,EAAA,EACAE,EAAAD,EAAAtd,EAEA,OAAAsF,EAAA2X,UAAAK,EAAAC,IAIA5hB,EAAA6hB,YAAA,SAAAlY,EAAAmY,EAAAC,GAGA,OAFAD,OAAA,IAAAA,EAAA,IAAAA,EACAC,OAAA,IAAAA,EAAA,IAAAA,EACAC,OAAArY,EAAA9C,QAAAib,EAAA,KAAAjb,QAAAkb,EAAA,MAIA/hB,EAAAiiB,SAAA,WACA,UAAAxf,MAAA,gCAGAzC,EAAAkiB,OAAA,SAAAvY,GACA,YAAA3E,IAAA2E,GAAA,IAAAA,EAAArG,OACAR,EAAArB,QAEA,IAAAkI,IACAA,EAAA,SAEA,IAAAA,IACAA,EAAA,SAEA9E,MAAA8E,IAAA,iBAAAA,EACA7G,EAAArB,OAEA,iBAAAkI,IACAA,EAAA,GAAAA,GAGAA,EAAA9C,QAAA,kBAAAsb,GACA,OAAAA,EAAAC,OAAA,GAAAzd,cAAAwd,EAAAE,OAAA,GAAAxP,mBAIA7S,EAAAsiB,aAAA,SAAA3Y,EAAA4Y,GACA,GAAA3e,UAAAN,OAAA,EACA,OAAAR,EAAAD,GAEA,IAAAoa,EAAAtT,EAAAsT,MAAA,IAAAuF,OAAAD,IACA,OAAAtF,MAAA3Z,OAAA,EAAA2Z,EAAA3Z,OAAA,WAGAtD,EAAAyiB,WAAA,SAAA9Y,EAAA4Y,EAAAG,GACA,GAAA9e,UAAAN,OAAA,EACA,OAAAR,EAAAD,GAEA,IAAAoa,EAAAtT,EAAAsT,MAAA,IAAAuF,OAAAD,IACA,OAAAG,EAAAzF,OAGAjd,EAAA2iB,aAAA,SAAAhZ,EAAA4Y,EAAAK,GACA,OAAAhf,UAAAN,OAAA,EACAR,EAAAD,GAEA8G,EAAA9C,QAAA,IAAA2b,OAAAD,GAAAK,IAGA5iB,EAAA6iB,QAAA,SAAAlZ,EAAAsX,EAAA3d,EAAAwf,GAGA,OAFA7B,EAAA7Z,EAAAtC,YAAAmc,GACA3d,EAAA8D,EAAAtC,YAAAxB,GACA8D,EAAApB,WAAAib,EAAA3d,IACA,iBAAAqG,GACA,iBAAAmZ,EACAhgB,EAAArB,MAEAkI,EAAA0Y,OAAA,EAAApB,EAAA,GAAA6B,EAAAnZ,EAAA0Y,OAAApB,EAAA,EAAA3d,IAGAtD,EAAA+iB,KAAA,SAAApZ,EAAAtF,GAEA,OADAA,EAAA+C,EAAAtC,YAAAT,cACA5B,MACA4B,EAEA,IAAAd,MAAAc,EAAA,GAAAmH,KAAA7B,IAGA3J,EAAAgjB,MAAA,SAAArZ,EAAAtF,GAGA,OAFAA,OAAAW,IAAAX,EAAA,EAAAA,GACAA,EAAA+C,EAAAtC,YAAAT,cACA5B,MACA4B,EAEAsF,IAAA2X,UAAA3X,EAAArG,OAAAe,GAAAvB,EAAAD,IAGA7C,EAAAijB,OAAA,SAAAlC,EAAAC,EAAAC,GACA,IAAAiC,EACA,uBAAAnC,GAAA,iBAAAC,EACAle,EAAArB,OAEAwf,OAAAjc,IAAAic,EAAA,EAAAA,EAEA,KADAiC,EAAAlC,EAAAnO,cAAA1L,QAAA4Z,EAAAlO,cAAAoO,EAAA,MACAne,EAAArB,MAAAyhB,IAGAljB,EAAAmjB,MAAA,SAAAxZ,EAAAyZ,GACA,OAAAzZ,EAAA2G,MAAA8S,IAGApjB,EAAAqjB,WAAA,SAAA1Z,EAAA2Z,EAAAR,EAAAS,GACA,GAAA3f,UAAAN,OAAA,EACA,OAAAR,EAAAD,GAEA,KAAA8G,GAAA2Z,GAAAR,GACA,OAAAnZ,EACG,QAAA3E,IAAAue,EACH,OAAA5Z,EAAA9C,QAAA,IAAA2b,OAAAc,EAAA,KAAAR,GAIA,IAFA,IAAAvc,EAAA,EACA/F,EAAA,EACAmJ,EAAAxC,QAAAmc,EAAA/c,GAAA,GAGA,GAFAA,EAAAoD,EAAAxC,QAAAmc,EAAA/c,EAAA,KACA/F,IACA+iB,EACA,OAAA5Z,EAAA2X,UAAA,EAAA/a,GAAAuc,EAAAnZ,EAAA2X,UAAA/a,EAAA+c,EAAAhgB,SAMAtD,EAAAsX,EAAA,SAAA7V,GACA,uBAAAA,IAAA,IAIAzB,EAAAwjB,KAAA,WACA,UAAA/gB,MAAA,4BAGAzC,EAAAyjB,KAAA,SAAA9Z,GACA,uBAAAA,EACA7G,EAAArB,MAEAkI,EAAA9C,QAAA,WAAA+Y,QAGA5f,EAAA0jB,QAAA1jB,EAAAigB,KAEAjgB,EAAA2jB,QAAA3jB,EAAAogB,KAEApgB,EAAA4jB,MAAA,SAAAja,GACA,uBAAAA,EACA7G,EAAArB,MAEAkI,EAAAhF,eAIA3E,EAAA6jB,MAAA,WACA,UAAAphB,MAAA,8CCxSA,IAAAK,EAAYxC,EAAQ,GAGpBN,EAAA8jB,KAAA,WACA,UAAArhB,MAAA,4BAGAzC,EAAA+jB,MAAA,GACA/jB,EAAA+jB,MAAAC,KAAA,SAAAC,GACA,OAAAA,GACA,KAAAnhB,EAAAN,IAAA,SACA,KAAAM,EAAAJ,KAAA,SACA,KAAAI,EAAArB,MAAA,SACA,KAAAqB,EAAAH,IAAA,SACA,KAAAG,EAAA/B,KAAA,SACA,KAAA+B,EAAAF,IAAA,SACA,KAAAE,EAAAD,GAAA,SACA,KAAAC,EAAAC,KAAA,SAEA,OAAAD,EAAAD,IAIA7C,EAAAkkB,KAAA,WACA,UAAAzhB,MAAA,4BAGAzC,EAAAmkB,QAAA,SAAA1iB,GACA,cAAAA,GAGAzB,EAAAokB,SAAA,SAAA/f,GACA,qBAAsBuF,KAAAvF,IAGtBrE,EAAAqkB,MAAA,SAAA5iB,GACA,OAAAqB,EAAArB,MAAAqB,EAAAH,IAAAG,EAAAJ,KAAAI,EAAAF,IAAAE,EAAA/B,KAAA+B,EAAAN,KAAA2E,QAAA1F,IAAA,GACA,iBAAAA,IAAAoD,MAAApD,KAAA6iB,SAAA7iB,KAGAzB,EAAAukB,QAAA,SAAA9iB,GACA,OAAAzB,EAAAqkB,MAAA5iB,QAAAqB,EAAAD,IAGA7C,EAAAwkB,OAAA,SAAAngB,GACA,UAAAC,KAAAsH,MAAAtH,KAAAkD,IAAAnD,MAIArE,EAAAykB,UAAA,WACA,UAAAhiB,MAAA,iCAGAzC,EAAA0kB,UAAA,SAAAjjB,GACA,WAAAA,IAAA,IAAAA,GAGAzB,EAAA2kB,KAAA,SAAAljB,GACA,OAAAA,IAAAqB,EAAAD,IAGA7C,EAAA4kB,UAAA,SAAAnjB,GACA,0BAGAzB,EAAA0T,SAAA,SAAAjS,GACA,2BAAAoD,MAAApD,IAAA6iB,SAAA7iB,IAGAzB,EAAA6kB,MAAA,SAAAxgB,GACA,WAAAC,KAAAsH,MAAAtH,KAAAkD,IAAAnD,MAIArE,EAAA8kB,MAAA,WACA,UAAAriB,MAAA,6BAGAzC,EAAA+kB,OAAA,SAAAtjB,GACA,0BAGAzB,EAAAwb,EAAA,SAAA/Z,GACA,OAAAwC,KAAAyP,SAAAjS,GACAA,EAEAA,aAAAmD,KACAnD,EAAAqE,WAEA,IAAArE,EACA,GAEA,IAAAA,EACA,EAEAwC,KAAAsgB,QAAA9iB,GACAA,EAEA,GAGAzB,EAAAglB,GAAA,WACA,OAAAliB,EAAAD,IAKA7C,EAAAilB,MAAA,WACA,UAAAxiB,MAAA,6BAIAzC,EAAAklB,OAAA,WACA,UAAAziB,MAAA,8BAGAzC,EAAAgkB,KAAA,SAAAviB,GACA,OAAAwC,KAAAyP,SAAAjS,GACA,EAEAwC,KAAA8gB,OAAAtjB,GACA,EAEAwC,KAAAygB,UAAAjjB,GACA,EAEAwC,KAAAsgB,QAAA9iB,GACA,GAEA8B,MAAAC,QAAA/B,GACA,QADA,oBCjIA,IAAAqB,EAAYxC,EAAQ,GACpB8G,EAAY9G,EAAQ,GAEpBmF,EAAA,IAAAb,UAAAc,IAAA,WACAyf,EAAA,MACAngB,EACA,EACA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GAEAogB,EAAA,CACA,GACA,gBACA,gBACA,gBACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBAEAC,EAAA,CACA,GACA,MACA,MACA,MACA,MACA,MACA,MACA,WACArgB,OACAA,OACAA,EAAA,MACA,MACA,MACA,MACA,MACA,MACA,OAwbA,SAAAsgB,EAAAC,GACA,eAAA3gB,KAAA2gB,EAAA,MAAAC,WAIA,SAAAC,EAAAC,EAAAC,GACA,OAAArhB,KAAAwH,MAAA6Z,EAAAD,GAAA,cAsEA,SAAAE,EAAAhgB,GACA,IAAAigB,EAAAjgB,GAAA,eAEA,OAAAtB,KAAAwH,MAAAlG,EAAAH,GAAA,OAAAogB,EApgBA7lB,EAAA8lB,KAAA,SAAAP,EAAAQ,EAAAC,GAiBA,OAdAT,EAAAne,EAAAtC,YAAAygB,GACAQ,EAAA3e,EAAAtC,YAAAihB,GACAC,EAAA5e,EAAAtC,YAAAkhB,GAEA5e,EAAApB,WAAAuf,EAAAQ,EAAAC,GACAljB,EAAArB,MAEG8jB,EAAA,GAAAQ,EAAA,GAAAC,EAAA,EACHljB,EAAAF,IAGA,IAAAgC,KAAA2gB,EAAAQ,EAAA,EAAAC,IAMAhmB,EAAAimB,QAAA,SAAAP,EAAAC,EAAAO,GAIA,GAHAP,EAAAve,EAAAzB,UAAAggB,GACAD,EAAAte,EAAAzB,UAAA+f,GAEAC,aAAAljB,MACA,OAAAkjB,EAEA,GAAAD,aAAAjjB,MACA,OAAAijB,EAEA,oBAAAQ,EACA,OAAApjB,EAAArB,MAGA,IAAA0kB,EAAAR,EAAAD,EACA,OAAAQ,EAAArT,eACA,QACA,OAAAvO,KAAAsH,MAAAua,EAAA,YACA,QACA,OAAA7hB,KAAAsH,MAAAua,EAAA,WACA,QACA,OAAA7hB,KAAAsH,MAAAua,EAAA,SAIAnmB,EAAAomB,UAAA,SAAAC,GACA,IACAzgB,EADA0gB,EAAA,EAGA,uBAAAD,EACAvjB,EAAArB,OAGAmE,EAAAhB,KAAA2hB,MAAAF,GAEAxhB,MAAAe,GACA9C,EAAArB,OAGAmE,IAAA,aACA0gB,EAAA,GAGAhiB,KAAAwH,MAAAlG,EAAAH,GAAA,OAAA6gB,KAGAtmB,EAAAwmB,IAAA,SAAAC,GACA,IAAA7gB,EAAAwB,EAAAzB,UAAA8gB,GACA,OAAA7gB,aAAAnD,MACAmD,EAGAA,EAAA8gB,WAGA1mB,EAAA2mB,KAAA,SAAAhB,EAAAD,GAIA,OAHAC,EAAAve,EAAAzB,UAAAggB,GACAD,EAAAte,EAAAzB,UAAA+f,GAEAC,aAAAljB,MACAkjB,EAEAD,aAAAjjB,MACAijB,EAGAE,EAAAD,GAAAC,EAAAF,IAGA1lB,EAAA4mB,QAAA,SAAAlB,EAAAC,EAAAkB,GAKA,GAJAA,EAAAzf,EAAA5C,UAAAqiB,GACAnB,EAAAte,EAAAzB,UAAA+f,GACAC,EAAAve,EAAAzB,UAAAggB,GAEAD,aAAAjjB,MACA,OAAAijB,EAEA,GAAAC,aAAAljB,MACA,OAAAkjB,EAEA,GAAAkB,aAAApkB,MACA,OAAAokB,EAEA,IAEAzP,EAAA0P,EAFAC,EAAArB,EAAAF,WACAwB,EAAArB,EAAAH,WAGA,GAAAqB,EACAzP,EAAA,KAAAsO,EAAAgB,UAAA,GAAAhB,EAAAgB,UACAI,EAAA,KAAAnB,EAAAe,UAAA,GAAAf,EAAAe,cACG,CACH,IAAAO,EAAA,IAAAriB,KAAA8gB,EAAAwB,cAAAH,EAAA,KAAAL,UACAS,EAAA,IAAAviB,KAAA+gB,EAAAuB,cAAAF,EAAA,KAAAN,UACAtP,EAAAsO,EAAAgB,YAAAO,EAAA,GAAAvB,EAAAgB,UACAf,EAAAe,YAAAS,EACA/P,EAAA,IACA4P,IACAF,EAAA,GAEAA,EAAA,GAGAA,EAAAnB,EAAAe,UAIA,YAAAf,EAAAuB,cAAAxB,EAAAwB,eACA,IAAAF,EAAAD,IAAAD,EAAA1P,IAGApX,EAAAonB,MAAA,SAAA1B,EAAA2B,GAGA,OAFA3B,EAAAte,EAAAzB,UAAA+f,cAEAjjB,MACAijB,EAEA7gB,MAAAwiB,GACAvkB,EAAArB,OAEA4lB,EAAAxhB,SAAAwhB,EAAA,IACA3B,EAAA4B,SAAA5B,EAAAF,WAAA6B,GAEAzB,EAAAF,KAGA1lB,EAAAunB,QAAA,SAAA7B,EAAA2B,GAGA,OAFA3B,EAAAte,EAAAzB,UAAA+f,cAEAjjB,MACAijB,EAEA7gB,MAAAwiB,GACAvkB,EAAArB,OAEA4lB,EAAAxhB,SAAAwhB,EAAA,IAEAzB,EAAA,IAAAhhB,KAAA8gB,EAAAwB,cAAAxB,EAAAF,WAAA6B,EAAA,QAGArnB,EAAAwnB,KAAA,SAAAf,GAGA,OAFAA,EAAArf,EAAAzB,UAAA8gB,cAEAhkB,MACAgkB,EAGAA,EAAAgB,YAGAznB,EAAA0nB,SAAA,SAAAC,GACA,oBAAAA,GAAA,iBAAAA,EACA,OAAA7kB,EAAArB,MAEAkmB,EAAA9hB,SAAA8hB,EAAA,IAGA,IAAApC,EAAAjhB,KAAAsH,MAAA+b,EAAA,SACAA,GAAA,QACA,IAAA5B,EAAAzhB,KAAAsH,MAAA+b,EAAA,QACAA,GAAA,OACA,IAAA3B,EAAA1hB,KAAAsH,MAAA+b,EAAA,OACAA,GAAA,MAEA,IAAAC,EAAAtjB,KAAAsH,MAAA+b,EAAA,MACAA,GAAA,KACA,IAAAvL,EAAA9X,KAAAsH,MAAA+b,EAAA,IAEAE,EADAF,GAAA,GAUA,WAPApC,IAAA,EAAAA,EAAA,SACAQ,IAAA,EAAAA,EAAA,SACAC,IAAA,EAAAA,EAAA,QAKA,KAJA4B,IAAA,EAAAA,EAAA,SACAxL,IAAA,EAAAA,EAAA,SACAyL,IAAA,EAAAA,EAAA,SAKA7nB,EAAA8nB,WAAA,SAAAliB,GAGA,IAFAA,EAAAwB,EAAAzB,UAAAC,cAEAnD,MACA,OAAAmD,EAGAA,EAAAmiB,SAAA,OACAniB,EAAAoiB,QAAApiB,EAAA8gB,UAAA,GAAA9gB,EAAAqiB,UAAA,IACA,IAAAC,EAAA,IAAAtjB,KAAAgB,EAAAshB,cAAA,KAEA,OAAA5iB,KAAAwH,OAAAlG,EAAAsiB,GAAA,aAGAloB,EAAAmoB,OAAA,SAAA1B,GAGA,OAFAA,EAAArf,EAAAzB,UAAA8gB,cAEAhkB,MACAgkB,EAGAA,EAAA2B,cAGApoB,EAAAqoB,MAAA,SAAA5B,GAGA,OAFAA,EAAArf,EAAAzB,UAAA8gB,cAEAhkB,MACAgkB,EAGAA,EAAAjB,WAAA,GAGAxlB,EAAAsoB,YAAA,SAAA5C,EAAAC,EAAA4C,GACA,OAAAtkB,KAAAqkB,YAAAE,KAAA9C,EAAAC,EAAA,EAAA4C,IAGAvoB,EAAAsoB,YAAAE,KAAA,SAAA9C,EAAAC,EAAA8C,EAAAF,GAGA,IAFA7C,EAAAte,EAAAzB,UAAA+f,cAEAjjB,MACA,OAAAijB,EAIA,IAFAC,EAAAve,EAAAzB,UAAAggB,cAEAljB,MACA,OAAAkjB,EAOA,MAJA8C,OADAzjB,IAAAyjB,EACApD,EAAA,GAEAA,EAAAoD,cAEAllB,OACA,OAAAT,EAAArB,WAEAuD,IAAAujB,EACAA,EAAA,GACGA,aAAAhlB,QACHglB,EAAA,CAAAA,IAGA,QAAA/nB,EAAA,EAAiBA,EAAA+nB,EAAAjlB,OAAqB9C,IAAA,CACtC,IAAAkoB,EAAAthB,EAAAzB,UAAA4iB,EAAA/nB,IACA,GAAAkoB,aAAAjmB,MACA,OAAAimB,EAEAH,EAAA/nB,GAAAkoB,EAEA,IAAAC,GAAAhD,EAAAD,GAAA,QACAkD,EAAAD,EACA3C,EAAAN,EACA,IAAAllB,EAAA,EAAaA,EAAAmoB,EAAUnoB,IAAA,CACvB,IAAAM,GAAA,IAAA8D,MAAAikB,oBAAA,EAAA7C,EAAA8C,YAAA9C,EAAAiC,SACAc,GAAA,EACAjoB,IAAA2nB,EAAA,IAAA3nB,IAAA2nB,EAAA,KACAM,GAAA,GAEA,QAAA9a,EAAA,EAAmBA,EAAAsa,EAAAjlB,OAAqB2K,IAAA,CACxC,IAAA+a,EAAAT,EAAAta,GACA,GAAA+a,EAAAtC,YAAAV,EAAAU,WACAsC,EAAAxD,aAAAQ,EAAAR,YACAwD,EAAA9B,gBAAAlB,EAAAkB,cAAA,CACA6B,GAAA,EACA,OAGAA,GACAH,IAEA5C,EAAAgC,QAAAhC,EAAAU,UAAA,GAGA,OAAAkC,GAGA5oB,EAAAipB,IAAA,WACA,WAAArkB,MAGA5E,EAAAkpB,OAAA,SAAAzC,GAEA,OADAA,EAAArf,EAAAzB,UAAA8gB,cACAhkB,MACAgkB,EAGAA,EAAA0C,cAGAnpB,EAAAopB,KAAA,SAAAxB,EAAAyB,EAAA1B,GAIA,OAHAC,EAAAxgB,EAAAtC,YAAA8iB,GACAyB,EAAAjiB,EAAAtC,YAAAukB,GACA1B,EAAAvgB,EAAAtC,YAAA6iB,GACAvgB,EAAApB,WAAA4hB,EAAAyB,EAAA1B,GACA7kB,EAAArB,MAEAmmB,EAAA,GAAAyB,EAAA,GAAA1B,EAAA,EACA7kB,EAAAF,KAGA,KAAAglB,EAAA,GAAAyB,EAAA1B,GAAA,OAGA3nB,EAAAspB,UAAA,SAAAC,GAGA,OAFAA,EAAAniB,EAAAzB,UAAA4jB,cAEA9mB,MACA8mB,GAGA,KAAAA,EAAA9B,WAAA,GAAA8B,EAAAnB,aAAAmB,EAAAJ,cAAA,OAGAnpB,EAAAwpB,MAAA,WACA,WAAA5kB,MAGA5E,EAAAypB,QAAA,SAAAhD,EAAAiD,GAEA,IADAjD,EAAArf,EAAAzB,UAAA8gB,cACAhkB,MACA,OAAAgkB,OAEAzhB,IAAA0kB,IACAA,EAAA,GAEA,IAAA1D,EAAAS,EAAAwB,SAEA,OAAA7C,EAAAsE,GAAA1D,IAGAhmB,EAAA2pB,QAAA,SAAAlD,EAAAiD,GAEA,IADAjD,EAAArf,EAAAzB,UAAA8gB,cACAhkB,MACA,OAAAgkB,EAKA,QAHAzhB,IAAA0kB,IACAA,EAAA,GAEA,KAAAA,EACA,OAAAzlB,KAAA6jB,WAAArB,GAEA,IAAAmD,EAAAzE,EAAAuE,GACAG,EAAA,IAAAjlB,KAAA6hB,EAAAS,cAAA,KACA4C,EAAAD,EAAA5B,SAAA2B,EAAA,IAGA,OAFAC,GAAA,GAAAvlB,KAAAkD,IAAAqiB,EAAA5B,SAAA2B,GAAA,UAEAtlB,KAAAsH,OAAA6a,EAAAoD,GAAA,WAAAC,GAGA9pB,EAAA+pB,QAAA,SAAArE,EAAAiD,EAAAJ,GACA,OAAAtkB,KAAA8lB,QAAAvB,KAAA9C,EAAAiD,EAAA,EAAAJ,IAGAvoB,EAAA+pB,QAAAvB,KAAA,SAAA9C,EAAAiD,EAAAF,EAAAF,GAEA,IADA7C,EAAAte,EAAAzB,UAAA+f,cACAjjB,MACA,OAAAijB,EAGA,IADAiD,EAAAvhB,EAAAtC,YAAA6jB,cACAlmB,MACA,OAAAkmB,EAEA,GAAAA,EAAA,EACA,OAAA7lB,EAAAF,IAOA,MAJA6lB,OADAzjB,IAAAyjB,EACApD,EAAA,GAEAA,EAAAoD,cAEAllB,OACA,OAAAT,EAAArB,WAEAuD,IAAAujB,EACAA,EAAA,GACGA,aAAAhlB,QACHglB,EAAA,CAAAA,IAEA,QAAA/nB,EAAA,EAAiBA,EAAA+nB,EAAAjlB,OAAqB9C,IAAA,CACtC,IAAAkoB,EAAAthB,EAAAzB,UAAA4iB,EAAA/nB,IACA,GAAAkoB,aAAAjmB,MACA,OAAAimB,EAEAH,EAAA/nB,GAAAkoB,EAGA,IADA,IAAA5nB,EAAA,EACAA,EAAA6nB,GAAA,CACAjD,EAAAsC,QAAAtC,EAAAgB,UAAA,GACA,IAAAV,EAAAN,EAAAuC,SACA,GAAAjC,IAAAyC,EAAA,IAAAzC,IAAAyC,EAAA,IAGA,QAAAxa,EAAA,EAAmBA,EAAAsa,EAAAjlB,OAAqB2K,IAAA,CACxC,IAAA+a,EAAAT,EAAAta,GACA,GAAA+a,EAAAtC,YAAAhB,EAAAgB,WACAsC,EAAAxD,aAAAE,EAAAF,YACAwD,EAAA9B,gBAAAxB,EAAAwB,cAAA,CACApmB,IACA,OAGAA,KAGA,OAAA4kB,GAGA1lB,EAAAgqB,KAAA,SAAAvD,GAGA,OAFAA,EAAArf,EAAAzB,UAAA8gB,cAEAhkB,MACAgkB,EAGAA,EAAAS,eAYAlnB,EAAAiqB,SAAA,SAAAvE,EAAAC,EAAAuE,GAEA,IADAxE,EAAAte,EAAAzB,UAAA+f,cACAjjB,MACA,OAAAijB,EAGA,IADAC,EAAAve,EAAAzB,UAAAggB,cACAljB,MACA,OAAAkjB,EAGAuE,KAAA,EACA,IAAA9S,EAAAsO,EAAAgB,UACAK,EAAArB,EAAAF,WAAA,EACA2E,EAAAzE,EAAAwB,cACAJ,EAAAnB,EAAAe,UACAM,EAAArB,EAAAH,WAAA,EACA4E,EAAAzE,EAAAuB,cAEA,OAAAgD,GACA,OAUA,OARA,KAAA9S,GAAA,KAAA0P,GACA1P,EAAA,GACA0P,EAAA,IACO,KAAA1P,EACPA,EAAA,GACO,KAAAA,GAAA,KAAA0P,IACPA,EAAA,KAEAA,EAAA,GAAAE,EAAA,IAAAoD,GAAAhT,EAAA,GAAA2P,EAAA,IAAAoD,IAAA,IACA,OAEA,IAUAE,EAAA,IACA,GAAAF,IAAAC,GAAAD,EAAA,IAAAC,IAAArD,EAAAC,GAAAD,IAAAC,GAAA5P,GAAA0P,GAMA,OALAqD,IAAAC,GAAA9E,EAAA6E,IAZA,SAAAG,EAAAC,GACA,IAAAC,EAAAF,EAAApD,cACAuD,EAAA,IAAA7lB,KAAA4lB,EAAA,KACA,GAAAlF,EAAAkF,IAAAF,EAAAG,GAAAF,GAAAE,EACA,SAEA,IAAAC,EAAAH,EAAArD,cACAyD,EAAA,IAAA/lB,KAAA8lB,EAAA,KACA,OAAApF,EAAAoF,IAAAH,GAAAI,GAAAL,EAAAK,EAKAC,CAAAlF,EAAAC,IACA,IAAAqB,GAAA,KAAAF,KACAuD,EAAA,KAEA5E,EAAAC,EAAAC,GAAA0E,EAEA,IAAAQ,EAAAT,EAAAD,EAAA,EAEAnV,GADA,IAAApQ,KAAAwlB,EAAA,WAAAxlB,KAAAulB,EAAA,mBACAU,EACA,OAAApF,EAAAC,EAAAC,GAAA3Q,EACA,OAEA,OAAAyQ,EAAAC,EAAAC,GAAA,IACA,OAEA,OAAAF,EAAAC,EAAAC,GAAA,IACA,OAEA,OAAAmB,EAAA,GAAAE,EAAA,IAAAoD,GAAAhT,EAAA,GAAA2P,EAAA,IAAAoD,IAAA,uBC9jBA,IASA/V,EAPAnU,EAAAD,SA2qBA,SAAAoU,EAAA9P,GAEA,IAAAwmB,EAAA1W,EAAAhN,MAAA0jB,WAGA,SAAAC,EAAAlU,EAAAkD,GAAuB,OAAAlD,EAAAkD,EAEvB,SAAAiR,EAAAC,EAAA7O,EAAA7Q,GACA,OAAAjH,EAAAiH,IAAA6Q,EAAA9X,EAAA8X,IAAA6O,EAAA1f,IAKA6I,EAAAjF,IAAA,SAAAhK,GAGA,IAFA,IAAAgK,EAAA,EACA3O,EAAA2E,EAAA7B,SACA9C,GAAA,GACA2O,GAAAhK,EAAA3E,GACA,OAAA2O,GAKAiF,EAAA8W,QAAA,SAAA/lB,GAGA,IAFA,IAAAgK,EAAA,EACA3O,EAAA2E,EAAA7B,SACA9C,GAAA,GACA2O,GAAAhK,EAAA3E,GAAA2E,EAAA3E,GACA,OAAA2O,GAKAiF,EAAA+W,SAAA,SAAAhmB,GAKA,IAJA,IAGAsR,EAHAhC,EAAAL,EAAAK,KAAAtP,GACAgK,EAAA,EACA3O,EAAA2E,EAAA7B,SAEA9C,GAAA,GAEA2O,IADAsH,EAAAtR,EAAA3E,GAAAiU,GACAgC,EAEA,OAAAtH,GAIAiF,EAAAgX,OAAA,SAAAjmB,GAGA,IAFA,IAAAgK,EAAA,EACA3O,EAAA2E,EAAA7B,SACA9C,GAAA,GACA2O,GAAAhK,EAAA3E,GACA,OAAA2O,GAIAiF,EAAAhB,QAAA,SAAAjO,GAGA,IAFA,IAAAkmB,EAAA,EACA7qB,EAAA2E,EAAA7B,SACA9C,GAAA,GACA6qB,GAAAlmB,EAAA3E,GACA,OAAA6qB,GAKAjX,EAAAgI,IAAA,SAAAjX,GAGA,IAFA,IAAAmmB,EAAAnmB,EAAA,GACA3E,EAAA,IACAA,EAAA2E,EAAA7B,QACA6B,EAAA3E,GAAA8qB,IACAA,EAAAnmB,EAAA3E,IACA,OAAA8qB,GAKAlX,EAAA7I,IAAA,SAAApG,GAGA,IAFA,IAAAomB,EAAApmB,EAAA,GACA3E,EAAA,IACAA,EAAA2E,EAAA7B,QACA6B,EAAA3E,GAAA+qB,IACAA,EAAApmB,EAAA3E,IACA,OAAA+qB,GAKAnX,EAAAoX,OAAA,SAAArmB,GAEA,IADA,IAAAsmB,EAAA,GAAeC,EAAA,GACflrB,EAAA,EAAgBA,EAAA2E,EAAA7B,OAAgB9C,IAChCirB,EAAAtmB,EAAA3E,MACAirB,EAAAtmB,EAAA3E,KAAA,EACAkrB,EAAA3nB,KAAAoB,EAAA3E,KAGA,OAAAkrB,GAKAtX,EAAAK,KAAA,SAAAtP,GACA,OAAAiP,EAAAjF,IAAAhK,KAAA7B,QAKA8Q,EAAAuX,UAAA,SAAAxmB,GACA,OAAAiP,EAAA+W,SAAAhmB,KAAA7B,QAKA8Q,EAAAuG,QAAA,SAAAxV,GACA,OAAAb,EAAAmL,IAAA2E,EAAAhB,QAAAjO,GAAA,EAAAA,EAAA7B,SAKA8Q,EAAA+H,OAAA,SAAAhX,GACA,IAAAymB,EAAAzmB,EAAA7B,OACAooB,EAAAvmB,EAAAiB,QAAAyV,KAAAkP,GAEA,SAAAa,EAEAF,EAAAE,EAAA,MADAF,EAAAE,EAAA,KAAAF,EAAAE,EAAA,OAMAxX,EAAAyX,OAAA,SAAA1mB,GACA,OAAAiP,EAAA0X,UAAA3mB,EAAA,SAAA0R,EAAAkD,GAA+C,OAAAlD,EAAAkD,KAK/C3F,EAAA2X,QAAA,SAAA5mB,GACA,OAAAiP,EAAA0X,UAAA3mB,EAAA,SAAA0R,EAAAkD,GAA+C,OAAAlD,EAAAkD,KAK/C3F,EAAA4X,KAAA,SAAA7mB,GAIA,IAHA,IAAA8mB,EAAA,GACAC,EAAA/mB,EAAA7B,OAEA9C,EAAA,EAAiBA,EAAA0rB,EAAY1rB,IAC7ByrB,EAAAloB,KAAAoB,EAAA3E,GAAA2E,EAAA3E,EAAA,IACA,OAAAyrB,GAKA7X,EAAA+X,KAAA,SAAAhnB,GAIA,IAHA,IAAAymB,EAAAzmB,EAAA7B,OACAoa,EAAAvY,EAAAiB,QAAAyV,KAAAkP,GACAqB,EAAA,IAAA7oB,MAAAqoB,GACAprB,EAAA,EAAiBA,EAAAorB,EAAYprB,IAAA,CAC7B,IAAA6rB,EAAA3O,EAAAvW,QAAAhC,EAAA3E,IACA8rB,EAAA5O,EAAA6O,YAAApnB,EAAA3E,IACA,GAAA6rB,IAAAC,EACA,IAAAE,EAAAH,OAEAG,GAAAH,EAAAC,GAAA,EAEAF,EAAA5rB,GAAAgsB,EAAA,EAEA,OAAAJ,GAOAhY,EAAAzS,KAAA,SAAAwD,GASA,IARA,IAAA+mB,EAAA/mB,EAAA7B,OACAooB,EAAAvmB,EAAAiB,QAAAyV,KAAAkP,GACArW,EAAA,EACA+X,EAAA,EACAC,EAAA,EACAC,EAAA,GAGAnsB,EAAA,EAAiBA,EAAA0rB,EAAY1rB,IAC7BkrB,EAAAlrB,KAAAkrB,EAAAlrB,EAAA,GACAkU,KAEAA,EAAA+X,GACAE,EAAA,CAAAjB,EAAAlrB,IACAisB,EAAA/X,EACAgY,EAAA,GAGAhY,IAAA+X,IACAE,EAAA5oB,KAAA2nB,EAAAlrB,IACAksB,KAGAhY,EAAA,GAIA,WAAAgY,EAAAC,EAAA,GAAAA,GAKAvY,EAAA3G,MAAA,SAAAtI,GACA,OAAAiP,EAAA7I,IAAApG,GAAAiP,EAAAgI,IAAAjX,IAKAiP,EAAAwY,SAAA,SAAAznB,EAAA0nB,GACA,OAAAzY,EAAA+W,SAAAhmB,MAAA7B,QAAAupB,EAAA,OAIAzY,EAAA0Y,eAAA,SAAA3nB,GAGA,OAFAA,EAAAjC,OAAA,SAAA2T,EAAAkW,GAAmD,OAAAlW,EAAAzC,EAAA+W,SAAA4B,IAAoC,IACvF5nB,EAAAjC,OAAA,SAAA2T,EAAAkW,GAAgD,OAAAlW,EAAAkW,EAAAzpB,QAA2B,GAC3E6B,EAAA7B,SAIA8Q,EAAA4Y,UAAA,SAAA7nB,GAIA,IAHA,IAAAsP,EAAAL,EAAAK,KAAAtP,GACAymB,EAAAzmB,EAAA7B,OACA2pB,EAAA,IAAA1pB,MAAAqoB,GACAprB,EAAA,EAAiBA,EAAAorB,EAAYprB,IAC7BysB,EAAAzsB,GAAA2E,EAAA3E,GAAAiU,EAEA,OAAAwY,GAKA7Y,EAAAwH,MAAA,SAAAzW,EAAA0nB,GACA,OAAAvoB,EAAAuD,KAAAuM,EAAAwY,SAAAznB,EAAA0nB,KAIAzY,EAAA8Y,YAAA,SAAA/nB,GACA,OAAAb,EAAAuD,KAAAuM,EAAA0Y,eAAA3nB,KAIAiP,EAAA+Y,QAAA,SAAAhoB,GAGA,IAFA,IAAAsP,EAAAL,EAAAK,KAAAtP,GACA0R,EAAA,GACArW,EAAA2E,EAAA7B,OAAA,EAA8B9C,GAAA,EAAQA,IACtCqW,EAAA9S,KAAAO,EAAAkD,IAAArC,EAAA3E,GAAAiU,IAEA,OAAAL,EAAAK,KAAAoC,IAKAzC,EAAAgZ,OAAA,SAAAjoB,GAGA,IAFA,IAAAgX,EAAA/H,EAAA+H,OAAAhX,GACA0R,EAAA,GACArW,EAAA2E,EAAA7B,OAAA,EAA8B9C,GAAA,EAAQA,IACtCqW,EAAA9S,KAAAO,EAAAkD,IAAArC,EAAA3E,GAAA2b,IAEA,OAAA/H,EAAA+H,OAAAtF,IAKAzC,EAAAiZ,SAAA,SAAAloB,GACA,OAAAiP,EAAAwH,MAAAzW,GAAAiP,EAAAK,KAAAtP,IAKAiP,EAAAkZ,UAAA,SAAAnoB,GACA,IAAAymB,EAAAzmB,EAAA7B,OACAooB,EAAAvmB,EAAAiB,QAAAyV,KAAAkP,GACA,OACAW,EAAApnB,EAAAC,MAAA,QACAmnB,EAAApnB,EAAAC,MAAA,QACAmnB,EAAApnB,EAAAC,MAAA,YAOA6P,EAAAmZ,UAAA,SAAApoB,EAAAqoB,EAAAC,EAAAC,GACA,IAGAprB,EAAAqrB,EAAAta,EAAA+G,EAHAwT,EAAAzoB,EAAAiB,QAAAyV,KAAAkP,GACA8C,EAAA,CAAAL,EAAAlqB,QACArB,EAAAkD,EAAA7B,YAGA,IAAAmqB,IACAA,EAAA,UACA,IAAAC,IACAA,EAAA,KAEA,QAAAltB,EAAA,EAAiBA,EAAAgtB,EAAAlqB,OAA2B9C,IAG5CmtB,EAAA1rB,GAFAK,EAAAkrB,EAAAhtB,KACAitB,EAAAnrB,GAAA,EAAAmrB,EAAAC,IAEAra,EAAA/O,EAAAsH,MAAAof,EAAA2C,EAAA,EAAA1rB,EAAA,IACAmY,EAAA4Q,EAAA2C,EAAAta,EAAA,KACAwa,EAAArtB,IAAA,EAAA4Z,GAAAwT,EAAAva,EAAA,GAAA+G,EAAAwT,EAAAva,GAGA,OAAAwa,GAKAzZ,EAAA0Z,WAAA,SAAA3oB,EAAAkO,GACA,IAAAqY,EAAAvmB,EAAAiB,QAAAyV,KAAAkP,GACAgD,EAAA1a,GAAAqY,EAAApoB,OAAA,GACAiD,EAAAV,SAAAkoB,GACAC,EAAAD,EAAAxnB,EAEA,OAAAA,EAAA,EAAAmlB,EAAApoB,OACAooB,EAAAnlB,IAAA,EAAAynB,GAAAtC,EAAAnlB,EAAA,GAAAynB,EAEAtC,EAAAnlB,IAQA6N,EAAA6Z,kBAAA,SAAA9oB,EAAA+oB,EAAAC,GACA,IAGA1sB,EAHA2sB,EAAA,EACAhpB,EAAAD,EAAA7B,OACA+qB,GAAA,EAGA,WAAAF,IACAE,GAAA,GAEA,QAAA7tB,EAAA,EAAiBA,EAAA4E,EAAS5E,IAC1BiB,EAAA0D,EAAA3E,IACA6tB,GAAA5sB,EAAAysB,IACAG,GAAA5sB,GAAAysB,IACAE,IAIA,OAAAA,EAAAhpB,GAKAgP,EAAAka,UAAA,SAAAnpB,EAAA8U,GAQA,IAPA,IAAAoS,EAAAjY,EAAAgI,IAAAjX,GACAopB,EAAAtU,GAAA,EACAuU,GAAApa,EAAA7I,IAAApG,GAAAknB,GAAAkC,EACAnpB,EAAAD,EAAA7B,OAIA9C,GAHAyZ,EAAA,GAGA,GAAiBzZ,EAAA+tB,EAAY/tB,IAC7ByZ,EAAAzZ,GAAA,EACA,IAAAA,EAAA,EAAiBA,EAAA4E,EAAS5E,IAC1ByZ,EAAA3V,EAAA8X,IAAA9X,EAAAsH,OAAAzG,EAAA3E,GAAA6rB,GAAAmC,GAAAD,EAAA,OAEA,OAAAtU,GAKA7F,EAAAqE,WAAA,SAAAgW,EAAAC,GAOA,IANA,IAAAC,EAAAva,EAAAK,KAAAga,GACAjQ,EAAApK,EAAAK,KAAAia,GACAE,EAAAH,EAAAnrB,OACAurB,EAAA,IAAAtrB,MAAAqrB,GAGApuB,EAAA,EAAiBA,EAAAouB,EAAapuB,IAC9BquB,EAAAruB,IAAAiuB,EAAAjuB,GAAAmuB,IAAAD,EAAAluB,GAAAge,GAEA,OAAApK,EAAAjF,IAAA0f,IAAAD,EAAA,IAKAxa,EAAAuD,UAAA,SAAA8W,EAAAC,GACA,OAAAta,EAAAqE,WAAAgW,EAAAC,GACAta,EAAAwH,MAAA6S,EAAA,GACAra,EAAAwH,MAAA8S,EAAA,IAIAta,EAAA0a,cAAA,SAAAL,EAAAC,GAIA,OAHAD,EAAAra,EAAA+X,KAAAsC,GACAC,EAAAta,EAAA+X,KAAAuC,GAEAta,EAAAuD,UAAA8W,EAAAC,IAKAta,EAAA2a,WAAA,SAAA5pB,EAAAlD,GAMA,IALA,IAAA+sB,EAAA5a,EAAAK,KAAAtP,GACAwW,EAAAvH,EAAAwH,MAAAzW,GACAC,EAAAD,EAAA7B,OACA2rB,EAAA,EAEAzuB,EAAA,EAAiBA,EAAA4E,EAAS5E,IAC1ByuB,GAAA3qB,EAAAmL,KAAAtK,EAAA3E,GAAAwuB,GAAArT,EAAA1Z,GAEA,OAAAgtB,EAAA9pB,EAAA7B,QAIA8Q,EAAA8a,SAAA,SAAA/pB,GACA,OAAAiP,EAAA2a,WAAA5pB,EAAA,IAIAiP,EAAA+a,SAAA,SAAAhqB,GACA,OAAAiP,EAAA2a,WAAA5pB,EAAA,MAIA,IAAAiqB,EAAAhb,EAAAhS,WAQA,SAAAitB,GACA,QAAA7uB,EAAA,EAAiBA,EAAA6uB,EAAA/rB,OAAkB9C,KAAA,SAAA8uB,GAGnCF,EAAAE,GAAA,SAAAC,EAAAC,GACA,IAAArqB,EAAA,GACA3E,EAAA,EACAivB,EAAAxrB,KAOA,GALA6mB,EAAAyE,KACAC,EAAAD,EACAA,GAAA,GAGAC,EAIA,OAHAE,WAAA,WACAF,EAAA7uB,KAAA8uB,EAAAL,EAAAE,GAAA3uB,KAAA8uB,EAAAF,MAEAtrB,KAGA,GAAAA,KAAAX,OAAA,GAEA,IADAmsB,GAAA,IAAAF,EAAAtrB,UAAAuC,YACchG,EAAAivB,EAAAnsB,OAAoB9C,IAClC2E,EAAA3E,GAAA4T,EAAAkb,GAAAG,EAAAjvB,IACA,OAAA2E,EAGA,OAAAiP,EAAAkb,GAAArrB,KAAA,GAAAsrB,IA3BmC,CA6BhCF,EAAA7uB,IA9BH,CA+BC,iBAAA8P,MAAA,MAID,SAAA+e,GACA,QAAA7uB,EAAA,EAAiBA,EAAA6uB,EAAA/rB,OAAkB9C,KAAA,SAAA8uB,GAGnCF,EAAAE,GAAA,SAAAC,EAAAC,GACA,IAAArqB,EAAA,GACA3E,EAAA,EACAivB,EAAAxrB,KAOA,GALA6mB,EAAAyE,KACAC,EAAAD,EACAA,GAAA,GAGAC,EAIA,OAHAE,WAAA,WACAF,EAAA7uB,KAAA8uB,EAAAL,EAAAE,GAAA3uB,KAAA8uB,EAAAF,MAEAtrB,KAGA,GAAAA,KAAAX,OAAA,GAGA,IAFA,WAAAgsB,IACAG,GAAA,IAAAF,EAAAtrB,UAAAuC,aACchG,EAAAivB,EAAAnsB,OAAoB9C,IAClC2E,EAAA3E,GAAA4T,EAAAkb,GAAAG,EAAAjvB,IACA,WAAA+uB,EACAnb,EAAAkb,GAAAlb,EAAAhN,MAAAuoB,SAAAxqB,IACAA,EAGA,OAAAiP,EAAAkb,GAAArrB,KAAA,GAAAsrB,IA9BmC,CAgChCF,EAAA7uB,IAjCH,CAkCC,+LAED8P,MAAA,MAKA,SAAA+e,GACA,QAAA7uB,EAAA,EAAiBA,EAAA6uB,EAAA/rB,OAAkB9C,KAAA,SAAA8uB,GACnCF,EAAAE,GAAA,WACA,IAAAnqB,EAAA,GACA3E,EAAA,EACAivB,EAAAxrB,KACAJ,EAAAN,MAAAnB,UAAAgE,MAAAzF,KAAAiD,WAIA,GAAAknB,EAAAjnB,IAAAP,OAAA,KACA,IAAAssB,EAAA/rB,IAAAP,OAAA,GACAusB,EAAAhsB,EAAAuC,MAAA,EAAAvC,EAAAP,OAAA,GAMA,OAJAosB,WAAA,WACAE,EAAAjvB,KAAA8uB,EACAL,EAAAE,GAAAlsB,MAAAqsB,EAAAI,MAEA5rB,KAIA2rB,OAAA5qB,EAAA,IACA8qB,EAAA,SAAAC,GACA,OAAA3b,EAAAkb,GAAAlsB,MAAAqsB,EAAA,CAAAM,GAAA5sB,OAAAU,KAKA,GAAAI,KAAAX,OAAA,GAEA,IADAmsB,IAAAjpB,YACchG,EAAAivB,EAAAnsB,OAAoB9C,IAClC2E,EAAA3E,GAAAsvB,EAAAL,EAAAjvB,IACA,OAAA2E,EAIA,OAAA2qB,EAAA7rB,KAAA,KApCmC,CAsChCorB,EAAA7uB,IAvCH,CAwCC,8BAAA8P,MAAA,MAniBD,CApqBA8D,EAAA,SAAA9P,EAAAU,GAGA,IAAA7B,EAAAI,MAAAnB,UAAAe,OACAiD,EAAA7C,MAAAnB,UAAAgE,MACAkF,EAAApK,OAAAkB,UAAAkJ,SAIA,SAAA0kB,EAAA/tB,EAAArB,GACA,IAAA4rB,EAAAvqB,EAAArB,EAAAqB,EAAArB,EACA,OAAA0D,EAAAmL,IAAA,GACA,MAAAnL,EAAAsD,IAAA4kB,EAAA,EAAAA,MAAAloB,EAAAiK,SAIA,IAAA/K,EAAAD,MAAAC,SAAA,SAAAynB,GACA,yBAAA3f,EAAA3K,KAAAsqB,IAIA,SAAAH,EAAAG,GACA,4BAAA3f,EAAA3K,KAAAsqB,GAIA,SAAAgF,EAAAhF,GACA,uBAAAA,QAWA,SAAA7W,IACA,WAAAA,EAAA8b,MAAAtsB,WA8QA,SAAAusB,IAAoB,SAWpB,SAAAC,IAAmB,SAmBnB,SAAAC,EAAA7vB,EAAAyN,GAAyB,OAAAzN,IAAAyN,EAAA,IAvSzBmG,EAAAkc,GAAAlc,EAAAhS,UAKAgS,EAAA8b,MAAA,SAAArsB,GAIA,GAAAL,EAAAK,EAAA,IAEA,GAAAL,EAAAK,EAAA,QAEAinB,EAAAjnB,EAAA,MACAA,EAAA,GAAAuQ,EAAA3N,IAAA5C,EAAA,GAAAA,EAAA,KAEA,QAAArD,EAAA,EAAqBA,EAAAqD,EAAA,GAAAP,OAAoB9C,IACzCyD,KAAAzD,GAAAqD,EAAA,GAAArD,GACAyD,KAAAX,OAAAO,EAAA,GAAAP,YAIAW,KAAA,GAAA6mB,EAAAjnB,EAAA,IAAAuQ,EAAA3N,IAAA5C,EAAA,GAAAA,EAAA,IAAAA,EAAA,GACAI,KAAAX,OAAA,OAIG,GAAA2sB,EAAApsB,EAAA,IACHI,KAAA,GAAAmQ,EAAAmc,IAAAntB,MAAA,KAAAS,GACAI,KAAAX,OAAA,MAGG,IAAAO,EAAA,aAAAuQ,EAEH,OAAAA,EAAAvQ,EAAA,GAAA2sB,WAMAvsB,KAAA,MACAA,KAAAX,OAAA,EAGA,OAAAW,MAEAmQ,EAAA8b,MAAA9tB,UAAAgS,EAAAhS,UACAgS,EAAA8b,MAAAO,YAAArc,EAKAA,EAAAhN,MAAA,CACA4oB,UACAxsB,UACAsnB,aACAmF,WACAN,SArEA,SAAAxqB,GACA,OAAAhC,EAAAC,MAAA,GAAA+B,KA0EAiP,EAAAsc,OAAA,SAAAC,GACA,IAAA1iB,EAEA,OAAArK,UAAAN,OAAA,CACA,IAAA2K,KAAA0iB,EACAvc,EAAAnG,GAAA0iB,EAAA1iB,GACA,OAAAhK,KAGA,QAAAzD,EAAA,EAAiBA,EAAAoD,UAAAN,OAAsB9C,IACvC,IAAAyN,KAAArK,UAAApD,GACAmwB,EAAA1iB,GAAArK,UAAApD,GAAAyN,GAGA,OAAA0iB,GAKAvc,EAAA6J,KAAA,SAAA9Y,GACA,OAAAA,EAAA7B,QAAA,GAKA8Q,EAAA6C,KAAA,SAAA9R,GACA,OAAAA,EAAA,GAAA7B,QAAA,GAKA8Q,EAAAwc,WAAA,SAAAzrB,GACA,OACA8Y,KAAA7J,EAAA6J,KAAA9Y,GACA8R,KAAA7C,EAAA6C,KAAA9R,KAMAiP,EAAAzN,IAAA,SAAAxB,EAAAoB,GACA,OAAA/C,EAAA+C,GACAA,EAAAE,IAAA,SAAAjG,GACA,OAAA4T,EAAAzN,IAAAxB,EAAA3E,KAGA2E,EAAAoB,IAMA6N,EAAAyc,KAAA,SAAA1rB,EAAA3E,GACA,OAAA4T,EAAAzN,IAAAxB,EAAA3E,IAMA4T,EAAA1N,IAAA,SAAAvB,EAAAoB,GACA,GAAA/C,EAAA+C,GAAA,CACA,IAAAuqB,EAAA1c,EAAA2c,OAAA5rB,EAAA7B,QAAAmD,IAAA,SAAAjG,GACA,WAAA+C,MAAAgD,EAAAjD,UAOA,OALAiD,EAAAkZ,QAAA,SAAAuR,EAAAxwB,GACA4T,EAAA2c,OAAA5rB,EAAA7B,QAAAmc,QAAA,SAAAxR,GACA6iB,EAAA7iB,GAAAzN,GAAA2E,EAAA8I,GAAA+iB,OAGAF,EAGA,IADA,IAAAG,EAAA,IAAA1tB,MAAA4B,EAAA7B,QACA9C,EAAA,EAAiBA,EAAA2E,EAAA7B,OAAgB9C,IACjCywB,EAAAzwB,GAAA,CAAA2E,EAAA3E,GAAA+F,IACA,OAAA0qB,GAMA7c,EAAA8c,KAAA,SAAA/rB,EAAA3E,GACA,OAAA4T,EAAA1N,IAAAvB,EAAA3E,GAAAiG,IAAA,SAAAoQ,GAA2C,OAAAA,EAAA,MAK3CzC,EAAA+c,KAAA,SAAAhsB,GAGA,IAFA,IAAAisB,EAAAhd,EAAA6J,KAAA9Y,GACAksB,EAAA,IAAA9tB,MAAA6tB,GACAzqB,EAAA,EAAmBA,EAAAyqB,EAAYzqB,IAC/B0qB,EAAA1qB,GAAA,CAAAxB,EAAAwB,OACA,OAAA0qB,GAKAjd,EAAAkd,SAAA,SAAAnsB,GAGA,IAFA,IAAAisB,EAAAhd,EAAA6J,KAAA9Y,GAAA,EACAksB,EAAA,IAAA9tB,MAAA6tB,GACA5wB,EAAA,EAAiB4wB,GAAA,EAAWA,IAAA5wB,IAC5B6wB,EAAA7wB,GAAA,CAAA2E,EAAA3E,GAAA4wB,IACA,OAAAC,GAIAjd,EAAA5N,UAAA,SAAArB,GACA,IACAosB,EAAAtT,EAAAhH,EAAAhJ,EADA0iB,EAAA,GAIAntB,EAAA2B,EAAA,MACAA,EAAA,CAAAA,IAEA8Y,EAAA9Y,EAAA7B,OACA2T,EAAA9R,EAAA,GAAA7B,OAEA,QAAA9C,EAAA,EAAiBA,EAAAyW,EAAUzW,IAAA,CAE3B,IADA+wB,EAAA,IAAAhuB,MAAA0a,GACAhQ,EAAA,EAAeA,EAAAgQ,EAAUhQ,IACzBsjB,EAAAtjB,GAAA9I,EAAA8I,GAAAzN,GACAmwB,EAAA5sB,KAAAwtB,GAIA,WAAAZ,EAAArtB,OAAAqtB,EAAA,GAAAA,GAMAvc,EAAA3N,IAAA,SAAAtB,EAAAqqB,EAAAgC,GACA,IAAA7qB,EAAAyqB,EAAAK,EAAAJ,EAAA3qB,EASA,IAPAlD,EAAA2B,EAAA,MACAA,EAAA,CAAAA,IAEAisB,EAAAjsB,EAAA7B,OACAmuB,EAAAtsB,EAAA,GAAA7B,OACA+tB,EAAAG,EAAArsB,EAAA,IAAA5B,MAAA6tB,GAEAzqB,EAAA,EAAeA,EAAAyqB,EAAYzqB,IAI3B,IAFA0qB,EAAA1qB,KACA0qB,EAAA1qB,GAAA,IAAApD,MAAAkuB,IACA/qB,EAAA,EAAiBA,EAAA+qB,EAAY/qB,IAC7B2qB,EAAA1qB,GAAAD,GAAA8oB,EAAArqB,EAAAwB,GAAAD,GAAAC,EAAAD,GAGA,WAAA2qB,EAAA/tB,OAAA+tB,EAAA,GAAAA,GAKAjd,EAAA0X,UAAA,SAAA3mB,EAAAqqB,EAAAgC,GACA,IAAA7qB,EAAAyqB,EAAAK,EAAAJ,EAAA3qB,EASA,IAPAlD,EAAA2B,EAAA,MACAA,EAAA,CAAAA,IAEAisB,EAAAjsB,EAAA7B,OACAmuB,EAAAtsB,EAAA,GAAA7B,OACA+tB,EAAAG,EAAArsB,EAAA,IAAA5B,MAAA6tB,GAEAzqB,EAAA,EAAeA,EAAAyqB,EAAYzqB,IAM3B,IAJA0qB,EAAA1qB,KACA0qB,EAAA1qB,GAAA,IAAApD,MAAAkuB,IACAA,EAAA,IACAJ,EAAA1qB,GAAA,GAAAxB,EAAAwB,GAAA,IACAD,EAAA,EAAiBA,EAAA+qB,EAAY/qB,IAC7B2qB,EAAA1qB,GAAAD,GAAA8oB,EAAA6B,EAAA1qB,GAAAD,EAAA,GAAAvB,EAAAwB,GAAAD,IAEA,WAAA2qB,EAAA/tB,OAAA+tB,EAAA,GAAAA,GAKAjd,EAAAsd,MAAA,SAAAvsB,EAAAqqB,GACA,OAAApb,EAAA3N,IAAAtB,EAAAqqB,GAAA,IAKApb,EAAAtS,OAAA,SAAAmc,EAAAhH,EAAAuY,GACA,IACAvhB,EADAojB,EAAA,IAAA9tB,MAAA0a,GAGA6M,EAAA7T,KACAuY,EAAAvY,EACAA,EAAAgH,GAGA,QAAAzd,EAAA,EAAiBA,EAAAyd,EAAUzd,IAE3B,IADA6wB,EAAA7wB,GAAA,IAAA+C,MAAA0T,GACAhJ,EAAA,EAAeA,EAAAgJ,EAAUhJ,IACzBojB,EAAA7wB,GAAAyN,GAAAuhB,EAAAhvB,EAAAyN,GAGA,OAAAojB,GAQAjd,EAAAud,MAAA,SAAA1T,EAAAhH,GAGA,OAFAgZ,EAAAhZ,KACAA,EAAAgH,GACA7J,EAAAtS,OAAAmc,EAAAhH,EAAAkZ,IAQA/b,EAAAwd,KAAA,SAAA3T,EAAAhH,GAGA,OAFAgZ,EAAAhZ,KACAA,EAAAgH,GACA7J,EAAAtS,OAAAmc,EAAAhH,EAAAmZ,IAKAhc,EAAAyd,KAAA,SAAA5T,EAAAhH,GAGA,OAFAgZ,EAAAhZ,KACAA,EAAAgH,GACA7J,EAAAtS,OAAAmc,EAAAhH,EAAA3S,EAAAyL,SAQAqE,EAAA0d,SAAA,SAAA7T,EAAAhH,GAGA,OAFAgZ,EAAAhZ,KACAA,EAAAgH,GACA7J,EAAAtS,OAAAmc,EAAAhH,EAAAoZ,IAKAjc,EAAA2d,UAAA,SAAA5sB,GACA,IAEAwB,EAAAD,EADAsrB,EAAA7sB,EAAA7B,OAGA,GAAA6B,EAAA7B,SAAA6B,EAAA,GAAA7B,OACA,SAEA,IAAAqD,EAAA,EAAeA,EAAAqrB,EAAYrrB,IAC3B,IAAAD,EAAA,EAAiBA,EAAAsrB,EAAYtrB,IAC7B,GAAAvB,EAAAuB,GAAAC,KAAAxB,EAAAwB,GAAAD,GACA,SAGA,UAKA0N,EAAA6d,MAAA,SAAA9sB,GACA,OAAAiP,EAAAsd,MAAAvsB,EAAAgrB,IAKA/b,EAAAmc,IAAA,SAAAnU,EAAA7Q,EAAAjI,EAAAksB,GACA1E,EAAA0E,KACAA,GAAA,GAEA,IAIA0C,EAJA/sB,EAAA,GACAgtB,EAAAnC,EAAA5T,EAAA7Q,GACA6mB,GAAA7mB,EAAA4mB,EAAA/V,EAAA+V,KAAA7uB,EAAA,GAAA6uB,GACAE,EAAAjW,EAKA,IAAA8V,EAAA,EACAG,GAAA9mB,GAAA2mB,EAAA5uB,EACA+uB,GAAAjW,EAAA+V,EAAAC,EAAAD,IAAAD,GAAAC,EACAhtB,EAAApB,KAAAyrB,IAAA6C,EAAAH,GAAAG,GAGA,OAAAltB,GAOAiP,EAAA2c,OAAA,SAAArP,EAAAE,EAAAwQ,GACA,IAAAE,EAAA,GAMA,GALAF,KAAA,EACAxQ,IAAA5c,IACA4c,EAAAF,EACAA,EAAA,GAEAA,IAAAE,GAAA,IAAAwQ,EACA,SAEA,GAAA1Q,EAAAE,GAAAwQ,EAAA,EACA,SAEA,GAAA1Q,EAAAE,GAAAwQ,EAAA,EACA,SAEA,GAAAA,EAAA,EACA,IAAA5xB,EAAAkhB,EAAmBlhB,EAAAohB,EAASphB,GAAA4xB,EAC5BE,EAAAvuB,KAAAvD,QAGA,IAAAA,EAAAkhB,EAAmBlhB,EAAAohB,EAASphB,GAAA4xB,EAC5BE,EAAAvuB,KAAAvD,GAGA,OAAA8xB,GAQAle,EAAAhO,MAAA,WACA,SAAAmsB,EAAAC,EAAA9Q,EAAAE,EAAAwQ,GAEA,IAAA5xB,EACA8xB,EAAA,GACAhvB,EAAAkvB,EAAAlvB,OACA,GAAAoe,IAAA1c,GAAA4c,IAAA5c,GAAAotB,IAAAptB,EACA,OAAAoP,EAAAqe,KAAAD,GAQA,GALA9Q,KAAA,EACAE,KAAA4Q,EAAAlvB,OAGA8uB,KAAA,GAFA1Q,KAAA,EAAAA,EAAApe,EAAAoe,MACAE,KAAA,EAAAA,EAAAte,EAAAse,IAEA,IAAAwQ,EACA,SAEA,GAAA1Q,EAAAE,GAAAwQ,EAAA,EACA,SAEA,GAAA1Q,EAAAE,GAAAwQ,EAAA,EACA,SAEA,GAAAA,EAAA,EACA,IAAA5xB,EAAAkhB,EAAqBlhB,EAAAohB,EAASphB,GAAA4xB,EAC9BE,EAAAvuB,KAAAyuB,EAAAhyB,SAGA,IAAAA,EAAAkhB,EAAqBlhB,EAAAohB,EAASphB,GAAA4xB,EAC9BE,EAAAvuB,KAAAyuB,EAAAhyB,IAGA,OAAA8xB,EA2BA,OAxBA,SAAAE,EAAAE,GAEA,GAAAzC,GADAyC,KAAA,IACA/rB,KAAA,CACA,GAAAspB,EAAAyC,EAAAhsB,KACA,OAAA8rB,EAAAE,EAAA/rB,KAAA+rB,EAAAhsB,KACA,IAAAC,EAAAyN,EAAAyc,KAAA2B,EAAAE,EAAA/rB,KACAgsB,EAAAD,EAAAhsB,KAAA,GACA,OAAA6rB,EAAA5rB,EAAAgsB,EAAAjR,MAAAiR,EAAA/Q,IAAA+Q,EAAAP,MAGA,GAAAnC,EAAAyC,EAAAhsB,KAAA,CACA,IAAAA,EAAA0N,EAAA8c,KAAAsB,EAAAE,EAAAhsB,KACAksB,EAAAF,EAAA/rB,KAAA,GACA,OAAA4rB,EAAA7rB,EAAAksB,EAAAlR,MAAAkR,EAAAhR,IAAAgR,EAAAR,MAGA,IAAAQ,EAAAF,EAAA/rB,KAAA,GACAgsB,EAAAD,EAAAhsB,KAAA,GAEA,OADA6rB,EAAAC,EAAAI,EAAAlR,MAAAkR,EAAAhR,IAAAgR,EAAAR,MACA3rB,IAAA,SAAAE,GACA,OAAA4rB,EAAA5rB,EAAAgsB,EAAAjR,MAAAiR,EAAA/Q,IAAA+Q,EAAAP,SAxDA,GAmEAhe,EAAAye,YAAA,SAAAvd,EAAAod,EAAAnd,GACA,GAAA0a,EAAAyC,EAAA/rB,KAAA,CACA,GAAAspB,EAAAyC,EAAAhsB,KACA,OAAA4O,EAAAod,EAAA/rB,KAAA+rB,EAAAhsB,KAAA6O,EACAmd,EAAAhsB,IAAAgsB,EAAAhsB,KAAA,GACAgsB,EAAAhsB,IAAAgb,MAAAgR,EAAAhsB,IAAAgb,OAAA,EACAgR,EAAAhsB,IAAAkb,IAAA8Q,EAAAhsB,IAAAkb,KAAAtM,EAAA,GAAAhS,OACAovB,EAAAhsB,IAAA0rB,KAAAM,EAAAhsB,IAAA0rB,MAAA,EACA,IAAAU,EAAA1e,EAAA2c,OAAA2B,EAAAhsB,IAAAgb,MACApd,EAAA8X,IAAA9G,EAAAhS,OAAAovB,EAAAhsB,IAAAkb,KACA8Q,EAAAhsB,IAAA0rB,MACAxxB,EAAA8xB,EAAA/rB,IAIA,OAHAmsB,EAAArT,QAAA,SAAAxd,EAAAzB,GACA8U,EAAA1U,GAAAqB,GAAAsT,EAAA/U,KAEA8U,EAGA,GAAA2a,EAAAyC,EAAAhsB,KAAA,CACAgsB,EAAA/rB,IAAA+rB,EAAA/rB,KAAA,GACA+rB,EAAA/rB,IAAA+a,MAAAgR,EAAA/rB,IAAA+a,OAAA,EACAgR,EAAA/rB,IAAAib,IAAA8Q,EAAA/rB,IAAAib,KAAAtM,EAAAhS,OACAovB,EAAA/rB,IAAAyrB,KAAAM,EAAA/rB,IAAAyrB,MAAA,EACA,IAAAW,EAAA3e,EAAA2c,OAAA2B,EAAA/rB,IAAA+a,MACApd,EAAA8X,IAAA9G,EAAA,GAAAhS,OAAAovB,EAAA/rB,IAAAib,KACA8Q,EAAA/rB,IAAAyrB,MACAnwB,EAAAywB,EAAAhsB,IAIA,OAHAqsB,EAAAtT,QAAA,SAAA7e,EAAAqN,GACAqH,EAAA1U,GAAAqB,GAAAsT,EAAAtH,KAEAqH,EAGAC,EAAA,GAAAjS,SAAA0B,IACAuQ,EAAA,CAAAA,IAEAmd,EAAA/rB,IAAA+a,MAAAgR,EAAA/rB,IAAA+a,OAAA,EACAgR,EAAA/rB,IAAAib,IAAA8Q,EAAA/rB,IAAAib,KAAAtM,EAAAhS,OACAovB,EAAA/rB,IAAAyrB,KAAAM,EAAA/rB,IAAAyrB,MAAA,EACAM,EAAAhsB,IAAAgb,MAAAgR,EAAAhsB,IAAAgb,OAAA,EACAgR,EAAAhsB,IAAAkb,IAAA8Q,EAAAhsB,IAAAkb,KAAAtM,EAAA,GAAAhS,OACAovB,EAAAhsB,IAAA0rB,KAAAM,EAAAhsB,IAAA0rB,MAAA,EACA,IAAAW,EAAA3e,EAAA2c,OAAA2B,EAAA/rB,IAAA+a,MACApd,EAAA8X,IAAA9G,EAAAhS,OAAAovB,EAAA/rB,IAAAib,KACA8Q,EAAA/rB,IAAAyrB,MACAU,EAAA1e,EAAA2c,OAAA2B,EAAAhsB,IAAAgb,MACApd,EAAA8X,IAAA9G,EAAA,GAAAhS,OAAAovB,EAAAhsB,IAAAkb,KACA8Q,EAAAhsB,IAAA0rB,MAMA,OALAW,EAAAtT,QAAA,SAAA7e,EAAAJ,GACAsyB,EAAArT,QAAA,SAAAxd,EAAAgM,GACAqH,EAAA1U,GAAAqB,GAAAsT,EAAA/U,GAAAyN,OAGAqH,GAMAlB,EAAA4e,SAAA,SAAAC,GACA,IAAAC,EAAA9e,EAAAud,MAAAsB,EAAA3vB,OAAA2vB,EAAA3vB,QAIA,OAHA2vB,EAAAxT,QAAA,SAAA/d,EAAAlB,GACA0yB,EAAA1yB,MAAAkB,IAEAwxB,GAKA9e,EAAAqe,KAAA,SAAAnd,GACA,OAAAA,EAAA7O,IAAA,SAAAE,GACA,OAAAspB,EAAAtpB,GACAA,EACAA,EAAAF,IAAA,SAAA/E,GACA,OAAAA,OAWA,IAAA0tB,EAAAhb,EAAAhS,UAuFA,OApFAgtB,EAAA9rB,OAAA,EAKA8rB,EAAArrB,KAAAR,MAAAnB,UAAA2B,KACAqrB,EAAAvT,KAAAtY,MAAAnB,UAAAyZ,KACAuT,EAAAjhB,OAAA5K,MAAAnB,UAAA+L,OACAihB,EAAAhpB,MAAA7C,MAAAnB,UAAAgE,MAIAgpB,EAAAoB,QAAA,WACA,OAAAvsB,KAAAX,OAAA,EAAA8C,EAAAzF,KAAAsD,MAAAmC,EAAAzF,KAAAsD,MAAA,IAKAmrB,EAAA3oB,IAAA,SAAA+oB,EAAAgC,GACA,OAAApd,IAAA3N,IAAAxC,KAAAurB,EAAAgC,KAKApC,EAAAtD,UAAA,SAAA0D,EAAAgC,GACA,OAAApd,IAAA0X,UAAA7nB,KAAAurB,EAAAgC,KAKApC,EAAAsC,MAAA,SAAAlC,GAEA,OADApb,EAAAsd,MAAAztB,KAAAurB,GACAvrB,MAKA,SAAAorB,GACA,QAAA7uB,EAAA,EAAiBA,EAAA6uB,EAAA/rB,OAAkB9C,KAAA,SAAA8uB,GACnCF,EAAAE,GAAA,SAAAE,GACA,IACArX,EADAgb,EAAAlvB,KAGA,OAAAurB,GACAE,WAAA,WACAF,EAAA7uB,KAAAwyB,EAAA/D,EAAAE,GAAA3uB,KAAAwyB,MAEAlvB,OAEAkU,EAAA/D,EAAAkb,GAAArrB,MACAT,EAAA2U,GAAA/D,EAAA+D,OAZmC,CAchCkX,EAAA7uB,IAfH,CAgBC,+DAAA8P,MAAA,MAID,SAAA+e,GACA,QAAA7uB,EAAA,EAAiBA,EAAA6uB,EAAA/rB,OAAkB9C,KAAA,SAAA8uB,GACnCF,EAAAE,GAAA,SAAA/oB,EAAAipB,GACA,IAAA2D,EAAAlvB,KAEA,OAAAurB,GACAE,WAAA,WACAF,EAAA7uB,KAAAwyB,EAAA/D,EAAAE,GAAA3uB,KAAAwyB,EAAA5sB,MAEAtC,MAEAmQ,IAAAkb,GAAArrB,KAAAsC,KAVmC,CAYhC8oB,EAAA7uB,IAbH,CAcC,UAAA8P,MAAA,MAID,SAAA+e,GACA,QAAA7uB,EAAA,EAAiBA,EAAA6uB,EAAA/rB,OAAkB9C,IAAA8uB,EAGhCD,EAAA7uB,GAFH4uB,EAAAE,GAAA,IAAA8D,SACA,sBAAA9D,EAAA,6BAFmC,IAAAA,EADnC,CAKC,kCAAAhf,MAAA,MAID8D,EAjqBA,CAmqBC9P,MAsiBAA,MAED,SAAA8P,EAAA9P,GAGA8P,EAAAkG,QAAA,SAAA3M,GACA,IAMA0lB,EAAAxlB,EAAA4I,EANAxI,EAAA,EACAqlB,EAAA,CACA,wDACA,0DAEAC,EAAA,kBAIA,IAFA9c,GAAA5I,EAAAwlB,EAAA1lB,GAAA,IACA8I,IAAA4c,EAAA,IAAA/uB,EAAAsD,IAAA6O,GACQxI,EAAA,EAAOA,IACfslB,GAAAD,EAAArlB,KAAAJ,EACA,OAAAvJ,EAAAsD,IAAA,mBAAA2rB,EAAAF,GAAA5c,GAKArC,EAAA+F,QAAA,SAAAxM,GACA,IAYA6M,EAAAgZ,EAAAnC,EAZA/uB,EAAA,0DACA,yDACA,sCAEAmxB,EAAA,2DACA,uDACA,sCACAC,GAAA,EACAzxB,EAAA,EACA0xB,EAAA,EACAC,EAAA,EACA/lB,EAAAF,EAEA,GAAAE,GAAA,GAEA,KADAwjB,EAAAxjB,EAAA,WAKA,OAAAgmB,IAHAH,GAAA,EAAA7lB,GAAA,KAAAvJ,EAAA4I,GAAA5I,EAAAwI,IAAAxI,EAAA4I,GAAAmkB,GACAxjB,EAAA,EAAAA,EAKA2lB,EAAA3lB,EAEA2M,EADA3M,EAAA,EACAA,KAEAA,GAAA5L,GAAA,EAAA4L,GAAA,KAEA,QAAArN,EAAA,EAAiBA,EAAA,IAAOA,EACxBozB,KAAAtxB,EAAA9B,IAAAga,EACAmZ,IAAAnZ,EAAAiZ,EAAAjzB,GAGA,GADA6wB,EAAAuC,EAAAD,EAAA,EACAH,EAAA3lB,EACAwjB,GAAAmC,OACG,GAAAA,EAAA3lB,EACH,IAAArN,EAAA,EAAmBA,EAAAyB,IAAOzB,EAC1B6wB,GAAAxjB,EACAA,IAMA,OAHA6lB,IACArC,EAAAqC,EAAArC,GAEAA,GAMAjd,EAAA0f,OAAA,SAAAjd,EAAAlJ,GACA,OAAAyG,EAAA2f,YAAAld,EAAAlJ,GAAAyG,EAAA+F,QAAAtD,IAKAzC,EAAA2f,YAAA,SAAAld,EAAAlJ,GACA,IAWAqmB,EAXAC,EAAA7f,EAAAkG,QAAAzD,GACAqd,EAAArd,EACA1H,EAAA,EAAA0H,EACAsd,EAAAhlB,EACA4K,EAAApM,EAAA,EAAAkJ,EACAhW,EAAA,QACAC,EAAA,EAAAiZ,EACA2O,EAAA5nB,EACAN,EAAA,EAEA4zB,KAAA,IAAA9vB,EAAAsD,IAAAiP,GAAA,EAAAA,EAAA,EAAAA,GAAA,GAAAA,EAAA,IAGA,GAAAlJ,EAAA,GAAAkJ,GAAA,EACA,OAAAwd,IACG,GAAA1mB,EAAAkJ,EAAA,GACH,KAAUrW,GAAA4zB,EAAY5zB,IACtB2O,GAAAglB,GAAAxmB,IAAAumB,EAEA,OAAA/kB,EAAA7K,EAAAkI,KAAAmB,EAAAkJ,EAAAvS,EAAAsD,IAAA+F,GAAA,GAGA,KAAQnN,GAAA4zB,EAAY5zB,IAMpBkoB,IADA5nB,EAAA,GAFAA,GAFAkzB,GAAAxzB,KAAAqW,IAEA/V,GADAiZ,GAAA,MAEAlZ,EAAAkZ,EAAAia,EAAAnzB,GAKA,SAAA6nB,EAAApkB,EAAAkI,KAAAmB,EAAAkJ,EAAAvS,EAAAsD,IAAA+F,GAAA,IAIAyG,EAAAkgB,YAAA,SAAAryB,GACA,OAAAA,EAAA,EAAAoyB,IAAAjgB,EAAAkG,QAAArY,EAAA,IAIAmS,EAAAmgB,UAAA,SAAAtyB,GACA,OAAAA,EAAA,EAAAoyB,IAAAjgB,EAAA+F,QAAAlY,EAAA,IAIAmS,EAAAogB,YAAA,SAAAvyB,EAAArB,GAEA,OAAAqB,EAAA,KAAArB,EAAA,IACA0D,EAAAkI,IAAA4H,EAAAqgB,cAAAxyB,EAAArB,IACAwT,EAAAmgB,UAAAtyB,GAAAmS,EAAAmgB,UAAA3zB,GAAAwT,EAAAmgB,UAAAtyB,EAAArB,IAIAwT,EAAAqgB,cAAA,SAAAxyB,EAAArB,GACA,OAAAwT,EAAAkgB,YAAAryB,GAAAmS,EAAAkgB,YAAA1zB,GAAAwT,EAAAkgB,YAAAryB,EAAArB,IAKAwT,EAAAsgB,YAAA,SAAAzyB,EAAArB,GACA,OAAAwT,EAAAmgB,UAAAtyB,GAAAmS,EAAAmgB,UAAAtyB,EAAArB,IAKAwT,EAAAugB,OAAA,SAAAhnB,EAAAE,GAEA,KAAAF,GAAA,GAAAE,GAAA,GAGA,OAAAF,EAAAE,EAAA,IACAvJ,EAAAkI,IAAA4H,EAAAwgB,OAAAjnB,EAAAE,IACAuG,EAAA+F,QAAAxM,GAAAyG,EAAA+F,QAAAtM,GAAAuG,EAAA+F,QAAAxM,EAAAE,IAKAuG,EAAAwgB,OAAA,SAAAjnB,EAAAE,GACA,OAAAuG,EAAAkG,QAAA3M,GAAAyG,EAAAkG,QAAAzM,GAAAuG,EAAAkG,QAAA3M,EAAAE,IAMAuG,EAAAygB,OAAA,SAAAlnB,EAAAkJ,EAAAkD,GACA,IAOAqE,EAAA0W,EAAAX,EAAAzL,EANA9nB,EAAA,EACAm0B,EAAAle,EAAAkD,EACAib,EAAAne,EAAA,EACAoe,EAAApe,EAAA,EACAhW,EAAA,EACAC,EAAA,EAAAi0B,EAAApnB,EAAAqnB,EASA,IALA1wB,EAAAkD,IAAA1G,GAVA,QAWAA,EAXA,OAaA4nB,EADA5nB,EAAA,EAAAA,EAGQF,GAAA,MAIRE,EAAA,GAFAg0B,EAAAl0B,GAAAmZ,EAAAnZ,GAAA+M,IAAAsnB,GADA7W,EAAA,EAAAxd,KACAiW,EAAAuH,KAEAtd,EACAwD,EAAAkD,IAAA1G,GApBA,QAqBAA,EArBA,OAsBAD,EAAA,EAAAi0B,EAAAj0B,EACAyD,EAAAkD,IAAA3G,GAvBA,QAwBAA,EAxBA,OA0BA6nB,IADA5nB,EAAA,EAAAA,GACAD,EAGAC,EAAA,GAFAg0B,IAAAje,EAAAjW,IAAAm0B,EAAAn0B,GAAA+M,IAAAkJ,EAAAuH,IAAA4W,EAAA5W,KAEAtd,EACAwD,EAAAkD,IAAA1G,GA9BA,QA+BAA,EA/BA,OAgCAD,EAAA,EAAAi0B,EAAAj0B,EACAyD,EAAAkD,IAAA3G,GAjCA,QAkCAA,EAlCA,OAqCA6nB,GADAyL,GADArzB,EAAA,EAAAA,GACAD,IAEAyD,EAAAkD,IAAA2sB,EAAA,UAvBkBvzB,KA2BlB,OAAA8nB,GAKAtU,EAAA8gB,UAAA,SAAA5yB,EAAAuU,GACA,IAIAlJ,EAAAjM,EAAAitB,EAAAwG,EAAAC,EAAAC,EAJApnB,EAAA,EACAqnB,EAAAze,EAAA,EAEA0e,EAAAnhB,EAAAkG,QAAAzD,GAGA,GAAAvU,GAAA,EACA,OAAAgC,EAAAiH,IAAA,IAAAsL,EAAA,IAAAvS,EAAAuD,KAAAgP,IACA,GAAAvU,GAAA,EACA,SAmBA,IAlBAuU,EAAA,GACAue,EAAA9wB,EAAAsD,IAAA0tB,GACAD,EAAA/wB,EAAAkI,IAAA8oB,GAAAF,EAAA,GAAAG,GACAJ,EAAA7yB,EAAA,GAAAA,EAAA,EAAAA,EAEAqL,GAAA,gBADAjM,EAAA4C,EAAAuD,MAAA,EAAAvD,EAAAsD,IAAAutB,OACA,EAAAzzB,GAAA,cAAAA,MACAY,EAAA,KACAqL,MACAA,EAAArJ,EAAAiH,IAAA,KACAsL,EAAAvS,EAAAmL,IAAA,OAAAoH,GAAAlJ,GAAA,EAAArJ,EAAAuD,KAAAgP,IAAA,KAIAlJ,EADArL,GADAZ,EAAA,EAAAmV,GAAA,SAAAA,IAEAvS,EAAAmL,IAAAnN,EAAAZ,EAAA,EAAAmV,GAEA,EAAAvS,EAAAsD,IAAA,GAAAtF,EAAAZ,IAAA,EAAAA,IAGOuM,EAAA,GAAQA,IAAA,CACf,GAAAN,GAAA,EACA,SAUA,IAHAA,GAAAjM,GADAitB,GALAva,EAAA2f,YAAAld,EAAAlJ,GAAArL,IAEAZ,EADAmV,EAAA,EACAwe,EAAA/wB,EAAAkI,MAAAmB,EAAA2nB,MAAAhxB,EAAAsD,IAAA+F,GAAAynB,IAEA9wB,EAAAkI,KAAAmB,EAAA2nB,EAAAhxB,EAAAsD,IAAA+F,GAAA4nB,MAEA,KAAAjxB,EAAA8X,IAAA,EAAAuS,IAAA9X,EAAA,GAAAlJ,EAAA,OACA,IACAA,EAAA,IAAAA,EAAAjM,IACA4C,EAAAkD,IAAA9F,GAtCA,KAsCAiM,EACA,MAGA,OAAAA,GAKAyG,EAAAohB,IAAA,SAAA7nB,GACA,IAcAjM,EAAA+zB,EAAAhf,EAAA4a,EAdAiC,EAAA,4DACA,4DACA,0DACA,kDACA,+CACA,2CACA,sCACA,gCACA,6BACA,SACArlB,EAAAqlB,EAAAhwB,OAAA,EACAoyB,GAAA,EACA50B,EAAA,EACA60B,EAAA,EAWA,IARAhoB,EAAA,IACAA,KACA+nB,GAAA,GAIAD,EAAA,GADA/zB,EAAA,KAAAiM,IACA,EAEOM,EAAA,EAAOA,IACdwI,EAAA3V,EACAA,EAAA20B,EAAA30B,EAAA60B,EAAArC,EAAArlB,GACA0nB,EAAAlf,EAIA,OADA4a,EAAA3vB,EAAA4C,EAAAkI,KAAAmB,IAAA,IAAA2lB,EAAA,GAAAmC,EAAA30B,GAAA60B,GACAD,EAAArE,EAAA,IAAAA,GAKAjd,EAAAwhB,KAAA,SAAAjoB,GACA,SAAAyG,EAAAohB,IAAA7nB,IAKAyG,EAAAyhB,QAAA,SAAAvzB,GACA,IACAqL,EAAAmoB,EAAAp0B,EAAAyzB,EADAlnB,EAAA,EAEA,GAAA3L,GAAA,EACA,WACA,GAAAA,GAAA,EACA,WAKA,IAJA6yB,EAAA7yB,EAAA,EAAAA,EAAA,EAAAA,EAEAqL,GAAA,yBADAjM,EAAA4C,EAAAuD,MAAA,EAAAvD,EAAAsD,IAAAutB,EAAA,OAEA,EAAAzzB,GAAA,cAAAA,OACQuM,EAAA,EAAOA,IAEfN,IADAmoB,EAAA1hB,EAAAwhB,KAAAjoB,GAAAwnB,IACA,mBAAA7wB,EAAAkI,KAAAmB,OAAAmoB,GAEA,OAAAxzB,EAAA,EAAAqL,MAKAyG,EAAA2hB,SAAA,SAAAzzB,EAAAuU,EAAAkD,GACA,IAIAic,EAAAC,EAAAd,EAAAzzB,EAAAitB,EAAAhhB,EAAAuoB,EAAAxN,EAAAyN,EAAAd,EAHAC,EAAAze,EAAA,EACAuf,EAAArc,EAAA,EACA9L,EAAA,EAEA,GAAA3L,GAAA,EACA,SACA,GAAAA,GAAA,EACA,SAwBA,IAvBAuU,GAAA,GAAAkD,GAAA,GACAob,EAAA7yB,EAAA,GAAAA,EAAA,EAAAA,EAEAqL,GAAA,gBADAjM,EAAA4C,EAAAuD,MAAA,EAAAvD,EAAAsD,IAAAutB,OACA,EAAAzzB,GAAA,cAAAA,MACAY,EAAA,KACAqL,MACAuoB,GAAAvoB,IAAA,KACA+a,EAAA,QAAA7R,EAAA,QAAAkD,EAAA,IACAoc,EAAAxoB,EAAArJ,EAAAuD,KAAAquB,EAAAxN,MAAA,KAAA3O,EAAA,QAAAlD,EAAA,KACAqf,EAAA,SAAAxN,IACA/a,EAAAkJ,KAAAkD,EAAAzV,EAAAkI,IAAA,EAAA2pB,MAEAH,EAAA1xB,EAAAsD,IAAAiP,KAAAkD,IACAkc,EAAA3xB,EAAAsD,IAAAmS,GAAAlD,EAAAkD,IAKApM,EADArL,GAHAZ,EAAA4C,EAAAkI,IAAAqK,EAAAmf,GAAAnf,IAEAsf,EAAAz0B,GADAitB,EAAArqB,EAAAkI,IAAAuN,EAAAkc,GAAAlc,IAGAzV,EAAAmL,IAAAoH,EAAAsf,EAAA7zB,EAAA,EAAAuU,GAEA,EAAAvS,EAAAmL,IAAAsK,EAAAoc,GAAA,EAAA7zB,GAAA,EAAAyX,IAEAsb,GAAAjhB,EAAAkG,QAAAzD,GAAAzC,EAAAkG,QAAAP,GAAA3F,EAAAkG,QAAAzD,EAAAkD,GACO9L,EAAA,GAAQA,IAAA,CACf,OAAAN,GAAA,IAAAA,EACA,OAAAA,EASA,IALAA,GAAAjM,GADAitB,GAFAva,EAAAiiB,MAAA1oB,EAAAkJ,EAAAkD,GAAAzX,IACAZ,EAAA4C,EAAAkI,IAAA8oB,EAAAhxB,EAAAsD,IAAA+F,GAAAyoB,EAAA9xB,EAAAsD,IAAA,EAAA+F,GAAA0nB,MAEA,KAAA/wB,EAAA8X,IAAA,EAAAuS,GAAA2G,EAAA3nB,EAAAyoB,GAAA,EAAAzoB,QACA,IACAA,EAAA,IAAAA,EAAAjM,IACAiM,GAAA,IACAA,EAAA,IAAAA,EAAAjM,EAAA,IACA4C,EAAAkD,IAAA9F,GA3CA,KA2CAiM,GAAAM,EAAA,EACA,MAEA,OAAAN,GAKAyG,EAAAiiB,MAAA,SAAA1oB,EAAAkJ,EAAAkD,GAEA,IAAAuc,EAAA,IAAA3oB,GAAA,IAAAA,EAAA,EACArJ,EAAAkI,IAAA4H,EAAAkG,QAAAzD,EAAAkD,GAAA3F,EAAAkG,QAAAzD,GACAzC,EAAAkG,QAAAP,GAAAlD,EAAAvS,EAAAsD,IAAA+F,GAAAoM,EACAzV,EAAAsD,IAAA,EAAA+F,IACA,QAAAA,EAAA,GAAAA,EAAA,KAEAA,GAAAkJ,EAAA,IAAAA,EAAAkD,EAAA,GAEAuc,EAAAliB,EAAAygB,OAAAlnB,EAAAkJ,EAAAkD,GAAAlD,EAEA,EAAAyf,EAAAliB,EAAAygB,OAAA,EAAAlnB,EAAAoM,EAAAlD,GAAAkD,IAMA3F,EAAAmiB,MAAA,SAAAt0B,EAAArB,GACA,IAAA+tB,EAAAnQ,EAAA7Q,EAAAE,EAAA4lB,EAGA,GAFA7yB,IACAA,EAAAqB,GACAA,EACA,OAAAmS,EAAAtS,OAAAG,EAAArB,EAAA,WAA0C,OAAAwT,EAAAmiB,UAC1C,GACA5H,EAAArqB,EAAAyL,SACAyO,EAAA,QAAAla,EAAAyL,SAAA,IAGA0jB,GAFA9lB,EAAAghB,EAAA,SAEAhhB,GADAE,EAAAvJ,EAAAkD,IAAAgX,GAAA,UACA,KAAA3Q,EAAA,OAAAF,SACG8lB,EAAA,SAAAA,EAAA,QAAAjV,KAAA,EAAAla,EAAAsD,IAAA+mB,SACH,OAAAnQ,EAAAmQ,GAKAva,EAAAoiB,MAAA,SAAAC,EAAAx0B,EAAArB,GACA,IACA00B,EAAAoB,EAAA/H,EAAAnQ,EAAA7Q,EAAAulB,EADAyD,EAAAF,EAMA,GAJA71B,IACAA,EAAAqB,GACAw0B,IACAA,EAAA,GACAx0B,EAGA,OAFAixB,EAAA9e,EAAAud,MAAA1vB,EAAArB,IACA8wB,MAAA,WAA0B,OAAAtd,EAAAoiB,MAAAC,KAC1BvD,EAEAuD,EAAA,IACAA,GAAA,GACAnB,EAAAmB,EAAA,IACAC,EAAA,EAAApyB,EAAAuD,KAAA,EAAAytB,GACA,GACA,GAEA9W,EAAA,EAAAkY,GADA/oB,EAAAyG,EAAAmiB,eAEK/X,GAAA,GACLA,OACAmQ,EAAArqB,EAAAyL,eACG4e,EAAA,OAAArqB,EAAAmL,IAAA9B,EAAA,IACHrJ,EAAAsD,IAAA+mB,GAAA,GAAAhhB,IAAA2nB,GAAA,EAAA9W,EAAAla,EAAAsD,IAAA4W,KAEA,GAAAiY,GAAAE,EACA,OAAArB,EAAA9W,EAEA,GACAmQ,EAAArqB,EAAAyL,eACG,IAAA4e,GACH,OAAArqB,EAAAmL,IAAAkf,EAAA,EAAAgI,GAAArB,EAAA9W,GAKA,SAAA6Q,GACA,QAAA7uB,EAAA,EAAiBA,EAAA6uB,EAAA/rB,OAAkB9C,KAAA,SAAA8uB,GACnClb,EAAAkc,GAAAhB,GAAA,WACA,OAAAlb,EACAA,EAAA3N,IAAAxC,KAAA,SAAAxC,GAA2C,OAAA2S,EAAAkb,GAAA7tB,OAHR,CAKhC4tB,EAAA7uB,IANH,CAOC,wCAAA8P,MAAA,MAGD,SAAA+e,GACA,QAAA7uB,EAAA,EAAiBA,EAAA6uB,EAAA/rB,OAAkB9C,KAAA,SAAA8uB,GACnClb,EAAAkc,GAAAhB,GAAA,WACA,OAAAlb,IAAAkb,GAAAlsB,MAAA,KAAAQ,aAFmC,CAIhCyrB,EAAA7uB,IALH,CAMC,QAAA8P,MAAA,MAhdD,CAkdC8D,EAAA9P,MACD,SAAA8P,EAAA9P,GAwoCA,SAAAsyB,EAAAT,EAAAU,EAAAC,GACA,IAUAC,EAAA,CACA,kBACA,kBACA,kBACA,kBACA,kBACA,mBAEAC,EAAA,CACA,mBACA,mBACA,mBACA,mBACA,kBACA,oBAGAC,EAAA,GAAAd,EAKA,GAAAc,GA1BA,EA2BA,SAKA,IAUAC,EAVAC,EAAA,EAAA/iB,EAAAqG,OAAAjF,IAAAyhB,EAAA,WAGAE,EADAA,GAAA7yB,EAAAkI,KApCA,GAoCAsqB,GACAxyB,EAAAmL,IAAA0nB,EAAAL,GAEA,EA2BA,IARA,IAAAM,EAAAH,EACAI,GAzDA,EAyDAJ,IAbAC,EADAf,EA1CA,EACA,EACA,GAuDAmB,EAAAF,EAAAC,EACAE,EAAA,EAIAC,EAAAV,EAAA,EACAW,EAAA,EAAkBA,GAAAP,EAAaO,IAAA,CAQ/B,IAPA,IAAAC,EAAA,EACA7gB,EAAA,IAAAygB,EAAAF,GAIArd,EAAA,IAAAud,EAAAF,GAEAO,EAAA,EAAoBA,GA9EpB,GA8EgCA,IAAA,CAChC,IAAA1pB,EASA2pB,EAAA/gB,EADAkD,GAtFA,EA+EA4d,EAEAZ,GADA9oB,EAjFA,GAiFA0pB,EAAA,GACA,IAGAZ,GADA9oB,EAAA0pB,GACA,IAQAE,EAAAD,IACA,GAAAC,EAzFA,GA0FA,MAEA,IAMAC,EANA,EAAA1jB,EAAAqG,OAAAjF,IAAAoiB,EAAA,SAMA,GALA,EAAAxjB,EAAAqG,OAAAjF,IAAAoiB,EAAAzB,EAAA,OAKA,GACA2B,GAAAxzB,EAAAkI,KArGA,GAqGAgrB,KAEAE,GADAI,EAAAd,EAAA/oB,EAAA,GAAA3J,EAAAkI,KAAA,GAAAqrB,GAAAvzB,EAAAmL,IAAAqoB,EAAAN,IAKAD,GADAG,GAAA,EAAA3d,EAAA+c,EAAAxyB,EAAAuD,KAAA,EAAAvD,EAAA4I,IAEAkqB,EAAAE,EACAA,GAAAD,EAKA,OADAF,GAAAI,IACAjzB,EAAAkI,KAlHA,GAkHAqqB,GACA,GAEAM,EAAA7yB,EAAAmL,IAAA0nB,EAAAN,KACA,EACA,EACAM,GAjwCA,SAAA3E,GACA,QAAAhyB,EAAA,EAAiBA,EAAAgyB,EAAAlvB,OAAiB9C,KAAA,SAAAgvB,GAElCpb,EAAAob,GAAA,SAAA3Y,EAAAkD,EAAAlZ,GACA,OAAAoD,gBAAAL,UAAAm0B,QAEA9zB,KAAA+zB,GAAAnhB,EACA5S,KAAAg0B,GAAAle,EACA9V,KAAAi0B,GAAAr3B,EACAoD,MAJA,IAAAL,UAAAm0B,OAAAlhB,EAAAkD,EAAAlZ,IAOAuT,EAAAkc,GAAAd,GAAA,SAAA3Y,EAAAkD,EAAAlZ,GACA,IAAAs3B,EAAA/jB,EAAAob,GAAA3Y,EAAAkD,EAAAlZ,GAEA,OADAs3B,EAAAp1B,KAAAkB,KACAk0B,GAGA/jB,EAAAob,GAAAptB,UAAAg2B,OAAA,SAAAjzB,GACA,IAAA0R,EAAA5S,KAAA+zB,GACAje,EAAA9V,KAAAg0B,GACAp3B,EAAAoD,KAAAi0B,GACA,OAAA/yB,EACAiP,EAAAsd,MAAAvsB,EAAA,WACA,OAAAiP,EAAAob,GAAA4I,OAAAvhB,EAAAkD,EAAAlZ,KAGAuT,EAAAob,GAAA4I,OAAAvhB,EAAAkD,EAAAlZ,IAGA,SAAAw3B,GACA,QAAA73B,EAAA,EAAqBA,EAAA63B,EAAA/0B,OAAiB9C,KAAA,SAAA83B,GACtClkB,EAAAob,GAAAptB,UAAAk2B,GAAA,SAAA3qB,GACA,IAAAkJ,EAAA5S,KAAA+zB,GACAje,EAAA9V,KAAAg0B,GACAp3B,EAAAoD,KAAAi0B,GAGA,OAFAvqB,GAAA,IAAAA,IACAA,EAAA1J,KAAAlB,MACA,iBAAA4K,EACAyG,EAAAkc,GAAA7pB,IAAA9F,KAAAgN,EAAA,SAAAA,GACA,OAAAyG,EAAAob,GAAA8I,GAAA3qB,EAAAkJ,EAAAkD,EAAAlZ,KAGAuT,EAAAob,GAAA8I,GAAA3qB,EAAAkJ,EAAAkD,EAAAlZ,IAZsC,CAc/Bw3B,EAAA73B,IAfP,CAgBK,cAAA8P,MAAA,MAEL,SAAA+nB,GACA,QAAA73B,EAAA,EAAqBA,EAAA63B,EAAA/0B,OAAiB9C,KAAA,SAAA83B,GACtClkB,EAAAob,GAAAptB,UAAAk2B,GAAA,WACA,OAAAlkB,EAAAob,GAAA8I,GAAAr0B,KAAA+zB,GAAA/zB,KAAAg0B,GAAAh0B,KAAAi0B,KAFsC,CAI/BG,EAAA73B,IALP,CAMK,4BAAA8P,MAAA,MArD6B,CAsD/BkiB,EAAAhyB,IAvDH,CAwDC,sMAID8P,MAAA,MAKA8D,EAAAsc,OAAAtc,EAAAgB,KAAA,CACAK,IAAA,SAAA9H,EAAAwH,EAAAC,GAEA,OAAAzH,EAAA,GAAAA,EAAA,EACA,EAEA,GAAAwH,GAAA,GAAAC,EACA,EAEAD,EAAA,KAAAC,EAAA,IACA9Q,EAAAmL,IAAA9B,EAAAwH,EAAA,GAAA7Q,EAAAmL,IAAA,EAAA9B,EAAAyH,EAAA,GACAhB,EAAAugB,OAAAxf,EAAAC,GAEA9Q,EAAAkI,KAAA2I,EAAA,GAAA7Q,EAAAsD,IAAA+F,IACAyH,EAAA,GAAA9Q,EAAAsD,IAAA,EAAA+F,GACAyG,EAAAwgB,OAAAzf,EAAAC,KAIAI,IAAA,SAAA7H,EAAAwH,EAAAC,GACA,OAAAzH,EAAA,GAAAA,EAAA,KAAAA,EAAA,GAAAyG,EAAAiiB,MAAA1oB,EAAAwH,EAAAC,IAGAQ,IAAA,SAAAjI,EAAAwH,EAAAC,GACA,OAAAhB,EAAA2hB,SAAApoB,EAAAwH,EAAAC,IAGAX,KAAA,SAAAU,EAAAC,GACA,OAAAD,KAAAC,IAGA+G,OAAA,SAAAhH,EAAAC,GACA,OAAAhB,EAAA2hB,SAAA,GAAA5gB,EAAAC,IAGAzT,KAAA,SAAAwT,EAAAC,GACA,OAAAD,EAAA,IAAAA,EAAAC,EAAA,IAIAgjB,OAAA,SAAAjjB,EAAAC,GACA,IAAAuZ,EAAAva,EAAAoiB,MAAArhB,GACA,OAAAwZ,KAAAva,EAAAoiB,MAAAphB,KAGAwX,SAAA,SAAAzX,EAAAC,GACA,OAAAD,EAAAC,GAAA9Q,EAAAmL,IAAA0F,EAAAC,EAAA,IAAAD,EAAAC,EAAA,OAKAhB,EAAAsc,OAAAtc,EAAA6E,SAAA,CAIAxD,IAAA,SAAA9H,EAAA4qB,EAAAC,GACA,IAAAl2B,EAEA,OAAAqL,EAAA,EACA,EAEA4qB,GAAA,EACA,IAAA5qB,GAAA4qB,EAAA,EACA1E,IAEA,IAAAlmB,GAAA,IAAA4qB,EACA,EAEA,EAAAnkB,EAAAugB,OAAA4D,EAAA,EAAAC,EAAA,GACAl0B,EAAAmL,IAAA8oB,EAAAC,EAAAD,EAAA,GACAj0B,EAAAmL,IAAA9B,EAAA4qB,EAAA,KACAj0B,EAAAmL,IAAA,EAAA8oB,EAAAC,EAAA7qB,IAAA4qB,EAAAC,GAAA,IAGAl2B,EAAAi2B,EAAA5qB,GAAA6qB,EAAA7qB,EAAA4qB,GAEAA,GADAC,KAAA7qB,EAAA4qB,IACA,EACAnkB,EAAA4B,SAAAP,KAAA8iB,EAAA,MAAAA,EAAAC,EAAA,KAAAl2B,KAGAkT,IAAA,SAAA7H,EAAA4qB,EAAAC,GACA,OAAA7qB,EAAA,EACA,EACAyG,EAAAiiB,MAAAkC,EAAA5qB,GAAA4qB,EAAA5qB,EAAA6qB,GAAAD,EAAA,EAAAC,EAAA,IAGA5iB,IAAA,SAAAjI,EAAA4qB,EAAAC,GACA,OAAAA,GAAAD,GAAA,EAAAnkB,EAAA2hB,SAAApoB,EAAA4qB,EAAA,EAAAC,EAAA,QAGA/jB,KAAA,SAAA8jB,EAAAC,GACA,OAAAA,EAAA,EAAAA,KAAA,QAAAxzB,GAGArD,KAAA,SAAA42B,EAAAC,GACA,OAAAD,EAAA,EAAAC,GAAAD,EAAA,IAAAA,GAAAC,EAAA,SAAAxzB,GAIAozB,OAAA,SAAAG,EAAAC,GAGA,OAFA,EAAApkB,EAAAoiB,MAAA+B,EAAA,GAEAA,GADA,EAAAnkB,EAAAoiB,MAAAgC,EAAA,GACAA,IAGA5L,SAAA,SAAA2L,EAAAC,GACA,KAAAA,GAAA,GAEA,SAAAA,KAAAD,EAAAC,EAAA,IACAD,GAAAC,EAAA,IAAAA,EAAA,IAAAA,EAAA,OAMApkB,EAAAsc,OAAAtc,EAAAqkB,OAAA,CACAhjB,IAAA,SAAA9H,EAAA+qB,EAAAC,GACA,OAAAA,EAAA,EAAoB,EAEpBA,GAAAr0B,EAAAmL,IAAA9B,EAAA+qB,EAAA,GAAAp0B,EAAAmL,IAAAkpB,EAAA,IAAAr0B,EAAA4I,IAGAsI,IAAA,SAAA7H,EAAA+qB,EAAAC,GACA,OAAAr0B,EAAAyD,MAAA4F,EAAA+qB,GAAAC,GAAAr0B,EAAA4I,GAAA,IAGA0I,IAAA,SAAAtT,EAAAo2B,EAAAC,GACA,OAAAD,EAAAC,EAAAr0B,EAAAoI,IAAApI,EAAA4I,IAAA5K,EAAA,MAGA6Z,OAAA,SAAAuc,EAAAC,GACA,OAAAD,GAGA/2B,KAAA,SAAA+2B,EAAAC,GACA,OAAAD,GAGAN,OAAA,SAAAM,EAAAC,GACA,OAAAvkB,EAAAmiB,QACAjyB,EAAAuD,KAAA,KAAAuM,EAAAoiB,MAAA,MAAAmC,EAAAD,KAOAtkB,EAAAsc,OAAAtc,EAAAgC,UAAA,CACAX,IAAA,SAAA9H,EAAA+I,GACA,OAAA/I,EAAA,EACA,EACA,IAAAA,GAAA,IAAA+I,EAAA,GACApS,EAAAkI,KAAAkK,EAAA,KAAApS,EAAAsD,IAAA+F,KAAA,EAAA+I,EAAA,EACApS,EAAAsD,IAAA,GAAAwM,EAAAkG,QAAA5D,EAAA,KAGAlB,IAAA,SAAA7H,EAAA+I,GACA,OAAA/I,EAAA,EACA,EACAyG,EAAA2f,YAAArd,EAAA,EAAA/I,EAAA,IAGAiI,IAAA,SAAAtT,EAAAoU,GACA,SAAAtC,EAAA8gB,UAAA5yB,EAAA,GAAAoU,IAGAjC,KAAA,SAAAiC,GACA,OAAAA,GAIAyF,OAAA,SAAAzF,GACA,OAAAA,EAAApS,EAAAmL,IAAA,OAAAiH,GAAA,IAGA/U,KAAA,SAAA+U,GACA,OAAAA,EAAA,IAAAA,EAAA,KAGA0hB,OAAA,SAAA1hB,GACA,SAAAtC,EAAAoiB,MAAA9f,EAAA,IAGAkW,SAAA,SAAAlW,GACA,SAAAA,KAOAtC,EAAAsc,OAAAtc,EAAAyE,YAAA,CACApD,IAAA,SAAA9H,EAAAirB,GACA,OAAAjrB,EAAA,IAAAirB,EAAAt0B,EAAAkI,KAAAosB,EAAAjrB,IAGA6H,IAAA,SAAA7H,EAAAirB,GACA,OAAAjrB,EAAA,MAAArJ,EAAAkI,KAAAosB,EAAAjrB,IAGAiI,IAAA,SAAAtT,EAAAs2B,GACA,OAAAt0B,EAAAsD,IAAA,EAAAtF,GAAAs2B,GAGAnkB,KAAA,SAAAmkB,GACA,SAAAA,GAGAzc,OAAA,SAAAyc,GACA,SAAAA,EAAAt0B,EAAAsD,IAAA,IAGAjG,KAAA,SAAAi3B,GACA,UAGAR,OAAA,SAAAQ,GACA,SAAAA,EAAAt0B,EAAAsD,IAAAtD,EAAAyL,WAGA6c,SAAA,SAAAgM,GACA,OAAAt0B,EAAAmL,IAAAmpB,GAAA,MAOAxkB,EAAAsc,OAAAtc,EAAAgG,MAAA,CACA3E,IAAA,SAAA9H,EAAA8oB,EAAAkC,GACA,OAAAhrB,EAAA,EACA,EACA,IAAAA,GAAA,IAAA8oB,EAAA,EAAAkC,EACAr0B,EAAAkI,KAAAiqB,EAAA,GAAAnyB,EAAAsD,IAAA+F,KAAAgrB,EACAvkB,EAAAkG,QAAAmc,KAAAnyB,EAAAsD,IAAA+wB,KAGAnjB,IAAA,SAAA7H,EAAA8oB,EAAAkC,GACA,OAAAhrB,EAAA,EACA,EACAyG,EAAA2f,YAAA0C,EAAA9oB,EAAAgrB,IAGA/iB,IAAA,SAAAtT,EAAAm0B,EAAAkC,GACA,OAAAvkB,EAAA8gB,UAAA5yB,EAAAm0B,GAAAkC,GAGAlkB,KAAA,SAAAgiB,EAAAkC,GACA,OAAAlC,EAAAkC,GAGAh3B,KAAA,SAAA80B,EAAAkC,GACA,GAAAlC,EAAA,SAAAA,EAAA,GAAAkC,GAIAP,OAAA,SAAA3B,EAAAkC,GACA,OAAAvkB,EAAAoiB,MAAAC,GAAAkC,GAGA/L,SAAA,SAAA6J,EAAAkC,GACA,OAAAlC,EAAAkC,OAKAvkB,EAAAsc,OAAAtc,EAAAykB,SAAA,CACApjB,IAAA,SAAA9H,EAAA8oB,EAAAkC,GACA,OAAAhrB,GAAA,EACA,EACArJ,EAAAkI,MAAAiqB,EAAA,GAAAnyB,EAAAsD,IAAA+F,GAAAgrB,EAAAhrB,EACAyG,EAAAkG,QAAAmc,KAAAnyB,EAAAsD,IAAA+wB,KAGAnjB,IAAA,SAAA7H,EAAA8oB,EAAAkC,GACA,OAAAhrB,GAAA,EACA,EACA,EAAAyG,EAAA2f,YAAA0C,EAAAkC,EAAAhrB,IAGAiI,IAAA,SAAAtT,EAAAm0B,EAAAkC,GACA,OAAAA,EAAAvkB,EAAA8gB,UAAA,EAAA5yB,EAAAm0B,IAGAhiB,KAAA,SAAAgiB,EAAAkC,GACA,OAAAlC,EAAA,EAAAkC,GAAAlC,EAAA,QAAAzxB,GAGArD,KAAA,SAAA80B,EAAAkC,GACA,OAAAA,GAAAlC,EAAA,IAGA2B,OAAA,SAAA3B,EAAAkC,GACA,OAAAA,EAAAvkB,EAAAoiB,MAAAC,IAGA7J,SAAA,SAAA6J,EAAAkC,GACA,KAAAlC,GAAA,GAEA,OAAAkC,MAAAlC,EAAA,IAAAA,EAAA,IAAAA,EAAA,OAMAriB,EAAAsc,OAAAtc,EAAA0kB,YAAA,CACArjB,IAAA,SAAA9H,EAAAwH,EAAAC,GACA,WAAAzH,GAAA,IAAAwH,EACAC,EACA,IAAAzH,GAAA,IAAAyH,EACAD,EACA7Q,EAAAkI,IAAAlI,EAAAsD,IAAAuN,GAAA7Q,EAAAsD,IAAAwN,IAAAD,EAAA,GACA7Q,EAAAsD,IAAA+F,IAAAyH,EAAA,GACA9Q,EAAAsD,IAAA,EAAAtD,EAAAmL,IAAA9B,EAAAwH,MAGAK,IAAA,SAAA7H,EAAAwH,EAAAC,GACA,OAAAzH,EAAA,EACA,EACAA,EAAA,EACA,EACA,EAAArJ,EAAAmL,IAAA,EAAAnL,EAAAmL,IAAA9B,EAAAwH,GAAAC,IAGAQ,IAAA,SAAAtT,EAAA6S,EAAAC,GACA,OAAA9Q,EAAAmL,IAAA,EAAAnL,EAAAmL,IAAA,EAAAnN,EAAA,EAAA8S,GAAA,EAAAD,IAGAV,KAAA,SAAAU,EAAAC,GACA,OAAAA,EAAAhB,EAAA+F,QAAA,IAAAhF,GACAf,EAAA+F,QAAA/E,GAAAhB,EAAA+F,QAAA,IAAAhF,EAAAC,IAGA+G,OAAA,SAAAhH,EAAAC,GACA,OAAA9Q,EAAAmL,IAAA,EAAAnL,EAAAmL,IAAA,KAAA2F,GAAA,EAAAD,IAGAxT,KAAA,SAAAwT,EAAAC,GACA,GAAAD,GAAA,GAAAC,GAAA,OAAAD,GAAA,IAAAC,EAEA,OAAA9Q,EAAAmL,KAAA0F,EAAA,IAAAA,EAAAC,EAAA,KAAAD,IAGAyX,SAAA,SAAAzX,EAAAC,GACA,UAAA3S,MAAA,mCAQA2R,EAAAsc,OAAAtc,EAAA6H,UAAA,CACAxG,IAAA,SAAA9H,EAAAqhB,EAAArT,GACA,OAAAhO,GAAA,EACA,EACArJ,EAAAkI,KAAAlI,EAAAsD,IAAA+F,GAAA,GAAArJ,EAAAsD,IAAA,EAAAtD,EAAA4I,IACA5I,EAAAsD,IAAA+T,GAAArX,EAAAmL,IAAAnL,EAAAsD,IAAA+F,GAAAqhB,EAAA,IACA,EAAArT,OAGAnG,IAAA,SAAA7H,EAAAqhB,EAAArT,GACA,OAAAhO,EAAA,EACA,EACA,GACA,GAAAyG,EAAAohB,KAAAlxB,EAAAsD,IAAA+F,GAAAqhB,GAAA1qB,EAAAuD,KAAA,EAAA8T,OAGA/F,IAAA,SAAAtT,EAAA0sB,EAAArT,GACA,OAAArX,EAAAkI,KAAA,mBAAAmP,EAAAvH,EAAAyhB,QAAA,EAAAvzB,GAAA0sB,IAGAva,KAAA,SAAAua,EAAArT,GACA,OAAArX,EAAAkI,IAAAwiB,EAAArT,IAAA,IAGAQ,OAAA,SAAA6S,EAAArT,GACA,OAAArX,EAAAkI,IAAAwiB,IAGArtB,KAAA,SAAAqtB,EAAArT,GACA,OAAArX,EAAAkI,IAAAwiB,EAAArT,MAGAyc,OAAA,SAAApJ,EAAArT,GACA,OAAArX,EAAAkI,IAAA4H,EAAAmiB,QAAA5a,EAAAqT,IAGApC,SAAA,SAAAoC,EAAArT,GACA,OAAArX,EAAAkI,IAAAmP,KAAA,GAAArX,EAAAkI,IAAA,EAAAwiB,EAAArT,QAOAvH,EAAAsc,OAAAtc,EAAA2kB,YAAA,CACAtjB,IAAA,SAAA9H,EAAA+I,EAAAsiB,GAEA,OAAA10B,EAAAkD,IAAAwxB,GADA,MAEA5kB,EAAA6K,SAAAxJ,IAAA9H,EAAA+I,GAEApS,EAAAkD,IAAAmG,GAJA,MAKArJ,EAAAkI,IAAA4H,EAAAkG,SAAA5D,EAAA,MAAAsiB,IAAA,EACA,GAAA10B,EAAAsD,IAAAtD,EAAA4I,GAAAwJ,GAAAtC,EAAAkG,QAAA5D,EAAA,IAIAA,EAAA/I,GACAyG,EAAA2kB,YAAAvjB,IAAA7H,EAAArJ,EAAAuD,KAAA,IAAA6O,KAAA,EAAAsiB,GACA5kB,EAAA2kB,YAAAvjB,IAAA7H,EAAA+I,EAAAsiB,KAGAxjB,IAAA,SAAA7H,EAAA+I,EAAAsiB,GAIA,GAAA10B,EAAAkD,IAAAwxB,GAHA,MAIA,OAAA5kB,EAAA6K,SAAAzJ,IAAA7H,EAAA+I,GAGA,IAAAuiB,GAAA,EACAtrB,EAAA,IACAsrB,GAAA,EACAD,MAYA,IATA,IAAAE,EAAA9kB,EAAAqG,OAAAjF,KAAAwjB,EAAA,KACAv3B,EAdA,MAcA,EAEA03B,EAAA13B,EACAoM,EAAAF,SAAA+I,GACAzI,EAAA,EACA3L,EAAAgC,EAAAkI,KAAAwsB,IAAA,GACAvF,EAAAnvB,EAAAkI,KAAAwsB,IAAA,KAAA10B,EAAAsD,IAAA,GACAwM,EAAAkG,QAAA,MAAA0e,EACA/qB,EArBA,KAqBAkrB,EAtBA,OAsBA13B,EAtBA,OAuBA03B,EAAA13B,EACAwM,EAAA,IACA3L,GAAA02B,KAAA,EAAA/qB,GACAwlB,GAAAuF,KAAA,GAAA/qB,EAAA,MAIAirB,GAAA,IAFAz3B,EAAAa,EAAA8R,EAAAgB,KAAAI,IAAA3H,EAAAI,EAAA,GAAAyI,EAAA,GACA+c,EAAArf,EAAAgB,KAAAI,IAAA3H,EAAAI,EAAA,EAAAyI,EAAA,IAEAzI,IAGA,OAAAgrB,EAAA,EAAAC,OAMA9kB,EAAAsc,OAAAtc,EAAAqG,OAAA,CACAhF,IAAA,SAAA9H,EAAA8G,EAAA2kB,GACA,OAAA90B,EAAAkI,KAAA,GAAAlI,EAAAsD,IAAA,EAAAtD,EAAA4I,IACA5I,EAAAsD,IAAAwxB,GAAA90B,EAAAmL,IAAA9B,EAAA8G,EAAA,MAAA2kB,OAGA5jB,IAAA,SAAA7H,EAAA8G,EAAA2kB,GACA,YAAAhlB,EAAAohB,KAAA7nB,EAAA8G,GAAAnQ,EAAAuD,KAAA,EAAAuxB,QAGAxjB,IAAA,SAAAtT,EAAAmS,EAAA2kB,GACA,0BAAAA,EAAAhlB,EAAAyhB,QAAA,EAAAvzB,GAAAmS,GAGAA,KAAA,SAAAA,EAAA2kB,GACA,OAAA3kB,GAGA0H,OAAA,SAAA1H,EAAA2kB,GACA,OAAA3kB,GAGA9S,KAAA,SAAA8S,EAAA2kB,GACA,OAAA3kB,GAGA2jB,OAAA,SAAA3jB,EAAA2kB,GACA,OAAAhlB,EAAAmiB,QAAA6C,EAAA3kB,GAGAmY,SAAA,SAAAnY,EAAA2kB,GACA,OAAAA,OAOAhlB,EAAAsc,OAAAtc,EAAAilB,OAAA,CACA5jB,IAAA,SAAA9H,EAAAgrB,EAAAlC,GACA,OAAA9oB,EAAAgrB,EACA,EACAlC,EAAAnyB,EAAAmL,IAAAkpB,EAAAlC,GAAAnyB,EAAAmL,IAAA9B,EAAA8oB,EAAA,IAGAjhB,IAAA,SAAA7H,EAAAgrB,EAAAlC,GACA,OAAA9oB,EAAAgrB,EACA,EACA,EAAAr0B,EAAAmL,IAAAkpB,EAAAhrB,EAAA8oB,IAGA7gB,IAAA,SAAAtT,EAAAq2B,EAAAlC,GACA,OAAAkC,EAAAr0B,EAAAmL,IAAA,EAAAnN,EAAA,EAAAm0B,IAGAhiB,KAAA,SAAAkkB,EAAAlC,GACA,KAAAA,GAAA,GAEA,OAAAA,EAAAnyB,EAAAmL,IAAAkpB,EAAAlC,MAAA,IAGAta,OAAA,SAAAwc,EAAAlC,GACA,OAAAkC,GAAAlC,EAAAnyB,EAAA8M,QAGAzP,KAAA,SAAAg3B,EAAAlC,GACA,OAAAkC,GAGA/L,SAAA,SAAA+L,EAAAlC,GACA,KAAAA,GAAA,GAEA,OAAAkC,IAAAlC,GAAAnyB,EAAAmL,IAAAgnB,EAAA,MAAAA,EAAA,OAOAriB,EAAAsc,OAAAtc,EAAA6K,SAAA,CACAxJ,IAAA,SAAA9H,EAAA+I,GAEA,OADAA,IAAA,YAAAA,EACA,GAAApS,EAAAuD,KAAA6O,GAAAtC,EAAAugB,OAAA,GAAAje,EAAA,IACApS,EAAAmL,IAAA,EAAA9B,IAAA+I,MAAA,OAGAlB,IAAA,SAAA7H,EAAA+I,GACA,IAAA4iB,EAAA5iB,EAAA,EACA,OAAAtC,EAAAiiB,OAAA1oB,EAAArJ,EAAAuD,KAAA8F,IAAA+I,KACA,EAAApS,EAAAuD,KAAA8F,IAAA+I,IAAA4iB,MAGA1jB,IAAA,SAAAtT,EAAAoU,GACA,IAAA/I,EAAAyG,EAAA2hB,SAAA,EAAAzxB,EAAA8X,IAAA9Z,EAAA,EAAAA,GAAA,GAAAoU,EAAA,IAEA,OADA/I,EAAArJ,EAAAuD,KAAA6O,GAAA,EAAA/I,MACArL,EAAA,GAAAqL,MAGA8G,KAAA,SAAAiC,GACA,OAAAA,EAAA,SAAA1R,GAGAmX,OAAA,SAAAzF,GACA,UAGA/U,KAAA,SAAA+U,GACA,UAGA0hB,OAAA,SAAA1hB,GACA,OAAAtC,EAAAmiB,QAAAjyB,EAAAuD,KAAA6O,GAAA,EAAAtC,EAAAoiB,MAAA9f,EAAA,MAGAkW,SAAA,SAAAlW,GACA,OAAAA,EAAA,EAAAA,KAAA,GAAAA,EAAA,EAAAmd,SAAA7uB,KAOAoP,EAAAsc,OAAAtc,EAAAmlB,QAAA,CACA9jB,IAAA,SAAA9H,EAAAgrB,EAAAlC,GACA,OAAA9oB,EAAA,GAAAgrB,EAAA,GAAAlC,EAAA,EACA,EACAA,EAAAkC,EAAAr0B,EAAAmL,IAAA9B,EAAAgrB,EAAAlC,EAAA,GACAnyB,EAAAkI,KAAAlI,EAAAmL,IAAA9B,EAAAgrB,EAAAlC,KAGAjhB,IAAA,SAAA7H,EAAAgrB,EAAAlC,GACA,OAAA9oB,EAAA,MAAArJ,EAAAkI,KAAAlI,EAAAmL,IAAA9B,EAAAgrB,EAAAlC,KAGA7gB,IAAA,SAAAtT,EAAAq2B,EAAAlC,GACA,OAAAkC,EAAAr0B,EAAAmL,KAAAnL,EAAAsD,IAAA,EAAAtF,GAAA,EAAAm0B,IAGAhiB,KAAA,SAAAkkB,EAAAlC,GACA,OAAAkC,EAAAvkB,EAAA+F,QAAA,IAAAsc,IAGAta,OAAA,SAAAwc,EAAAlC,GACA,OAAAkC,EAAAr0B,EAAAmL,IAAAnL,EAAAsD,IAAA,KAAA6uB,IAGA90B,KAAA,SAAAg3B,EAAAlC,GACA,OAAAA,GAAA,EACA,EACAkC,EAAAr0B,EAAAmL,KAAAgnB,EAAA,GAAAA,EAAA,EAAAA,IAGA2B,OAAA,SAAAO,EAAAlC,GACA,OAAAkC,EAAAr0B,EAAAmL,KAAAnL,EAAAsD,IAAAtD,EAAAyL,UAAA,EAAA0mB,IAGA7J,SAAA,SAAA+L,EAAAlC,GACA,OAAAkC,IAAAvkB,EAAA+F,QAAA,IAAAsc,GACAnyB,EAAAmL,IAAA2E,EAAAmlB,QAAA9kB,KAAAkkB,EAAAlC,GAAA,MAOAriB,EAAAsc,OAAAtc,EAAAolB,QAAA,CACA/jB,IAAA,SAAA9H,EAAAkJ,EAAAkD,GACA,OAAApM,EAAAkJ,GAAAlJ,EAAAoM,EAAA,KAAAA,EAAAlD,IAGArB,IAAA,SAAA7H,EAAAkJ,EAAAkD,GACA,OAAApM,EAAAkJ,EACA,EACAlJ,EAAAoM,GACApM,EAAAkJ,IAAAkD,EAAAlD,GACA,GAGAjB,IAAA,SAAAtT,EAAAuU,EAAAkD,GACA,OAAAlD,EAAAvU,GAAAyX,EAAAlD,IAGApC,KAAA,SAAAoC,EAAAkD,GACA,UAAAlD,EAAAkD,IAGAoC,OAAA,SAAAtF,EAAAkD,GACA,OAAA3F,EAAAK,KAAAoC,EAAAkD,IAGApY,KAAA,SAAAkV,EAAAkD,GACA,UAAAtX,MAAA,gCAGA21B,OAAA,SAAAvhB,EAAAkD,GACA,OAAAlD,EAAA,EAAAkD,EAAA,GAAAA,EAAA,EAAAlD,EAAA,MAAAvS,EAAAyL,SAAA,IAGA6c,SAAA,SAAA/V,EAAAkD,GACA,OAAAzV,EAAAmL,IAAAsK,EAAAlD,EAAA,SAOAzC,EAAAsc,OAAAtc,EAAA4B,SAAA,CACAP,IAAA,SAAApC,EAAApR,EAAAK,GACA,WAAAA,GAAA,IAAAA,EACAL,EAAAK,IAAA+Q,EAAA,IACAe,EAAAogB,YAAAvyB,EAAAoR,GAAA/O,EAAAmL,IAAAnN,EAAA+Q,GAAA/O,EAAAmL,IAAA,EAAAnN,EAAAL,EAAAoR,IAGAmC,IAAA,SAAA7H,EAAA1L,EAAAK,GACA,IAAAm3B,EAAA,GACApmB,EAAA,EACA,GAAA1F,EAAA,EACA,SAEA,GAAAA,EAAA1L,EAAA,CACA,KAAYoR,GAAA1F,EAAQ0F,IACpBomB,EAAApmB,GAAAe,EAAA4B,SAAAP,IAAApC,EAAApR,EAAAK,GAEA,OAAA8R,EAAAjF,IAAAsqB,GAEA,YAOArlB,EAAAsc,OAAAtc,EAAAsI,OAAA,CACAjH,IAAA,SAAApC,EAAA/R,EAAAgB,GACA,OAAA+Q,QAAA,IAEAA,EAAA,EACA,EACAe,EAAAogB,YAAAnhB,EAAA/R,EAAA,EAAAA,EAAA,GACAgD,EAAAmL,IAAA,EAAAnN,EAAA+Q,GAAA/O,EAAAmL,IAAAnN,EAAAhB,KAGAkU,IAAA,SAAA7H,EAAArM,EAAAgB,GACA,IAAA6M,EAAA,EACAkE,EAAA,EACA,GAAA1F,EAAA,WACA,KAAU0F,GAAA1F,EAAQ0F,IAClBlE,GAAAiF,EAAAsI,OAAAjH,IAAApC,EAAA/R,EAAAgB,GAEA,OAAA6M,KAOAiF,EAAAsc,OAAAtc,EAAAslB,QAAA,CACAjkB,IAAA,SAAApC,EAAAmI,EAAA5a,EAAAqB,GAUA,GAAAoR,KAAA,EACA,SACK,GAAAA,EAAA,GAAAA,EAAAzS,GAAA4a,EAAAvZ,GAEL,SACK,GAAAoR,EAAApR,GAAAoR,EAAAzS,EAEL,SACK,KAAAA,EAAA4a,EAGL,SAAAvZ,EAAAuZ,EAGApH,EAAAslB,QAAAjkB,IAAA+F,EAAA5a,EAAAqB,EAAAoR,EAAAmI,IAAA5a,EAAA4a,EAAAvZ,GAIAmS,EAAAslB,QAAAjkB,IAAAxT,EAAAoR,EAAAmI,IAAA5a,EAAAqB,GAGK,KAAAA,EAAAuZ,EAGL,OAAApH,EAAAslB,QAAAjkB,IAAA7U,EAAAyS,EAAAmI,EAAA5a,EAAA4a,EAAAvZ,GAEK,GAAArB,EAAAqB,EAGL,OAAAmS,EAAAslB,QAAAjkB,IAAApC,EAAAmI,EAAAvZ,EAAArB,GAkBA,IALA,IAAA+4B,EAAA,EAGAC,EAAA,EAEAp5B,EAAA,EAAoBA,EAAA6S,EAAO7S,IAAA,CAG3B,KAAAm5B,EAAA,GAAAC,EAAA33B,GAIA03B,GAAA,EAAA/4B,GAAA4a,EAAAoe,GAGAA,IAKAD,IAAA13B,EAAAzB,IAAAI,EAAAJ,OAAA,IAAAgb,EAAA5a,EAAAqB,EAAAzB,EAAA,IAGA,KAAWo5B,EAAA33B,EAAiB23B,IAE5BD,GAAA,EAAA/4B,GAAA4a,EAAAoe,GAIA,OAAAt1B,EAAA8X,IAAA,EAAA9X,EAAAiH,IAAA,EAAAouB,KAIAnkB,IAAA,SAAA7H,EAAA6N,EAAA5a,EAAAqB,GAYA,GAAA0L,EAAA,GAAAA,EAAA/M,GAAA4a,EAAAvZ,GAEA,SACK,GAAA0L,GAAA1L,GAAA0L,GAAA/M,EAEL,SACK,KAAAA,EAAA4a,EAGL,SAAAvZ,EAAAuZ,EAGApH,EAAAslB,QAAAlkB,IAAAgG,EAAA5a,EAAAqB,EAAA0L,EAAA6N,IAAA5a,EAAA4a,EAAAvZ,GAIA,EAAAmS,EAAAslB,QAAAlkB,IAAAvT,EAAA0L,EAAA,EAAA6N,IAAA5a,EAAAqB,GAGK,KAAAA,EAAAuZ,EAGL,SAAApH,EAAAslB,QAAAlkB,IAAA5U,EAAA+M,EAAA,EAAA6N,EAAA5a,EAAA4a,EAAAvZ,GAEK,GAAArB,EAAAqB,EAGL,OAAAmS,EAAAslB,QAAAlkB,IAAA7H,EAAA6N,EAAAvZ,EAAArB,GAqBA,IATA,IAAAi5B,EAAA,EAIAF,EAAA,EAGAC,EAAA,EAEAp5B,EAAA,EAAoBA,EAAAmN,EAAOnN,IAAA,CAG3B,KAAAq5B,EAAA,GAAAD,EAAA33B,GAAA,CAIA,IAAA63B,EAAA,EAAAl5B,GAAA4a,EAAAoe,GAEAD,GAAAG,EACAD,GAAAC,EAGAF,IAQAC,GAHAF,IAAA13B,EAAAzB,IAAAI,EAAAJ,OAAA,IAAAgb,EAAA5a,EAAAqB,EAAAzB,EAAA,IAMA,KAAWo5B,EAAA33B,EAAiB23B,IAE5BC,GAAA,EAAAj5B,GAAA4a,EAAAoe,GAIA,OAAAt1B,EAAA8X,IAAA,EAAA9X,EAAAiH,IAAA,EAAAsuB,OAQAzlB,EAAAsc,OAAAtc,EAAAkJ,QAAA,CACA7H,IAAA,SAAApC,EAAA5S,GACA,OAAAA,EAAA,GAAA4S,EAAA,MAAAA,EAAA,EACA,EAGA/O,EAAAmL,IAAAhP,EAAA4S,GAAA/O,EAAAkI,KAAA/L,GAAA2T,EAAAmgB,UAAAlhB,IAGAmC,IAAA,SAAA7H,EAAAlN,GACA,IAAAs5B,EAAA,GACA1mB,EAAA,EACA,GAAA1F,EAAA,WACA,KAAU0F,GAAA1F,EAAQ0F,IAClB0mB,EAAAh2B,KAAAqQ,EAAAkJ,QAAA7H,IAAApC,EAAA5S,IAEA,OAAA2T,EAAAjF,IAAA4qB,IAGAtlB,KAAA,SAAAhU,GACA,OAAAA,GAGAmsB,SAAA,SAAAnsB,GACA,OAAAA,GAGA23B,OAAA,SAAA33B,GACA,IAAA6B,EAAA,EAAA+Q,EAAA,EAAAlJ,EAAA7F,EAAAkI,KAAA/L,GACA,GACA4S,IACA/Q,GAAAgC,EAAAyL,eACKzN,EAAA6H,GACL,OAAAkJ,EAAA,KAKAe,EAAAsc,OAAAtc,EAAA4lB,WAAA,CACAvkB,IAAA,SAAA9H,EAAAkJ,EAAAkD,EAAAlZ,GACA,OAAAkZ,GAAAlD,GAAAhW,EAAAgW,GAAAhW,EAAAkZ,EACAsa,IAEA1mB,EAAAkJ,GAAAlJ,EAAAoM,EACA,EACOpM,EAAA9M,EACP,GAAA8M,EAAAkJ,KAAAkD,EAAAlD,IAAAhW,EAAAgW,IACOlJ,IAAA9M,EACP,GAAAkZ,EAAAlD,GAEA,GAAAkD,EAAApM,KAAAoM,EAAAlD,IAAAkD,EAAAlZ,KAKA2U,IAAA,SAAA7H,EAAAkJ,EAAAkD,EAAAlZ,GACA,OAAAkZ,GAAAlD,GAAAhW,EAAAgW,GAAAhW,EAAAkZ,EACAsa,IACA1mB,GAAAkJ,EACA,EACAlJ,GAAAoM,EACA,EACApM,GAAA9M,EACAyD,EAAAmL,IAAA9B,EAAAkJ,EAAA,KAAAkD,EAAAlD,IAAAhW,EAAAgW,IAEA,EAAAvS,EAAAmL,IAAAsK,EAAApM,EAAA,KAAAoM,EAAAlD,IAAAkD,EAAAlZ,KAGA+U,IAAA,SAAAtT,EAAAuU,EAAAkD,EAAAlZ,GACA,OAAAkZ,GAAAlD,GAAAhW,EAAAgW,GAAAhW,EAAAkZ,EACAsa,IAEA/xB,IAAAzB,EAAAgW,IAAAkD,EAAAlD,GACAA,GAAAkD,EAAAlD,GAAAvS,EAAAuD,KAAAvF,IAAAzB,EAAAgW,IAAAkD,EAAAlD,KAEAA,GAAAkD,EAAAlD,IAAA,EAAAvS,EAAAuD,MAAA,EAAAvF,IAAA,GAAAzB,EAAAgW,IAAAkD,EAAAlD,OAKApC,KAAA,SAAAoC,EAAAkD,EAAAlZ,GACA,OAAAgW,EAAAkD,EAAAlZ,GAAA,GAGAsb,OAAA,SAAAtF,EAAAkD,EAAAlZ,GACA,OAAAA,IAAAgW,EAAAkD,GAAA,EACAA,EAAAzV,EAAAuD,MAAAkS,EAAAlD,IAAAkD,EAAAlZ,IAAAyD,EAAAuD,KAAA,GACKhH,GAAAgW,EAAAkD,GAAA,EACLlD,EAAAvS,EAAAuD,MAAAkS,EAAAlD,IAAAhW,EAAAgW,IAAAvS,EAAAuD,KAAA,QADK,GAKLlG,KAAA,SAAAkV,EAAAkD,EAAAlZ,GACA,OAAAA,GAGAu3B,OAAA,SAAAvhB,EAAAkD,EAAAlZ,GACA,IAAA8tB,EAAArqB,EAAAyL,SACA,OAAA4e,GAAA9tB,EAAAgW,IAAAkD,EAAAlD,GACAA,EAAAvS,EAAAuD,KAAA8mB,GAAA5U,EAAAlD,IAAAhW,EAAAgW,IACAkD,EAAAzV,EAAAuD,MAAA,EAAA8mB,IAAA5U,EAAAlD,IAAAkD,EAAAlZ,KAGA+rB,SAAA,SAAA/V,EAAAkD,EAAAlZ,GACA,OAAAgW,IAAAkD,IAAAlZ,IAAAgW,EAAAkD,EAAAlD,EAAAhW,EAAAkZ,EAAAlZ,GAAA,MAMAuT,EAAAsc,OAAAtc,EAAA6lB,QAAA,CACAxkB,IAAA,SAAA9H,EAAAkJ,EAAAkD,GACA,OAAAA,GAAAlD,EAAAwd,IAEA1mB,GAAAkJ,GAAAlJ,GAAAoM,EAAA,EACA,EAAAzV,EAAA4I,GACA5I,EAAAmL,IAAAnL,EAAAmL,IAAAsK,EAAAlD,EAAA,GACAvS,EAAAmL,IAAA,EAAA9B,EAAAkJ,EAAAkD,EAAA,SAGAvE,IAAA,SAAA7H,EAAAkJ,EAAAkD,GACA,OAAApM,EAAAkJ,EACA,EACAlJ,EAAAoM,EACA,EAAAzV,EAAA4I,GAAA5I,EAAAqG,KAAArG,EAAAuD,MAAA8F,EAAAkJ,IAAAkD,EAAAlD,KACA,GAGAjB,IAAA,SAAAtT,EAAAuU,EAAAkD,GACA,OAAAlD,GAAA,MAAAvS,EAAAgI,IAAAhI,EAAA4I,GAAA5K,KAAAyX,EAAAlD,IAGApC,KAAA,SAAAoC,EAAAkD,GACA,OAAAA,GAAAlD,EAAAwd,KACAxd,EAAAkD,GAAA,GAGAoC,OAAA,SAAAtF,EAAAkD,GACA,OAAAA,GAAAlD,EAAAwd,KACAxd,EAAAkD,GAAA,GAGApY,KAAA,SAAAkV,EAAAkD,GACA,UAAAtX,MAAA,gCAGA21B,OAAA,SAAAvhB,EAAAkD,GACA,OAAAlD,EAAAkD,GAAA,GAAAA,EAAAlD,GAAA,EACAvS,EAAAwI,IAAA,EAAAxI,EAAA4I,GAAAkH,EAAAolB,QAAApB,OAAA,OAGAxL,SAAA,SAAA/V,EAAAkD,GACA,OAAAA,GAAAlD,EAAAwd,IACA/vB,EAAAmL,IAAAsK,EAAAlD,EAAA,QAOAzC,EAAAsc,OAAAtc,EAAA8lB,QAAA,CACAzkB,IAAA,SAAA9H,EAAAqhB,EAAAjV,GACA,OAAAA,GAAA,IAAAzV,EAAAkI,KAAAlI,EAAAkD,IAAAmG,EAAAqhB,GAAAjV,IAAA,EAAAA,IAGAvE,IAAA,SAAA7H,EAAAqhB,EAAAjV,GACA,OAAAA,GAAA,EAAiB,EAEjBpM,EAAAqhB,EACA,GAAA1qB,EAAAkI,KAAAmB,EAAAqhB,GAAAjV,GAEA,KAAAzV,EAAAkI,MAAAmB,EAAAqhB,GAAAjV,IAIAtF,KAAA,SAAAua,EAAAjV,GACA,OAAAiV,GAGA7S,OAAA,SAAA6S,EAAAjV,GACA,OAAAiV,GAGArtB,KAAA,SAAAqtB,EAAAjV,GACA,OAAAiV,GAGApC,SAAA,SAAAoC,EAAAjV,GACA,SAAAA,KAGAqe,OAAA,SAAApJ,EAAAjV,GACA,IAlCApM,EAkCAghB,EAAArqB,EAAAyL,SAAA,GAEA,OAAAif,EAAAjV,IApCApM,EAoCAghB,GApCyBrqB,EAAAkD,IAAAmG,IAoCzBrJ,EAAAsD,IAAA,IAAAtD,EAAAkD,IAAAmnB,OA+JAva,EAAAsc,OAAAtc,EAAA+lB,MAAA,CACA3kB,IAAA,SAAAie,EAAA2G,EAAApb,GAEA,IACA8X,EAAAsD,EAeAC,EAAA,CACA,kBACA,kBACA,kBACA,iBACA,kBACA,mBACA,kBACA,oBAEAC,EAAA,CACA,oBACA,oBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBAGA,GAAA7G,GAAA,EACA,SAKA,GAAAzU,EAAA,GAAA8X,EAAA,SAAAzC,IAEA,IAAArS,OAAAsC,SAAAmP,GACA,SAEA,GAAAzU,EArCA,KAsCA,OAAA4X,EAAAnD,EAjDA,EAiDAqD,GAIA,IASAyD,EATAC,EAAA,GAAAxb,EACAyb,EAAAD,EAAAl2B,EAAAsD,IAAAoX,KAAA1a,EAAAsD,IAAA,GAAAwM,EAAAkG,QAAAkgB,GACAE,EAAAF,EAAA,EAMAG,EAAA,IAAA3b,EAEAub,EAAAvb,GAvDA,IAIA,EAoDAA,GAvDA,IAIA,GAoDAA,GAvDA,IAIA,IACA,KAqDAyb,GAAAn2B,EAAAsD,IAAA2yB,GAMA,IAFA,IAAAK,EAAA,EAEAp6B,EAAA,EAAmBA,GAAA,GAASA,IAAA,CAQ5B,IAPA,IAAAq6B,EAAA,EAKAC,GAAA,EAAAt6B,EAAA,GAAA+5B,EAEA5C,EAAA,EAAsBA,GA/EtB,GA+EmCA,IAAA,CACnC,IAAA1pB,EAAA8sB,EA/EA,EAgFApD,GACA1pB,EAAA0pB,EAjFA,EAiFA,EACAoD,EAAAN,EAAAC,EAAAp2B,EAAAsD,IAAAkzB,EAAAT,EAAApsB,GAAAssB,IACAF,EAAApsB,GAAAssB,EAAAO,GAAAH,IAEA1sB,EAAA0pB,EAAA,EACAoD,EAAAN,EAAAC,EAAAp2B,EAAAsD,IAAAkzB,EAAAT,EAAApsB,GAAAssB,IACAF,EAAApsB,GAAAssB,EAAAO,GAAAH,GAKAI,IA1FA,KAqGAF,GAFAjE,EArGA,EA6FAe,EACAlE,EAAAnvB,EAAAuD,KAAA,IAAAwyB,EAAApsB,GAAAssB,EAAAO,IAEArH,EAAAnvB,EAAAuD,KAAA,KAAAwyB,EAAApsB,GAAAssB,EAAAO,IApGA,EAyGAhE,GACAwD,EAAArsB,GAAA3J,EAAAkI,IAAAuuB,IAUA,GAAAv6B,EAAA+5B,GAAA,GAAAM,GA7GA,MA8GA,MAKAD,GAAAC,EAGA,GAAAA,EAtHA,MAuHA,UAAAp4B,MAAA,gCAIA,OAFAm4B,EAAA,IACAA,EAAA,GACAA,GAGAhlB,IAAA,SAAAtT,EAAA83B,EAAApb,GASA,GAAAA,EAAA,GANAob,EAMA,SAAA/F,IAEA,GAAA/xB,EAAA,GAAAA,EAAA,SAAA+xB,IACA,OAAA/xB,EAAA,SACA,OAAAA,EAAA,OAAAuxB,IAIA,IAWAza,EAXA4hB,EArLA,SAAA14B,EAAAzB,EAAA2d,GACA,IAiBAyc,EAAA,MAAA34B,EACAkxB,EAAAlvB,EAAAuD,KAAAvD,EAAAsD,IAAA,GAAAqzB,OACAv5B,EAAA8xB,OAXA,iBAWAA,EAbA,eAaAA,EAfA,eAeAA,EAjBA,GAiBAA,EAnBA,mBASA,eAWAA,EAbA,cAaAA,EAfA,eAeAA,EAjBA,eAiBAA,EAnBA,eAoBAhV,EANA,MAMA9c,aAAA8c,EAAA,GACA,IAAAiV,EAZA,MACA,MAWA/xB,EAEA,OADA8c,EARA,MAQAiV,IAXA,MAWAjV,EAVA,MAUA9c,EAAA8c,GACA9c,GAAA+xB,EAAAnvB,EAAAsD,IAAA/G,EAAA,GAVA,QAsKAq6B,CAAA54B,EAdA83B,EAcApb,GAIAmc,EAAA/mB,EAAA+lB,MAAA3kB,IAAAwlB,EAAAZ,EAAApb,GAAA1c,EASA8W,EADA+hB,EAAA,EACA72B,EAAAiH,IAAA,EAAAyvB,EAAA,GAEAA,EAAA,EAMA,IALA,IAIAJ,EAJAQ,EAAAhnB,EAAA+lB,MAAA3kB,IAAA4D,EAAAghB,EAAApb,GAAA1c,EAKA+4B,EAAA,EAAqBA,EAhCrB,GAgCqCA,IAoBrC,GAnBAT,EAAAxhB,EAAAgiB,GAAAhiB,EAAA4hB,IAAAI,EAAAD,GACAA,EAAAC,EAIAJ,EAAA5hB,EACAwhB,EAAA,IACAA,EAAA,EACAQ,GAAA94B,GAIA84B,EAAAhnB,EAAA+lB,MAAA3kB,IAAAolB,EAAAR,EAAApb,GAAA1c,EACA8W,EAAAwhB,EAKAt2B,EAAAkD,IAAA4R,EAAA4hB,GApDA,KAsDA,OAAAJ,EAGA,UAAAn4B,MAAA,mCAz+CA,CA6+CC2R,EAAA9P,MAID,SAAA8P,EAAA9P,GAEA,IA2iBA6K,EACA1B,EA5iBA1J,EAAAR,MAAAnB,UAAA2B,KACAP,EAAA4Q,EAAAhN,MAAA5D,QAEA,SAAA83B,EAAArQ,GACA,OAAAznB,EAAAynB,iBAAA7W,EAGAA,EAAAsc,OAAA,CAGA6K,IAAA,SAAAp2B,EAAA8lB,GAEA,OAAAqQ,EAAArQ,IACAqQ,EAAArQ,EAAA,MAAAA,EAAA,CAAAA,IACA7W,EAAA3N,IAAAtB,EAAA,SAAA1D,EAAAkF,EAAAD,GACA,OAAAjF,EAAAwpB,EAAAtkB,GAAAD,MAGA0N,EAAA3N,IAAAtB,EAAA,SAAA1D,GAA2C,OAAAA,EAAAwpB,KAI3CzW,SAAA,SAAArP,EAAA8lB,GAEA,OAAAqQ,EAAArQ,IACAqQ,EAAArQ,EAAA,MAAAA,EAAA,CAAAA,IACA7W,EAAA3N,IAAAtB,EAAA,SAAA1D,EAAAkF,EAAAD,GACA,OAAAjF,EAAAwpB,EAAAtkB,GAAAD,IAAA,KAGA0N,EAAA3N,IAAAtB,EAAA,SAAA1D,GAA2C,OAAAA,EAAAwpB,KAI3CuQ,OAAA,SAAAr2B,EAAA8lB,GACA,OAAAqQ,EAAArQ,IACAqQ,EAAArQ,EAAA,MAAAA,EAAA,CAAAA,IACA7W,EAAAqnB,SAAAt2B,EAAAiP,EAAAwB,IAAAqV,KAEA7W,EAAA3N,IAAAtB,EAAA,SAAA1D,GAA2C,OAAAA,EAAAwpB,KAI3CwQ,SAAA,SAAAt2B,EAAA8lB,GACA,IAAAtkB,EAAAD,EAAAg1B,EAAAvsB,EAAAiiB,EAAAK,EAAAJ,EAAAsK,EAEA,QAAA32B,IAAAG,EAAA7B,aAAA0B,IAAAimB,EAAA3nB,OACA,OAAA6B,EAAA8lB,EAMA,GAJAmG,EAAAjsB,EAAA7B,OACAmuB,EAAAtsB,EAAA,GAAA7B,OACA+tB,EAAAjd,EAAAud,MAAAP,EAAAsK,EAAAJ,EAAArQ,KAAA,GAAA3nB,OAAAmuB,GACAkK,EAAA,EACAL,EAAArQ,GAAA,CACA,KAAY0Q,EAAAD,EAAoBC,IAChC,IAAAh1B,EAAA,EAAqBA,EAAAyqB,EAAYzqB,IAAA,CAEjC,IADAwI,EAAA,EACAzI,EAAA,EAAuBA,EAAA+qB,EAAY/qB,IACnCyI,GAAAhK,EAAAwB,GAAAD,GAAAukB,EAAAvkB,GAAAi1B,GACAtK,EAAA1qB,GAAAg1B,GAAAxsB,EAGA,WAAAiiB,GAAA,IAAAuK,EAAAtK,EAAA,MAAAA,EAEA,OAAAjd,EAAA3N,IAAAtB,EAAA,SAAA1D,GAA2C,OAAAA,EAAAwpB,KAQ3C2Q,MAAA,SAAAtmB,EAAAC,GACA,OAAAnB,EAAAqnB,SAAAnmB,EAAA7O,IAAA,SAAA/E,GAA4C,OAAAA,KAAa,CAAA6T,KAKzDsmB,IAAA,SAAA12B,EAAA8lB,GACAqQ,EAAAn2B,EAAA,MAAAA,EAAA,CAAAA,IACAm2B,EAAArQ,EAAA,MAAAA,EAAA,CAAAA,IASA,IAPA,IAMA9b,EAAAzI,EANAo1B,EAAA,IAAA32B,EAAA,GAAA7B,QAAA,IAAA6B,EAAA7B,OAAA8Q,EAAA5N,UAAArB,KACA42B,EAAA,IAAA9Q,EAAA,GAAA3nB,QAAA,IAAA2nB,EAAA3nB,OAAA8Q,EAAA5N,UAAAykB,KACAoG,EAAA,GACA1qB,EAAA,EACAyqB,EAAA0K,EAAAx4B,OACAmuB,EAAAqK,EAAA,GAAAx4B,OAEUqD,EAAAyqB,EAAYzqB,IAAA,CAGtB,IAFA0qB,EAAA1qB,GAAA,GACAwI,EAAA,EACAzI,EAAA,EAAmBA,EAAA+qB,EAAY/qB,IAC/ByI,GAAA2sB,EAAAn1B,GAAAD,GAAAq1B,EAAAp1B,GAAAD,GACA2qB,EAAA1qB,GAAAwI,EAEA,WAAAkiB,EAAA/tB,OAAA+tB,EAAA,GAAAA,GAIA5hB,IAAA,SAAAtK,EAAA8lB,GACA,OAAA7W,EAAA3N,IAAAtB,EAAA,SAAA1D,GAA2C,OAAA6C,EAAAmL,IAAAhO,EAAAwpB,MAI3Cze,IAAA,SAAArH,GACA,OAAAiP,EAAA3N,IAAAtB,EAAA,SAAA1D,GAA2C,OAAA6C,EAAAkI,IAAA/K,MAI3CmG,IAAA,SAAAzC,GACA,OAAAiP,EAAA3N,IAAAtB,EAAA,SAAA1D,GAA2C,OAAA6C,EAAAsD,IAAAnG,MAI3C+F,IAAA,SAAArC,GACA,OAAAiP,EAAA3N,IAAAtB,EAAA,SAAA1D,GAA2C,OAAA6C,EAAAkD,IAAA/F,MAK3Cu6B,KAAA,SAAA72B,EAAA7C,GACA,IAAA25B,EAAA,EACAz7B,EAAA,EAMA,IAJAqE,MAAAvC,OAAA,GAEAg5B,EAAAn2B,EAAA,MAAAA,IAAA,IAEU3E,EAAA2E,EAAA7B,OAAgB9C,IAC1By7B,GAAA33B,EAAAmL,IAAAnL,EAAAkD,IAAArC,EAAA3E,IAAA8B,GAEA,OAAAgC,EAAAmL,IAAAwsB,EAAA,EAAA35B,IAKA45B,MAAA,SAAA/2B,EAAA8lB,GACA,OAAA3mB,EAAAoD,KAAA0M,EAAAynB,IAAA12B,EAAA8lB,IAAA7W,EAAA4nB,KAAA72B,GAAAiP,EAAA4nB,KAAA/Q,MAKAkR,IAAA,SAAAtlB,EAAAkD,GAEA,IADA,IAAAqiB,EAAA,GACA57B,EAAA,EAAmBA,EAAAqW,EAAAvT,OAAc9C,IACjC47B,EAAAr4B,KAAA8S,EAAArW,GAAA4F,SAEA,IAAA5F,EAAA,EAAmBA,EAAA47B,EAAA94B,OAAmB9C,IACtCuD,EAAAX,MAAAg5B,EAAA57B,GAAAuZ,EAAAvZ,IAEA,OAAA47B,GAMAxmB,IAAA,SAAAiB,GAUA,IATA,IAMA5I,EANAgQ,EAAApH,EAAAvT,OACA2T,EAAAJ,EAAA,GAAAvT,OACAyW,EAAA3F,EAAA0d,SAAA7T,EAAAhH,GACApW,EAAAuT,EAAAioB,aAAAxlB,EAAAkD,GACArW,EAAA,GACAlD,EAAA,EAIUA,EAAAyd,EAAUzd,IAEpB,IADAkD,EAAAlD,GAAA,GACAyN,EAAAgJ,EAAoBhJ,EAAApN,EAAA,GAAAyC,OAAiB2K,IACrCvK,EAAAlD,GAAAyN,EAAAgJ,GAAApW,EAAAL,GAAAyN,GAEA,OAAAvK,GAIA44B,IAAA,SAAAzlB,GACA,IASA5I,EATAsuB,EAAA1lB,EAAAvT,OACAk5B,EAAA,EAAAD,EACAlE,EAAA,IAAA90B,MAAAi5B,GACAC,EAAAF,EAAA,EACAG,EAAAF,EAAA,EACAG,EAAAF,EAAAF,EAAA,EACAK,EAAAF,EACAl8B,EAAA,EACAkD,EAAA,EAGA,OAAA64B,EACA,OAAA1lB,EAAA,MAAAA,EAAA,MAAAA,EAAA,MAAAA,EAAA,MAEA,KAAUrW,EAAAg8B,EAAWh8B,IACrB63B,EAAA73B,GAAA,EAEA,IAAAA,EAAA,EAAmBA,EAAA+7B,EAAU/7B,IAAA,CAC7B,IAAAyN,EAAA,EAAiBA,EAAAsuB,EAAUtuB,IAC3BoqB,EAAAsE,EAAA,EAAAA,EAAAJ,EAAAI,IAAA9lB,EAAArW,GAAAyN,GACAoqB,EAAAuE,EAAAL,EAAAK,EAAAL,EAAAK,IAAA/lB,EAAArW,GAAAyN,GACA0uB,IACAC,IAEAD,IAAAF,EAAAF,EAAA,EACAK,IAAAF,EAEA,IAAAl8B,EAAA,EAAmBA,EAAA+7B,EAAU/7B,IAC7BkD,GAAA20B,EAAA73B,GAEA,KAAUA,EAAAg8B,EAAWh8B,IACrBkD,GAAA20B,EAAA73B,GAEA,OAAAkD,GAGAm5B,kBAAA,SAAAhmB,EAAAkD,GACA,IAOA+iB,EAAAC,EAAA1tB,EAAAgE,EAPA7S,EAAA,EACAyN,EAAA,EACAhM,EAAA4U,EAAAvT,OACA1C,EAAAiW,EAAA,GAAAvT,OACAw2B,EAAA,EACA3qB,EAAA,EACAxB,EAAA,GAIA,IADAmvB,GADAjmB,EAAAzC,EAAA+nB,IAAAtlB,EAAAkD,IACA,GAAAzW,OACA9C,EAAA,EAAkBA,EAAAyB,EAAOzB,IAAA,CAGzB,IAFAu8B,EAAAlmB,EAAArW,MACAyN,EAAAzN,EACA6S,EAAA7S,EAAA,EAAqB6S,EAAAzS,EAAOyS,IAC5B0pB,EAAAz4B,EAAAkD,IAAAqP,EAAAxD,GAAA7S,MACAu8B,EAAAlmB,EAAAxD,GAAA7S,GACAyN,EAAAoF,GAGA,GAAApF,GAAAzN,EACA,IAAA6S,EAAA,EAAkBA,EAAAypB,EAAUzpB,IAC5BhE,EAAAwH,EAAArW,GAAA6S,GACAwD,EAAArW,GAAA6S,GAAAwD,EAAA5I,GAAAoF,GACAwD,EAAA5I,GAAAoF,GAAAhE,EAGA,IAAApB,EAAAzN,EAAA,EAAqByN,EAAAhM,EAAOgM,IAE5B,IADA6rB,EAAAjjB,EAAA5I,GAAAzN,GAAAqW,EAAArW,MACA6S,EAAA7S,EAAkB6S,EAAAypB,EAAUzpB,IAC5BwD,EAAA5I,GAAAoF,GAAAwD,EAAA5I,GAAAoF,GAAAymB,EAAAjjB,EAAArW,GAAA6S,GAIA,IAAA7S,EAAAyB,EAAA,EAAuBzB,GAAA,EAAQA,IAAA,CAE/B,IADA2O,EAAA,EACAlB,EAAAzN,EAAA,EAAqByN,GAAAhM,EAAA,EAAWgM,IAChCkB,GAAAxB,EAAAM,GAAA4I,EAAArW,GAAAyN,GAEAN,EAAAnN,IAAAqW,EAAArW,GAAAs8B,EAAA,GAAA3tB,GAAA0H,EAAArW,MAEA,OAAAmN,GAGA0uB,aAAA,SAAAxlB,EAAAkD,GAMA,IALA,IAAAnZ,EAAAwT,EAAA+nB,IAAAtlB,EAAAkD,GACA2O,EAAA9nB,EAAA0C,OACA6yB,EAAAv1B,EAAA,GAAA0C,OACAzC,EAAA,EAEAgN,EAAA,EAAmBA,EAAA6a,EAAO7a,IAAA,CAE1B,IADA,IAAAmvB,EAAAnvB,EACAovB,EAAApvB,EAAA,EAAwBovB,EAAAvU,EAAQuU,IAChC34B,EAAAkD,IAAA5G,EAAAq8B,GAAApvB,IAAAvJ,EAAAkD,IAAA5G,EAAAo8B,GAAAnvB,MACAmvB,EAAAC,GAEA,IAAAxmB,EAAA7V,EAAAiN,GAGA,IAFAjN,EAAAiN,GAAAjN,EAAAo8B,GACAp8B,EAAAo8B,GAAAvmB,EACAwmB,EAAApvB,EAAA,EAAwBovB,EAAAvU,EAAQuU,IAAA,CAChCp8B,EAAAD,EAAAq8B,GAAApvB,GAAAjN,EAAAiN,MACA,QAAAF,EAAAE,EAAuBF,EAAAwoB,EAAOxoB,IAC9B/M,EAAAq8B,GAAAtvB,IAAA/M,EAAAiN,GAAAF,GAAA9M,GAKA,IAAAgN,EAAA6a,EAAA,EAAqB7a,GAAA,EAAQA,IAAA,CAE7B,IADAhN,EAAAD,EAAAiN,MACAovB,EAAA,EAAsBA,EAAApvB,EAAQovB,IAC9B,IAAAtvB,EAAAwoB,EAAA,EAAyBxoB,EAAAE,EAAA,EAASF,IAClC/M,EAAAq8B,GAAAtvB,IAAA/M,EAAAiN,GAAAF,GAAA/M,EAAAq8B,GAAApvB,GAAAhN,EAIA,IADAD,EAAAiN,OAAAhN,EACA8M,EAAA+a,EAAqB/a,EAAAwoB,EAAOxoB,IAC5B/M,EAAAiN,GAAAF,IAAA9M,EAGA,OAAAD,GAaAs8B,YAAA,SAAA5nB,EAAAyE,GACA,IAEAojB,EAFAnL,EAAA1c,EAAA,GAAAhS,OACAqK,EAAAyG,EAAAud,MAAA,EAAAK,GAAA,GAEAoL,GAAA,EAcA,OAZAp4B,MAAA+U,EAAA,GAAAzW,SACAyW,IAAAtT,IAAA,SAAAjG,GAA4B,OAAAA,EAAA,KAC5B48B,GAAA,GAGAhpB,EAAA2c,OAAAiB,EAAA,SAAAvS,QAAA,SAAAjf,GACA28B,EAAA/oB,EAAA2c,OAAAvwB,EAAA,EAAAwxB,GAAAvrB,IAAA,SAAAwH,GACA,OAAAN,EAAAM,GAAAqH,EAAA9U,GAAAyN,KAEAN,EAAAnN,IAAAuZ,EAAAvZ,GAAA4T,EAAAjF,IAAAguB,IAAA7nB,EAAA9U,QAGA48B,EACAzvB,EAAAlH,IAAA,SAAAjG,GAA+B,OAAAA,KAC/BmN,GAGA0vB,aAAA,SAAA/nB,EAAAyE,GAEA,IAEAojB,EAFAnL,EAAA1c,EAAA,GAAAhS,OACAqK,EAAAyG,EAAAud,MAAA,EAAAK,GAAA,GAGAoL,GAAA,EAaA,OAZAp4B,MAAA+U,EAAA,GAAAzW,SACAyW,IAAAtT,IAAA,SAAAjG,GAA4B,OAAAA,EAAA,KAC5B48B,GAAA,GAGAhpB,EAAA2c,OAAAiB,GAAAvS,QAAA,SAAAjf,GACA28B,EAAA/oB,EAAA2c,OAAAvwB,GAAAiG,IAAA,SAAAwH,GACA,OAAAqH,EAAA9U,GAAAyN,GAAAN,EAAAM,KAEAN,EAAAnN,IAAAuZ,EAAAvZ,GAAA4T,EAAAjF,IAAAguB,IAAA7nB,EAAA9U,QAGA48B,EACAzvB,EAAAlH,IAAA,SAAAjG,GAA+B,OAAAA,KAC/BmN,GAQA2vB,GAAA,SAAAhoB,GACA,IAIA6nB,EAJAnL,EAAA1c,EAAAhS,OAEA6G,EAAAiK,EAAA0d,SAAAE,GACAuL,EAAAnpB,EAAAud,MAAArc,EAAAhS,OAAAgS,EAAA,GAAAhS,QAmBA,OAjBA8Q,EAAA2c,OAAAiB,GAAAvS,QAAA,SAAA/d,GACA67B,EAAA,GAAA77B,GAAA4T,EAAA,GAAA5T,KAEA0S,EAAA2c,OAAA,EAAAiB,GAAAvS,QAAA,SAAAhf,GACA2T,EAAA2c,OAAAtwB,GAAAgf,QAAA,SAAAjf,GACA28B,EAAA/oB,EAAA2c,OAAAvwB,GAAAiG,IAAA,SAAAkxB,GACA,OAAAxtB,EAAA1J,GAAAk3B,GAAA4F,EAAA5F,GAAAn3B,KAEA2J,EAAA1J,GAAAD,IAAA8U,EAAA7U,GAAAD,GAAA4T,EAAAjF,IAAAguB,IAAAI,EAAA/8B,QAEA4T,EAAA2c,OAAAtwB,EAAAuxB,GAAAvS,QAAA,SAAAxR,GACAkvB,EAAA/oB,EAAA2c,OAAAtwB,GAAAgG,IAAA,SAAAkxB,GACA,OAAAxtB,EAAA1J,GAAAk3B,GAAA4F,EAAA5F,GAAA1pB,KAEAsvB,EAAA98B,GAAAwN,GAAAqH,EAAA9U,GAAAyN,GAAAmG,EAAAjF,IAAAguB,OAGA,CAAAhzB,EAAAozB,IAMAC,SAAA,SAAAloB,GACA,IAEA6nB,EAFAnL,EAAA1c,EAAAhS,OACAgU,EAAAlD,EAAAud,MAAArc,EAAAhS,OAAAgS,EAAA,GAAAhS,QAcA,OAZA8Q,EAAA2c,OAAAiB,GAAAvS,QAAA,SAAAjf,GACA28B,EAAA/oB,EAAA2c,OAAAvwB,GAAAiG,IAAA,SAAA/E,GACA,OAAA4C,EAAAmL,IAAA6H,EAAA9W,GAAAkB,GAAA,KAEA4V,EAAA9W,MAAA8D,EAAAuD,KAAAyN,EAAA9U,MAAA4T,EAAAjF,IAAAguB,IACA/oB,EAAA2c,OAAAvwB,EAAA,EAAAwxB,GAAAvS,QAAA,SAAAxR,GACAkvB,EAAA/oB,EAAA2c,OAAAvwB,GAAAiG,IAAA,SAAA/E,GACA,OAAA4V,EAAA9W,GAAAkB,GAAA4V,EAAArJ,GAAAvM,KAEA4V,EAAArJ,GAAAzN,IAAA8U,EAAA9U,GAAAyN,GAAAmG,EAAAjF,IAAAguB,IAAA7lB,EAAA9W,UAGA8W,GAIAmmB,aAAA,SAAA5mB,EAAAkD,EAAApM,EAAArM,GAQA,IAPA,IAMAo8B,EAAA78B,EAAA6nB,EAAAiV,EANAn9B,EAAA,EACAyN,EAAA,EACAhM,EAAA4U,EAAAvT,OACA7C,EAAA,GACAkuB,EAAA,GACA7tB,EAAA,GAEUN,EAAAyB,EAAOzB,IAIjB,IAHAC,EAAAD,GAAA,GACAmuB,EAAAnuB,GAAA,GACAM,EAAAN,GAAA,GACAyN,EAAA,EAAiBA,EAAAhM,EAAOgM,IACxBzN,EAAAyN,GACAxN,EAAAD,GAAAyN,GAAA4I,EAAArW,GAAAyN,GACA0gB,EAAAnuB,GAAAyN,GAAAnN,EAAAN,GAAAyN,GAAA,GACSzN,EAAAyN,GACT0gB,EAAAnuB,GAAAyN,GAAA4I,EAAArW,GAAAyN,GACAxN,EAAAD,GAAAyN,GAAAnN,EAAAN,GAAAyN,GAAA,IAEAnN,EAAAN,GAAAyN,GAAA4I,EAAArW,GAAAyN,GACAxN,EAAAD,GAAAyN,GAAA0gB,EAAAnuB,GAAAyN,GAAA,GASA,IALAya,EAAAtU,EAAAqnB,SAAArnB,EAAAqnB,SAAArnB,EAAAwB,IAAA9U,GAAAsT,EAAAmnB,IAAA96B,EAAAkuB,KAAA,GACA9tB,EAAAuT,EAAAqnB,SAAArnB,EAAAwB,IAAA9U,GAAAiZ,GACA2jB,EAAA/vB,EACAgwB,EAAAvpB,EAAAmnB,IAAAnnB,EAAAqnB,SAAA/S,EAAA/a,GAAA9M,GACAL,EAAA,EACA8D,EAAAkD,IAAA4M,EAAA4nB,KAAA5nB,EAAAI,SAAAmpB,EAAAD,KAAAp8B,GACAo8B,EAAAC,EACAA,EAAAvpB,EAAAmnB,IAAAnnB,EAAAqnB,SAAA/S,EAAAgV,GAAA78B,GACAL,IAEA,OAAAm9B,GAGAC,aAAA,SAAA/mB,EAAAkD,EAAApM,EAAArM,GAOA,IANA,IAKA2M,EAAAyvB,EAAA78B,EAAA6nB,EAAAiV,EALAn9B,EAAA,EACAyB,EAAA4U,EAAAvT,OACA7C,EAAA,GACAkuB,EAAA,GACA7tB,EAAA,GAEUN,EAAAyB,EAAOzB,IAIjB,IAHAC,EAAAD,GAAA,GACAmuB,EAAAnuB,GAAA,GACAM,EAAAN,GAAA,GACAyN,EAAA,EAAiBA,EAAAhM,EAAOgM,IACxBzN,EAAAyN,GACAxN,EAAAD,GAAAyN,GAAA4I,EAAArW,GAAAyN,GACA0gB,EAAAnuB,GAAAyN,GAAAnN,EAAAN,GAAAyN,GAAA,GACSzN,EAAAyN,GACT0gB,EAAAnuB,GAAAyN,GAAA4I,EAAArW,GAAAyN,GACAxN,EAAAD,GAAAyN,GAAAnN,EAAAN,GAAAyN,GAAA,IAEAnN,EAAAN,GAAAyN,GAAA4I,EAAArW,GAAAyN,GACAxN,EAAAD,GAAAyN,GAAA0gB,EAAAnuB,GAAAyN,GAAA,GASA,IALAya,EAAAtU,EAAAqnB,SAAArnB,EAAAqnB,SAAArnB,EAAAwB,IAAAxB,EAAAmnB,IAAAz6B,EAAAL,IAAAkuB,IAAA,GACA9tB,EAAAuT,EAAAqnB,SAAArnB,EAAAwB,IAAAxB,EAAAmnB,IAAAz6B,EAAAL,IAAAsZ,GACA2jB,EAAA/vB,EACAgwB,EAAAvpB,EAAAmnB,IAAAnnB,EAAAqnB,SAAA/S,EAAA/a,GAAA9M,GACAL,EAAA,EACA8D,EAAAkD,IAAA4M,EAAA4nB,KAAA5nB,EAAAI,SAAAmpB,EAAAD,KAAAp8B,GACAo8B,EAAAC,EACAA,EAAAvpB,EAAAmnB,IAAAnnB,EAAAqnB,SAAA/S,EAAAgV,GAAA78B,GACAL,GAAA,EAEA,OAAAm9B,GAGAE,IAAA,SAAAhnB,EAAAkD,EAAApM,EAAArM,EAAA60B,GAOA,IANA,IAKAloB,EAAAyvB,EAAA78B,EAAA6nB,EAAAiV,EALAn9B,EAAA,EACAyB,EAAA4U,EAAAvT,OACA7C,EAAA,GACAkuB,EAAA,GACA7tB,EAAA,GAEUN,EAAAyB,EAAOzB,IAIjB,IAHAC,EAAAD,GAAA,GACAmuB,EAAAnuB,GAAA,GACAM,EAAAN,GAAA,GACAyN,EAAA,EAAiBA,EAAAhM,EAAOgM,IACxBzN,EAAAyN,GACAxN,EAAAD,GAAAyN,GAAA4I,EAAArW,GAAAyN,GACA0gB,EAAAnuB,GAAAyN,GAAAnN,EAAAN,GAAAyN,GAAA,GACSzN,EAAAyN,GACT0gB,EAAAnuB,GAAAyN,GAAA4I,EAAArW,GAAAyN,GACAxN,EAAAD,GAAAyN,GAAAnN,EAAAN,GAAAyN,GAAA,IAEAnN,EAAAN,GAAAyN,GAAA4I,EAAArW,GAAAyN,GACAxN,EAAAD,GAAAyN,GAAA0gB,EAAAnuB,GAAAyN,GAAA,GAYA,IARAya,EAAAtU,EAAAqnB,SAAArnB,EAAAwB,IAAAxB,EAAAmnB,IAAAz6B,EAAAsT,EAAAqnB,SAAAh7B,EAAA01B,KACA/hB,EAAAI,SAAAJ,EAAAqnB,SAAA36B,EAAA,EAAAq1B,GACA/hB,EAAAqnB,SAAA9M,EAAAwH,KACAt1B,EAAAuT,EAAAqnB,SAAArnB,EAAAqnB,SAAArnB,EAAAwB,IAAAxB,EAAAmnB,IAAAz6B,EACAsT,EAAAqnB,SAAAh7B,EAAA01B,KAAApc,GAAAoc,GACAuH,EAAA/vB,EACAgwB,EAAAvpB,EAAAmnB,IAAAnnB,EAAAqnB,SAAA/S,EAAA/a,GAAA9M,GACAL,EAAA,EACA8D,EAAAkD,IAAA4M,EAAA4nB,KAAA5nB,EAAAI,SAAAmpB,EAAAD,KAAAp8B,GACAo8B,EAAAC,EACAA,EAAAvpB,EAAAmnB,IAAAnnB,EAAAqnB,SAAA/S,EAAAgV,GAAA78B,GACAL,IAEA,OAAAm9B,GAGAG,YAAA,SAAAjnB,GAOA,IANA,IAKA1B,EAAA7T,EAAA+R,EAAApF,EALArN,EAAAiW,EAAAvT,OACArB,EAAA4U,EAAA,GAAAvT,OACA9C,EAAA,EACA21B,EAAA,GACA7zB,EAAA,GAEU9B,EAAAI,EAAA,EAAWJ,IAAA,CAErB,IADA2U,EAAA,EACAlH,EAAAzN,EAAA,EAAqByN,EAAAhM,EAAOgM,IAC5BkH,GAAA0B,EAAA5I,GAAAzN,GAAAqW,EAAA5I,GAAAzN,GAMA,IAJA2U,GADA0B,EAAArW,EAAA,GAAAA,GAAA,QACA8D,EAAAuD,KAAAsN,GACA7T,EAAAgD,EAAAuD,MAAAsN,IAAA0B,EAAArW,EAAA,GAAAA,GAAA2U,GAAA,IACAghB,EAAA/hB,EAAAud,MAAA/wB,EAAA,IACAJ,EAAA,OAAAqW,EAAArW,EAAA,GAAAA,GAAA2U,IAAA,EAAA7T,GACA+R,EAAA7S,EAAA,EAAqB6S,EAAAzS,EAAOyS,IAAA8iB,EAAA9iB,GAAA,GAAAwD,EAAAxD,GAAA7S,IAAA,EAAAc,GAC5BgB,EAAA8R,EAAAI,SAAAJ,EAAA0d,SAAAlxB,EAAAqB,GACAmS,EAAAqnB,SAAArnB,EAAAqnB,SAAAtF,EAAA/hB,EAAA5N,UAAA2vB,IAAA,IACAtf,EAAAzC,EAAAqnB,SAAAn5B,EAAA8R,EAAAqnB,SAAA5kB,EAAAvU,IAEA,OAAAuU,GAMAknB,IAOA5uB,EAAAiF,EAAAjF,IACA1B,EAAA2G,EAAA2c,OA+BA,SAAApjB,GAIA,IAMAnN,EAAAyN,EAAAoF,EANApR,EAAA0L,EAAArK,OACAhB,EAAAqL,EAAA,GAAArK,OAMA,IAJAqK,EAAAyG,EAAAqe,KAAA9kB,GACArM,EAAA8S,EAAAud,MAAArvB,KAGA2L,EAAA,EAAgBA,EAAA3L,EAAO2L,IAAA,CAIvB,IAHA3M,EAAA2M,MAAA3J,EAAAuD,KAAAsH,EAAA1B,EAAAxL,GAAAwE,IAAA,SAAAjG,GACA,OAAAmN,EAAAnN,GAAAyN,GAAAN,EAAAnN,GAAAyN,OAEAzN,EAAA,EAAkBA,EAAAyB,EAAOzB,IACzBmN,EAAAnN,GAAAyN,GAAAN,EAAAnN,GAAAyN,GAAA3M,EAAA2M,MAEA,IAAAoF,EAAApF,EAAA,EAAoBoF,EAAA/Q,EAAO+Q,IAI3B,IAHA/R,EAAA2M,GAAAoF,GAAAlE,EAAA1B,EAAAxL,GAAAwE,IAAA,SAAAjG,GACA,OAAAmN,EAAAnN,GAAAyN,GAAAN,EAAAnN,GAAA6S,MAEA7S,EAAA,EAAoBA,EAAAyB,EAAOzB,IAC3BmN,EAAAnN,GAAA6S,GAAA1F,EAAAnN,GAAA6S,GAAA1F,EAAAnN,GAAAyN,GAAA3M,EAAA2M,GAAAoF,GAIA,OAAA1F,EAAArM,KAMA08B,MA0BA,SAAA1oB,EAAAyE,GACA,IAAAkkB,GAAA,OACAj5B,IAAA+U,EAAA,GAAAzW,SAEAyW,IAAAtT,IAAA,SAAAkH,GAA8B,OAAAA,KAC9BswB,GAAA,GAEA,IAAAF,EAAA3pB,EAAA2pB,GAAAzoB,GACA4oB,EAAAH,EAAA,GACAR,EAAAQ,EAAA,GACAI,EAAA7oB,EAAA,GAAAhS,OACA86B,EAAAhqB,EAAAhO,MAAA83B,EAAA,CAA8Bx3B,IAAA,CAAKkb,IAAAuc,KAEnCE,EAnCA,SAAA/oB,GAEA,IAAA0c,GADA1c,EAAAlB,EAAAqe,KAAAnd,IACAhS,OACAmH,EAAA2J,EAAA0d,SAAAE,GAgBA,OAfA5d,EAAA2c,OAAAiB,EAAA,SAAAvS,QAAA,SAAAjf,GACA4T,EAAAye,YACApoB,EAAA,CAAgB9D,IAAAnG,GAAS4T,EAAAonB,OAAApnB,EAAAhO,MAAAqE,EAAA,CAA+B9D,IAAAnG,IAAS8U,EAAA9U,QACjE4T,EAAAye,YACAvd,EAAA,CAAgB3O,IAAAnG,GAAS4T,EAAAonB,OAAApnB,EAAAhO,MAAAkP,EAAA,CAA+B3O,IAAAnG,IAAS8U,EAAA9U,QACjE4T,EAAA2c,OAAAvwB,GAAAif,QAAA,SAAAxR,GACA,IAAApN,EAAAuT,EAAAqnB,SAAAnmB,EAAArH,GAAAzN,IAAA,GACA89B,EAAAlqB,EAAAhO,MAAAkP,EAAA,CAAmC3O,IAAAsH,IACnCswB,EAAAnqB,EAAAqnB,SAAArnB,EAAAhO,MAAAkP,EAAA,CAAmD3O,IAAAnG,IAASK,GAC5DuT,EAAAye,YAAAvd,EAAA,CAAgC3O,IAAAsH,GAASmG,EAAAmnB,IAAA+C,EAAAC,IACzC,IAAAC,EAAApqB,EAAAhO,MAAAqE,EAAA,CAAmC9D,IAAAsH,IACnCwwB,EAAArqB,EAAAqnB,SAAArnB,EAAAhO,MAAAqE,EAAA,CAAmD9D,IAAAnG,IAASK,GAC5DuT,EAAAye,YAAApoB,EAAA,CAAgC9D,IAAAsH,GAASmG,EAAAmnB,IAAAiD,EAAAC,QAGzCh0B,EAgBAi0B,CADAtqB,EAAAhO,MAAAm3B,EAAA,CAA8B52B,IAAA,CAAKib,IAAAuc,MAEnCQ,EAAAvqB,EAAA5N,UAAA43B,QAEAp5B,IAAA25B,EAAA,GAAAr7B,SACAq7B,EAAA,CAAAA,IAGA,IAAAhxB,EAAAyG,EAAAqnB,SAAArnB,EAAAqnB,SAAA4C,EAAAM,GAAA5kB,GAOA,YALA/U,IAAA2I,EAAArK,SACAqK,EAAA,EAAAA,KAIAswB,EACAtwB,EAAAlH,IAAA,SAAAjG,GAAiC,OAAAA,EAAA,KACjCmN,GAMAixB,OAAA,SAAA/nB,GAQA,IAPA,IAKA5I,EAAA3L,EAAAmxB,EAAAoL,EAAAC,EAAAv8B,EALA2Q,EAAA,EAEAjR,EAAA4U,EAAAvT,OACAy7B,EAAA3qB,EAAA0d,SAAA7vB,KACA+8B,EAAA,GAGA,IAAA9rB,GAAA,CAEA2rB,EAAAhoB,EAAA,MACAvU,EAAA,EACAmxB,EAAA,EACA,QAAAjzB,EAAA,EAAqBA,EAAAyB,EAAOzB,IAC5B,IAAAyN,EAAA,EAAmBA,EAAAhM,EAAOgM,IAC1BzN,GAAAyN,GACA4wB,EAAAv6B,EAAAkD,IAAAqP,EAAArW,GAAAyN,MACA4wB,EAAAv6B,EAAAkD,IAAAqP,EAAArW,GAAAyN,IACA3L,EAAA9B,EACAizB,EAAAxlB,GAmBA,IAbA6wB,EADAjoB,EAAAvU,QAAAuU,EAAA4c,MACA5c,EAAAvU,GAAAmxB,GAAA,EAAAnvB,EAAA4I,GAAA,GAAA5I,EAAA4I,GAAA,EAEA5I,EAAAyD,KAAA,EAAA8O,EAAAvU,GAAAmxB,IAAA5c,EAAAvU,MAAAuU,EAAA4c,QAAA,GACAlxB,EAAA6R,EAAA0d,SAAA7vB,MACAK,MAAAgC,EAAAgI,IAAAwyB,GACAv8B,EAAAD,GAAAmxB,IAAAnvB,EAAAwI,IAAAgyB,GACAv8B,EAAAkxB,GAAAnxB,GAAAgC,EAAAwI,IAAAgyB,GACAv8B,EAAAkxB,MAAAnvB,EAAAgI,IAAAwyB,GAEAC,EAAA3qB,EAAAqnB,SAAAsD,EAAAx8B,GAEAsU,EADAzC,EAAAqnB,SAAArnB,EAAAqnB,SAAArnB,EAAAwB,IAAArT,GAAAsU,GAAAtU,GAEA2Q,EAAA,EACA1S,EAAA,EAAqBA,EAAAyB,EAAOzB,IAC5B,IAAAyN,EAAA,EAAmBA,EAAAhM,EAAOgM,IAC1BzN,GAAAyN,GAAA3J,EAAAkD,IAAAqP,EAAArW,GAAAyN,IAAA,OACAiF,EAAA,GAKA,IAAA1S,EAAA,EAAmBA,EAAAyB,EAAOzB,IAAAw+B,EAAAj7B,KAAA8S,EAAArW,OAE1B,OAAAu+B,EAAAC,IAGAC,WAAA,SAAAC,EAAAxW,EAAApmB,EAAA68B,EAAAC,EAAAthB,GACA,IAAAuhB,EAAAC,EAAAC,EACA,OAAAzhB,EACA,KAAAqhB,GAAA78B,GAIA88B,KAHAC,EAAA3W,EAAAwW,EAAAC,EAAAC,KACAE,EAAA5W,EAAAwW,EAAAC,EAAAzW,EAAA0W,EAAAC,KACA,EAEAF,GAAAzW,EAGA,OAAA5K,EACA,KAAAqhB,GAAA78B,GAMA88B,KALAC,EAAA3W,EAAAwW,EAAAC,EAAAC,IAIA,GAHAE,EAAA5W,EAAAwW,EAAAC,EAAAzW,EAAA,EAAA0W,EAAAC,EAAA,IAGA,GAFAE,EAAA7W,EAAAwW,EAAAC,EAAAzW,EAAA,EAAA0W,EAAAE,EAAA,IACA5W,EAAAwW,EAAAC,EAAAzW,EAAA0W,EAAAG,IACA,EAEAJ,GAAAzW,EAGA,OAAA0W,GAGAI,QAAA,SAAAN,EAAAroB,EAAAkD,EAAA+D,GAOA,IANA,IAKAld,EAAA00B,EAAArnB,EAAAoF,EAAA5I,EALAjK,EAAA,EACAkoB,GAAA3O,EAAAlD,GAAA,EACAlJ,EAAA,GACA8xB,EAAA,GACAC,EAAA,GAEAl/B,EAAAsd,EAAA,IAEA,IADArT,EAAAy0B,EAAAroB,GACA5I,EAAA4I,EAAAxD,EAAA,EAAwBpF,GAAA8L,EAAQ9L,GAAAya,EAAArV,IAAA1F,EAAA0F,GAAApF,EAEhC,IADArN,EAAA+M,EAAArK,OACA2K,EAAA,EAAiBA,EAAArN,EAAA,EAAWqN,IAC5BxD,IAAAwD,EAAA,UAAAixB,EAAAvxB,EAAAM,IAEAxD,EAAAie,EAAA,GAAAje,EAAAy0B,EAAAnlB,IACA2lB,EAAAl/B,GAAAiK,EACAie,GAAA,EACAloB,IAIA,IAFA80B,EAAAoK,EAAAp8B,OACA1C,EAAA,EACA,IAAA00B,GAAA,CACA,IAAArnB,EAAA,EAAiBA,EAAAqnB,EAAA,EAAYrnB,IAC7BwxB,EAAAxxB,IAAA3J,EAAAmL,IAAA,EAAA7O,GAAA8+B,EAAAzxB,EAAA,GAAAyxB,EAAAzxB,KAAA3J,EAAAmL,IAAA,EAAA7O,GAAA,GACA00B,EAAAmK,EAAAn8B,OACAo8B,EAAAD,EACAA,EAAA,GACA7+B,IAEA,OAAA8+B,GAGAC,WAAA,SAAAt1B,EAAA60B,EAAAvxB,EAAA+a,GACA,SAAAkX,EAAAv1B,EAAAsD,GAIA,IAHA,IAEArL,EAFA9B,EAAA,EACAyB,EAAAoI,EAAA/G,OAEY9C,EAAAyB,EAAOzB,IACnB6J,EAAA7J,KAAAmN,IAAArL,EAAA9B,GACA,OAAA8B,EAEA+H,EAAA/G,OAMA,IANA,IAKAu8B,EAAA5C,EAAAr8B,EAAAiW,EAAA5I,EAJA6xB,EAAAx7B,EAAAkD,IAAAmG,EAAAtD,EAAAu1B,EAAAv1B,EAAAsD,GAAA,IACAnN,EAAA,EACAk/B,EAAA,GACAD,EAAA,GAEA/W,GAAAoX,GACAD,EAAAD,EAAAv1B,EAAAsD,EAAA+a,GACAuU,EAAA2C,EAAAv1B,EAAAsD,GACA+xB,EAAAl/B,IAAA0+B,EAAAW,GAAA,EAAAX,EAAAjC,GAAAiC,EAAA,EAAAjC,EAAA4C,KAAAnX,KACAA,GAAA,EACAloB,IAIA,IAFAqW,EAAA6oB,EAAAp8B,OACA1C,EAAA,EACA,GAAAiW,GAAA,CACA,IAAA5I,EAAA,EAAiBA,EAAA4I,EAAA,EAAW5I,IAC5BwxB,EAAAxxB,IAAA3J,EAAAmL,IAAA,EAAA7O,GAAA8+B,EAAAzxB,EAAA,GAAAyxB,EAAAzxB,KAAA3J,EAAAmL,IAAA,EAAA7O,GAAA,GACAiW,EAAA4oB,EAAAn8B,OACAo8B,EAAAD,EACAA,EAAA,GACA7+B,IAEA,OAAA8+B,GAGAK,QAAA,SAAAb,EAAAroB,EAAAkD,EAAA9X,GAQA,IAPA,IAMArB,EANA8nB,GAAA3O,EAAAlD,GAAA5U,EACAwI,EAAAy0B,EAAAroB,GACAlJ,EAAA,GACAM,EAAA4I,EACAxD,EAAA,EACA7S,EAAA,EAEUyN,GAAA8L,EAAQ9L,GAAAya,EAAArV,IAClB1F,EAAA0F,GAAApF,EAEA,IADArN,EAAA+M,EAAArK,OACU9C,EAAAI,EAAA,EAAWJ,IACrBiK,IAAAjK,EAAA,UAAA0+B,EAAAvxB,EAAAnN,IAEA,OAAAkoB,EAAA,GAAAje,EAAAy0B,EAAAnlB,KAGAimB,QAAA,SAAA31B,EAAAyO,EAAAmnB,EAAAx+B,GASA,IARA,IAOAwM,EAPAhM,EAAAoI,EAAA/G,OACAhB,EAAA,EACA9B,EAAA,EACAC,EAAA,GACAy/B,EAAA,GACA5qB,EAAA,GACAC,EAAA,GAEU/U,EAAAyB,EAAOzB,IAAA,CAEjB,IADAC,EAAAD,GAAA,EACAyN,EAAA,EAAiBA,EAAAhM,EAAOgM,IACxBzN,GAAAyN,IAAAxN,EAAAD,KAAAiB,EAAA4I,EAAA4D,KAAA5D,EAAA7J,GAAA6J,EAAA4D,KAGA,IADAiyB,EAAA1/B,GAAA,EACAyN,EAAA,EAAiBA,EAAAhM,EAAOgM,IACxBzN,GAAAyN,IAAAiyB,EAAA1/B,IAAA,GAAA6J,EAAA7J,GAAA6J,EAAA4D,KAEAqH,EAAA9U,IAAA,KAAAiB,EAAA4I,EAAA7J,IAAA0/B,EAAA1/B,KAAAC,EAAAD,GAAAC,EAAAD,IACA+U,EAAA/U,IAAAiB,EAAA4I,EAAA7J,KAAAC,EAAAD,GAAAC,EAAAD,IACA8B,GAAAgT,EAAA9U,GAAAsY,EAAAtY,GAAA+U,EAAA/U,GAAAy/B,EAAAz/B,GAEA,OAAA8B,GAGA69B,SAAA,SAAA91B,EAAAyO,EAAArX,GAKA,IAJA,IAEAwM,EAAAxN,EAFA6B,EAAA,EACA9B,EAAA,EAEAyB,EAAAoI,EAAA/G,OACU9C,EAAAyB,EAAOzB,IAAA,CAEjB,IADAC,EAAAqY,EAAAtY,GACAyN,EAAA,EAAiBA,EAAAhM,EAAOgM,IAExBzN,GAAAyN,IAAAxN,IAAAgB,EAAA4I,EAAA4D,KAAA5D,EAAA7J,GAAA6J,EAAA4D,KAGA3L,GAAA7B,EAEA,OAAA6B,GAGA89B,aAAA,SAAA/1B,EAAAyO,EAAArX,GAUA,IATA,IACAwM,EAIApN,EALAoB,EAAAoI,EAAA/G,OACA9C,EAAA,EACA8U,EAAA,GACAC,EAAA,GACAJ,EAAA,GAEAuT,EAAA,GACA3O,EAAA,GACAjZ,EAAA,GACUN,EAAAyB,EAAA,EAAWzB,IACrBkoB,EAAAloB,GAAA6J,EAAA7J,EAAA,GAAA6J,EAAA7J,GAEA,IADA2U,EAAA,KACA3U,EAAA,EAAmBA,EAAAyB,EAAA,EAAWzB,IAC9B2U,EAAA3U,GAAA,EAAAkoB,EAAAloB,IAAAsY,EAAAtY,EAAA,GAAAsY,EAAAtY,IACA,EAAAkoB,EAAAloB,EAAA,IAAAsY,EAAAtY,GAAAsY,EAAAtY,EAAA,IAEA,IAAAA,EAAA,EAAmBA,EAAAyB,EAAA,EAAWzB,IAC9B8U,EAAA9U,GAAA,GACA+U,EAAA/U,GAAA,GACA8U,EAAA9U,KAAA,GAAAkoB,EAAAloB,EAAA,GACA8U,EAAA9U,MAAA,GAAAkoB,EAAAloB,EAAA,GAAAkoB,EAAAloB,IACA8U,EAAA9U,KAAA,GAAAkoB,EAAAloB,GACA+U,EAAA/U,GAAA,GAAA2U,EAAA3U,GAGA,IADAK,EAAAuT,EAAAqnB,SAAArnB,EAAAwB,IAAAN,GAAAC,GACAtH,EAAA,EAAeA,EAAAhM,EAAA,EAAWgM,IAC1B8L,EAAA9L,IAAA6K,EAAA7K,EAAA,GAAA6K,EAAA7K,IAAAya,EAAAza,GAAAya,EAAAza,IAAApN,EAAAoN,EAAA,QAAApN,EAAAoN,GAAA,MACAnN,EAAAmN,IAAApN,EAAAoN,EAAA,MAAApN,EAAAoN,GAAA,OAAAya,EAAAza,IAEA,IAAAA,EAAA,EAAeA,EAAAhM,KACfoI,EAAA4D,GAAAxM,GADsBwM,KAItB,OAAA6K,EADA7K,GAAA,IACAxM,EAAA4I,EAAA4D,IAAA8L,EAAA9L,GAAAmG,EAAAisB,GAAA5+B,EAAA4I,EAAA4D,IACApN,EAAAoN,IAAAxM,EAAA4I,EAAA4D,IAAAmG,EAAAisB,GAAA5+B,EAAA4I,EAAA4D,IAAAnN,EAAAmN,IAGAqyB,iBAAA,WACA,UAAA79B,MAAA,yCAGA89B,IAAA,SAAAl2B,GACA,IAIA4D,EAAAuyB,EAGA98B,EAGA+8B,EAGAl2B,EAbA3J,EAAAyJ,EAAA/G,OACArB,EAAAoI,EAAA,GAAA/G,OAEA9C,EAAA,EAEAmuB,EAAA,GACA5kB,EAAA,GAEA22B,EAAA,GACAC,EAAA,GAEAprB,EAAA,GACAtL,EAAA,GAEA22B,EAAA,GACA,IAAApgC,EAAA,EAAmBA,EAAAI,EAAOJ,IAC1BmuB,EAAAnuB,GAAA4T,EAAAjF,IAAA9E,EAAA7J,IAAAyB,EAEA,IAAAzB,EAAA,EAAmBA,EAAAyB,EAAOzB,IAE1B,IADA+U,EAAA/U,GAAA,GACAyN,EAAA,EAAgBA,EAAArN,EAAOqN,IACvBsH,EAAA/U,GAAAyN,GAAA5D,EAAA4D,GAAAzN,GAAAmuB,EAAA1gB,GAIA,IADAsH,EAAAnB,EAAA5N,UAAA+O,GACA/U,EAAA,EAAmBA,EAAAI,EAAOJ,IAE1B,IADAyJ,EAAAzJ,GAAA,GACAyN,EAAA,EAAiBA,EAAArN,EAAOqN,IACxBhE,EAAAzJ,GAAAyN,GAAAmG,EAAAynB,IAAA,CAAAtmB,EAAA/U,IAAA,CAAA+U,EAAAtH,MAAAhM,EAAA,GAOA,IAHAsI,GADA7G,EAAA0Q,EAAAwqB,OAAA30B,IACA,GACAF,EAAArG,EAAA,GACAk9B,EAAAxsB,EAAA5N,UAAA+D,GACA/J,EAAA,EAAmBA,EAAAuJ,EAAAzG,OAAc9C,IACjC,IAAAyN,EAAAzN,EAAiByN,EAAAlE,EAAAzG,OAAc2K,IAC/BlE,EAAAvJ,GAAAuJ,EAAAkE,KACAuyB,EAAAz2B,EAAAvJ,GACAuJ,EAAAvJ,GAAAuJ,EAAAkE,GACAlE,EAAAkE,GAAAuyB,EACAE,EAAAE,EAAApgC,GACAogC,EAAApgC,GAAAogC,EAAA3yB,GACA2yB,EAAA3yB,GAAAyyB,GAKA,IADAD,EAAArsB,EAAA5N,UAAA+O,GACA/U,EAAA,EAAmBA,EAAAI,EAAOJ,IAE1B,IADAmgC,EAAAngC,GAAA,GACAyN,EAAA,EAAiBA,EAAAwyB,EAAAn9B,OAAe2K,IAChC0yB,EAAAngC,GAAAyN,GAAAmG,EAAAynB,IAAA,CAAA+E,EAAApgC,IAAA,CAAAigC,EAAAxyB,KAGA,OAAA5D,EAAAN,EAAA62B,EAAAD,MAKA,SAAAtR,GACA,QAAA7uB,EAAA,EAAiBA,EAAA6uB,EAAA/rB,OAAkB9C,KAAA,SAAA8uB,GACnClb,EAAAkc,GAAAhB,GAAA,SAAArE,EAAAuE,GACA,IAAAC,EAAAxrB,KAEA,OAAAurB,GACAE,WAAA,WACAF,EAAA7uB,KAAA8uB,EAAArb,EAAAkc,GAAAhB,GAAA3uB,KAAA8uB,EAAAxE,KACS,IACThnB,MAEA,iBAAAmQ,EAAAkb,GAAArrB,KAAAgnB,GACA7W,EAAAkb,GAAArrB,KAAAgnB,GAEA7W,IAAAkb,GAAArrB,KAAAgnB,KAbmC,CAehCoE,EAAA7uB,IAhBH,CAiBC,8DAAA8P,MAAA,MA5+BD,CA8+BC8D,EAAA9P,MACD,SAAA8P,EAAA9P,GAEA,IAAA8B,EAAA,GAAAA,MACA6pB,EAAA7b,EAAAhN,MAAA6oB,SACAzsB,EAAA4Q,EAAAhN,MAAA5D,QA4TA,SAAAq9B,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAH,EAAA,GAAAE,EAAA,GAAAF,GAAA,GAAAE,GAAA,EACA,UAAAv+B,MAAA,wDAEA,IAAAy+B,GAAAJ,EAAAC,EAAAC,EAAAC,IAAAF,EAAAE,GAEA,OAAAH,EAAAE,GADA18B,EAAAuD,KAAAq5B,GAAA,EAAAA,IAAA,EAAAH,EAAA,EAAAE,IA7TA7sB,EAAAsc,OAAA,CAIAyQ,OAAA,WACA,IAAAt9B,EAAAuC,EAAAzF,KAAAiD,WACA,OAAAqsB,EAAApsB,EAAA,KACAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IAEAA,EAAA,GAAAuQ,EAAAK,KAAA5Q,EAAA,KAAAuQ,EAAAwH,MAAA/X,EAAA,GAAAA,EAAA,KAOAu9B,MAAA,WACA,IACA5mB,EADA3W,EAAAuC,EAAAzF,KAAAiD,WAEA,OAAAJ,EAAAK,EAAA,KAEA2W,EAAApG,EAAA+sB,OAAAt9B,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,IAAAA,EAAA,GACAuQ,EAAAqG,OAAAjF,KAAAlR,EAAAkD,IAAAgT,GAAA,KACA,EAAApG,EAAAqG,OAAAjF,KAAAlR,EAAAkD,IAAAgT,GAAA,MAEA3W,EAAAP,OAAA,GAEAkX,EAAApG,EAAA+sB,OAAAt9B,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,IAAAA,EAAA,GACAuQ,EAAAqG,OAAAjF,KAAAlR,EAAAkD,IAAAgT,GAAA,KACA,EAAApG,EAAAqG,OAAAjF,KAAAlR,EAAAkD,IAAAgT,GAAA,OAGAA,EAAA3W,EAAA,GACA,IAAAA,EAAA,GACAuQ,EAAAqG,OAAAjF,KAAAlR,EAAAkD,IAAAgT,GAAA,KACA,EAAApG,EAAAqG,OAAAjF,KAAAlR,EAAAkD,IAAAgT,GAAA,SAMApG,EAAAsc,OAAAtc,EAAAkc,GAAA,CACA6Q,OAAA,SAAA1/B,EAAAorB,GACA,OAAAprB,EAAAwC,KAAAwQ,QAAAxQ,KAAA2X,MAAAiR,IAGAuU,MAAA,SAAA3/B,EAAA4/B,EAAAxU,GACA,IAAAsU,EAAA78B,EAAAkD,IAAAvD,KAAAk9B,OAAA1/B,EAAAorB,IACA,WAAAwU,EACAjtB,EAAAqG,OAAAjF,KAAA2rB,EAAA,KACA,EAAA/sB,EAAAqG,OAAAjF,KAAA2rB,EAAA,QAKA/sB,EAAAsc,OAAA,CAIA4Q,OAAA,WACA,IAAAz9B,EAAAuC,EAAAzF,KAAAiD,WACA,WAAAC,EAAAP,QACAO,EAAA,GAAAA,EAAA,KAAAA,EAAA,GAAAS,EAAAuD,KAAAhE,EAAA,MACAA,EAAA,GAAAuQ,EAAAK,KAAA5Q,EAAA,MACAuQ,EAAAwH,MAAA/X,EAAA,OAAAS,EAAAuD,KAAAhE,EAAA,GAAAP,UAOAi+B,MAAA,WACA,IACAD,EADAz9B,EAAAuC,EAAAzF,KAAAiD,WAEA,WAAAC,EAAAP,QACAg+B,EAAAh9B,EAAAkD,IAAA4M,EAAAktB,OAAAz9B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACA,IAAAA,EAAA,GACAuQ,EAAA6K,SAAAzJ,KAAA8rB,EAAAz9B,EAAA,MACA,EAAAuQ,EAAA6K,SAAAzJ,KAAA8rB,EAAAz9B,EAAA,OAEAosB,EAAApsB,EAAA,KACAy9B,EAAAh9B,EAAAkD,IAAA3D,EAAA,IACA,GAAAA,EAAA,GACAuQ,EAAA6K,SAAAzJ,KAAA8rB,EAAAz9B,EAAA,MACA,EAAAuQ,EAAA6K,SAAAzJ,KAAA8rB,EAAAz9B,EAAA,QAEAy9B,EAAAh9B,EAAAkD,IAAA4M,EAAAktB,OAAAz9B,EAAA,GAAAA,EAAA,KACA,GAAAA,EAAA,GACAuQ,EAAA6K,SAAAzJ,KAAA8rB,EAAAz9B,EAAA,GAAAP,OAAA,GACA,EAAA8Q,EAAA6K,SAAAzJ,KAAA8rB,EAAAz9B,EAAA,GAAAP,OAAA,OAIA8Q,EAAAsc,OAAAtc,EAAAkc,GAAA,CACAgR,OAAA,SAAA7/B,GACA,OAAAA,EAAAwC,KAAAwQ,SAAAxQ,KAAA2X,OAAA,GAAAtX,EAAAuD,KAAA5D,KAAAgT,UAGAsqB,MAAA,SAAA9/B,EAAA4/B,GACA,WAAAA,EACA,EAAAjtB,EAAA6K,SAAAzJ,IAAAlR,EAAAkD,IAAAvD,KAAAq9B,OAAA7/B,IAAAwC,KAAAgT,OAAA,GACA,EAAA7C,EAAA6K,SAAAzJ,KAAAlR,EAAAkD,IAAAvD,KAAAq9B,OAAA7/B,IAAAwC,KAAAgT,OAAA,MAKA7C,EAAAsc,OAAA,CAKA8Q,YAAA,WACA,IACAC,EAAArJ,EAAAsJ,EAAAC,EAAAC,EAAAC,EAAA5zB,EADApK,EAAAuC,EAAAzF,KAAAiD,WAEA,OAAAC,EAAAP,OAAA,CACAs+B,EAAA,IAAAr+B,MAAAM,EAAA,GAAAP,QACA,QAAA9C,EAAA,EAAqBA,EAAAqD,EAAA,GAAAP,OAAoB9C,IACzCohC,EAAAphC,GAAAqD,EAAA,GAAArD,GAEAqD,EAAA+9B,EAGA,OAAA/9B,EAAAP,OACA,OAAA8Q,EAAAwY,SAAA/oB,EAAA,IAAAuQ,EAAAwY,SAAA/oB,EAAA,IAIA,IADAu0B,EAAA,IAAA70B,MACA/C,EAAA,EAAmBA,EAAAqD,EAAAP,OAAiB9C,IACpC43B,IAAAj1B,OAAAU,EAAArD,IAKA,IAHAkhC,EAAAttB,EAAAK,KAAA2jB,GAEAqJ,EAAA,EACAjhC,EAAA,EAAmBA,EAAAqD,EAAAP,OAAiB9C,IACpCihC,GAAA59B,EAAArD,GAAA8C,OAAAgB,EAAAmL,IAAA2E,EAAAK,KAAA5Q,EAAArD,IAAAkhC,EAAA,GAKA,IAHAD,GAAA59B,EAAAP,OAAA,EAEAu+B,EAAA,EACArhC,EAAA,EAAmBA,EAAAqD,EAAAP,OAAiB9C,IAEpC,IADAmhC,EAAAvtB,EAAAK,KAAA5Q,EAAArD,IACAyN,EAAA,EAAiBA,EAAApK,EAAArD,GAAA8C,OAAoB2K,IACrC4zB,GAAAv9B,EAAAmL,IAAA5L,EAAArD,GAAAyN,GAAA0zB,EAAA,GAIA,OAAAF,GADAI,GAAAzJ,EAAA90B,OAAAO,EAAAP,SAOAw+B,WAAA,WACA,IACAvJ,EAAAC,EAAAv2B,EADA4B,EAAAuC,EAAAzF,KAAAiD,WAEA,GAAAqsB,EAAApsB,EAAA,IACA,SAAAuQ,EAAA6E,SAAAzD,IAAA3R,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEA29B,YAAAptB,EAAAotB,YAAA39B,GACA00B,EAAA10B,EAAAP,OAAA,EACArB,EAAA,EACA,QAAAzB,EAAA,EAAmBA,EAAAqD,EAAAP,OAAiB9C,IACpCyB,GAAA4B,EAAArD,GAAA8C,OAGA,OADAk1B,EAAAv2B,EAAAs2B,EAAA,EACA,EAAAnkB,EAAA6E,SAAAzD,IAAAgsB,YAAAjJ,EAAAC,IAGAuJ,MAAA,SAAAC,EAAAzJ,EAAAC,GACA,SAAApkB,EAAA6E,SAAAzD,IAAAwsB,EAAAzJ,EAAAC,MAIApkB,EAAAsc,OAAAtc,EAAAkc,GAAA,CACAkR,YAAA,WACA,OAAAptB,EAAAotB,YAAAv9B,KAAAusB,YAGAyR,UAAA,WAGA,IAFA,IAAAhgC,EAAA,EAEAzB,EAAA,EAAmBA,EAAAyD,KAAAX,OAAiB9C,IACpCyB,GAAAgC,KAAAzD,GAAA8C,OAEA,OAAA8Q,EAAA2tB,MAAA99B,KAAAu9B,cAAAv9B,KAAAX,OAAA,EAAArB,EAAAgC,KAAAX,WAKA8Q,EAAAsc,OAAA,CAIAwR,OAAA,WACA,IACA3pB,EAAAC,EAAAuoB,EAAAE,EAAA7pB,EADAvT,EAAAuC,EAAAzF,KAAAiD,WAeA,OAbAqsB,EAAApsB,EAAA,KACA0U,EAAA1U,EAAA,GACA2U,EAAA3U,EAAA,GACAk9B,EAAAl9B,EAAA,GACAo9B,EAAAp9B,EAAA,GACAuT,EAAAvT,EAAA,KAEA0U,EAAAnE,EAAAK,KAAA5Q,EAAA,IACA2U,EAAApE,EAAAK,KAAA5Q,EAAA,IACAk9B,EAAAl9B,EAAA,GAAAP,OACA29B,EAAAp9B,EAAA,GAAAP,OACA8T,EAAAvT,EAAA,IAEAS,EAAAkD,IAAA+Q,EAAAC,IAAApB,EAAA9S,EAAAuD,MAAA,EAAAk5B,EAAA,EAAAE,GAAA,KAOAkB,MAAA,WACA,IAEAD,EAFAr+B,EAAAuC,EAAAzF,KAAAiD,WAGA,IAAAC,EAAAP,QACA4+B,EAAAr+B,EAAA,GACAA,IAAAuC,MAAA,IACK,IAAAvC,EAAAP,QACL4+B,EAAA9tB,EAAA8tB,OAAAr+B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAA,IAAAuC,MAAA,KAEA87B,EAAA9tB,EAAA8tB,OAAAr+B,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAA,IAAAuC,MAAA,IAGA,IAAAnE,EAAA4B,EAAA,GACAwP,EAAAxP,EAAA,GAEA,SAAAuQ,EAAA+lB,MAAA3kB,IAAA0sB,EAAA7uB,EAAApR,EAAAoR,IAGA+uB,SAAA,SAAA5uB,GAMA,IALA,IAAA4D,EAAAhD,EAAA8Y,YAAA1Z,GACA6uB,EAAA7uB,EAAA/M,IAAA,SAAAtB,GAA2C,OAAAiP,EAAAK,KAAAtP,KAC3ClD,EAAAuR,EAAAtQ,OAAA,SAAAjB,EAAAkD,GAA6C,OAAAlD,EAAAkD,EAAA7B,QAAuB,GAEpE6U,EAAA,GACA3X,EAAA,EAAmBA,EAAAgT,EAAAlQ,SAAmB9C,EACtC,QAAAyN,EAAAzN,EAAA,EAA2ByN,EAAAuF,EAAAlQ,SAAmB2K,EAAA,CAC9C,IAAA3L,EAAA8R,EAAA+tB,MAAAE,EAAA7hC,GAAA6hC,EAAAp0B,GAAAuF,EAAAhT,GAAA8C,OAAAkQ,EAAAvF,GAAA3K,OAAA8T,EAAAnV,EAAAuR,EAAAlQ,QACA6U,EAAApU,KAAA,EAAAvD,EAAAyN,GAAA3L,IAIA,OAAA6V,KAKA/D,EAAAsc,OAAA,CAIArZ,SAAA,WACA,IAEAirB,EAFAz+B,EAAAuC,EAAAzF,KAAAiD,WACAg3B,EAAA,IAAAr3B,MAAA,GAWA,OARA++B,EADA,IAAAz+B,EAAAP,OACAgB,EAAAkD,IAAA4M,EAAAqG,OAAA7E,IAAA/R,EAAA,UACAA,EAAA,GAAAS,EAAAuD,KAAAhE,EAAA,KAEAS,EAAAkD,IAAA4M,EAAAqG,OAAA7E,IAAA/R,EAAA,UACAuQ,EAAAwH,MAAA/X,EAAA,IAAAS,EAAAuD,KAAAhE,EAAA,GAAAP,SAEAs3B,EAAA,GAAA/2B,EAAA,GAAAy+B,EACA1H,EAAA,GAAA/2B,EAAA,GAAAy+B,EACA1H,GAMArjB,IAAA,WACA,IAEA+qB,EAFAz+B,EAAAuC,EAAAzF,KAAAiD,WACAg3B,EAAA,IAAAr3B,MAAA,GAWA,OARA++B,EADA,IAAAz+B,EAAAP,OACAgB,EAAAkD,IAAA4M,EAAA6K,SAAArJ,IAAA/R,EAAA,KAAAA,EAAA,MACAA,EAAA,GAAAS,EAAAuD,KAAAhE,EAAA,KAEAS,EAAAkD,IAAA4M,EAAA6K,SAAArJ,IAAA/R,EAAA,KAAAA,EAAA,GAAAP,OAAA,GACA8Q,EAAAwH,MAAA/X,EAAA,OAAAS,EAAAuD,KAAAhE,EAAA,GAAAP,SAEAs3B,EAAA,GAAA/2B,EAAA,GAAAy+B,EACA1H,EAAA,GAAA/2B,EAAA,GAAAy+B,EACA1H,GAGA2H,YAAA,SAAAC,EAAArtB,GACA,OAAAqtB,EAAArtB,KAIAf,EAAAsc,OAAAtc,EAAAkc,GAAA,CACAjZ,SAAA,SAAA5V,EAAA0T,GACA,OAAAf,EAAAiD,SAAA5V,EAAA0T,EAAAlR,KAAAusB,YAGAjZ,IAAA,SAAA9V,EAAA0T,GACA,OAAAf,EAAAmD,IAAA9V,EAAA0T,EAAAlR,KAAAusB,cAeApc,EAAAsc,OAAAtc,EAAAkc,GAAA,CACAmS,gCAAA,SAAA3B,EAAAC,EAAAC,EAAAC,GACA,IAAAzmB,EAAAqmB,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAA7sB,EAAAgtB,MAAA5mB,EAAA,IAGAkoB,gCAAA,SAAA5B,EAAAC,EAAAC,EAAAC,GACA,IAAAzmB,EAAAqmB,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAA7sB,EAAAgtB,MAAA5mB,EAAA,MAlVA,CAsVCpG,EAAA9P,MACD8P,EAAAuuB,OAAA,WAqBA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAAv/B,OACA0/B,EAAAF,EAAA,GAAAx/B,OAAA,EACA2/B,EAAAF,EAAAC,EAAA,EACAE,EAAA9uB,EAAA4pB,MAAA8E,EAAAD,GACAM,EACA/uB,EAAAqnB,SAAAqH,EAAAI,EAAAz8B,IAAA,SAAAkH,GAAmD,OAAAA,MACnDlH,IAAA,SAAAnE,GAA8B,OAAAA,EAAA,KAC9B8gC,EAAAhvB,EAAAI,SAAAquB,EAAAM,GACAE,EAAAjvB,EAAAK,KAAAouB,GAKAS,EAAAlvB,EAAAjF,IAAAg0B,EAAA18B,IAAA,SAAAy4B,GACA,OAAA56B,KAAAmL,IAAAyvB,EAAAmE,EAAA,MAEAE,EAAAnvB,EAAAjF,IAAA0zB,EAAAp8B,IAAA,SAAAoH,EAAArN,GACA,OAAA8D,KAAAmL,IAAA5B,EAAAs1B,EAAA3iC,GAAA,MAEAgjC,EAAAF,EAAAC,EAEA,OACAT,OACAD,QACAE,OACAC,WACAC,WACAC,OACAC,UACAC,QACAC,OACAG,MACAF,MACAC,MACAE,GAdAH,EAAAE,GAoBA,SAAAE,EAAAC,GACA,IAzDAb,EACAc,EAwDAC,GAzDAf,EAyDAa,EAAAb,KAxDAc,EAAAd,EAAA,GAAAx/B,OACA8Q,EAAA2c,OAAA6S,GAAAn9B,IAAA,SAAAq9B,GACA,IAAAC,EACA3vB,EAAA2c,OAAA6S,GAAA1/B,OAAA,SAAA1D,GAAqD,OAAAA,IAAAsjC,IACrD,OAAAlB,EAAAxuB,EAAA1N,IAAAo8B,EAAAgB,GAAAr9B,IAAA,SAAAkH,GAA8D,OAAAA,EAAA,KAC9DyG,EAAA1N,IAAAo8B,EAAAiB,OAqDAC,EAAA1/B,KAAAuD,KAAA87B,EAAAJ,IAAAI,EAAA,UACAM,EAAAJ,EAAAp9B,IAAA,SAAAy9B,GACA,IAAAV,EAAAU,EAAAV,IACAC,EAAAS,EAAAT,GACA,OAAAO,EAAA1/B,KAAAuD,KAAA27B,GAAA,EAAAC,MAEAU,EAAAR,EAAAT,KAAAz8B,IAAA,SAAAy8B,EAAA1iC,GACA,OAAA0iC,EAAA,GAAAe,EAAAzjC,KAEA4jC,EAAAD,EAAA19B,IAAA,SAAA/E,GACA,IAAA2iC,EAAAjwB,EAAA6K,SAAAzJ,IAAA9T,EAAAiiC,EAAAV,UACA,UAAAoB,EAAA,KAAAA,OAEAxjC,EAAAuT,EAAA6K,SAAArJ,IAAA,KAAA+tB,EAAAV,UACAqB,EAAAX,EAAAT,KAAAz8B,IAAA,SAAAy8B,EAAA1iC,GACA,IAAAM,EAAAD,EAAAojC,EAAAzjC,GACA,OAAA0iC,EAAApiC,EAAAoiC,EAAApiC,KAEA,OACAyjC,GAAAN,EACAviC,EAAAyiC,EACA7hC,EAAA8hC,EACAJ,WACAM,cA4BA,OAAU1B,IAdV,SAAAC,EAAAC,GACA,IAAAa,EAAAf,EAAAC,EAAAC,GACAvB,EAAAmC,EAAAC,GACA5B,EAbA,SAAA4B,GACA,IAEAh2B,EAAAozB,EAAAE,EAFAuD,EACAb,EAAAF,GAAAE,EAAAX,WAAA,EAAAW,EAAAF,IAAAE,EAAAV,UAKA,OAAYuB,cAAAhC,OADZ,GAHA70B,EAGA62B,EAHAzD,EAGA4C,EAAAX,SAHA/B,EAGA0C,EAAAV,SAFA7uB,EAAAgB,KAAAI,IAAA7H,GAAAszB,EAAAF,EAAApzB,GAAAozB,EAAA,EAAAE,EAAA,KASAwD,CAAAd,GAGAe,EACA,KAAAf,EAAAF,MAAAE,EAAAZ,KAAA,GAAAY,EAAA,UAIA,OAHAA,EAAAjiC,EAAA6/B,EACAoC,EAAAzE,EAAA6C,EACA4B,EAAAe,YACAf,IAjHA,GAuHAvvB,UAEAA,oBCvlJA,IAAAhN,EAAY9G,EAAQ,GACpBwC,EAAYxC,EAAQ,GAEpBN,EAAAqY,OAAA,WAEA,IADA,IAAA3U,EAAA,GACAlD,EAAA,EAAiBA,EAAAoD,UAAAN,SAAsB9C,EAAA,CAKvC,IAJA,IAAAmkC,GAAA,EACA7sB,EAAAlU,UAAApD,GAGAyN,EAAA,EAAmBA,EAAAvK,EAAAJ,UACnBqhC,EAAAjhC,EAAAuK,KAAA6J,KADsC7J,GAMtC02B,GACAjhC,EAAAK,KAAA+T,GAGA,OAAApU,GAGA1D,EAAA4kC,QAAAx9B,EAAA3D,QAEAzD,EAAA6kC,WAAA,WACA,OAAAthC,MAAAnB,UAAAgE,MAAAzF,KAAAiD,UAAA,IAGA5D,EAAA8kC,UAAA,SAAAC,EAAAC,GACA,IAAAphC,UAAAN,OACA,OAAAR,QAEA,IAGA,IAFA,IAAAmiC,EAAAD,EAAA10B,MAAA,KACA5M,EAAAqhC,EACAvkC,EAAA,EAAmBA,EAAAykC,EAAA3hC,SAAiB9C,EAAA,CACpC,IAAA4xB,EAAA6S,EAAAzkC,GACA,SAAA4xB,IAAA9uB,OAAA,IACA,IAAA4hC,EAAA9S,EAAAjrB,QAAA,KACAZ,EAAA6rB,EAAA9Q,UAAA4jB,EAAA,EAAA9S,EAAA9uB,OAAA,GACAI,IAAA0uB,EAAA9Q,UAAA,EAAA4jB,IAAA3+B,QAEA7C,IAAA0uB,GAGA,OAAA1uB,EACG,MAAAZ,MAGH9C,EAAAmlC,KAAA,SAAAliC,EAAAmgB,GACA,OAAAngB,EAAAuI,KAAA4X,IAGApjB,EAAAolC,QAAA,WAEA,OADAh+B,EAAA3D,QAAAG,WACAM,OAAA,SAAAC,GACA,uBAAAA,sBCzDA,IAAArB,EAAYxC,EAAQ,GACpB8T,EAAY9T,EAAQ,GAAO8T,MAC3BzK,EAAWrJ,EAAQ,GACnB8G,EAAY9G,EAAQ,GACpB+kC,EAAa/kC,EAAQ,IAErB,SAAAglC,EAAAjhC,GACA,qBAAsBuF,KAAAvF,GAGtBrE,EAAAulC,QAAA,SAAA53B,EAAA1L,GAGA,OAFA0L,EAAAvG,EAAAtC,YAAA6I,GACA1L,EAAAmF,EAAAtC,YAAA7C,GACAmF,EAAApB,WAAA2H,EAAA1L,GACAa,EAAArB,MAGA4jC,EAAAG,QAAA73B,EAAA1L,IAGAjC,EAAAylC,QAAA,SAAA93B,EAAA1L,GAGA,OAFA0L,EAAAvG,EAAAtC,YAAA6I,GACA1L,EAAAmF,EAAAtC,YAAA7C,GACAmF,EAAApB,WAAA2H,EAAA1L,GACAa,EAAArB,MAGA4jC,EAAAK,QAAA/3B,EAAA1L,IAGAjC,EAAA2lC,QAAA,SAAAh4B,EAAA1L,GAGA,OAFA0L,EAAAvG,EAAAtC,YAAA6I,GACA1L,EAAAmF,EAAAtC,YAAA7C,GACAmF,EAAApB,WAAA2H,EAAA1L,GACAa,EAAArB,MAGA4jC,EAAAO,QAAAj4B,EAAA1L,IAGAjC,EAAA6lC,QAAA,SAAAl4B,EAAA1L,GAGA,OAFA0L,EAAAvG,EAAAtC,YAAA6I,GACA1L,EAAAmF,EAAAtC,YAAA7C,GACAmF,EAAApB,WAAA2H,EAAA1L,GACAa,EAAArB,MAGA4jC,EAAAS,QAAAn4B,EAAA1L,IAGAjC,EAAA+lC,QAAA,SAAA1hC,GAEA,IAAAihC,EAAAjhC,GACA,OAAAvB,EAAAF,IAIA,IAAAc,EAAAmC,SAAAxB,EAAA,GAGA2hC,EAAA3hC,EAAAiH,WACA,YAAA06B,EAAA1iC,QAAA,MAAA0iC,EAAA1kB,UAAA,KACAzb,SAAAmgC,EAAA1kB,UAAA,UAEA5d,GAKA1D,EAAAimC,QAAA,SAAA5hC,EAAA6hC,GAEA,IAAAZ,EAAAjhC,GACA,OAAAvB,EAAAF,IAIA,IAAAojC,EAAA3hC,EAAAiH,WACA,QAAA06B,EAAA1iC,QAAA,MAAA0iC,EAAA1kB,UAAA,KACA,oBAAAzb,SAAAmgC,EAAA1kB,UAAA,OAAAhW,SAAA,IAIA,IAAA5H,EAAAmC,SAAAxB,EAAA,GAAAiH,SAAA,IAGA,YAAAtG,IAAAkhC,EACAxiC,EAGAmB,MAAAqhC,GACApjC,EAAArB,MAIAykC,EAAA,EACApjC,EAAAF,KAIAsjC,EAAA5hC,KAAAsH,MAAAs6B,KAGAxiC,EAAAJ,OAAAqG,EAAAoZ,KAAA,IAAAmjB,EAAAxiC,EAAAJ,QAAAI,EAAAZ,EAAAF,KAIA5C,EAAAmmC,QAAA,SAAA9hC,EAAA6hC,GAEA,IAAAZ,EAAAjhC,GACA,OAAAvB,EAAAF,IAIA,IAAAojC,EAAA3hC,EAAAiH,WACA,QAAA06B,EAAA1iC,QAAA,MAAA0iC,EAAA1kB,UAAA,KACA,kBAAAzb,SAAAmgC,EAAA1kB,UAAA,OAAAhW,SAAA,GAIA,IAAA5H,EAAAmC,SAAAxB,EAAA,GAAAiH,SAAA,GAGA,YAAAtG,IAAAkhC,EACAxiC,EAGAmB,MAAAqhC,GACApjC,EAAArB,MAIAykC,EAAA,EACApjC,EAAAF,KAIAsjC,EAAA5hC,KAAAsH,MAAAs6B,KAGAxiC,EAAAJ,OAAAqG,EAAAoZ,KAAA,IAAAmjB,EAAAxiC,EAAAJ,QAAAI,EAAAZ,EAAAF,KAIA5C,EAAAomC,OAAA,SAAAC,EAAAC,GAIA,OAFAD,EAAAj/B,EAAAtC,YAAAuhC,GACAC,EAAAl/B,EAAAtC,YAAAwhC,GACAl/B,EAAApB,WAAAqgC,EAAAC,GACAxjC,EAAArB,MAIA4kC,EAAA,GAAAC,EAAA,EACAxjC,EAAAF,IAIA0B,KAAAsH,MAAAy6B,QAAA/hC,KAAAsH,MAAA06B,OACAxjC,EAAAF,IAIAyjC,EAAA,gBAAAC,EAAA,eACAxjC,EAAAF,IAIAyjC,EAAAC,GAGAtmC,EAAAumC,UAAA,SAAAliC,EAAA0O,GAGA,OAFA1O,EAAA+C,EAAAtC,YAAAT,GACA0O,EAAA3L,EAAAtC,YAAAiO,GACA3L,EAAApB,WAAA3B,EAAA0O,GACAjQ,EAAArB,MAIA4C,EAAA,EACAvB,EAAAF,IAIA0B,KAAAsH,MAAAvH,OACAvB,EAAAF,IAIAyB,EAAA,eACAvB,EAAAF,IAIA0B,KAAAkD,IAAAuL,GAAA,GACAjQ,EAAAF,IAIAmQ,GAAA,EAAA1O,GAAA0O,EAAA1O,IAAA0O,GAGA/S,EAAAwmC,MAAA,SAAAH,EAAAC,GAGA,OAFAD,EAAAj/B,EAAAtC,YAAAuhC,GACAC,EAAAl/B,EAAAtC,YAAAwhC,GACAl/B,EAAApB,WAAAqgC,EAAAC,GACAxjC,EAAArB,MAIA4kC,EAAA,GAAAC,EAAA,EACAxjC,EAAAF,IAIA0B,KAAAsH,MAAAy6B,QAAA/hC,KAAAsH,MAAA06B,OACAxjC,EAAAF,IAIAyjC,EAAA,gBAAAC,EAAA,eACAxjC,EAAAF,IAIAyjC,EAAAC,GAGAtmC,EAAAymC,UAAA,SAAApiC,EAAA0O,GAGA,OAFA1O,EAAA+C,EAAAtC,YAAAT,GACA0O,EAAA3L,EAAAtC,YAAAiO,GACA3L,EAAApB,WAAA3B,EAAA0O,GACAjQ,EAAArB,MAIA4C,EAAA,EACAvB,EAAAF,IAIA0B,KAAAsH,MAAAvH,OACAvB,EAAAF,IAIAyB,EAAA,eACAvB,EAAAF,IAIA0B,KAAAkD,IAAAuL,GAAA,GACAjQ,EAAAF,IAIAmQ,GAAA,EAAA1O,GAAA0O,EAAA1O,IAAA0O,GAGA/S,EAAA0mC,OAAA,SAAAL,EAAAC,GAGA,OAFAD,EAAAj/B,EAAAtC,YAAAuhC,GACAC,EAAAl/B,EAAAtC,YAAAwhC,GACAl/B,EAAApB,WAAAqgC,EAAAC,GACAxjC,EAAArB,MAIA4kC,EAAA,GAAAC,EAAA,EACAxjC,EAAAF,IAIA0B,KAAAsH,MAAAy6B,QAAA/hC,KAAAsH,MAAA06B,OACAxjC,EAAAF,IAIAyjC,EAAA,gBAAAC,EAAA,eACAxjC,EAAAF,IAIAyjC,EAAAC,GAGAtmC,EAAA2mC,QAAA,SAAAC,EAAAC,EAAAC,GAGA,GAFAF,EAAAx/B,EAAAtC,YAAA8hC,GACAC,EAAAz/B,EAAAtC,YAAA+hC,GACAz/B,EAAApB,WAAA4gC,EAAAC,GACA,OAAAD,EAOA,UAHAE,OAAA9hC,IAAA8hC,EAAA,IAAAA,IAGA,MAAAA,EACA,OAAAhkC,EAAArB,MAIA,OAAAmlC,GAAA,IAAAC,EACA,SACG,OAAAD,EACH,WAAAC,EAAAC,EAAAD,EAAAv7B,WAAAw7B,EACG,OAAAD,EACH,OAAAD,EAAAt7B,WAEA,IAAAy7B,EAAAF,EAAA,SACA,OAAAD,EAAAt7B,WAAAy7B,GAAA,IAAAF,EAAAC,EAAAD,EAAAv7B,WAAAw7B,IAIA9mC,EAAAgnC,QAAA,SAAA3iC,EAAA4iC,EAAAC,GAEA,IADA7iC,EAAA+C,EAAAtC,YAAAT,cACA5B,MACA,OAAA4B,EA0MA,IArMA,IAkMA8iC,EAlMAC,EAAA,CACA,gEACA,yEACA,iEACA,iEACA,6DACA,+DACA,yDACA,+CACA,mEACA,8CACA,mCACA,oEACA,wCACA,qCACA,gDACA,0CACA,mDACA,2CACA,mDACA,8DACA,+CACA,yDACA,2DACA,0DACA,wEACA,2CACA,8DACA,mEACA,0FACA,2DACA,iDACA,wDACA,uCACA,oDACA,qEACA,yCACA,6DACA,wCACA,wCACA,kDACA,0DACA,wCACA,yDACA,4CACA,mDACA,qDACA,+CACA,oCACA,2CACA,sEACA,uCACA,wCACA,wCACA,wDACA,kEACA,sCACA,kEACA,8EACA,iEACA,oEACA,wCACA,gEACA,gDACA,oCACA,kDACA,6CACA,sCACA,kDACA,yDACA,6CACA,4CACA,wCACA,kDACA,6DACA,mEACA,qDACA,iEACA,2DACA,uEACA,oCACA,mDACA,+DACA,sDACA,wCACA,oDACA,kDACA,2CACA,gEACA,6DACA,oDACA,qEACA,kDACA,oCACA,wEACA,+CACA,qDACA,wCACA,0DACA,mDACA,4CACA,kEACA,yEACA,gDACA,6CACA,yDACA,iDACA,iDACA,sCACA,sDACA,sCACA,kEACA,sDACA,gDACA,4CACA,wDACA,sDACA,qDACA,sEACA,0CACA,2DACA,+DACA,uFACA,sDACA,mDACA,8CACA,2CACA,sDACA,+CACA,oDACA,kDACA,mDACA,wDACA,0CACA,oCACA,uDACA,uDACA,4DACA,0DACA,iEACA,oEACA,oCACA,kCACA,8CACA,4CACA,wCACA,0CAKAC,EAAA,CACAC,GAAA,+CACAC,GAAA,8CACAC,GAAA,0CACA5wB,GAAA,wC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ACA,SACA,UACA,cACA,iBACA,OACA,aACA,gBACA,YACA,eACA,SACA,SACA,QACA,OACA,SACA,UACA,SACA,UACA,UACA,cACA,aACA,kBACA,eACA,UACA,SACA,MACA,OACA,MACA,OACA,QACA,SACA,aACA,UACA,WACA,UACA,cACA,eACA,eACA,MACA,OACA,UACA,WACA,OACA,UACA,YACA,MACA,OACA,UACA,KACA,MACA,UACA,UACA,UACA,UACA,UACA,QACA,QACA,SACA,WACA,WACA,IACA,QACA,SACA,UACA,KACA,MACA,OACA,OACA,QACA,MACA,aACA,YACA,SACA,YACA,QACA,WACA,OACA,aACA,QACA,QACA,UACA,OACA,OACA,SACA,SACA,YACA,UACA,QACA,WACA,YACA,KACA,aACA,QACA,aACA,YACA,YACA,WACA,UACA,kBACA,QACA,MACA,UACA,SACA,SACA,MACA,UACA,UACA,UACA,UACA,OACA,YACA,eACA,cACA,KACA,QACA,YACA,aACA,cACA,QACA,SACA,QACA,QACA,SACA,QACA,QACA,OACA,UACA,SACA,UACA,YACA,SACA,QACA,SACA,QACA,SACA,SACA,QACA,QACA,QACA,QACA,MACA,YACA,WACA,OACA,MACA,WACA,UACA,SACA,YACA,OACA,YACA,WACA,QACA,QACA,aACA,QACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,SACA,KACA,MACA,QACA,SACA,eACA,cACA,cACA,aACA,SACA,QACA,KACA,MACA,QACA,MACA,OACA,SACA,MACA,MACA,OACA,QACA,SACA,OACA,MACA,YACA,YACA,WACA,WACA,QACA,SACA,cACA,WACA,KACA,KACA,gBACA,eACA,cACA,UACA,YACA,WACA,cACA,aACA,WACA,UACA,YACA,WACA,MACA,MACA,OACA,MACA,UACA,UACA,UACA,UACA,MACA,KACA,YACA,UACA,gBACA,gBACA,iBACA,iBACA,SACA,eACA,MACA,KACA,MACA,eACA,cACA,MACA,QACA,OACA,OACA,UACA,SACA,KACA,eACA,eACA,cACA,cACA,WACA,UACA,OACA,cACA,WACA,UACA,UACA,SACA,OACA,YACA,eACA,aACA,eACA,UACA,OACA,QACA,QACA,QACA,YACA,UACA,MACA,OACA,MACA,MACA,SACA,MACA,OACA,SACA,YACA,OACA,MACA,OACA,OACA,SACA,QACA,MACA,QACA,QACA,QACA,QACA,OACA,SACA,cACA,UACA,UACA,SACA,SACA,UACA,SACA,QACA,aACA,WACA,MACA,QACA,SACA,aACA,QACA,WACA,WACA,UACA,SACA,MACA,IACA,SACA,YACA,YACA,QACA,WACA,MACA,OACA,UACA,aACA,aACA,QACA,UACA,UACA,OACA,YACA,OACA,SACA,QACA,YACA,QACA,OACA,WACA,OACA,QACA,UACA,UACA,SACA,QACA,QACA,QACA,OACA,OACA,QACA,OACA,UACA,UACA,eACA,cACA,UACA,OACA,OACA,MACA,OACA,WACA,UACA,UACA,UACA,kDCpYK,SAAS+oC,EAAgBC,GAC9B,IAAIloC,EAASmC,SAAS+lC,EAAO,IAQ7B,OALEloC,EADEmB,MAAMnB,IACE,EAEDY,KAAKiH,IAAI7H,EAAS,GAAI,GAY5B,SAASmoC,EAAgBllC,GAC9B,IAAIjD,EAAS,GAMb,OAJIiD,GAAO,IACTjD,EAAM,GAAAP,OAAMwD,EAAM,IAGbjD,wJAoDF,SAAsBkoC,GAC3B,GAAqB,iBAAVA,IAAuBE,EAAqBliC,KAAKgiC,GAC1D,MAAO,GAFyB,IAAAG,KAISH,EAAMjnC,cAAcsY,MAAM6uB,KAJnC,8XAIzBE,EAJyBD,EAAA,GAId9a,EAJc8a,EAAA,GAINE,EAJMF,EAAA,GAIEplC,EAJFolC,EAAA,WAMlC,MAAO,CACL,CACExlC,MAAOolC,EAAgBhlC,GACvBilC,MAAOjlC,EACPulC,WAAuB,MAAXD,GAEd,CACE1lC,MAAO4lC,EAAmBlb,GAC1B2a,MAAO3a,EACPib,WAA0B,MAAdF,eAYX,SAAiBrlC,EAAKsqB,GAC3B,IAAMmb,GAAYzlC,EAAIulC,WAAa,IAAM,IAAML,EAAgBllC,EAAIJ,OAGnE,OAFqB0qB,EAAOib,WAAa,IAAM,IAAMG,EAAmBpb,EAAO1qB,OAE1D6lC,GAhFvB,IAAME,EAAoB,6BACpBC,EAA2BD,EAAkBhpC,OAQ5C,SAAS6oC,EAAmBP,GACjC,IAAIloC,EAAS,EAEb,GAAqB,iBAAVkoC,EAGT,IAAK,IAAIprC,EAAI,EAAGyN,GAFhB29B,EAAQA,EAAMjnC,eAEYrB,OAAS,EAAG9C,EAAIorC,EAAMtoC,OAAQ9C,GAAK,EAAGyN,GAAK,EACnEvK,GAAUY,KAAKmL,IAAI88B,EAA0Bt+B,IAAMq+B,EAAkBnlC,QAAQykC,EAAMprC,IAAM,GAK7F,QAFEkD,EAWG,SAAS2oC,EAAmBpb,GAGjC,IAFA,IAAIvtB,EAAS,GAENutB,GAAU,GACfvtB,EAAS2M,OAAO6P,aAAc+Q,EAASsb,EAA4B,IAAM7oC,EACzEutB,EAAS3sB,KAAKsH,MAAMqlB,EAASsb,GAA4B,EAG3D,OAAO7oC,EAAOiB,cAGhB,IAAMmnC,EAAuB,mqDC3E7B,IAAAU,EAAAC,EAAAnsC,EAAA,KACAosC,EAAAD,EAAAnsC,EAAA,KACAqsC,ySAAAC,CAAAtsC,EAAA,IAUAusC,EAAAvsC,EAAA,wJCZA,IAAAwsC,EAAAL,EAAAnsC,EAAA,KACAysC,EAAAN,EAAAnsC,EAAA,KACA0sC,EAAA1sC,EAAA,IACA2sC,EAAA3sC,EAAA,IACA4sC,EAAA5sC,EAAA,GACAqsC,ySAAAC,CAAAtsC,EAAA,IACAusC,EAAAvsC,EAAA,kwCAME,SAAA6sC,IAAc,IAAAC,EAAA,mGAAAC,CAAAppC,KAAAkpC,IACZC,EAAAE,EAAArpC,KAAAspC,EAAAJ,GAAAxsC,KAAAsD,QACKupC,OAAS,IAAIC,SAClBL,EAAKI,OAAOE,GAAK,CACfxmC,oBACAymC,sBACAC,4BACAC,WAAY,SAACC,GAAD,OAAeV,EAAKW,YAAYD,IAC5CE,aAAc,SAACC,GAAD,OAAcb,EAAKc,cAAcD,IAC/CE,6BACAC,aAAc,SAACrtC,EAAMstC,GAAP,OAAkBjB,EAAKkB,cAAcvtC,EAAMstC,IACzDE,UAAW,SAAC9sC,EAAO+sC,GAAR,OAAkBpB,EAAKqB,eAAehtC,EAAO+sC,IACxDE,WAAY,SAAChtB,EAAOE,EAAK4sB,GAAb,OAAuBpB,EAAKuB,gBAAgBjtB,EAAOE,EAAK4sB,KAEtEpB,EAAKwB,UAAY1tC,OAAOY,OAAO,MAC/BsrC,EAAKyB,UAAY3tC,OAAOY,OAAO,MAE/BsrC,EACG0B,YAAY,QAAQ,GACpBA,YAAY,SAAS,GACrBA,YAAY,OAAQ,MApBX1B,wPADK2B,+CA8BbC,GACJ,IAAItrC,EAAS,KACTZ,EAAQ,KAEZ,IAEIY,EADiB,KAAfsrC,EACO,GAEA/qC,KAAKupC,OAAOjnB,MAAMyoB,GAE7B,MAAOC,GACP,IAAMC,GAAU,EAAAvC,EAAAwC,SAAYF,EAAGC,SAG7BpsC,EADEosC,IAGM,EAAAvC,EAAAwC,SAAYprB,SASxB,OALIrgB,aAAkBjB,QACpBK,GAAQ,EAAA6pC,EAAAwC,SAAYzrC,EAAOwrC,WAAY,EAAAvC,EAAAwC,SAAYprB,SACnDrgB,EAAS,MAGJ,CACLZ,QACAY,8CAWQ3C,EAAMU,GAGhB,OAFAwC,KAAK2qC,UAAU7tC,GAAQU,EAEhBwC,yCASGlD,GACV,OAAOkD,KAAK2qC,UAAU7tC,yCAUVA,GACZ,IAAIU,EAAQwC,KAAKmrC,YAAYruC,GAQ7B,GANAkD,KAAKorC,KAAK,eAAgBtuC,EAAM,SAACuuC,QACd,IAAbA,IACF7tC,EAAQ6tC,UAIE,IAAV7tC,EACF,MAAMgB,MAAM8sC,cAGd,OAAO9tC,sCAUGV,EAAMuvB,GAGhB,OAFArsB,KAAK4qC,UAAU9tC,GAAQuvB,EAEhBrsB,yCASGlD,GACV,OAAOkD,KAAK4qC,UAAU9tC,yCAWVA,GAAmB,IAE3BU,EAFc4sC,EAAazqC,UAAAN,OAAA,QAAA0B,IAAApB,UAAA,GAAAA,UAAA,GAAJ,GACrB0sB,EAAKrsB,KAAKurC,YAAYzuC,GAa5B,OAVIuvB,IACF7uB,EAAQ6uB,EAAG+d,IAGbpqC,KAAKorC,KAAK,eAAgBtuC,EAAMstC,EAAQ,SAACiB,QACtB,IAAbA,IACF7tC,EAAQ6tC,UAIK,IAAV7tC,GAAmB,EAAAsrC,EAAAoC,SAAmBpuC,EAAMstC,GAAU5sC,yCAWhDmqC,EAAO4C,GACpB5C,EAAQA,EAAMjnC,cADa,IAAA8qC,EAAAC,GAEL,EAAA7C,EAAA8C,cAAa/D,GAFR,GAEpBjlC,EAFoB8oC,EAAA,GAEfxe,EAFewe,EAAA,GAGvBhuC,OAAQ,EAERmuC,EAAiBpB,EAAQ,CAAC5C,QAAOjlC,MAAKsqB,SAAQud,SAAS,CAAC5C,QAAOjlC,MAAKsqB,UAMxE,OAJAhtB,KAAKorC,KAAK,gBAAiBO,EAAgB,SAACC,GAC1CpuC,EAAQouC,IAGHpuC,0CAYOquC,EAAYC,EAAUvB,GACpCsB,EAAaA,EAAWnrC,cACxBorC,EAAWA,EAASprC,cAFuB,IAAAqrC,EAAAN,GAIX,EAAA7C,EAAA8C,cAAaG,GAJF,GAIpCG,EAJoCD,EAAA,GAI1BE,EAJ0BF,EAAA,GAAAG,EAAAT,GAKf,EAAA7C,EAAA8C,cAAaI,GALE,GAKpCK,EALoCD,EAAA,GAK5BE,EAL4BF,EAAA,GAMvCG,EAAY,GACZC,EAAU,GAEVN,EAAS1pC,OAAS6pC,EAAO7pC,OAC3B+pC,EAAU3pC,IAAMspC,EAChBM,EAAQ5pC,IAAMypC,IAEdE,EAAU3pC,IAAMypC,EAChBG,EAAQ5pC,IAAMspC,GAGZC,EAAY3pC,OAAS8pC,EAAU9pC,OACjC+pC,EAAUrf,OAASif,EACnBK,EAAQtf,OAASof,IAEjBC,EAAUrf,OAASof,EACnBE,EAAQtf,OAASif,GAGnBI,EAAU1E,OAAQ,EAAAiB,EAAA2D,SAAQF,EAAU3pC,IAAK2pC,EAAUrf,QACnDsf,EAAQ3E,OAAQ,EAAAiB,EAAA2D,SAAQD,EAAQ5pC,IAAK4pC,EAAQtf,QAEzCud,IACF8B,EAAU9B,MAAQA,EAClB+B,EAAQ/B,MAAQA,GAGlB,IAAI/sC,EAAQ,GAMZ,OAJAwC,KAAKorC,KAAK,iBAAkBiB,EAAWC,EAAS,WAAiB,IAAhBV,EAAgBjsC,UAAAN,OAAA,QAAA0B,IAAApB,UAAA,GAAAA,UAAA,GAAP,GACxDnC,EAAQouC,IAGHpuC,sCAUGqsC,GACV,IAAI,EAAAnB,EAAA8D,eAAa3C,GACf,MAAMrrC,MAAMqrC,GAGd,MAAMrrC,MAAMshB,yEC3PhB,SAAAzU,KAKAA,EAAAlN,UAAA,CACAsuC,GAAA,SAAA3vC,EAAA4vC,EAAAC,GACA,IAAA7R,EAAA96B,KAAA86B,IAAA96B,KAAA86B,EAAA,IAOA,OALAA,EAAAh+B,KAAAg+B,EAAAh+B,GAAA,KAAAgD,KAAA,CACAusB,GAAAqgB,EACAC,QAGA3sC,MAGA4sC,KAAA,SAAA9vC,EAAA4vC,EAAAC,GACA,IAAAzd,EAAAlvB,KACA,SAAA6sC,IACA3d,EAAA4d,IAAAhwC,EAAA+vC,GACAH,EAAAvtC,MAAAwtC,EAAAhtC,WAIA,OADAktC,EAAAE,EAAAL,EACA1sC,KAAAysC,GAAA3vC,EAAA+vC,EAAAF,IAGAvB,KAAA,SAAAtuC,GAMA,IALA,IAAAgC,EAAA,GAAAqD,MAAAzF,KAAAiD,UAAA,GACAqtC,IAAAhtC,KAAA86B,IAAA96B,KAAA86B,EAAA,KAAyCh+B,IAAA,IAAAqF,QACzC5F,EAAA,EACA4E,EAAA6rC,EAAA3tC,OAEW9C,EAAA4E,EAAS5E,IACpBywC,EAAAzwC,GAAA8vB,GAAAltB,MAAA6tC,EAAAzwC,GAAAowC,IAAA7tC,GAGA,OAAAkB,MAGA8sC,IAAA,SAAAhwC,EAAA4vC,GACA,IAAA5R,EAAA96B,KAAA86B,IAAA96B,KAAA86B,EAAA,IACAmS,EAAAnS,EAAAh+B,GACAowC,EAAA,GAEA,GAAAD,GAAAP,EACA,QAAAnwC,EAAA,EAAA4E,EAAA8rC,EAAA5tC,OAAwC9C,EAAA4E,EAAS5E,IACjD0wC,EAAA1wC,GAAA8vB,KAAAqgB,GAAAO,EAAA1wC,GAAA8vB,GAAA0gB,IAAAL,GACAQ,EAAAptC,KAAAmtC,EAAA1wC,IAYA,OAJA2wC,EAAA,OACApS,EAAAh+B,GAAAowC,SACApS,EAAAh+B,GAEAkD,OAIAhE,EAAAD,QAAAsP,2FCxCe,SAA4B8hC,GAAuB,IAAb/C,EAAazqC,UAAAN,OAAA,QAAA0B,IAAApB,UAAA,GAAAA,UAAA,GAAJ,GAG5D,GAFAwtC,EAAWA,EAASzsC,eAEf0sC,EAAmBD,GACtB,MAAM3uC,MAAM8sC,cAGd,OAAO8B,EAAmBD,GAAnBhuC,MAAAiuC,KAAgChD,iWA/BzC,IAAAiD,EAAA7E,EAAAnsC,EAAA,KACAixC,EAAA9E,EAAAnsC,EAAA,KACAkxC,EAAA/E,EAAAnsC,EAAA,KACAmxC,EAAAhF,EAAAnsC,EAAA,KACAoxC,EAAAjF,EAAAnsC,EAAA,KACAqxC,EAAAlF,EAAAnsC,EAAA,KACAsxC,EAAAnF,EAAAnsC,EAAA,KACAuxC,EAAApF,EAAAnsC,EAAA,KACAwxC,EAAArF,EAAAnsC,EAAA,KACAyxC,EAAAtF,EAAAnsC,EAAA,KACA0xC,EAAAvF,EAAAnsC,EAAA,KACA2xC,EAAAxF,EAAAnsC,EAAA,KACA4xC,EAAAzF,EAAAnsC,EAAA,KACAqsC,EAAArsC,EAAA,sDAEA,IAAM+wC,EAAqBnwC,OAAOY,OAAO,MAyBlC,SAASqwC,EAAkBC,EAAQ5iB,GACnCjsB,MAAMC,QAAQ4uC,KACjBA,EAAS,CAACA,EAAOztC,gBAEnBytC,EAAO3yB,QAAQ,SAACld,GACVitB,EAAK6iB,UACPhB,EAAmB9uC,GAAKitB,EAAKjtB,GAE7B8uC,EAAmB9uC,GAAKitB,IAK9B2iB,EAAkB5W,UAAI+W,OAAQ/W,WAC9B4W,EAAkBI,UAAUD,OAAQC,WACpCJ,EAAkB3W,UAAO8W,OAAQ9W,WACjC2W,EAAkBK,UAAMF,OAAQE,WAChCL,EAAkB3iC,UAAM8iC,OAAQ9iC,WAChC2iC,EAAkBM,UAAgBH,OAAQG,WAC1CN,EAAkBO,UAAYJ,OAAQI,WACtCP,EAAkBQ,UAAmBL,OAAQK,WAC7CR,EAAkBS,UAASN,OAAQM,WACnCT,EAAkBU,UAAgBP,OAAQO,WAC1CV,EAAkB1W,UAAS6W,OAAQ7W,WACnC0W,EAAkBW,UAASR,OAAQQ,WACnCX,EAAkBvI,UAAM0I,OAAQ1I,sHClEhC,IAAAsD,EAAA5sC,EAAA,GACAqsC,EAAArsC,EAAA,GAIe,SAASkvB,EAAKnD,GAAgB,QAAA0mB,EAAAnvC,UAAAN,OAAN4C,EAAM,IAAA3C,MAAAwvC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAN9sC,EAAM8sC,EAAA,GAAApvC,UAAAovC,GAC3C,IAAMtvC,EAASwC,EAAKhD,OAAO,SAAC+vC,EAAKxxC,GAAN,OAAgBwxC,GAAM,EAAA/F,EAAAhmC,UAASzF,KAAQ,EAAAyrC,EAAAhmC,UAASmlB,IAE3E,GAAIxnB,MAAMnB,GACR,MAAMjB,MAAMywC,eAGd,OAAOxvC,WATa,IAYtB8rB,EAAK8iB,OAZiB,+GCDP,SAAS9iB,IAAgB,QAAAujB,EAAAnvC,UAAAN,OAAR+qC,EAAQ,IAAA9qC,MAAAwvC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAR3E,EAAQ2E,GAAApvC,UAAAovC,GACtC,OAAO3E,EAAOnrC,OAAO,SAAC+vC,EAAKxxC,GAAN,OAAgBwxC,EAAMxxC,EAAM6J,YAAY,aAHzC,IAMtBkkB,EAAK8iB,OANiB,+GCAtB,IAAApF,EAAA5sC,EAAA,GACAqsC,EAAArsC,EAAA,GAIe,SAASkvB,EAAKnD,GAAgB,QAAA0mB,EAAAnvC,UAAAN,OAAN4C,EAAM,IAAA3C,MAAAwvC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAN9sC,EAAM8sC,EAAA,GAAApvC,UAAAovC,GAC3C,IAAMtvC,EAASwC,EAAKhD,OAAO,SAAC+vC,EAAKxxC,GAAN,OAAgBwxC,GAAM,EAAA/F,EAAAhmC,UAASzF,KAAQ,EAAAyrC,EAAAhmC,UAASmlB,IAE3E,GAAI3oB,IAAWmwB,IACb,MAAMpxB,MAAM0wC,kBAEd,GAAItuC,MAAMnB,GACR,MAAMjB,MAAMywC,eAGd,OAAOxvC,WAZa,IAetB8rB,EAAK8iB,OAfiB,+GCDP,SAAS9iB,EAAK4jB,EAAMC,GACjC,OAAOD,IAASC,WAHI,IAMtB7jB,EAAK8iB,OANiB,+GCAtB,MAAAgB,ySAAA1G,CAAAtsC,EAAA,KACAosC,KAAApsC,EAAA,iCACAqsC,EAAArsC,EAAA,GAEO,IAAMgyC,EAASiB,UAEP,SAAS/jB,EAAK4iB,GAC3B,OAAO,WAGL,IAEI1uC,EAFE8vC,GAFNpB,EAASA,EAAOztC,eAEW2L,MAAM,KAC7BmjC,GAAe,EAGnB,GAA2B,IAAvBD,EAAYlwC,OACVgwC,EAAUE,EAAY,MACxBC,GAAe,EACf/vC,EAAS4vC,EAAUE,EAAY,IAAtBpwC,MAAAkwC,EAAS1vC,gBAEf,CAKL,IAJA,IAAMN,EAASkwC,EAAYlwC,OACvBiD,EAAQ,EACRmtC,EAAgBJ,EAEb/sC,EAAQjD,GAIb,GAHAowC,EAAgBA,EAAcF,EAAYjtC,IAC1CA,KAEKmtC,EAAe,CAClBA,EAAgB,KAChB,MAGAA,IACFD,GAAe,EACf/vC,EAASgwC,EAAatwC,WAAb,EAAAQ,YAIb,IAAK6vC,EACH,MAAMhxC,MAAM8sC,cAGd,OAAO7rC,cAIX8rB,EAAK6iB,WAAY,EACjB7iB,EAAK8iB,OAASA,mBChDd,IAAAqB,EAAA,CACErzC,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,GACRA,EAAQ,GACRA,EAAQ,GACRA,EAAQ,IACRA,EAAQ,GACRA,EAAQ,IACRA,EAAQ,GACRA,EAAQ,KAGV,QAAAO,KAAA8yC,EAAA,CACA,IAAAC,EAAAD,EAAA9yC,GACA,QAAAq+B,KAAA0U,EACA5zC,EAAAk/B,GAAAl/B,EAAAk/B,IAAA0U,EAAA1U,qBClBA,IAAA/qB,EAAe7T,EAAQ,GACvB+G,EAAkB/G,EAAQ,GAC1BuzC,EAAkBvzC,EAAQ,IAC1BwzC,EAAexzC,EAAQ,GAEvB,SAAAyzC,EAAAzjB,EAAAxwB,GACA,GAAAA,EACA,QAAAU,KAAAV,EACAwwB,EAAA9vB,GAAAV,EAAAU,GAIA,OAAA8vB,EAGAtwB,EAAAg0C,SAAA3sC,EAAA4N,KAAAC,KACAlV,EAAAi0C,QAAA5sC,EAAA4N,KAAAS,IACA1V,EAAAk0C,UAAA7sC,EAAAwO,MAAAX,KACAlV,EAAAyL,QAAAzL,EAAAm0C,WAAAJ,EAAA5/B,EAAA1I,QAAAM,KAAAoI,EAAA1I,SACAzL,EAAAo0C,YAAAjgC,EAAA1I,QAAAM,KACA/L,EAAAq0C,eAAAlgC,EAAA1I,QAAAO,QACAhM,EAAAs0C,QAAAjtC,EAAA8O,MAAAjB,KACAlV,EAAAu0C,UAAAltC,EAAA8O,MAAAjB,KAAAmB,GACArW,EAAAw0C,OAAAntC,EAAA8O,MAAAT,IACA1V,EAAAy0C,SAAAptC,EAAA8O,MAAAT,IAAAW,GACArW,EAAA00C,QAAArtC,EAAA8O,MAAAG,KACAtW,EAAAkX,WAAA68B,EAAA1sC,EAAA6P,WAAAC,KAAA9P,EAAA6P,YACAlX,EAAA20C,MAAAttC,EAAAiR,WAAAxP,EACA9I,EAAA40C,YAAAvtC,EAAAiR,WAAAxP,EACA9I,EAAA60C,YAAAxtC,EAAAiR,WAAAzP,EACA7I,EAAA80C,UAAAztC,EAAAwO,MAAAH,IACA1V,EAAA+0C,UAAA1tC,EAAAsR,MAAAzD,KACAlV,EAAAg1C,YAAAnB,EAAA7K,KAAAh9B,QACAhM,EAAAi1C,WAAApB,EAAAhL,IAAA78B,QACAhM,EAAAk1C,MAAA7tC,EAAAyR,EAAA5D,KACAlV,EAAAm1C,QAAA9tC,EAAAyR,EAAA5D,KAAAmB,GACArW,EAAAo1C,OAAA/tC,EAAAyR,EAAApD,IAAAW,GACArW,EAAAq1C,KAAAhuC,EAAAyR,EAAApD,IACA1V,EAAAuN,MAAAwmC,EAAA5/B,EAAA5G,MAAAxB,KAAAoI,EAAA5G,OACAvN,EAAAs1C,UAAAnhC,EAAA5G,MAAAxB,KACA/L,EAAAu1C,aAAAphC,EAAA5G,MAAAvB,QACAhM,EAAAw1C,MAAAnuC,EAAAyR,EAAAxC,KACAtW,EAAAy1C,UAAApuC,EAAA6S,MAAAhF,KACAlV,EAAA01C,SAAAruC,EAAA6S,MAAAxE,IACA1V,EAAA21C,eAAAtuC,EAAAgT,QAAArO,QACAhM,EAAA41C,YAAAvuC,EAAAkU,QAAArG,KACAlV,EAAA61C,OAAAxuC,EAAA2U,QAAAtG,IACA1V,EAAA81C,WAAAzuC,EAAA2U,QAAAtG,IACA1V,EAAA+1C,YAAA1uC,EAAA2U,QAAA9G,KACAlV,EAAAkJ,KAAA6qC,EAAA1sC,EAAA6B,KAAAC,KAAA9B,EAAA6B,MACAlJ,EAAAg2C,SAAA3uC,EAAA6B,KAAAoT,KACAtc,EAAAi2C,SAAA5uC,EAAA6B,KAAAC,KACAnJ,EAAAk2C,aAAA7uC,EAAAoV,SAAAvH,KACAlV,EAAAm2C,gBAAArC,EAAAxrB,YAAAE,KACAxoB,EAAAo2C,SAAA/uC,EAAA8P,KAAAjC,KACAlV,EAAAq2C,QAAAhvC,EAAA8P,KAAAzB,IACA1V,EAAAs2C,UAAAjvC,EAAA8P,KAAAtO,EAAAqM,KACAlV,EAAAu2C,SAAAlvC,EAAA8P,KAAAtO,EAAA6M,IACA1V,EAAAsJ,WAAAyqC,EAAA1sC,EAAAiC,WAAAG,IAAApC,EAAAiC,YACAtJ,EAAAw2C,cAAAnvC,EAAAiC,WAAAG,IACAzJ,EAAAy2C,cAAApvC,EAAAiC,WAAAC,IACAvJ,EAAA+c,YAAAg3B,EAAA1sC,EAAA0V,YAAAxT,IAAAlC,EAAA0V,aACA/c,EAAA02C,eAAArvC,EAAA0V,YAAAtT,IACAzJ,EAAA22C,eAAAtvC,EAAA0V,YAAAxT,IACAvJ,EAAAqd,QAAA02B,EAAA1sC,EAAAgW,QAAAnI,KAAA7N,EAAAgW,SACArd,EAAA42C,YAAAvvC,EAAAgW,QAAAnI,KACAlV,EAAAwJ,SAAAuqC,EAAA1sC,EAAAmC,SAAAD,IAAAlC,EAAAmC,UACAxJ,EAAA62C,YAAAxvC,EAAAmC,SAAAC,IACAzJ,EAAA82C,YAAAzvC,EAAAmC,SAAAD,IACAvJ,EAAA4d,KAAAm2B,EAAA1sC,EAAAuW,KAAA1L,GAAA7K,EAAAuW,MACA5d,EAAA+2C,QAAA1vC,EAAAuW,KAAAC,IACA7d,EAAAg3C,OAAA3vC,EAAAuW,KAAA1L,GACAlS,EAAAi3C,MAAA5vC,EAAA8W,KAAArV,EACA9I,EAAA4I,MAAAmrC,EAAA1sC,EAAAuB,MAAAC,EAAAxB,EAAAuB,OACA5I,EAAAk3C,OAAA7vC,EAAAuB,MAAAE,EACA9I,EAAAm3C,OAAA9vC,EAAAuB,MAAAC,EACA7I,EAAAo3C,MAAA/vC,EAAAiQ,EAAApC,KACAlV,EAAAq3C,QAAAhwC,EAAAiQ,EAAApC,KAAAmB,GACArW,EAAAs3C,KAAAjwC,EAAAiQ,EAAA5B,IACA1V,EAAAu3C,MAAAlwC,EAAAiQ,EAAAhB,KACAtW,EAAAgJ,IAAA+qC,EAAA1sC,EAAA2B,IAAAH,EAAAxB,EAAA2B,KACAhJ,EAAAw3C,KAAAnwC,EAAA2B,IAAAF,EACA9I,EAAAy3C,KAAApwC,EAAA2B,IAAAH,EACA7I,EAAA6f,QAAAk0B,EAAA1sC,EAAAwY,QAAA3K,KAAA7N,EAAAwY,SACA7f,EAAA03C,YAAArwC,EAAAwY,QAAA3K,KACAlV,EAAA23C,YAAA7D,EAAA/pB,QAAAvB,KACAxoB,EAAA43C,MAAAvwC,EAAAyY,EAAAxJ,sBCtFA,IAAAzM,EAAAvF,KACA,SAAAuzC,EAAA1yC,EAAAqZ,GAA0B,OAAArZ,EAAAjC,OAAA,SAAAsX,EAAA2b,GAAiC,OAAA3X,EAAAhE,EAAA2b,GAAkB,GAC7E,SAAA2hB,EAAAnqC,EAAA1L,EAAA81C,EAAAC,EAAAjR,GACAA,OAAA,GACA,IAAAvM,EAAAyd,EAAA,EAAAtqC,EACA,OAAA1L,EAAA,OAAA81C,EACA,OAAA91C,EAAA,OAAA+1C,EACA,QAAA/2C,EAAA,EAAgBA,GAAAgB,IAAQhB,EACxBu5B,EAAAwd,EAAA/2C,EAAAg3C,EAAAlR,EAAAgR,EACAA,EAAAC,EAAYA,EAAAxd,EAEZ,OAAAwd,EAEA,SAAAE,EAAAC,EAAAC,EAAAr3C,EAAAs3C,EAAAtR,GACA,gBAAAp5B,EAAA1L,GACA,OAAAA,EAAA,OAAAk2C,EAAAxqC,GACA,OAAA1L,EAAA,OAAAm2C,EAAAzqC,GACA,GAAA1L,EAAA,QAAAlB,EAAA,YAAAkB,EAAA,wBACA,MAAAo2C,GAAA,IAAA1qC,EAAA,MAAA5M,EAAA,0BACA,MAAAs3C,GAAA1qC,GAAA,QAAA5M,EAAA,0BAEA,OAAA+2C,EAAAnqC,EAAA1L,EADAk2C,EAAAxqC,GAAAyqC,EAAAzqC,GACAo5B,IAGA,IAAArB,EAAA,WACA,IAAA4S,EAAA,6EAAAC,UACAC,EAAA,+DAAAD,UACAE,EAAA,iEAAAF,UACAG,EAAA,6EAAAH,UACAI,EAAA,WAEA,SAAAR,EAAAxqC,GACA,IAAAkJ,EAAAye,EAAAoB,EAAA7oB,EAAAF,IAAA0lB,EAAAxpB,EAAArC,IAAAmG,GAAA,WAYA,OAXA9D,EAAArC,IAAAmG,GAAA,EAGAkJ,GAFAye,EAAAuiB,EAAAS,EAAAzqC,KACA6oB,EAAAmhB,EAAAW,EAAA3qC,KAKAynB,EAAAuiB,EAAAY,EADA5qC,EAAA,GAAAA,GAEA6oB,EAAAmhB,EAAAa,EAAA7qC,GACAgJ,EAAAhN,EAAAhC,KAAA8wC,EAAA9uC,EAAArC,IAAAmG,KAAA9D,EAAAyC,IAAA+mB,GAAAiC,EAAAzrB,EAAAiD,IAAAumB,GAAAqD,EAAA,EAAA7sB,EAAArC,IAAAmG,KAEAkJ,EAEA,IAAA+hC,EAAA,2EAAAL,UACAM,EAAA,gEAAAN,UACAO,EAAA,4DAAAP,UACAQ,EAAA,0EAAAR,UACA,SAAAH,EAAAzqC,GACA,IAAAkJ,EAAAye,EAAAoB,EAAA7oB,EAAAF,IAAA0lB,EAAAxpB,EAAArC,IAAAmG,GAAA,YAYA,OAXArJ,KAAAkD,IAAAmG,GAAA,EAGAkJ,GAFAye,EAAA3nB,EAAAkqC,EAAAe,EAAA/qC,KACA6oB,EAAAmhB,EAAAgB,EAAAhrC,KAIAynB,EAAAuiB,EAAAiB,EADAjrC,EAAA,GAAAA,GAEA6oB,EAAAmhB,EAAAkB,EAAAlrC,GACAgJ,EAAAhN,EAAAhC,KAAA8wC,EAAA9uC,EAAArC,IAAAmG,KAAA9D,EAAAyC,IAAA+mB,GAAAiC,EAAAzrB,EAAAiD,IAAAumB,GAAAqD,EAAA,EAAA7sB,EAAArC,IAAAmG,IACAA,EAAA,IAAAkJ,OAEAA,EAEA,gBAAAlJ,EAAA1L,GAEA,QADAA,EAAAqC,KAAAC,MAAAtC,IACA,OAAAk2C,EAAAtuC,EAAArC,IAAAmG,IACA,OAAA1L,EAAA,OAAAm2C,EAAAvuC,EAAArC,IAAAmG,IACA,GAAA1L,EAAA,0BAAAA,EAAA,wBACA,OAAA4H,EAAArC,IAAAmG,GAAA,SAEA,IAAAqrC,EAAA/qC,EAAAgrC,EAAA9pC,EAAA+pC,EAAAC,EAAAC,EAAAC,EAAA,EAAAxvC,EAAArC,IAAAmG,GACA,GAAA9D,EAAArC,IAAAmG,GAAA1L,EACA+2C,EAAAlB,EAAAnqC,EAAA1L,EAAAk2C,EAAAtuC,EAAArC,IAAAmG,IAAAyqC,EAAAvuC,EAAArC,IAAAmG,KAAA,OACK,CAKL,IAHAsrC,EAAA,EACAC,EAAAF,EAAA7pC,EAAA,EACAgqC,EAAA,EACAlrC,EAJA,EAAApE,EAAA+B,OAAA3J,EAAA4H,EAAA+B,MAAA/B,EAAAhC,KAAA,GAAA5F,KAAA,GAIegM,EAAA,EAAIA,IACnBmrC,EAAAnrC,EAAAorC,EAAAF,EAAAD,EACAA,EAAAC,EACAA,EAAAC,EACAvvC,EAAArC,IAAA2xC,GAAA,OACAA,GAAA,MACAD,GAAA,MACAF,GAAA,MACA7pC,GAAA,OAEA8pC,IAAA9pC,GAAAgqC,GACAF,KACAhrC,GAAAhM,IAAA+2C,EAAAE,GAGAF,GADA7pC,EAAA,EAAAA,EAAAgqC,EAGA,OAAAxrC,EAAA,GAAA1L,EAAA,GAAA+2C,KAzEA,GA4EAlT,EAAA,WACA,IAAAwS,EAAA,2EAAAC,UACAC,EAAA,+DAAAD,UACAE,EAAA,iEAAAF,UACAG,EAAA,6EAAAH,UAEAI,EAAA,WAgBA,IAAAC,EAAA,8EAAAL,UACAM,EAAA,2EAAAN,UACAO,EAAA,4DAAAP,UACAQ,EAAA,0EAAAR,UAgBA,OAAAL,EAlCA,SAAAvqC,GACA,IAAAkJ,EAAAye,EAAAoB,EAAA7oB,EAAAF,IAAA0lB,EAAA1lB,EAAA,WAWA,OAVAA,EAAA,EAGAkJ,GAFAye,EAAAuiB,EAAAS,EAAAzqC,KACA6oB,EAAAmhB,EAAAW,EAAA3qC,IACA8qC,EAAAjT,EAAA/3B,EAAA,GAAA9D,EAAAjC,IAAA+F,IAGA2nB,EAAAuiB,EAAAY,EADA5qC,EAAA,GAAAA,GAEA6oB,EAAAmhB,EAAAa,EAAA7qC,GACAgJ,EAAAhN,EAAAhC,KAAA8wC,EAAAhrC,IAAA9D,EAAAiD,IAAAumB,GAAAiC,EAAAzrB,EAAAyC,IAAA+mB,GAAAqD,EAAA,EAAA/oB,IAEAkJ,GAOA,SAAAlJ,GACA,IAAAkJ,EAAAye,EAAAoB,EAAA7oB,EAAAF,IAAA0lB,EAAA1lB,EAAA,YAWA,OAVAA,EAAA,EAGAkJ,GAFAye,EAAA3nB,EAAAkqC,EAAAe,EAAA/qC,KACA6oB,EAAAmhB,EAAAgB,EAAAhrC,IACA8qC,GAAAjT,EAAA/3B,EAAA,GAAA9D,EAAAjC,IAAA+F,GAAA,EAAAA,IAGA2nB,EAAAuiB,EAAAiB,EADAjrC,EAAA,GAAAA,GAEA6oB,EAAAmhB,EAAAkB,EAAAlrC,GACAgJ,EAAAhN,EAAAhC,KAAA8wC,EAAAhrC,IAAA9D,EAAAiD,IAAAumB,GAAAiC,EAAAzrB,EAAAyC,IAAA+mB,GAAAqD,EAAA,EAAA/oB,IAEAkJ,GAGA,gBAzCA,GA2CA2uB,EAAA,WACA,IAAA8T,EAAA,6DAAAf,UACAgB,EAAA,+FAAAhB,UAMA,IAAAiB,EAAA,gEAAAjB,UACAkB,EAAA,iGAAAlB,UAMA,gBAAA/S,EAAA73B,EAAA1L,GAEA,QADAA,EAAAqC,KAAAC,MAAAtC,IACA,OAdA,SAAA0L,GACA,OAAAA,GAAA,KAAAkqC,EAAAyB,EAAA3rC,IAAA,SACA9D,EAAA2C,IAAA3C,EAAArC,IAAAmG,IAAA9D,EAAAhC,KAAAgC,EAAArC,IAAAmG,IAAAkqC,EAAA0B,EAAA,KAAA1vC,EAAArC,IAAAmG,IAYAwqC,CAAAxqC,GACA,MAAA1L,EAAA,OARA,SAAA0L,GACA,OAAAA,EAAA,KAAAA,EAAAkqC,EAAA2B,EAAA7rC,IAAA,UACAA,EAAA,QAAA9D,EAAA2C,IAAA3C,EAAArC,IAAAmG,IAAA9D,EAAAhC,KAAAgC,EAAArC,IAAAmG,IAAAkqC,EAAA4B,EAAA,KAAA5vC,EAAArC,IAAAmG,IAMAyqC,CAAAzqC,GACA,GAAA1L,EAAA,yBAAAA,EAAA,wBACA,OAAA4H,EAAArC,IAAAmG,GAAA,SAEA,IAAAqrC,EAAA/qC,EAAAyrC,EAAAC,EAAAC,EAAAP,EAAA,EAAAxvC,EAAArC,IAAAmG,GAIA,IAFA+rC,EAAAV,EAAA,EACAW,EAAA,EACA1rC,EAHA,EAAApE,EAAAtF,OAAAtC,EAAA4H,EAAAtF,MAAAsF,EAAAhC,KAAA,GAAA5F,KAAA,GAGagM,EAAA,EAAIA,IACjB2rC,EAAA3rC,EAAAorC,EAAAM,EAAAD,EACAA,EAAAC,EAAaA,EAAAC,EACb/vC,EAAArC,IAAAmyC,GAAA,OACAA,GAAA,MACAD,GAAA,MACAV,GAAA,OAEA/qC,GAAAhM,IAAA+2C,EAAAU,GAGA,OADAV,GAAAxT,EAAA73B,EAAA,GAAAgsC,EACAhsC,EAAA,GAAA1L,EAAA,GAAA+2C,KArCA,GA0CApT,EAAA,WACA,IAAA0T,EAAA,iEAAAf,UACAgB,EAAA,0EAAAhB,UAMA,IAAAiB,EAAA,mEAAAjB,UACAkB,EAAA,0EAAAlB,UAMA,OAAAL,EAZA,SAAAvqC,GACA,OAAAA,GAAA,GAAA9D,EAAAjC,IAAA+F,EAAA,GAAA63B,EAAA73B,EAAA,GAAAkqC,EAAAyB,EAAA3rC,IAAA,GACA9D,EAAA2C,KAAAmB,GAAA9D,EAAAhC,KAAA8F,GAAAkqC,EAAA0B,EAAA,EAAA5rC,IAKA,SAAAA,GACA,OAAAA,GAAA,EAAA9D,EAAAjC,IAAA+F,EAAA,GAAA63B,EAAA73B,EAAA,KAAAA,EAAAkqC,EAAA2B,EAAA7rC,IAAA,GACA9D,EAAA2C,KAAAmB,GAAA9D,EAAAhC,KAAA8F,GAAAkqC,EAAA4B,EAAA,EAAA9rC,IAGA,eAfA,GAkBA3N,EAAA0lC,UACA1lC,EAAA8lC,UACA9lC,EAAAwlC,UACAxlC,EAAA4lC,wDC9MA,IAAA9iC,MAAYxC,oBAAQ,GACpBu5C,MAAYv5C,oBAAQ,GACpBw5C,MAAYx5C,oBAAQ,GACpB8G,MAAY9G,oBAAQ,GAEpB,SAAAy5C,QAAA92C,GACA,IAAAS,EAAA,GAQA,OANA0D,MAAAtD,UAAAb,EAAA,SAAAxB,GACAA,GACAiC,EAAAK,KAAAtC,KAIAiC,EAqBA,SAAAs2C,gBAAAC,SAAAC,WAEA,IADA,IAAAjiC,QAAA,GACAzX,EAAA,EAAiBA,EAAAy5C,SAAA,GAAA32C,SAAwB9C,EACzCyX,QAAAzX,IAAA,EAEA,IAAA25C,kBAAAD,UAAA,GAAA52C,OACA,IAAA9C,EAAA,EAAaA,EAAA05C,UAAA52C,SAAsB9C,EACnC05C,UAAA15C,GAAA8C,OAAA62C,oBACAA,kBAAAD,UAAA15C,GAAA8C,QAIA,QAAA+P,EAAA,EAAiBA,EAAA4mC,SAAA32C,SAAqB+P,EACtC,QAAA5S,EAAA,EAAmBA,EAAAw5C,SAAA5mC,GAAA/P,SAAwB7C,EAAA,CAG3C,IAFA,IAAA25C,uBAAA,EACAC,qBAAA,EACApsC,EAAA,EAAqBA,EAAAisC,UAAA52C,SAAsB2K,EAAA,CAC3C,IAAAwE,SAAAynC,UAAAjsC,GACA,KAAAwE,SAAAnP,OAAA62C,mBAAA,CAIA,IAAAG,cAAA7nC,SAAA,GACA,GAAAwnC,SAAA5mC,GAAA,KAAAinC,cAAA,CAGAD,qBAAA,EACA,QAAA/3C,EAAA,EAAuBA,EAAAmQ,SAAAnP,SAAqBhB,EAC5C83C,6CAAAxnC,KAAAqnC,SAAA5mC,GAAA5S,GAAAgS,SAAAnQ,MAGA+3C,sBACApiC,QAAAxX,GAAAwX,QAAAxX,IAAA25C,uBAMA,IADA,IAAA12C,OAAA,GACAzB,EAAA,EAAiBA,EAAAg4C,SAAA,GAAA32C,SAAwBrB,EACzCgW,QAAAhW,IACAyB,OAAAK,KAAA9B,EAAA,GAIA,OAAAyB,OA9DA1D,QAAAu6C,UAAA,SAAAN,EAAAO,GACA,IAAAj0C,EAAA,KAUA,OARAa,MAAAtD,UAAAm2C,EAAA,SAAAx4C,EAAAjB,GACA,GAAAiB,EAAA,KAAA+4C,EAEA,OADAj0C,EAAA/F,GACA,IAKA,MAAA+F,EACAzD,MAAArB,MAGA8E,GAmDAvG,QAAAy6C,SAAA,SAAAR,EAAAS,EAAAjoC,GAEA,GAAA5N,MAAA61C,IAAA,iBAAAA,EACA,OAAA53C,MAAArB,MAEA,IAAAk5C,EAAAX,gBAAAC,EAAAxnC,GACAmoC,EAAA,GAEA,oBAAAF,EAAA,CACA,IAAAn0C,EAAAvG,QAAAu6C,UAAAN,EAAAS,GACAE,EAAAxzC,MAAAlB,KAAA+zC,EAAA1zC,SAEAq0C,EAAAxzC,MAAAlB,KAAA+zC,EAAAS,IAEA,IAAAvrC,EAAA,EAMA,OAJA/H,MAAAtD,UAAA62C,EAAA,SAAAl5C,GACA0N,GAAAyrC,EAAAn5C,KAGA,IAAAk5C,EAAAr3C,OAAAR,MAAAJ,KAAAyM,EAAAwrC,EAAAr3C,QAGAtD,QAAA66C,OAAA,SAAAZ,EAAAS,EAAAjoC,GAEA,GAAA5N,MAAA61C,IAAA,iBAAAA,EACA,OAAA53C,MAAArB,MAEA,IAAAk5C,EAAAX,gBAAAC,EAAAxnC,GACAmoC,EAAA,GAEA,oBAAAF,EAAA,CACA,IAAAn0C,EAAAvG,QAAAu6C,UAAAN,EAAAS,GACAE,EAAAxzC,MAAAlB,KAAA+zC,EAAA1zC,SAEAq0C,EAAAxzC,MAAAlB,KAAA+zC,EAAAS,IAGA,IAAAI,EAAA,GAMA,OAJA1zC,MAAAtD,UAAA62C,EAAA,SAAAl5C,GACAq5C,EAAA/2C,KAAA62C,EAAAn5C,MAGAo4C,MAAAtxC,MAAAuyC,IAGA96C,QAAA+6C,QAAA,SAAAd,EAAAS,EAAAjoC,GAEA,GAAA5N,MAAA61C,IAAA,iBAAAA,EACA,OAAA53C,MAAArB,MAGA,IAAAk5C,EAAAX,gBAAAC,EAAAxnC,GACAmoC,EAAA,GAEA,oBAAAF,EAAA,CACA,IAAAn0C,EAAAvG,QAAAu6C,UAAAN,EAAAS,GACAE,EAAAxzC,MAAAlB,KAAA+zC,EAAA1zC,SAEAq0C,EAAAxzC,MAAAlB,KAAA+zC,EAAAS,IAGA,IAAAI,EAAA,GAMA,OAJA1zC,MAAAtD,UAAA62C,EAAA,SAAAl5C,GACAq5C,EAAA/2C,KAAA62C,EAAAn5C,MAGAo4C,MAAArxC,OAAAsyC,IAGA96C,QAAAg7C,KAAA,SAAAf,EAAAS,EAAAjoC,GAEA,GAAA5N,MAAA61C,IAAA,iBAAAA,EACA,OAAA53C,MAAArB,MAGA,IAAAk5C,EAAAX,gBAAAC,EAAAxnC,GACAmoC,EAAA,GAEA,oBAAAF,EAAA,CACA,IAAAn0C,EAAAvG,QAAAu6C,UAAAN,EAAAS,GACAE,EAAAxzC,MAAAlB,KAAA+zC,EAAA1zC,SAEAq0C,EAAAxzC,MAAAlB,KAAA+zC,EAAAS,IAIA,WAAAC,EAAAr3C,OACAR,MAAArB,MAIAk5C,EAAAr3C,OAAA,EACAR,MAAAF,IAGAg4C,EAAAD,EAAA,KAGA36C,QAAAi7C,KAAA,SAAAhB,EAAAS,EAAAjoC,GAEA,GAAA5N,MAAA61C,IAAA,iBAAAA,EACA,OAAA53C,MAAArB,MAEA,IAAAk5C,EAAAX,gBAAAC,EAAAxnC,GACAmoC,EAAA,GAEA,oBAAAF,EAAA,CACA,IAAAn0C,EAAAvG,QAAAu6C,UAAAN,EAAAS,GACAE,EAAAxzC,MAAAlB,KAAA+zC,EAAA1zC,SAEAq0C,EAAAxzC,MAAAlB,KAAA+zC,EAAAS,IAGA,IAAAQ,EAAAN,EAAAD,EAAA,IAQA,OANAvzC,MAAAtD,UAAA62C,EAAA,SAAAl5C,GACAy5C,EAAAN,EAAAn5C,KACAy5C,EAAAN,EAAAn5C,MAIAy5C,GAGAl7C,QAAAm7C,KAAA,SAAAlB,EAAAS,EAAAjoC,GAEA,GAAA5N,MAAA61C,IAAA,iBAAAA,EACA,OAAA53C,MAAArB,MAGA,IAAAk5C,EAAAX,gBAAAC,EAAAxnC,GACAmoC,EAAA,GAEA,oBAAAF,EAAA,CACA,IAAAn0C,EAAAvG,QAAAu6C,UAAAN,EAAAS,GACAE,EAAAxzC,MAAAlB,KAAA+zC,EAAA1zC,SAEAq0C,EAAAxzC,MAAAlB,KAAA+zC,EAAAS,IAGA,IAAAU,EAAAR,EAAAD,EAAA,IAQA,OANAvzC,MAAAtD,UAAA62C,EAAA,SAAAl5C,GACA25C,EAAAR,EAAAn5C,KACA25C,EAAAR,EAAAn5C,MAIA25C,GAGAp7C,QAAAq7C,SAAA,SAAApB,EAAAS,EAAAjoC,GAEA,GAAA5N,MAAA61C,IAAA,iBAAAA,EACA,OAAA53C,MAAArB,MAGA,IAAAk5C,EAAAX,gBAAAC,EAAAxnC,GACAmoC,EAAA,GAEA,oBAAAF,EAAA,CACA,IAAAn0C,EAAAvG,QAAAu6C,UAAAN,EAAAS,GACAE,EAAAxzC,MAAAlB,KAAA+zC,EAAA1zC,SAEAq0C,EAAAxzC,MAAAlB,KAAA+zC,EAAAS,IAGA,IAAAI,EAAA,GAEA1zC,MAAAtD,UAAA62C,EAAA,SAAAl5C,GACAq5C,EAAA/2C,KAAA62C,EAAAn5C,MAEAq5C,EAAAf,QAAAe,GAEA,IAAAp3C,EAAA,EAMA,OAJA0D,MAAAtD,UAAAg3C,EAAA,SAAAr5C,GACAiC,GAAAjC,IAGAiC,GAGA1D,QAAAs7C,OAAA,SAAArB,EAAAS,EAAAjoC,GAEA,GAAA5N,MAAA61C,IAAA,iBAAAA,EACA,OAAA53C,MAAArB,MAEA,IAAAk5C,EAAAX,gBAAAC,EAAAxnC,GACAmoC,EAAA,GAEA,oBAAAF,EAAA,CACA,IAAAn0C,EAAAvG,QAAAu6C,UAAAN,EAAAS,GACAE,EAAAxzC,MAAAlB,KAAA+zC,EAAA1zC,SAEAq0C,EAAAxzC,MAAAlB,KAAA+zC,EAAAS,IAEA,IAAAI,EAAA,GAOA,OALA1zC,MAAAtD,UAAA62C,EAAA,SAAAl5C,GACAq5C,EAAA/2C,KAAA62C,EAAAn5C,MAEAq5C,EAAAf,QAAAe,GAEAjB,MAAAjxC,MAAAC,EAAAiyC,IAGA96C,QAAAu7C,QAAA,SAAAtB,EAAAS,EAAAjoC,GAEA,GAAA5N,MAAA61C,IAAA,iBAAAA,EACA,OAAA53C,MAAArB,MAEA,IAAAk5C,EAAAX,gBAAAC,EAAAxnC,GACAmoC,EAAA,GAEA,oBAAAF,EAAA,CACA,IAAAn0C,EAAAvG,QAAAu6C,UAAAN,EAAAS,GACAE,EAAAxzC,MAAAlB,KAAA+zC,EAAA1zC,SAEAq0C,EAAAxzC,MAAAlB,KAAA+zC,EAAAS,IAGA,IAAAI,EAAA,GAOA,OALA1zC,MAAAtD,UAAA62C,EAAA,SAAAl5C,GACAq5C,EAAA/2C,KAAA62C,EAAAn5C,MAEAq5C,EAAAf,QAAAe,GAEAjB,MAAAjxC,MAAAE,EAAAgyC,IAGA96C,QAAAw7C,KAAA,SAAAvB,EAAAS,EAAAjoC,GAEA,GAAA5N,MAAA61C,IAAA,iBAAAA,EACA,OAAA53C,MAAArB,MAEA,IAAAk5C,EAAAX,gBAAAC,EAAAxnC,GACAmoC,EAAA,GAEA,oBAAAF,EAAA,CACA,IAAAn0C,EAAAvG,QAAAu6C,UAAAN,EAAAS,GACAE,EAAAxzC,MAAAlB,KAAA+zC,EAAA1zC,SAEAq0C,EAAAxzC,MAAAlB,KAAA+zC,EAAAS,IAGA,IAAAI,EAAA,GAMA,OAJA1zC,MAAAtD,UAAA62C,EAAA,SAAAl5C,GACAq5C,EAAA/2C,KAAA62C,EAAAn5C,MAGAq4C,MAAA/wC,IAAA+xC,IAGA96C,QAAAy7C,KAAA,SAAAxB,EAAAS,EAAAjoC,GAEA,GAAA5N,MAAA61C,IAAA,iBAAAA,EACA,OAAA53C,MAAArB,MAEA,IAAAk5C,EAAAX,gBAAAC,EAAAxnC,GACAmoC,EAAA,GAEA,oBAAAF,EAAA,CACA,IAAAn0C,EAAAvG,QAAAu6C,UAAAN,EAAAS,GACAE,EAAAxzC,MAAAlB,KAAA+zC,EAAA1zC,SAEAq0C,EAAAxzC,MAAAlB,KAAA+zC,EAAAS,IAEA,IAAAI,EAAA,GAMA,OAJA1zC,MAAAtD,UAAA62C,EAAA,SAAAl5C,GACAq5C,EAAA/2C,KAAA62C,EAAAn5C,MAGAo4C,MAAA7wC,IAAAH,EAAAiyC,IAGA96C,QAAA07C,MAAA,SAAAzB,EAAAS,EAAAjoC,GAEA,GAAA5N,MAAA61C,IAAA,iBAAAA,EACA,OAAA53C,MAAArB,MAEA,IAAAk5C,EAAAX,gBAAAC,EAAAxnC,GACAmoC,EAAA,GAEA,oBAAAF,EAAA,CACA,IAAAn0C,EAAAvG,QAAAu6C,UAAAN,EAAAS,GACAE,EAAAxzC,MAAAlB,KAAA+zC,EAAA1zC,SAEAq0C,EAAAxzC,MAAAlB,KAAA+zC,EAAAS,IAEA,IAAAI,EAAA,GAMA,OAJA1zC,MAAAtD,UAAA62C,EAAA,SAAAl5C,GACAq5C,EAAA/2C,KAAA62C,EAAAn5C,MAGAo4C,MAAA7wC,IAAAF,EAAAgyC,qBCjYA,IAAAh4C,EAAYxC,EAAQ,GACpB8G,EAAY9G,EAAQ,GACpBgH,EAAkBhH,EAAQ,GAE1BN,EAAA27C,IAAA,WAGA,IAFA,IAAA93C,EAAAuD,EAAA3D,QAAAG,WACAF,GAAA,EACAlD,EAAA,EAAiBA,EAAAqD,EAAAP,OAAiB9C,IAClCqD,EAAArD,KACAkD,GAAA,GAGA,OAAAA,GAGA1D,EAAA47C,OAAA,WACA,GAAAh4C,UAAAN,OAAA,EACA,OAAAR,EAAAD,GAGA,IAAA0D,EAAA3C,UAAA,GACA,OAAA2C,EAAA,GAAAA,EAAA,IACAzD,EAAArB,MAGAmC,UAAAN,OAAAiD,EAAA,EACAzD,EAAArB,MAGAmC,UAAA2C,IAGAvG,EAAA67C,MAAA,WACA,UAGA77C,EAAA87C,GAAA,SAAAlyC,EAAAmyC,EAAAC,GACA,OAAApyC,EAAAmyC,EAAAC,GAGAh8C,EAAAi8C,QAAA,SAAAx6C,EAAAy6C,GACA,OAAA50C,EAAAid,QAAA9iB,GACAy6C,EAEAz6C,GAGAzB,EAAAm8C,KAAA,SAAA16C,EAAA26C,GACA,OAAA36C,IAAAqB,EAAAD,GAAAu5C,EAAA36C,GAGAzB,EAAAq8C,IAAA,SAAAC,GACA,OAAAA,GAGAt8C,EAAAu8C,GAAA,WAGA,IAFA,IAAA14C,EAAAuD,EAAA3D,QAAAG,WACAF,GAAA,EACAlD,EAAA,EAAiBA,EAAAqD,EAAAP,OAAiB9C,IAClCqD,EAAArD,KACAkD,GAAA,GAGA,OAAAA,GAGA1D,EAAAw8C,KAAA,WACA,UAGAx8C,EAAAy8C,IAAA,WAGA,IAFA,IAAA54C,EAAAuD,EAAA3D,QAAAG,WACAF,EAAA,EACAlD,EAAA,EAAiBA,EAAAqD,EAAAP,OAAiB9C,IAClCqD,EAAArD,IACAkD,IAGA,WAAAY,KAAAsH,MAAAtH,KAAAkD,IAAA9D,MAGA1D,EAAA08C,OAAA,WACA,IAAAh5C,EAEA,GAAAE,UAAAN,OAAA,GACA,IAAAq5C,EAAA/4C,UAAA,GACAg5C,EAAAh5C,UAAAN,OAAA,EACAu5C,EAAAv4C,KAAAsH,MAAAgxC,EAAA,GACAE,GAAA,EACAC,EAAAH,EAAA,KACAI,EAAAJ,EAAA,UAAAh5C,oBAAAN,OAAA,GAEA,GAAAu5C,EACA,QAAAt2C,EAAA,EAAyBA,EAAAs2C,EAAqBt2C,IAC9C,GAAAo2C,IAAA/4C,UAAA,EAAA2C,EAAA,IACA7C,EAAAE,UAAA,EAAA2C,EAAA,GACAu2C,GAAA,EACA,MAKAA,IACAp5C,EAAAq5C,EAAAC,EAAAl6C,EAAAD,SAGAa,EAAAZ,EAAArB,MAGA,OAAAiC,oBC7GA,IAAAZ,EAAYxC,EAAQ,GACpBwzC,EAAexzC,EAAQ,GACvB8G,EAAY9G,EAAQ,GAEpB,SAAA28C,EAAAn8C,GACA,OAAAA,KAAAgF,UAAAjB,MAAA/D,EAAAgF,WAGA,SAAAo3C,EAAAp8C,GACA,OAAAA,aAAA8D,KAAA9D,EAAA,IAAA8D,KAAA9D,GAGAd,EAAAm9C,QAAA,SAAAC,EAAA/wB,EAAAgxB,EAAAzkB,EAAA0kB,EAAAC,EAAArzB,GAKA,OAHAkzB,EAAAF,EAAAE,GACA/wB,EAAA6wB,EAAA7wB,GACAgxB,EAAAH,EAAAG,GACAJ,EAAAG,IAAAH,EAAA5wB,IAAA4wB,EAAAI,GAKAzkB,GAAA,GAAA0kB,GAAA,EACAx6C,EAAAF,KAIA,YAAAuE,QAAAo2C,GACAz6C,EAAAF,KAIA,gBAAAuE,QAAA+iB,GACApnB,EAAAF,IAIAy6C,GAAAD,EACAt6C,EAAAF,KAKAsnB,KAAA,GADAozB,KAAA,GAIA1kB,EAAAkb,EAAA7pB,SAAAmzB,EAAAC,EAAAnzB,IA5BApnB,EAAArB,OAgCAzB,EAAAw9C,SAAA,WACA,UAAA/6C,MAAA,gCAIAzC,EAAAy9C,UAAA,WACA,UAAAh7C,MAAA,iCAIAzC,EAAA09C,SAAA,WACA,UAAAj7C,MAAA,gCAIAzC,EAAA29C,UAAA,WACA,UAAAl7C,MAAA,iCAIAzC,EAAA49C,SAAA,WACA,UAAAn7C,MAAA,gCAIAzC,EAAA69C,WAAA,WACA,UAAAp7C,MAAA,kCAIAzC,EAAA89C,QAAA,WACA,UAAAr7C,MAAA,+BAIAzC,EAAA+9C,QAAA,WACA,UAAAt7C,MAAA,+BAIAzC,EAAAg+C,QAAA,WACA,UAAAv7C,MAAA,+BAGAzC,EAAAi+C,QAAA,SAAArlB,EAAAslB,EAAAz8C,EAAAigB,EAAAE,EAAAhb,GAQA,GAHAgyB,EAAAxxB,EAAAtC,YAAA8zB,GACAslB,EAAA92C,EAAAtC,YAAAo5C,GACAz8C,EAAA2F,EAAAtC,YAAArD,GACA2F,EAAApB,WAAA4yB,EAAAslB,EAAAz8C,GACA,OAAAqB,EAAArB,MAIA,GAAAm3B,GAAA,GAAAslB,GAAA,GAAAz8C,GAAA,EACA,OAAAqB,EAAAF,IAIA,GAAA8e,EAAA,GAAAE,EAAA,GAAAF,EAAAE,EACA,OAAA9e,EAAAF,IAIA,OAAAgE,GAAA,IAAAA,EACA,OAAA9D,EAAAF,IAIA,IAAAu7C,EAAAn+C,EAAAo+C,IAAAxlB,EAAAslB,EAAAz8C,EAAA,EAAAmF,GACAy3C,EAAA,EAEA,IAAA38B,GACA,IAAA9a,IACAy3C,GAAA58C,EACAigB,KAIA,QAAAlhB,EAAAkhB,EAAqBlhB,GAAAohB,EAAUphB,IAE/B69C,GADA,IAAAz3C,EACA5G,EAAAs+C,GAAA1lB,EAAAp4B,EAAA,EAAA29C,EAAA18C,EAAA,GAAA08C,EAEAn+C,EAAAs+C,GAAA1lB,EAAAp4B,EAAA,EAAA29C,EAAA18C,EAAA,GAMA,OAHA48C,GAAAzlB,GAMA54B,EAAAu+C,SAAA,SAAA3lB,EAAAslB,EAAAz8C,EAAAigB,EAAAE,EAAAhb,GAOA,GAHAgyB,EAAAxxB,EAAAtC,YAAA8zB,GACAslB,EAAA92C,EAAAtC,YAAAo5C,GACAz8C,EAAA2F,EAAAtC,YAAArD,GACA2F,EAAApB,WAAA4yB,EAAAslB,EAAAz8C,GACA,OAAAqB,EAAArB,MAIA,GAAAm3B,GAAA,GAAAslB,GAAA,GAAAz8C,GAAA,EACA,OAAAqB,EAAAF,IAIA,GAAA8e,EAAA,GAAAE,EAAA,GAAAF,EAAAE,EACA,OAAA9e,EAAAF,IAIA,OAAAgE,GAAA,IAAAA,EACA,OAAA9D,EAAAF,IAIA,IAAAu7C,EAAAn+C,EAAAo+C,IAAAxlB,EAAAslB,EAAAz8C,EAAA,EAAAmF,GACA43C,EAAA,EACA,IAAA98B,IAEA88B,EADA,IAAA53C,EACAu3C,EAAA18C,EAAAm3B,EAEAulB,EAEAz8B,KAEA,QAAAlhB,EAAAkhB,EAAqBlhB,GAAAohB,EAAUphB,IAE/Bg+C,GADA53C,EAAA,EACAu3C,GAAAn+C,EAAAs+C,GAAA1lB,EAAAp4B,EAAA,EAAA29C,EAAA18C,EAAA,GAAA08C,GAAAvlB,EAEAulB,EAAAn+C,EAAAs+C,GAAA1lB,EAAAp4B,EAAA,EAAA29C,EAAA18C,EAAA,GAAAm3B,EAKA,OAAA4lB,GAGAx+C,EAAAy+C,GAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAA94B,GASA,GAPAA,OAAA/gB,IAAA+gB,EAAA,GAAAA,EAEA24B,EAAAt3C,EAAAtC,YAAA45C,GACAC,EAAAv3C,EAAAtC,YAAA65C,GACAC,EAAAx3C,EAAAtC,YAAA85C,GACAC,EAAAz3C,EAAAtC,YAAA+5C,GACA94B,EAAA3e,EAAAtC,YAAAihB,GACA3e,EAAApB,WAAA04C,EAAAC,EAAAC,EAAAC,EAAA94B,GACA,OAAAjjB,EAAArB,MAIA,GAAAi9C,EAAA,GAAAC,EAAA,GAAAC,EAAA,GAAAC,EAAA,EACA,OAAA/7C,EAAAF,IAIA,qCAAAuE,QAAA4e,GACA,OAAAjjB,EAAAF,IAIA,GAAAi8C,EAAAD,EACA,OAAA97C,EAAAF,IAIA,GAAA+7C,GAAAD,EACA,SAaA,IATA,IAAA9lB,GAAA,EAAAt0B,KAAAmL,IAAAkvC,EAAAD,EAAA,EAAAE,IAAAE,QAAA,GAGAz4C,EAAAq4C,EAAA9lB,EAAA7S,EAAA,GAGA6C,EAAAviB,EACAgsB,EAAA,EACA0sB,EAAAF,IAAAD,IAAA,EAAAC,EACAr+C,EAAA,EAAiBA,GAAAu+C,EAAcv+C,IAE/BooB,GADAyJ,GAAAqsB,EAAA91B,GAAAgQ,EAKA,WAAAimB,EAEAx4C,EACGw4C,IAAAD,GAEHF,EAAA91B,GAAAgQ,EAEAvG,GAIAryB,EAAAg/C,IAAA,SAAAN,EAAAC,EAAAC,EAAAC,EAAA/kB,GASA,GAPAA,OAAA90B,IAAA80B,EAAA,EAAAA,EAEA4kB,EAAAt3C,EAAAtC,YAAA45C,GACAC,EAAAv3C,EAAAtC,YAAA65C,GACAC,EAAAx3C,EAAAtC,YAAA85C,GACAC,EAAAz3C,EAAAtC,YAAA+5C,GACA/kB,EAAA1yB,EAAAtC,YAAAg1B,GACA1yB,EAAApB,WAAA04C,EAAAC,EAAAC,EAAAC,EAAA/kB,GACA,OAAAh3B,EAAArB,MAIA,GAAAi9C,EAAA,GAAAC,EAAA,GAAAC,EAAA,GAAAC,EAAA,GAAA/kB,GAAA,EACA,OAAAh3B,EAAAF,IAIA,GAAAi8C,EAAAD,EACA,OAAA97C,EAAAF,IAIA,GAAA+7C,GAAAD,EACA,SAMA,IAFA,IAAA91B,EAAA,EACAyJ,EAAA,EACA7xB,EAAA,EAAiBA,GAAAq+C,EAAar+C,IAE9BooB,GADAyJ,EAAA/tB,KAAA8X,IAAA0d,EAAA8kB,GAAAF,EAAA91B,GAAA81B,EAAAC,EAAA/1B,GAKA,OAAAyJ,GAIAryB,EAAAi/C,KAAA,WACA,UAAAx8C,MAAA,4BAGAzC,EAAAk/C,SAAA,SAAAC,EAAAC,GAKA,GAFAD,EAAA/3C,EAAAtC,YAAAq6C,GACAC,EAAAh4C,EAAAtC,YAAAs6C,GACAh4C,EAAApB,WAAAm5C,EAAAC,GACA,OAAAt8C,EAAArB,MAIA,GAAA29C,EAAA,EACA,OAAAt8C,EAAAF,IAIA,GAAAw8C,GAAA,GAAAA,EAAA,EACA,OAAAt8C,EAAAJ,KAIA08C,EAAAv5C,SAAAu5C,EAAA,IAGA,IAAA17C,EAAAmC,SAAAs5C,EAAA,IAGAz7C,GAAAy7C,EAAA,EAAA76C,KAAAmL,IAAA,GAAAnL,KAAAwH,KAAAxH,KAAAsD,IAAAw3C,GAAA96C,KAAA+J,OAAA+wC,EAGA,IAAA5vC,EAAAlL,KAAAmL,IAAA,GAAAnL,KAAAwH,KAAAxH,KAAAsD,IAAAw3C,GAAA96C,KAAAgK,KAAA,GAIA,OAHA5K,EAAAY,KAAAC,MAAAb,EAAA8L,MAMAxP,EAAAq/C,SAAA,SAAAF,EAAAC,GAKA,GAFAD,EAAA/3C,EAAAtC,YAAAq6C,GACAC,EAAAh4C,EAAAtC,YAAAs6C,GACAh4C,EAAApB,WAAAm5C,EAAAC,GACA,OAAAt8C,EAAArB,MAIA,GAAA29C,EAAA,EACA,OAAAt8C,EAAAF,IAIA,GAAAw8C,GAAA,GAAAA,EAAA,EACA,OAAAt8C,EAAAJ,KAIA08C,EAAAv5C,SAAAu5C,EAAA,IAGA,IAAA17C,EAAAmC,SAAAs5C,EAAA,IAMA,OAHAz7C,GAAAy7C,EAAA,EAAA76C,KAAAmL,IAAA,IAAAnL,KAAAwH,KAAAxH,KAAAsD,IAAAw3C,GAAA96C,KAAA+J,OAAA+wC,GAOAp/C,EAAAs/C,SAAA,WACA,UAAA78C,MAAA,gCAGAzC,EAAAu/C,OAAA,SAAA3mB,EAAAslB,GAGA,OAFAtlB,EAAAxxB,EAAAtC,YAAA8zB,GACAslB,EAAA92C,EAAAtC,YAAAo5C,GACA92C,EAAApB,WAAA4yB,EAAAslB,GACAp7C,EAAArB,MAIAm3B,GAAA,GAAAslB,EAAA,EACAp7C,EAAAF,KAIAs7C,EAAAr4C,SAAAq4C,EAAA,IAGA55C,KAAAmL,IAAA,EAAAmpB,EAAAslB,KAAA,IAGAl+C,EAAAs+C,GAAA,SAAA1lB,EAAAslB,EAAAC,EAAA18C,EAAAmF,GAWA,GARAnF,KAAA,EACAmF,KAAA,EAEAgyB,EAAAxxB,EAAAtC,YAAA8zB,GACAslB,EAAA92C,EAAAtC,YAAAo5C,GACAC,EAAA/2C,EAAAtC,YAAAq5C,GACA18C,EAAA2F,EAAAtC,YAAArD,GACAmF,EAAAQ,EAAAtC,YAAA8B,GACAQ,EAAApB,WAAA4yB,EAAAslB,EAAAC,EAAA18C,EAAAmF,GACA,OAAA9D,EAAArB,MAIA,IAAAiC,EACA,OAAAk1B,EACAl1B,EAAAjC,EAAA08C,EAAAD,MACG,CACH,IAAAsB,EAAAl7C,KAAAmL,IAAA,EAAAmpB,EAAAslB,GAEAx6C,EADA,IAAAkD,EACAnF,EAAA+9C,EAAArB,GAAA,EAAAvlB,IAAA4mB,EAAA,GAAA5mB,EAEAn3B,EAAA+9C,EAAArB,GAAAqB,EAAA,GAAA5mB,EAGA,OAAAl1B,GAGA1D,EAAAy/C,WAAA,SAAAjB,EAAAkB,GAGA,GAFAlB,EAAAp3C,EAAAtC,YAAA05C,GACAkB,EAAAt4C,EAAAlC,iBAAAkC,EAAA3D,QAAAi8C,IACAt4C,EAAApB,WAAAw4C,EAAAkB,GACA,OAAA58C,EAAArB,MAOA,IAJA,IAAAQ,EAAAy9C,EAAAp8C,OACAq8C,EAAAnB,EAGAh+C,EAAA,EAAiBA,EAAAyB,EAAOzB,IAExBm/C,GAAA,EAAAD,EAAAl/C,GAIA,OAAAm/C,GAIA3/C,EAAA4/C,QAAA,WACA,UAAAn9C,MAAA,+BAGAzC,EAAA6/C,KAAA,SAAAjnB,EAAAimB,EAAAX,EAAA4B,EAAAH,EAAA/4C,GAYA,GATA+4C,KAAA,EACA/4C,KAAA,EAEAgyB,EAAAxxB,EAAAtC,YAAA8zB,GACAimB,EAAAz3C,EAAAtC,YAAA+5C,GACAX,EAAA92C,EAAAtC,YAAAo5C,GACA4B,EAAA14C,EAAAtC,YAAAg7C,GACAH,EAAAv4C,EAAAtC,YAAA66C,GACA/4C,EAAAQ,EAAAtC,YAAA8B,GACAQ,EAAApB,WAAA4yB,EAAAimB,EAAAX,EAAA4B,EAAAH,EAAA/4C,GACA,OAAA9D,EAAArB,MAIA,IAAA08C,EAAAn+C,EAAAo+C,IAAAxlB,EAAAslB,EAAA4B,EAAAH,EAAA/4C,GAmBA,OAfA,IAAAi4C,EACA,IAAAj4C,EACA,GAEAk5C,EAGA,IAAAl5C,EACA5G,EAAAs+C,GAAA1lB,EAAAimB,EAAA,EAAAV,EAAA2B,EAAA,GAAA3B,EAEAn+C,EAAAs+C,GAAA1lB,EAAAimB,EAAA,EAAAV,EAAA2B,EAAA,IAKAlnB,GAGA54B,EAAA+/C,IAAA,SAAA5mC,EAAA6mC,GAOA,GAJAA,KAAA,EAEA7mC,EAAA/R,EAAAlC,iBAAAkC,EAAA3D,QAAA0V,IACA6mC,EAAA54C,EAAAtC,YAAAk7C,GACA54C,EAAApB,WAAAmT,EAAA6mC,GACA,OAAAl9C,EAAArB,MA4BA,IAxBA,IAAAw+C,EAAA,SAAA9mC,EAAA+mC,EAAAtnB,GAGA,IAFA,IAAAt3B,EAAAs3B,EAAA,EACAl1B,EAAAyV,EAAA,GACA3Y,EAAA,EAAmBA,EAAA2Y,EAAA7V,OAAmB9C,IACtCkD,GAAAyV,EAAA3Y,GAAA8D,KAAAmL,IAAAnO,GAAA4+C,EAAA1/C,GAAA0/C,EAAA,SAEA,OAAAx8C,GAIAy8C,EAAA,SAAAhnC,EAAA+mC,EAAAtnB,GAGA,IAFA,IAAAt3B,EAAAs3B,EAAA,EACAl1B,EAAA,EACAlD,EAAA,EAAmBA,EAAA2Y,EAAA7V,OAAmB9C,IAAA,CACtC,IAAAwtB,GAAAkyB,EAAA1/C,GAAA0/C,EAAA,QACAx8C,GAAAsqB,EAAA7U,EAAA3Y,GAAA8D,KAAAmL,IAAAnO,EAAA0sB,EAAA,GAEA,OAAAtqB,GAIAw8C,EAAA,GACAE,GAAA,EACAjX,GAAA,EACA3oC,EAAA,EAAiBA,EAAA2Y,EAAA7V,OAAmB9C,IACpC0/C,EAAA1/C,GAAA,IAAAA,EAAA,EAAA0/C,EAAA1/C,EAAA,OACA2Y,EAAA3Y,GAAA,IACA4/C,GAAA,GAEAjnC,EAAA3Y,GAAA,IACA2oC,GAAA,GAKA,IAAAiX,IAAAjX,EACA,OAAArmC,EAAAF,IAKA,IAMAy9C,EAAAC,EAAAC,EANAC,EADAR,OAAAh7C,IAAAg7C,EAAA,GAAAA,EAQAS,GAAA,EACA,GAEAJ,EAAAG,GADAD,EAAAN,EAAA9mC,EAAA+mC,EAAAM,IACAL,EAAAhnC,EAAA+mC,EAAAM,GACAF,EAAAh8C,KAAAkD,IAAA64C,EAAAG,GACAA,EAAAH,EACAI,EAAAH,EAVA,OAUAh8C,KAAAkD,IAAA+4C,GAVA,YAWGE,GAGH,OAAAD,GAGAxgD,EAAA0gD,MAAA,SAAA9nB,EAAAimB,EAAAX,EAAAz8C,GAKA,OAJAm3B,EAAAxxB,EAAAtC,YAAA8zB,GACAimB,EAAAz3C,EAAAtC,YAAA+5C,GACAX,EAAA92C,EAAAtC,YAAAo5C,GACAz8C,EAAA2F,EAAAtC,YAAArD,GACA2F,EAAApB,WAAA4yB,EAAAimB,EAAAX,EAAAz8C,GACAqB,EAAArB,MAIAA,EAAAm3B,GAAAimB,EAAAX,EAAA,IAIAl+C,EAAA2gD,UAAA,WACA,UAAAl+C,MAAA,iCAGAzC,EAAA4gD,KAAA,SAAAznC,EAAA0nC,EAAAC,GAIA,GAHA3nC,EAAA/R,EAAAlC,iBAAAkC,EAAA3D,QAAA0V,IACA0nC,EAAAz5C,EAAAtC,YAAA+7C,GACAC,EAAA15C,EAAAtC,YAAAg8C,GACA15C,EAAApB,WAAAmT,EAAA0nC,EAAAC,GACA,OAAAh+C,EAAArB,MASA,IALA,IAAAQ,EAAAkX,EAAA7V,OAGAy9C,EAAA,GACAC,EAAA,GACAxgD,EAAA,EAAiBA,EAAAyB,EAAOzB,IACxB2Y,EAAA3Y,GAAA,EACAugD,EAAAh9C,KAAAoV,EAAA3Y,IAEAwgD,EAAAj9C,KAAAoV,EAAA3Y,IAKA,IAAAoC,GAAA5C,EAAAihD,IAAAH,EAAAE,GAAA18C,KAAAmL,IAAA,EAAAqxC,EAAA7+C,EAAA,GACA6X,EAAA9Z,EAAAihD,IAAAJ,EAAAE,IAAA,EAAAF,GACA,OAAAv8C,KAAAmL,IAAA7M,EAAAkX,EAAA,GAAA7X,EAAA,OAGAjC,EAAAkhD,QAAA,SAAAtoB,EAAAslB,GAGA,OAFAtlB,EAAAxxB,EAAAtC,YAAA8zB,GACAslB,EAAA92C,EAAAtC,YAAAo5C,GACA92C,EAAApB,WAAA4yB,EAAAslB,GACAp7C,EAAArB,MAIAm3B,GAAA,GAAAslB,EAAA,EACAp7C,EAAAF,KAIAs7C,EAAAr4C,SAAAq4C,EAAA,KAGA55C,KAAAmL,IAAAmpB,EAAA,IAAAslB,GAAA,GAAAA,IAGAl+C,EAAAmhD,KAAA,SAAAvoB,EAAAulB,EAAA2B,EAAAH,EAAA/4C,GASA,GARAA,OAAA5B,IAAA4B,EAAA,EAAAA,EACA+4C,OAAA36C,IAAA26C,EAAA,EAAAA,EAEA/mB,EAAAxxB,EAAAtC,YAAA8zB,GACAulB,EAAA/2C,EAAAtC,YAAAq5C,GACA2B,EAAA14C,EAAAtC,YAAAg7C,GACAH,EAAAv4C,EAAAtC,YAAA66C,GACA/4C,EAAAQ,EAAAtC,YAAA8B,GACAQ,EAAApB,WAAA4yB,EAAAulB,EAAA2B,EAAAH,EAAA/4C,GACA,OAAA9D,EAAArB,MAIA,IAAAmB,EAAAu7C,GAAA,EAAAvlB,EAAAhyB,GAAA+4C,EAAA/mB,EACA9e,EAAAgmC,EAAAlnB,EAAAulB,GAAA,EAAAvlB,EAAAhyB,GACA,OAAAtC,KAAAsD,IAAAhF,EAAAkX,GAAAxV,KAAAsD,IAAA,EAAAgxB,IAGA54B,EAAAihD,IAAA,WACA,IAAAp9C,EAAAuD,EAAAlC,iBAAAkC,EAAA3D,QAAAG,YACA,GAAAC,aAAApB,MACA,OAAAoB,EAUA,IANA,IAAA+0B,EAAA/0B,EAAA,GAGApC,EAAA,EAGAwM,EAAA,EAAiBA,EAAApK,EAAAP,OAAiB2K,IAClCxM,GAAAoC,EAAAoK,GAAA3J,KAAAmL,IAAA,EAAAmpB,EAAA3qB,GAIA,OAAAxM,GAIAzB,EAAAohD,UAAA,WACA,UAAA3+C,MAAA,iCAIAzC,EAAAqhD,UAAA,WACA,UAAA5+C,MAAA,iCAIAzC,EAAAshD,UAAA,WACA,UAAA7+C,MAAA,iCAIAzC,EAAAuhD,UAAA,WACA,UAAA9+C,MAAA,iCAGAzC,EAAAwhD,UAAA,SAAA5oB,EAAAknB,EAAAH,GAIA,OAHA/mB,EAAAxxB,EAAAtC,YAAA8zB,GACAknB,EAAA14C,EAAAtC,YAAAg7C,GACAH,EAAAv4C,EAAAtC,YAAA66C,GACAv4C,EAAApB,WAAA4yB,EAAAknB,EAAAH,GACA78C,EAAArB,MAIAm3B,GAAA,EACA91B,EAAAF,KAIA0B,KAAAsD,IAAA+3C,GAAAr7C,KAAAsD,IAAAk4C,IAAAx7C,KAAAsD,IAAA,EAAAgxB,IAGA54B,EAAAo+C,IAAA,SAAAxlB,EAAAslB,EAAA4B,EAAAH,EAAA/4C,GAEA,QAAA5B,IAAA86C,EACA,SAWA,GARAH,KAAA,EACA/4C,KAAA,EAEAgyB,EAAAxxB,EAAAtC,YAAA8zB,GACAslB,EAAA92C,EAAAtC,YAAAo5C,GACA4B,EAAA14C,EAAAtC,YAAAg7C,GACAH,EAAAv4C,EAAAtC,YAAA66C,GACA/4C,EAAAQ,EAAAtC,YAAA8B,GACAQ,EAAApB,WAAA4yB,EAAAslB,EAAA4B,EAAAH,EAAA/4C,GACA,OAAA9D,EAAArB,MAIA,IAAAiC,EACA,OAAAk1B,EACAl1B,GAAAo8C,EAAAH,GAAAzB,MACG,CACH,IAAAsB,EAAAl7C,KAAAmL,IAAA,EAAAmpB,EAAAslB,GAEAx6C,EADA,IAAAkD,GACA+4C,EAAA/mB,GAAA4mB,EAAA,GAAAM,EAAAlnB,GAAA,IAAA4mB,KAAA,EAAA5mB,GAEA+mB,EAAA/mB,GAAA4mB,EAAA,GAAAM,EAAAlnB,GAAA,IAAA4mB,GAGA,OAAA97C,GAGA1D,EAAAyhD,KAAA,SAAA7oB,EAAAimB,EAAAX,EAAA4B,EAAAH,EAAA/4C,GASA,OARA+4C,KAAA,EACA/4C,KAAA,EAEAgyB,EAAAxxB,EAAAtC,YAAA8zB,GACAslB,EAAA92C,EAAAtC,YAAAo5C,GACA4B,EAAA14C,EAAAtC,YAAAg7C,GACAH,EAAAv4C,EAAAtC,YAAA66C,GACA/4C,EAAAQ,EAAAtC,YAAA8B,GACAQ,EAAApB,WAAA4yB,EAAAslB,EAAA4B,EAAAH,EAAA/4C,GACA9D,EAAArB,MAGAzB,EAAAo+C,IAAAxlB,EAAAslB,EAAA4B,EAAAH,EAAA/4C,GAAA5G,EAAA6/C,KAAAjnB,EAAAimB,EAAAX,EAAA4B,EAAAH,EAAA/4C,IAIA5G,EAAA0hD,MAAA,WACA,UAAAj/C,MAAA,6BAIAzC,EAAA2hD,UAAA,WACA,UAAAl/C,MAAA,iCAIAzC,EAAA4hD,SAAA,WACA,UAAAn/C,MAAA,gCAGAzC,EAAA6hD,GAAA,SAAAjpB,EAAAslB,EAAAC,EAAAwB,EAAA/4C,GASA,OARA+4C,KAAA,EACA/4C,KAAA,EAEAgyB,EAAAxxB,EAAAtC,YAAA8zB,GACAslB,EAAA92C,EAAAtC,YAAAo5C,GACAC,EAAA/2C,EAAAtC,YAAAq5C,GACAwB,EAAAv4C,EAAAtC,YAAA66C,GACA/4C,EAAAQ,EAAAtC,YAAA8B,GACAQ,EAAApB,WAAA4yB,EAAAslB,EAAAC,EAAAwB,EAAA/4C,GACA9D,EAAArB,MAIA,IAAAm3B,GACAulB,EAAAD,EAAAyB,IAEA,EAAAr7C,KAAAmL,IAAA,EAAAmpB,EAAAslB,IAAAtlB,EAAAulB,GAAA,EAAAvlB,EAAAhyB,GAAA+4C,GAAAr7C,KAAAmL,IAAA,EAAAmpB,EAAAslB,IAIAl+C,EAAA8hD,KAAA,SAAA5D,EAAAC,EAAA2B,EAAAH,EAAA/4C,EAAAo5C,GAaA,GAVAA,OAAAh7C,IAAAg7C,EAAA,IAAAA,EACAL,OAAA36C,IAAA26C,EAAA,EAAAA,EACA/4C,OAAA5B,IAAA4B,EAAA,EAAAA,EAEAs3C,EAAA92C,EAAAtC,YAAAo5C,GACAC,EAAA/2C,EAAAtC,YAAAq5C,GACA2B,EAAA14C,EAAAtC,YAAAg7C,GACAH,EAAAv4C,EAAAtC,YAAA66C,GACA/4C,EAAAQ,EAAAtC,YAAA8B,GACAo5C,EAAA54C,EAAAtC,YAAAk7C,GACA54C,EAAApB,WAAAk4C,EAAAC,EAAA2B,EAAAH,EAAA/4C,EAAAo5C,GACA,OAAAl9C,EAAArB,MAIA,IAMAsgD,EAAAliB,EAAA7E,EAAA5hB,EAAA,EACA8lB,EAAA,EACA1+B,EAAA,EACAo4B,EAAAonB,EAWA,IAVA17C,KAAAkD,IAAAoxB,GAVA,MAWAknB,GAAA,EAAA5B,EAAAtlB,GAAAulB,GAAA,EAAAvlB,EAAAhyB,GAAAs3C,EAAAyB,EAGAG,GADA5gB,EAAA56B,KAAAkI,IAAA0xC,EAAA55C,KAAAsD,IAAA,EAAAgxB,KACAulB,GAAA,EAAAvlB,EAAAhyB,IAAAs4B,EAAA,GAAAygB,EAEAoC,EAAAjC,EAAA3B,EAAAD,EAAAyB,EACA9f,EAAAigB,EAAA5gB,EAAAif,GAAA,EAAAvlB,EAAAhyB,IAAAs4B,EAAA,GAAAygB,EACAn/C,EAAAw6B,EAAA,EACA5hB,EAAAwf,EACAt0B,KAAAkD,IAAAu6C,EAAAliB,GApBA,OAoBAr/B,EAjBA,IAkBAo4B,GAAAiH,EAAA7E,EAAA+mB,EAAA3oC,IAAAymB,EAAAkiB,GACA/mB,EAAA5hB,EACAA,EAAAwf,EAOAmpB,EAAAliB,EACAA,EAPAv7B,KAAAkD,IAAAoxB,GAxBA,MAyBAknB,GAAA,EAAA5B,EAAAtlB,GAAAulB,GAAA,EAAAvlB,EAAAhyB,GAAAs3C,EAAAyB,EAGAG,GADA5gB,EAAA56B,KAAAkI,IAAA0xC,EAAA55C,KAAAsD,IAAA,EAAAgxB,KACAulB,GAAA,EAAAvlB,EAAAhyB,IAAAs4B,EAAA,GAAAygB,IAIAn/C,EAEA,OAAAo4B,GAIA54B,EAAAgiD,SAAA,WACA,UAAAv/C,MAAA,gCAGAzC,EAAAiiD,IAAA,SAAA/D,EAAA4B,EAAAH,GAIA,OAHAzB,EAAA92C,EAAAtC,YAAAo5C,GACA4B,EAAA14C,EAAAtC,YAAAg7C,GACAH,EAAAv4C,EAAAtC,YAAA66C,GACAv4C,EAAApB,WAAAk4C,EAAA4B,EAAAH,GACA78C,EAAArB,MAIA,IAAAy8C,GAAA,IAAA4B,EACAh9C,EAAAF,IAIA0B,KAAAmL,IAAAkwC,EAAAG,EAAA,EAAA5B,GAAA,GAGAl+C,EAAAkiD,IAAA,SAAAxD,EAAAC,EAAAC,GAIA,OAHAF,EAAAt3C,EAAAtC,YAAA45C,GACAC,EAAAv3C,EAAAtC,YAAA65C,GACAC,EAAAx3C,EAAAtC,YAAA85C,GACAx3C,EAAApB,WAAA04C,EAAAC,EAAAC,GACA97C,EAAArB,MAIA,IAAAm9C,EACA97C,EAAAF,KAIA87C,EAAAC,GAAAC,GAGA5+C,EAAAmiD,IAAA,SAAAzD,EAAAC,EAAAC,EAAAC,GAMA,OAJAH,EAAAt3C,EAAAtC,YAAA45C,GACAC,EAAAv3C,EAAAtC,YAAA65C,GACAC,EAAAx3C,EAAAtC,YAAA85C,GACAC,EAAAz3C,EAAAtC,YAAA+5C,GACAz3C,EAAApB,WAAA04C,EAAAC,EAAAC,EAAAC,GACA/7C,EAAArB,MAIA,IAAAm9C,EACA97C,EAAAF,IAIAi8C,EAAA,GAAAA,EAAAD,EACA97C,EAAAF,KAOA87C,EAAAC,IAAAC,GAHAC,EAAAh5C,SAAAg5C,EAAA,KAGA,MAAAD,KAAA,KAGA5+C,EAAAoiD,QAAA,SAAA/E,EAAAgF,EAAAC,GAIA,OAHAjF,EAAAj2C,EAAAzB,UAAA03C,GACAgF,EAAAj7C,EAAAzB,UAAA08C,GACAC,EAAAl7C,EAAAtC,YAAAw9C,GACAl7C,EAAApB,WAAAq3C,EAAAgF,EAAAC,GACAx/C,EAAArB,MAIA6gD,GAAA,EACAx/C,EAAAF,IAIAy6C,EAAAgF,EACAv/C,EAAAF,IAIAy/C,EAAAhF,EAAA,QACAv6C,EAAAF,IAIA,IAAA0/C,GAAA,IAAAA,EAAAxO,EAAAltB,QAAAy2B,EAAAgF,GAAA,KAGAriD,EAAAuiD,WAAA,SAAAlF,EAAAgF,EAAAC,GAIA,OAHAjF,EAAAj2C,EAAAzB,UAAA03C,GACAgF,EAAAj7C,EAAAzB,UAAA08C,GACAC,EAAAl7C,EAAAtC,YAAAw9C,GACAl7C,EAAApB,WAAAq3C,EAAAgF,EAAAC,GACAx/C,EAAArB,MAIA6gD,GAAA,EACAx/C,EAAAF,IAIAy6C,EAAAgF,EACAv/C,EAAAF,IAIAy/C,EAAAhF,EAAA,QACAv6C,EAAAF,IAIA,OAAA0/C,EAAAxO,EAAAltB,QAAAy2B,EAAAgF,GAAA,SAGAriD,EAAAwiD,WAAA,SAAAnF,EAAAgF,EAAAI,GAIA,OAHApF,EAAAj2C,EAAAzB,UAAA03C,GACAgF,EAAAj7C,EAAAzB,UAAA08C,GACAI,EAAAr7C,EAAAtC,YAAA29C,GACAr7C,EAAApB,WAAAq3C,EAAAgF,EAAAI,GACA3/C,EAAArB,MAIAghD,GAAA,EACA3/C,EAAAF,IAIAy6C,EAAAgF,EACAv/C,EAAAF,IAIAy/C,EAAAhF,EAAA,QACAv6C,EAAAF,IAIA,SAAA6/C,MAAA3O,EAAAltB,QAAAy2B,EAAAgF,GAAA,KAIAriD,EAAA0iD,IAAA,WACA,UAAAjgD,MAAA,2BA2EAzC,EAAA2iD,KAAA,SAAA/pB,EAAAzf,EAAA+mC,GAIA,GAHAtnB,EAAAxxB,EAAAtC,YAAA8zB,GACAzf,EAAA/R,EAAAlC,iBAAAkC,EAAA3D,QAAA0V,IACA+mC,EAAA94C,EAAArB,eAAAqB,EAAA3D,QAAAy8C,IACA94C,EAAApB,WAAA4yB,EAAAzf,EAAA+mC,GACA,OAAAp9C,EAAArB,MAIA,IADA,IAAAiC,EAAA,EACAlD,EAAA,EAAiBA,EAAA2Y,EAAA7V,OAAmB9C,IACpCkD,GAAAyV,EAAA3Y,GAAA8D,KAAAmL,IAAA,EAAAmpB,EAAAkb,EAAAntB,KAAAu5B,EAAA1/C,GAAA0/C,EAAA,SAEA,OAAAx8C,GAIA1D,EAAA4iD,MAAA,WACA,UAAAngD,MAAA,6BAIAzC,EAAA6iD,UAAA,WACA,UAAApgD,MAAA,iCAIAzC,EAAA8iD,SAAA,WACA,UAAArgD,MAAA,iDCnkCA,IAAAK,EAAYxC,EAAQ,GACpB8G,EAAY9G,EAAQ,GAEpBN,EAAA+iD,MAAA,SAAAC,EAAAC,EAAAC,GACA,OAAAF,GAAAC,IAIAD,aAAAz/C,MAIA,IAAAK,UAAAN,QACA,IAAA0/C,EAAA,GAAA1/C,SACA0/C,IAAAv/C,WAEAu/C,EAAAC,EAAA,IAEAD,EAAAC,EAAA,GAAAC,EAAA,GAbApgD,EAAAD,IAiBA7C,EAAAmjD,MAAA,SAAAC,EAAAJ,EAAAK,GAKA,IAJA,IAAAA,IACAA,EAAA,IAGAD,IAAAJ,EACA,OAAAlgD,EAAAD,GAMA,GAHA,IAAAe,UAAAN,SACA+/C,EAAA,KAEAL,aAAAz/C,OACA,OAAAT,EAAAD,GAGA,QAAAwgD,GAAA,IAAAA,GAAA,IAAAA,EACA,OAAAvgD,EAAAD,GAKA,IAAA0D,EACA+8C,EAHAN,IAAAv/C,UAIA,QAAA0C,EAAA,EAAmBA,EAAA68C,EAAA1/C,OAA0B6C,IAC7C,OAAAk9C,EAAA,CACA,GAAAL,EAAA78C,KAAAi9C,EACA,OAAAj9C,EAAA,EACO68C,EAAA78C,GAAAi9C,IACPE,EAGSN,EAAA78C,GAAAm9C,IACT/8C,EAAAJ,EAAA,EACAm9C,EAAAN,EAAA78C,KAJAI,EAAAJ,EAAA,EACAm9C,EAAAN,EAAA78C,UAMK,OAAAk9C,GACL,oBAAAD,GAEA,GADAA,IAAAv8C,QAAA,WACAm8C,EAAA78C,GAAA0M,cAAAoK,MAAAmmC,EAAAvwC,eACA,OAAA1M,EAAA,OAGA,GAAA68C,EAAA78C,KAAAi9C,EACA,OAAAj9C,EAAA,OAGK,QAAAk9C,EAAA,CACL,GAAAL,EAAA78C,KAAAi9C,EACA,OAAAj9C,EAAA,EACO68C,EAAA78C,GAAAi9C,IACPE,EAGSN,EAAA78C,GAAAm9C,IACT/8C,EAAAJ,EAAA,EACAm9C,EAAAN,EAAA78C,KAJAI,EAAAJ,EAAA,EACAm9C,EAAAN,EAAA78C,KASA,OAAAI,GAAAzD,EAAAD,IAGA7C,EAAAujD,QAAA,SAAAC,EAAAC,EAAAl9C,EAAAm9C,GAAA,GACA,IAAAF,GAAA,IAAAA,IAAAC,IAAAl9C,EACA,SAGA,QAAA/F,EAAA,EAAiBA,EAAAijD,EAAAngD,OAAkB9C,IAAA,CACnC,IAAAmG,EAAA88C,EAAAjjD,GACA,GAAAkjD,EAKA,GAAA7+C,MAAA2+C,IAaA,QAAA78C,EAAA,GAAAkM,cAAA1L,QAAAq8C,EAAA3wC,eACA,OAAAtM,EAAAI,EAAArD,OAAA,EAAAqD,EAAAJ,EAAA,GAAAzD,EAAAH,QAdA,CACA6gD,EAAAp8C,EAAAtC,YAAA0+C,GACA,IAAAG,EAAAv8C,EAAAtC,YAAA6B,EAAA,IAEA,GADAnG,IAAAijD,EAAAngD,OAAA,EAEA,OAAAiD,EAAAI,EAAArD,OAAA,EAAAqD,EAAAJ,EAAA,GAAAzD,EAAAH,IAEA,IAAAihD,EAAAx8C,EAAAtC,YAAA2+C,EAAAjjD,EAAA,SACA,GAAAgjD,GAAAG,GAAAH,GAAAI,EACA,OAAAr9C,EAAAI,EAAArD,OAAA,EAAAqD,EAAAJ,EAAA,GAAAzD,EAAAH,SAbA,GAAAgE,EAAA,KAAA68C,EACA,OAAAj9C,EAAAI,EAAArD,OAAA,EAAAqD,EAAAJ,EAAA,GAAAzD,EAAAH,IAuBA,UAAA6gD,EAAA,EAAA1gD,EAAAD,IAGA7C,EAAA6jD,QAAA,SAAAL,EAAAC,EAAAl9C,EAAAm9C,GACA,IAAAF,GAAA,IAAAA,IAAAC,IAAAl9C,EACA,OAAAzD,EAAAD,GAGA6gD,MAAA,EAIA,IAFA,IAAAI,EAAA18C,EAAAZ,UAAAi9C,GAEAjjD,EAAA,EAAiBA,EAAAsjD,EAAAxgD,OAA4B9C,IAAA,CAC7C,IAAAmG,EAAAm9C,EAAAtjD,GACA,IAAAkjD,GAAA/8C,EAAA,KAAA68C,GACA78C,EAAA,KAAA68C,GACAE,GAAA,iBAAA/8C,EAAA,SAAAA,EAAA,GAAAkM,cAAA1L,QAAAq8C,EAAA3wC,eACA,OAAAtM,EAAAI,EAAArD,OAAA,EAAAqD,EAAAJ,EAAA,GAAAzD,EAAAH,IAIA,OAAAG,EAAAD,IAGA7C,EAAA+jD,OAAA,WACA,IAAAX,EAAAJ,EAAAgB,EAAAC,EACA,OAAArgD,UAAAN,OAAA,CAEA8/C,EAAAx/C,UAAA,GAAAsgD,UACAlB,EAAAp/C,UAAA,GAEA,QAAApD,EAAA,EAAmBA,EAAAwiD,EAAA1/C,OAAwB9C,IAC3C,YAAAwiD,EAAAxiD,IAAA4iD,IAAAJ,EAAAxiD,GAAA0jD,UACA,OAAAlB,EAAAxiD,QAGG,OAAAoD,UAAAN,OAAA,CACH8/C,EAAAx/C,UAAA,GAAAsgD,UACAF,EAAApgD,UAAA,GACAqgD,EAAArgD,UAAA,GAEA,IAAApD,EAAA,EAAmBA,EAAAwjD,EAAA1gD,OAAyB9C,IAC5C,YAAAwjD,EAAAxjD,IAAA4iD,IAAAY,EAAAxjD,GAAA0jD,UACA,OAAAD,EAAAzjD,GAGA,IAGA2jD,EAHAH,EAAA7gD,OAAAigD,GAAAvnC,KAAA,SAAAhF,EAAAkD,GACA,OAAAlD,EAAAkD,IAEA5S,QAAAi8C,GACA,GAAAa,EAAAE,EAAA,GACA,OAAAF,EAAAE,EAAA,GAIA,OAAArhD,EAAAD,+GC7Ke,SAAS2sB,EAAK4jB,EAAMC,GACjC,OAAOD,EAAOC,WAHM,IAMtB7jB,EAAK8iB,OANiB,+GCEP,SAAS9iB,EAAK4jB,EAAMC,GACjC,OAAOD,GAAQC,WAHK,KAMtB7jB,EAAK8iB,OANiB,gHCEP,SAAS9iB,EAAK4jB,EAAMC,GACjC,OAAOD,EAAOC,WAHM,IAMtB7jB,EAAK8iB,OANiB,+GCEP,SAAS9iB,EAAK4jB,EAAMC,GACjC,OAAOD,GAAQC,WAHK,KAMtB7jB,EAAK8iB,OANiB,gHCAtB,IAAApF,EAAA5sC,EAAA,GACAqsC,EAAArsC,EAAA,GAIe,SAASkvB,EAAKnD,GAAgB,QAAA0mB,EAAAnvC,UAAAN,OAAN4C,EAAM,IAAA3C,MAAAwvC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAN9sC,EAAM8sC,EAAA,GAAApvC,UAAAovC,GAC3C,IAAMtvC,EAASwC,EAAKhD,OAAO,SAAC+vC,EAAKxxC,GAAN,OAAgBwxC,GAAM,EAAA/F,EAAAhmC,UAASzF,KAAQ,EAAAyrC,EAAAhmC,UAASmlB,IAE3E,GAAIxnB,MAAMnB,GACR,MAAMjB,MAAMywC,eAGd,OAAOxvC,WATa,IAYtB8rB,EAAK8iB,OAZiB,+GCHtB,IAAApF,EAAA5sC,EAAA,GACAqsC,EAAArsC,EAAA,GAIe,SAASkvB,EAAKnD,GAAgB,QAAA0mB,EAAAnvC,UAAAN,OAAN4C,EAAM,IAAA3C,MAAAwvC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAN9sC,EAAM8sC,EAAA,GAAApvC,UAAAovC,GAC3C,IAAMtvC,EAASwC,EAAKhD,OAAO,SAAC+vC,EAAKxxC,GAAN,OAAgBwxC,GAAM,EAAA/F,EAAAhmC,UAASzF,KAAQ,EAAAyrC,EAAAhmC,UAASmlB,IAE3E,GAAIxnB,MAAMnB,GACR,MAAMjB,MAAMywC,eAGd,OAAOxvC,WATa,IAYtB8rB,EAAK8iB,OAZiB,+GCDP,SAAS9iB,EAAK4jB,EAAMC,GACjC,OAAOD,IAASC,WAHI,KAMtB7jB,EAAK8iB,OANiB,gHCAtB,IAAApF,EAAA5sC,EAAA,GACAqsC,EAAArsC,EAAA,GAIe,SAASkvB,EAAK4jB,EAAMC,GACjC,IAAM3vC,EAASY,KAAKmL,KAAI,EAAAy9B,EAAAhmC,UAASksC,IAAO,EAAAlG,EAAAhmC,UAASmsC,IAEjD,GAAIxuC,MAAMnB,GACR,MAAMjB,MAAMywC,eAGd,OAAOxvC,WATa,IAYtB8rB,EAAK8iB,OAZiB,yFCsEtB,IAAI8R,cAAiB,WACrB,IAAInjD,EAAE,SAASoS,EAAEmL,EAAEvd,EAAER,GAAG,IAAIQ,EAAEA,GAAG,GAAGR,EAAE4S,EAAE/P,OAAO7C,IAAIQ,EAAEoS,EAAE5S,IAAI+d,GAAG,OAAOvd,GAAGojD,IAAI,CAAC,EAAE,GAAGC,IAAI,CAAC,EAAE,GAAGC,IAAI,CAAC,EAAE,GAAGC,IAAI,CAAC,EAAE,GAAGC,IAAI,CAAC,EAAE,GAAGC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,IAAIC,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,IAAI,CAAC,GAAG,GAAG,IAC3kB3Y,OAAS,CAAC4Y,MAAO,aACrB1Y,GAAI,GACJ2Y,SAAU,CAACvjD,MAAQ,EAAEwjD,YAAc,EAAEtX,WAAa,EAAEuX,IAAM,EAAEC,iBAAmB,EAAEniD,OAAS,EAAEoiD,OAAS,EAAEC,IAAI,EAAEC,IAAI,GAAGC,IAAI,GAAGC,IAAI,GAAGC,IAAI,GAAGC,IAAI,GAAGC,IAAI,GAAG3K,IAAM,GAAG4K,IAAI,GAAGC,IAAI,GAAGC,IAAI,GAAGC,IAAI,GAAGC,SAAW,GAAGC,OAAS,GAAGC,cAAgB,GAAGC,MAAQ,GAAGC,KAAO,GAAGC,QAAU,GAAGj6C,MAAQ,GAAGk6C,SAAW,GAAGC,cAAgB,GAAGC,cAAgB,GAAGC,WAAa,GAAGC,SAAW,GAAGC,IAAI,GAAGC,IAAI,GAAGC,IAAI,GAAGC,IAAI,GAAGC,SAAW,GAAGp7C,QAAU,GAAGq7C,OAAS,GAAGC,IAAI,GAAGvkC,MAAQ,GAAGwkC,QAAU,EAAEC,KAAO,GAChdC,WAAY,CAACC,EAAE,MAAMC,EAAE,SAASC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,MAAMC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,WAAWC,GAAG,gBAAgBC,GAAG,QAAQC,GAAG,gBAAgBC,GAAG,gBAAgBC,GAAG,aAAaC,GAAG,WAAWC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,WAAWC,GAAG,UAAUC,GAAG,SAASC,GAAG,IAAIC,GAAG,SAClTC,aAAcnaC,cAAe,SAASC,UAAUC,OAAQC,OAAQC,SAAUnd,GAAIod,QAAyBC,GAAiBC,IAG1G,IAAIC,GAAKF,GAAGznD,OAAS,EACrB,OAAQwnD,SACR,KAAK,EAEC,OAAOC,GAAGE,GAAG,GAGnB,KAAK,EAEChnD,KAAKinD,EAAIxd,GAAGM,aAAa+c,GAAGE,IAAI,IAEtC,MACA,KAAK,EAEChnD,KAAKinD,EAAIxd,GAAGxmC,SAAS6jD,GAAGE,KAE9B,MACA,KAAK,EAEChnD,KAAKinD,EAAIxd,GAAGC,UAAUod,GAAGE,KAE/B,MACA,KAAK,EAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,IAAK,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAExD,MACA,KAAK,EAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,IAAK,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAExD,MACA,KAAK,EAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,IAAK,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAExD,MACA,KAAK,EAEChnD,KAAKinD,EAAIH,GAAGE,GAAG,GAErB,MACA,KAAK,EAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,KAAM,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAEzD,MACA,KAAK,GAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,KAAM,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAEzD,MACA,KAAK,GAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,KAAM,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAEzD,MACA,KAAK,GAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,MAAO,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAE1D,MACA,KAAK,GAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,IAAK,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAExD,MACA,KAAK,GAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,IAAK,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAExD,MACA,KAAK,GAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,IAAK,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAExD,MACA,KAAK,GAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,IAAK,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAExD,MACA,KAAK,GAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,IAAK,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAExD,MACA,KAAK,GAEChnD,KAAKinD,EAAIxd,GAAGS,mBAAmB,IAAK,CAAC4c,GAAGE,GAAG,GAAIF,GAAGE,MAExD,MACA,KAAK,GAEC,IAAIlqB,GAAK2M,GAAGE,aAAamd,GAAGE,KAE5BhnD,KAAKinD,EAAInqB,GAELl8B,MAAMZ,KAAKinD,KACXjnD,KAAKinD,EAAI,GAGnB,MACA,KAAK,GAEC,IAAInqB,GAAK2M,GAAGxmC,SAAS6jD,GAAGE,KAExBhnD,KAAKinD,EAAInqB,GAELl8B,MAAMZ,KAAKinD,KACXjnD,KAAKinD,EAAI,GAGnB,MACA,KAAK,GAECjnD,KAAKinD,EAAIxd,GAAGU,aAAa2c,GAAGE,GAAG,IAErC,MACA,KAAK,GAEChnD,KAAKinD,EAAIxd,GAAGU,aAAa2c,GAAGE,GAAG,GAAIF,GAAGE,GAAG,IAE/C,MACA,KAAK,GAEC,IAAIvnD,OAAS,GAETynD,YAAcR,OAAO9jD,QAAQ,IAAI,IAAIA,QAAQ,IAAI,IAEjD1B,IAAMgmD,YAAY76C,MAAM,KAC5B,GAAGnL,IAAI7B,QAAU,EAAG,CAClB,IAAI6B,IAAMyN,KAAK,KAAOzN,IAAM,MAC5BA,IAAIsa,QAAQ,SAAS2rC,GACnB1nD,OAAOK,KAAKqnD,UAGd,IAAI,IAAI5qD,EAAI,EAAGA,EAAI2E,IAAI7B,OAAQ9C,IAC7BkD,OAAOK,KAAK6O,KAAK,IAAMzN,IAAI3E,GAAK,MAIpCyD,KAAKinD,EAAIxnD,OAEf,MACA,KAAK,GAEC,IAAIA,OAAS,GACTyB,IAAMyN,KAAK,IAAM+3C,OAAS,KAE9BxlD,IAAIsa,QAAQ,SAAS2rC,GACnB1nD,OAAOK,KAAKqnD,KAEdnnD,KAAKinD,EAAIxnD,OAEf,MACA,KAAK,GAAI,KAAK,GAAI,KAAK,GAEjBO,KAAKinD,EAAIxd,GAAGa,UAAUwc,GAAGE,KAE/B,MACA,KAAK,GAML,KAAK,GAKL,KAAK,GAEDhnD,KAAKinD,EAAIxd,GAAGa,UAAUwc,GAAGE,IAAKF,GAAGE,GAAG,GAAGpkD,QAAQ,KAAM,KAEzD,MACA,KAAK,GAAI,KAAK,GAAI,KAAK,GAAI,KAAK,GAAI,KAAK,GAAI,KAAK,GAAI,KAAK,GAAI,KAAK,GAAI,KAAK,GAEvE5C,KAAKinD,EAAIxd,GAAGgB,WAAWqc,GAAGE,GAAG,GAAIF,GAAGE,KAE1C,MACA,KAAK,GAAI,KAAK,GAAI,KAAK,GAAI,KAAK,GAAI,KAAK,GAAI,KAAK,GAAI,KAAK,GAAI,KAAK,GAAI,KAAK,GAEvEhnD,KAAKinD,EAAIxd,GAAGgB,WAAWqc,GAAGE,GAAG,GAAIF,GAAGE,IAAKF,GAAGE,GAAG,GAAGpkD,QAAQ,KAAM,KAEtE,MACA,KAAK,GAAI,KAAK,GAER5C,KAAKinD,EAAI,CAACH,GAAGE,KAEnB,MACA,KAAK,GAAI,KAAK,GAERF,GAAGE,GAAG,GAAGlnD,KAAKgnD,GAAGE,KACjBhnD,KAAKinD,EAAIH,GAAGE,GAAG,GAErB,MACA,KAAK,GAEChnD,KAAKinD,EAAK3nD,MAAMC,QAAQunD,GAAGE,GAAG,IAAMF,GAAGE,GAAG,GAAK,CAACF,GAAGE,GAAG,IACtDhnD,KAAKinD,EAAEnnD,KAAKgnD,GAAGE,KAErB,MACA,KAAK,GAEChnD,KAAKinD,EAAIH,GAAGE,IAElB,MACA,KAAK,GAEChnD,KAAKinD,EAAgC,GAA3BH,GAAGE,GAAG,GAAK,IAAMF,GAAGE,KAEpC,MACA,KAAK,GAEChnD,KAAKinD,EAAe,IAAXH,GAAGE,GAAG,GAErB,MACA,KAAK,GAEChnD,KAAKinD,EAAIxd,GAAGG,WAAWkd,GAAGE,OAKhCxH,MAAO,CAAC,CAAC4H,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAAC4G,EAAE,CAAC,IAAI,CAACpD,EAAE,CAAC,EAAE,IAAIE,EAAEzD,IAAI0D,GAAGzD,IAAI0D,GAAGzD,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,KAAK3kD,EAAE4kD,IAAI,CAAC,EAAE,GAAG,CAACuE,GAAG,CAAC,EAAE,MAAMnpD,EAAE4kD,IAAI,CAAC,EAAE,GAAG,CAACyE,GAAG,CAAC,EAAE,MAAMrpD,EAAE4kD,IAAI,CAAC,EAAE,IAAI,CAACwF,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAAC6D,GAAG,CAAC,EAAE,KAAK9nD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,IAAI,CAACwF,EAAE,GAAGd,GAAGrF,MAAMjkD,EAAE6kD,IAAI,CAAC,EAAE,KAAK7kD,EAAE8kD,IAAI,CAAC,EAAE,IAAI,CAACqE,GAAG,CAAC,EAAE,MAAMnpD,EAAE4kD,IAAI,CAAC,EAAE,IAAI,CAACmE,GAAG,CAAC,EAAE,MAAM/oD,EAAE4kD,IAAI,CAAC,EAAE,IAAI,CAACmE,GAAG,CAAC,EAAE,MAAM/oD,EAAE4kD,IAAI,CAAC,EAAE,IAAI,CAACmE,GAAG,CAAC,EAAE,MAAM,CAACD,GAAG,CAAC,EAAE,KAAK9oD,EAAE,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,KAAK,CAAC6qD,EAAE,CAAC,EAAE,IAAI,CAACT,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIwE,GAAG,CAAC,EAAE,IAAIC,GAAGxE,IAAIyE,GAAGxE,IAAI2E,GAAG,CAAC,EAAE,IAAIE,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIwE,GAAG,CAAC,EAAE,IAAIC,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACiF,GAAG,CAAC,EAAE,KAAKlpD,EAAE8kD,IAAI,CAAC,EAAE,KAAK,CAAC6C,EAAEzD,IAAI0D,GAAGzD,IAAI0D,GAAGzD,IAAI2D,GAAG,CAAC,EAAE,IAAIC,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,KAAK3kD,EAAE+kD,IAAI,CAAC,EAAE,IAAI,CAAC4C,EAAEzD,IAAIkE,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM3kD,EAAE+kD,IAAI,CAAC,EAAE,IAAI,CAAC4C,EAAEzD,IAAIkE,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM,CAACyF,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAIyE,GAAG,CAAC,EAAE,IAAII,GAAG5E,IAAIgF,GAAG/E,IAAIsH,GAAG,GAAGtC,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAKjkD,EAAE4kD,IAAI,CAAC,EAAE,KAAK,CAACwE,GAAG,CAAC,EAAE,KAAK,CAACV,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,KAAK,CAACF,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,KAAK,CAACF,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,KAAK,CAACF,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,KAAK5oD,EAAE4kD,IAAI,CAAC,EAAE,IAAI5kD,EAAE,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC2nD,EAAEzD,IAAI2D,GAAGzD,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM3kD,EAAE+kD,IAAI,CAAC,EAAE,GAAG,CAAC4C,EAAEzD,IAAIkE,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM,CAACyF,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAKjkD,EAAEglD,IAAI,CAAC,EAAE,IAAI,CAAC2C,EAAEzD,IAAI2D,GAAGzD,IAAI+D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM,CAACyF,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAKjkD,EAAEglD,IAAI,CAAC,EAAE,IAAI,CAAC2C,EAAEzD,IAAI2D,GAAGzD,IAAI+D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM3kD,EAAE,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC2nD,EAAEzD,IAAI2D,GAAGzD,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI6D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM3kD,EAAE+kD,IAAI,CAAC,EAAE,IAAI,CAAC4C,EAAEzD,IAAIkE,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM3kD,EAAEilD,IAAI,CAAC,EAAE,IAAI,CAAC0C,EAAEzD,IAAIoE,GAAG3D,MAAM3kD,EAAEilD,IAAI,CAAC,EAAE,IAAI,CAAC0C,EAAEzD,IAAIoE,GAAG3D,MAAM3kD,EAAE,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC2nD,EAAEzD,MAAMlkD,EAAE6kD,IAAI,CAAC,EAAE,KAAK7kD,EAAE4kD,IAAI,CAAC,EAAE,IAAI5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK,CAACmD,GAAG,CAAC,EAAE,IAAIiB,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,KAAKjpD,EAAEklD,IAAI,CAAC,EAAE,IAAI,CAACyC,EAAEzD,IAAI0D,GAAGzD,IAAI0D,GAAGzD,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM3kD,EAAE8kD,IAAI,CAAC,EAAE,KAAK9kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,IAAI,CAACmE,GAAG,CAAC,EAAE,MAAM/oD,EAAE4kD,IAAI,CAAC,EAAE,IAAI,CAACmE,GAAG,CAAC,EAAE,MAAM/oD,EAAE4kD,IAAI,CAAC,EAAE,IAAI,CAACmE,GAAG,CAAC,EAAE,MAAM/oD,EAAEglD,IAAI,CAAC,EAAE,GAAG,CAAC2C,EAAEzD,IAAI2D,GAAGzD,IAAI+D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM3kD,EAAEglD,IAAI,CAAC,EAAE,IAAI,CAAC2C,EAAEzD,IAAI2D,GAAGzD,IAAI+D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM3kD,EAAEglD,IAAI,CAAC,EAAE,IAAI,CAAC2C,EAAEzD,IAAI2D,GAAGzD,IAAI+D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM3kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK,CAACwF,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACmG,EAAE,GAAGE,EAAE,GAAGC,EAAE,EAAEC,EAAE,EAAE9C,EAAEtE,IAAIyE,GAAGxE,IAAIyE,GAAGxE,IAAI6E,GAAG5E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAI+G,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGC,GAAG,GAAGlC,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIgF,GAAG/E,IAAIoF,GAAGnF,IAAIqF,GAAGpF,IAAIsF,GAAGrF,KAAK,CAACyE,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,KAAK,CAACF,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,KAAK,CAACF,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,IAAIC,GAAG,CAAC,EAAE,KAAK5oD,EAAEklD,IAAI,CAAC,EAAE,IAAI,CAACyC,EAAEzD,IAAI0D,GAAGzD,IAAI0D,GAAGzD,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM3kD,EAAEklD,IAAI,CAAC,EAAE,IAAI,CAACyC,EAAEzD,IAAI0D,GAAGzD,IAAI0D,GAAGzD,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,IAAI4D,GAAG3D,MAAM3kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,KAAK5kD,EAAE4kD,IAAI,CAAC,EAAE,MACxhKmG,eAAgB,CAACtC,GAAG,CAAC,EAAE,IACvBuC,WAAY,SAAqBC,EAAKzgC,GAClC,IAAIA,EAAK0gC,YAEF,CACH,IAAIrpD,EAAQ,IAAIL,MAAMypD,GAEtB,MADAppD,EAAM2oB,KAAOA,EACP3oB,EAJNmB,KAAKmiD,MAAM8F,IAOnB3lC,MAAO,SAAgB6lC,GACnB,IAAIj5B,EAAOlvB,KACPooD,EAAQ,CAAC,GAETC,EAAS,CAAC,MACVC,EAAS,GACT9I,EAAQx/C,KAAKw/C,MACbkH,EAAS,GACTE,EAAW,EACXD,EAAS,EACT4B,EAAa,EAIb3oD,EAAO0oD,EAAOnmD,MAAMzF,KAAKiD,UAAW,GAIpC6oD,EAAQvrD,OAAOY,OAAOmC,KAAKwoD,OAC3BC,EAAc,CAAEhf,GAAI,IAExB,IAAK,IAAIr6B,KAAKpP,KAAKypC,GACbxsC,OAAOkB,UAAUC,eAAe1B,KAAKsD,KAAKypC,GAAIr6B,KAChDq5C,EAAYhf,GAAGr6B,GAAKpP,KAAKypC,GAAGr6B,IAIhCo5C,EAAME,SAASP,EAAOM,EAAYhf,IAClCgf,EAAYhf,GAAG+e,MAAQA,EACvBC,EAAYhf,GAAGF,OAASvpC,UACG,IAAhBwoD,EAAMG,SACbH,EAAMG,OAAS,IAEnB,IAAIC,EAAQJ,EAAMG,OAClBL,EAAOxoD,KAAK8oD,GAEZ,IAAIC,EAASL,EAAMtkD,SAAWskD,EAAMtkD,QAAQ2kD,OAEH,mBAA9BJ,EAAYhf,GAAGue,WACtBhoD,KAAKgoD,WAAaS,EAAYhf,GAAGue,WAEjChoD,KAAKgoD,WAAa/qD,OAAO6rD,eAAe9oD,MAAMgoD,WAqBlD,IAXA,IAUI7Z,EAAQ4a,EAAgBC,EAAOC,EAAW5rD,EAAegB,EAAG8C,EAAK+nD,EAAU32C,EAjB5DvU,EAOfmrD,EAAM,WACN,IAAIC,EAMJ,MAHqB,iBAFrBA,EAAQZ,EAAMW,OAzCR,KA4CFC,EAAQl6B,EAAKkzB,SAASgH,IAAUA,GAE7BA,GAGsCC,EAAQ,KAC5C,CAiBT,GAfAL,EAAQZ,EAAMA,EAAM/oD,OAAS,GAGzBW,KAAK+nD,eAAeiB,GACpBC,EAASjpD,KAAK+nD,eAAeiB,IAEzB7a,UACAA,EAASgb,KAGbF,EAASzJ,EAAMwJ,IAAUxJ,EAAMwJ,GAAO7a,SAKpB,IAAX8a,IAA2BA,EAAO5pD,SAAW4pD,EAAO,GAAI,KAC3DK,EAKKC,EAAT,SAAwCP,GAKpC,IAJA,IAAIQ,EAAcpB,EAAM/oD,OAAS,EAC7BoqD,EAAQ,IAGJ,CAEJ,GAjFH,GAiFepiD,aAAem4C,EAAMwJ,GAC7B,OAAOS,EAEX,GAAc,IAAVT,GAAeQ,EAAc,EAC7B,OAAO,EAGXR,EAAQZ,EADRoB,GAAe,KAEbC,IAnBNC,EAAS,GAuBb,GAAKnB,EA5FH,IAsHSQ,IACPO,EAAmBC,EAA+BP,QA3BrC,CAMb,IAAK3qD,KAJLirD,EAAmBC,EAA+BP,GAGlDz2C,EAAW,GACDitC,EAAMwJ,GACRhpD,KAAKwkD,WAAWnmD,IAAMA,EApG7B,GAqGOkU,EAASzS,KAAK,IAAIE,KAAKwkD,WAAWnmD,GAAG,KAIzCqrD,EADAlB,EAAMmB,aACG,wBAAwB/C,EAAS,GAAG,MAAM4B,EAAMmB,eAAe,eAAep3C,EAAShL,KAAK,MAAQ,WAAavH,KAAKwkD,WAAWrW,IAAWA,GAAS,IAErJ,wBAAwByY,EAAS,GAAG,iBA1GnD,GA2GqBzY,EAAgB,eACJ,KAAKnuC,KAAKwkD,WAAWrW,IAAWA,GAAQ,KAEvEnuC,KAAKgoD,WAAW0B,EAAQ,CACpBhkD,KAAM8iD,EAAMxvC,MACZowC,MAAOppD,KAAKwkD,WAAWrW,IAAWA,EAClChxB,KAAMqrC,EAAM5B,SACZgD,IAAKhB,EACLr2C,SAAUA,EACV21C,aAAmC,IAArBoB,IAOtB,GAAkB,GAAdf,EAAiB,CACjB,GA5HF,IA4HMpa,GA5HN,IA4HwB4a,EAClB,MAAM,IAAIvqD,MAAMkrD,GAAU,gEAI9B/C,EAAS6B,EAAM7B,OACfD,EAAS8B,EAAM9B,OACfE,EAAW4B,EAAM5B,SACjBgC,EAAQJ,EAAMG,OACdxa,EAASgb,IAIb,IAAyB,IAArBG,EACA,MAAM,IAAI9qD,MAAMkrD,GAAU,8DA1GnB1rD,EA4GFsrD,EA3GblB,EAAM/oD,OAAS+oD,EAAM/oD,OAAS,EAAIrB,EAClCqqD,EAAOhpD,OAASgpD,EAAOhpD,OAASrB,EAChCsqD,EAAOjpD,OAASipD,EAAOjpD,OAASrB,EA2G5B+qD,EA/IK,GA+Ia5a,EAAmB,KAAOA,EAC5CA,EAhJK,EAiJL6a,EAAQZ,EAAMA,EAAM/oD,OAAO,GAC3B4pD,EAASzJ,EAAMwJ,IAAUxJ,EAAMwJ,GAlJ1B,GAmJLT,EAAa,EAIjB,GAAIU,EAAO,aAAc3pD,OAAS2pD,EAAO5pD,OAAS,EAC9C,MAAM,IAAIb,MAAM,oDAAoDwqD,EAAM,YAAY7a,GAG1F,OAAQ8a,EAAO,IACX,KAAK,EAGDb,EAAMtoD,KAAKquC,GACXka,EAAOvoD,KAAK0oD,EAAM9B,QAClB4B,EAAOxoD,KAAK0oD,EAAMG,QAClBP,EAAMtoD,KAAKmpD,EAAO,IAClB9a,EAAS,KACJ4a,GAUD5a,EAAS4a,EACTA,EAAiB,OAVjBpC,EAAS6B,EAAM7B,OACfD,EAAS8B,EAAM9B,OACfE,EAAW4B,EAAM5B,SACjBgC,EAAQJ,EAAMG,OACVJ,EAAa,GACbA,KAOR,MAEJ,KAAK,EAoBD,GAhBApnD,EAAMnB,KAAKumD,aAAa0C,EAAO,IAAI,GAGnCI,EAAMpC,EAAIoB,EAAOA,EAAOhpD,OAAO8B,GAE/BkoD,EAAMtC,GAAK,CACP8C,WAAYvB,EAAOA,EAAOjpD,QAAQ8B,GAAK,IAAI0oD,WAC3CC,UAAWxB,EAAOA,EAAOjpD,OAAO,GAAGyqD,UACnCC,aAAczB,EAAOA,EAAOjpD,QAAQ8B,GAAK,IAAI4oD,aAC7CC,YAAa1B,EAAOA,EAAOjpD,OAAO,GAAG2qD,aAErCnB,IACFQ,EAAMtC,GAAGv9C,MAAQ,CAAC8+C,EAAOA,EAAOjpD,QAAQ8B,GAAK,IAAIqI,MAAM,GAAI8+C,EAAOA,EAAOjpD,OAAO,GAAGmK,MAAM,UAI1E,KAFjBnM,EAAI2C,KAAKwmD,cAAcrnD,MAAMkqD,EAAO,CAAC3C,EAAQC,EAAQC,EAAU6B,EAAYhf,GAAIwf,EAAO,GAAIZ,EAAQC,GAAQppD,OAAOU,KAG7G,OAAOvC,EAIP8D,IACAinD,EAAQA,EAAMjmD,MAAM,GAAG,EAAEhB,EAAI,GAC7BknD,EAASA,EAAOlmD,MAAM,GAAI,EAAEhB,GAC5BmnD,EAASA,EAAOnmD,MAAM,GAAI,EAAEhB,IAGhCinD,EAAMtoD,KAAKE,KAAKumD,aAAa0C,EAAO,IAAI,IACxCZ,EAAOvoD,KAAKupD,EAAMpC,GAClBqB,EAAOxoD,KAAKupD,EAAMtC,IAElBmC,EAAW1J,EAAM4I,EAAMA,EAAM/oD,OAAO,IAAI+oD,EAAMA,EAAM/oD,OAAO,IAC3D+oD,EAAMtoD,KAAKopD,GACX,MAEJ,KAAK,EAED,OAAO,GAKnB,OAAO,IAIPV,MACS,CAEblG,IAAI,EAEJ0F,WAAW,SAAoBC,EAAKzgC,GAC5B,IAAIxnB,KAAKypC,GAAGF,OAGR,MAAM,IAAI/qC,MAAMypD,GAFhBjoD,KAAKypC,GAAGF,OAAOye,WAAWC,EAAKzgC,IAO3CkhC,SAAS,SAAUP,EAAO1e,GAiBlB,OAhBAzpC,KAAKypC,GAAKA,GAAMzpC,KAAKypC,IAAM,GAC3BzpC,KAAKiqD,OAAS9B,EACdnoD,KAAKkqD,MAAQlqD,KAAKmqD,WAAanqD,KAAKoqD,MAAO,EAC3CpqD,KAAK4mD,SAAW5mD,KAAK2mD,OAAS,EAC9B3mD,KAAK0mD,OAAS1mD,KAAKqqD,QAAUrqD,KAAKgZ,MAAQ,GAC1ChZ,KAAKsqD,eAAiB,CAAC,WACvBtqD,KAAK2oD,OAAS,CACVkB,WAAY,EACZE,aAAc,EACdD,UAAW,EACXE,YAAa,GAEbhqD,KAAKkE,QAAQ2kD,SACb7oD,KAAK2oD,OAAOn/C,MAAQ,CAAC,EAAE,IAE3BxJ,KAAKuqD,OAAS,EACPvqD,MAIfmoD,MAAM,WACE,IAAIqC,EAAKxqD,KAAKiqD,OAAO,GAkBrB,OAjBAjqD,KAAK0mD,QAAU8D,EACfxqD,KAAK2mD,SACL3mD,KAAKuqD,SACLvqD,KAAKgZ,OAASwxC,EACdxqD,KAAKqqD,SAAWG,EACJA,EAAGxxC,MAAM,oBAEjBhZ,KAAK4mD,WACL5mD,KAAK2oD,OAAOmB,aAEZ9pD,KAAK2oD,OAAOqB,cAEZhqD,KAAKkE,QAAQ2kD,QACb7oD,KAAK2oD,OAAOn/C,MAAM,KAGtBxJ,KAAKiqD,OAASjqD,KAAKiqD,OAAO9nD,MAAM,GACzBqoD,GAIfC,MAAM,SAAUD,GACR,IAAIrpD,EAAMqpD,EAAGnrD,OACTqrD,EAAQF,EAAGn+C,MAAM,iBAErBrM,KAAKiqD,OAASO,EAAKxqD,KAAKiqD,OACxBjqD,KAAK0mD,OAAS1mD,KAAK0mD,OAAOtoC,OAAO,EAAGpe,KAAK0mD,OAAOrnD,OAAS8B,GAEzDnB,KAAKuqD,QAAUppD,EACf,IAAIwpD,EAAW3qD,KAAKgZ,MAAM3M,MAAM,iBAChCrM,KAAKgZ,MAAQhZ,KAAKgZ,MAAMoF,OAAO,EAAGpe,KAAKgZ,MAAM3Z,OAAS,GACtDW,KAAKqqD,QAAUrqD,KAAKqqD,QAAQjsC,OAAO,EAAGpe,KAAKqqD,QAAQhrD,OAAS,GAExDqrD,EAAMrrD,OAAS,IACfW,KAAK4mD,UAAY8D,EAAMrrD,OAAS,GAEpC,IAAIhC,EAAI2C,KAAK2oD,OAAOn/C,MAgBpB,OAdAxJ,KAAK2oD,OAAS,CACVkB,WAAY7pD,KAAK2oD,OAAOkB,WACxBC,UAAW9pD,KAAK4mD,SAAW,EAC3BmD,aAAc/pD,KAAK2oD,OAAOoB,aAC1BC,YAAaU,GACRA,EAAMrrD,SAAWsrD,EAAStrD,OAASW,KAAK2oD,OAAOoB,aAAe,GAC5DY,EAASA,EAAStrD,OAASqrD,EAAMrrD,QAAQA,OAASqrD,EAAM,GAAGrrD,OAChEW,KAAK2oD,OAAOoB,aAAe5oD,GAG7BnB,KAAKkE,QAAQ2kD,SACb7oD,KAAK2oD,OAAOn/C,MAAQ,CAACnM,EAAE,GAAIA,EAAE,GAAK2C,KAAK2mD,OAASxlD,IAEpDnB,KAAK2mD,OAAS3mD,KAAK0mD,OAAOrnD,OACnBW,MAIf4qD,KAAK,WAEG,OADA5qD,KAAKkqD,OAAQ,EACNlqD,MAIf6qD,OAAO,WACC,OAAI7qD,KAAKkE,QAAQ4mD,iBACb9qD,KAAKmqD,YAAa,EASfnqD,MAPIA,KAAKgoD,WAAW,0BAA4BhoD,KAAK4mD,SAAW,GAAK,mIAAqI5mD,KAAK2pD,eAAgB,CAC9NjkD,KAAM,GACN0jD,MAAO,KACPjsC,KAAMnd,KAAK4mD,YAQ3BmE,KAAK,SAAU/sD,GACPgC,KAAKyqD,MAAMzqD,KAAKgZ,MAAM7W,MAAMnE,KAIpCgtD,UAAU,WACF,IAAIC,EAAOjrD,KAAKqqD,QAAQjsC,OAAO,EAAGpe,KAAKqqD,QAAQhrD,OAASW,KAAKgZ,MAAM3Z,QACnE,OAAQ4rD,EAAK5rD,OAAS,GAAK,MAAM,IAAM4rD,EAAK7sC,QAAQ,IAAIxb,QAAQ,MAAO,KAI/EsoD,cAAc,WACN,IAAIC,EAAOnrD,KAAKgZ,MAIhB,OAHImyC,EAAK9rD,OAAS,KACd8rD,GAAQnrD,KAAKiqD,OAAO7rC,OAAO,EAAG,GAAG+sC,EAAK9rD,UAElC8rD,EAAK/sC,OAAO,EAAE,KAAO+sC,EAAK9rD,OAAS,GAAK,MAAQ,KAAKuD,QAAQ,MAAO,KAIpF+mD,aAAa,WACL,IAAIyB,EAAMprD,KAAKgrD,YACXpuD,EAAI,IAAI0C,MAAM8rD,EAAI/rD,OAAS,GAAGkI,KAAK,KACvC,OAAO6jD,EAAMprD,KAAKkrD,gBAAkB,KAAOtuD,EAAI,KAIvDyuD,WAAW,SAASryC,EAAOsyC,GACnB,IAAIlC,EACAsB,EACAa,EAwDJ,GAtDIvrD,KAAKkE,QAAQ4mD,kBAEbS,EAAS,CACL3E,SAAU5mD,KAAK4mD,SACf+B,OAAQ,CACJkB,WAAY7pD,KAAK2oD,OAAOkB,WACxBC,UAAW9pD,KAAK8pD,UAChBC,aAAc/pD,KAAK2oD,OAAOoB,aAC1BC,YAAahqD,KAAK2oD,OAAOqB,aAE7BtD,OAAQ1mD,KAAK0mD,OACb1tC,MAAOhZ,KAAKgZ,MACZhF,QAAShU,KAAKgU,QACdq2C,QAASrqD,KAAKqqD,QACd1D,OAAQ3mD,KAAK2mD,OACb4D,OAAQvqD,KAAKuqD,OACbL,MAAOlqD,KAAKkqD,MACZD,OAAQjqD,KAAKiqD,OACbxgB,GAAIzpC,KAAKypC,GACT6gB,eAAgBtqD,KAAKsqD,eAAenoD,MAAM,GAC1CioD,KAAMpqD,KAAKoqD,MAEXpqD,KAAKkE,QAAQ2kD,SACb0C,EAAO5C,OAAOn/C,MAAQxJ,KAAK2oD,OAAOn/C,MAAMrH,MAAM,MAItDuoD,EAAQ1xC,EAAM,GAAGA,MAAM,sBAEnBhZ,KAAK4mD,UAAY8D,EAAMrrD,QAE3BW,KAAK2oD,OAAS,CACVkB,WAAY7pD,KAAK2oD,OAAOmB,UACxBA,UAAW9pD,KAAK4mD,SAAW,EAC3BmD,aAAc/pD,KAAK2oD,OAAOqB,YAC1BA,YAAaU,EACAA,EAAMA,EAAMrrD,OAAS,GAAGA,OAASqrD,EAAMA,EAAMrrD,OAAS,GAAG2Z,MAAM,UAAU,GAAG3Z,OAC5EW,KAAK2oD,OAAOqB,YAAchxC,EAAM,GAAG3Z,QAEpDW,KAAK0mD,QAAU1tC,EAAM,GACrBhZ,KAAKgZ,OAASA,EAAM,GACpBhZ,KAAKgU,QAAUgF,EACfhZ,KAAK2mD,OAAS3mD,KAAK0mD,OAAOrnD,OACtBW,KAAKkE,QAAQ2kD,SACb7oD,KAAK2oD,OAAOn/C,MAAQ,CAACxJ,KAAKuqD,OAAQvqD,KAAKuqD,QAAUvqD,KAAK2mD,SAE1D3mD,KAAKkqD,OAAQ,EACblqD,KAAKmqD,YAAa,EAClBnqD,KAAKiqD,OAASjqD,KAAKiqD,OAAO9nD,MAAM6W,EAAM,GAAG3Z,QACzCW,KAAKqqD,SAAWrxC,EAAM,GACtBowC,EAAQppD,KAAKwmD,cAAc9pD,KAAKsD,KAAMA,KAAKypC,GAAIzpC,KAAMsrD,EAActrD,KAAKsqD,eAAetqD,KAAKsqD,eAAejrD,OAAS,IAChHW,KAAKoqD,MAAQpqD,KAAKiqD,SAClBjqD,KAAKoqD,MAAO,GAEZhB,EACA,OAAOA,EACJ,GAAIppD,KAAKmqD,WAAY,CAExB,IAAK,IAAI/6C,KAAKm8C,EACVvrD,KAAKoP,GAAKm8C,EAAOn8C,GAErB,OAAO,EAEX,OAAO,GAIf+7C,KAAK,WACG,GAAInrD,KAAKoqD,KACL,OAAOpqD,KAAKsiD,IAMhB,IAAI8G,EACApwC,EACAwyC,EACAlpD,EAPCtC,KAAKiqD,SACNjqD,KAAKoqD,MAAO,GAOXpqD,KAAKkqD,QACNlqD,KAAK0mD,OAAS,GACd1mD,KAAKgZ,MAAQ,IAGjB,IADA,IAAIyyC,EAAQzrD,KAAK0rD,gBACRnvD,EAAI,EAAGA,EAAIkvD,EAAMpsD,OAAQ9C,IAE9B,IADAivD,EAAYxrD,KAAKiqD,OAAOjxC,MAAMhZ,KAAKyrD,MAAMA,EAAMlvD,SAC5Byc,GAASwyC,EAAU,GAAGnsD,OAAS2Z,EAAM,GAAG3Z,QAAS,CAGhE,GAFA2Z,EAAQwyC,EACRlpD,EAAQ/F,EACJyD,KAAKkE,QAAQ4mD,gBAAiB,CAE9B,IAAc,KADd1B,EAAQppD,KAAKqrD,WAAWG,EAAWC,EAAMlvD,KAErC,OAAO6sD,EACJ,GAAIppD,KAAKmqD,WAAY,CACxBnxC,GAAQ,EACR,SAGA,OAAO,EAER,IAAKhZ,KAAKkE,QAAQynD,KACrB,MAIZ,OAAI3yC,GAEc,KADdowC,EAAQppD,KAAKqrD,WAAWryC,EAAOyyC,EAAMnpD,MAE1B8mD,EAKK,KAAhBppD,KAAKiqD,OACEjqD,KAAKsiD,IAELtiD,KAAKgoD,WAAW,0BAA4BhoD,KAAK4mD,SAAW,GAAK,yBAA2B5mD,KAAK2pD,eAAgB,CACpHjkD,KAAM,GACN0jD,MAAO,KACPjsC,KAAMnd,KAAK4mD,YAM3BuC,IAAI,WACI,IAAI9rD,EAAI2C,KAAKmrD,OACb,OAAI9tD,GAGO2C,KAAKmpD,OAKxBzrC,MAAM,SAAgBzO,GACdjP,KAAKsqD,eAAexqD,KAAKmP,IAIjC28C,SAAS,WAED,OADQ5rD,KAAKsqD,eAAejrD,OAAS,EAC7B,EACGW,KAAKsqD,eAAergD,MAEpBjK,KAAKsqD,eAAe,IAKvCoB,cAAc,WACN,OAAI1rD,KAAKsqD,eAAejrD,QAAUW,KAAKsqD,eAAetqD,KAAKsqD,eAAejrD,OAAS,GACxEW,KAAK6rD,WAAW7rD,KAAKsqD,eAAetqD,KAAKsqD,eAAejrD,OAAS,IAAIosD,MAErEzrD,KAAK6rD,WAAL,QAA2BJ,OAK9CK,SAAS,SAAmB9tD,GAEpB,OADAA,EAAIgC,KAAKsqD,eAAejrD,OAAS,EAAIgB,KAAKkD,IAAIvF,GAAK,KAC1C,EACEgC,KAAKsqD,eAAetsD,GAEpB,WAKnB+tD,UAAU,SAAoB98C,GACtBjP,KAAK0d,MAAMzO,IAInB+8C,eAAe,WACP,OAAOhsD,KAAKsqD,eAAejrD,QAEnC6E,QAAS,GACTsiD,cAAe,SAAmB/c,EAAGwiB,EAAIC,EAA0BC,GAEnE,OAAOD,GACP,KAAK,EACL,MACA,KAAK,EAAE,OAAO,EAEd,KAAK,EAAE,OAAO,GAEd,KAAK,EAAE,OAAO,EAEd,KAAK,EAAE,OAAO,GAEd,KAAK,EAAE,OAAO,GAEd,KAAK,EAAE,OAAO,GAEd,KAAK,EAEL,KAAK,EAAE,OAAO,GAEd,KAAK,EAAE,OAAO,GAEd,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAEL,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,EAEf,KAAK,GAAG,MAAO,IAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,MAAO,IAEf,KAAK,GAAG,MAAO,IAEf,KAAK,GAAG,MAAO,IAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,OAAO,GAEf,KAAK,GAAG,MAAO,IAEf,KAAK,GAAG,MAAO,IAEf,KAAK,GAAG,MAAO,IAEf,KAAK,GAAG,OAAO,IAIfT,MAAO,CAAC,WAAW,uBAAuB,uCAAuC,uBAAuB,0CAA0C,2BAA2B,2BAA2B,yBAAyB,yBAAyB,8BAA8B,6BAA6B,0BAA0B,iCAAiC,kBAAkB,cAAc,0BAA0B,8BAA8B,SAAS,SAAS,WAAW,SAAS,SAAS,SAAS,UAAU,UAAU,SAAS,UAAU,UAAU,UAAU,UAAU,SAAS,SAAS,aAAa,SAAS,SAAS,SAAS,SAAS,SAAS,UAAU,UAAU,WAAW,UAChrBI,WAAY,CAACO,QAAU,CAACX,MAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIY,WAAY,KAKlK,SAASnjB,SACPlpC,KAAKypC,GAAK,GAGZ,OALAF,OAAOif,MAAQA,MAIftf,OAAO/qC,UAAYorC,OAAOA,OAAOL,OAASA,OACnC,IAAIA,OA94BU,GAm5BrBntC,QAAQwtC,OAAS4W,cACjBpkD,QAAQmtC,OAASiX,cAAcjX,OAC/BntC,QAAQumB,MAAQ,WAAc,OAAO69B,cAAc79B,MAAMnjB,MAAMghD,cAAexgD,YACzC2sD,+CAAiBtwD,QACpDD,QAAQwwD,KAAKC,QAAQC,KAAKtqD,MAAM,wFCh+BlCnG,EAAAD,QAAA,SAAAC,GAoBA,OAnBAA,EAAA0wD,kBACA1wD,EAAA2wD,UAAA,aACA3wD,EAAA4wD,MAAA,GAEA5wD,EAAA6wD,WAAA7wD,EAAA6wD,SAAA,IACA5vD,OAAAC,eAAAlB,EAAA,UACAmB,YAAA,EACAC,IAAA,WACA,OAAApB,EAAAQ,KAGAS,OAAAC,eAAAlB,EAAA,MACAmB,YAAA,EACAC,IAAA,WACA,OAAApB,EAAAO,KAGAP,EAAA0wD,gBAAA,GAEA1wD,kBCnBA,IAOA8wD,EACAC,EARAP,EAAAxwD,EAAAD,QAAA,GAUA,SAAAixD,IACA,UAAAxuD,MAAA,mCAEA,SAAAyuD,IACA,UAAAzuD,MAAA,qCAsBA,SAAA0uD,EAAAC,GACA,GAAAL,IAAArhC,WAEA,OAAAA,WAAA0hC,EAAA,GAGA,IAAAL,IAAAE,IAAAF,IAAArhC,WAEA,OADAqhC,EAAArhC,WACAA,WAAA0hC,EAAA,GAEA,IAEA,OAAAL,EAAAK,EAAA,GACK,MAAAryB,GACL,IAEA,OAAAgyB,EAAApwD,KAAA,KAAAywD,EAAA,GACS,MAAAryB,GAET,OAAAgyB,EAAApwD,KAAAsD,KAAAmtD,EAAA,MAvCA,WACA,IAEAL,EADA,mBAAArhC,WACAA,WAEAuhC,EAEK,MAAAlyB,GACLgyB,EAAAE,EAEA,IAEAD,EADA,mBAAAK,aACAA,aAEAH,EAEK,MAAAnyB,GACLiyB,EAAAE,GAjBA,GAwEA,IAEAI,EAFAC,EAAA,GACAC,GAAA,EAEAC,GAAA,EAEA,SAAAC,IACAF,GAAAF,IAGAE,GAAA,EACAF,EAAAhuD,OACAiuD,EAAAD,EAAAnuD,OAAAouD,GAEAE,GAAA,EAEAF,EAAAjuD,QACAquD,KAIA,SAAAA,IACA,IAAAH,EAAA,CAGA,IAAAI,EAAAT,EAAAO,GACAF,GAAA,EAGA,IADA,IAAApsD,EAAAmsD,EAAAjuD,OACA8B,GAAA,CAGA,IAFAksD,EAAAC,EACAA,EAAA,KACAE,EAAArsD,GACAksD,GACAA,EAAAG,GAAAI,MAGAJ,GAAA,EACArsD,EAAAmsD,EAAAjuD,OAEAguD,EAAA,KACAE,GAAA,EAnEA,SAAAM,GACA,GAAAd,IAAAK,aAEA,OAAAA,aAAAS,GAGA,IAAAd,IAAAE,IAAAF,IAAAK,aAEA,OADAL,EAAAK,aACAA,aAAAS,GAEA,IAEAd,EAAAc,GACK,MAAA/yB,GACL,IAEA,OAAAiyB,EAAArwD,KAAA,KAAAmxD,GACS,MAAA/yB,GAGT,OAAAiyB,EAAArwD,KAAAsD,KAAA6tD,KAgDAC,CAAAH,IAiBA,SAAAI,EAAAZ,EAAAnuD,GACAgB,KAAAmtD,MACAntD,KAAAhB,QAYA,SAAAgvD,KA5BAxB,EAAAyB,SAAA,SAAAd,GACA,IAAAvtD,EAAA,IAAAN,MAAAK,UAAAN,OAAA,GACA,GAAAM,UAAAN,OAAA,EACA,QAAA9C,EAAA,EAAuBA,EAAAoD,UAAAN,OAAsB9C,IAC7CqD,EAAArD,EAAA,GAAAoD,UAAApD,GAGA+wD,EAAAxtD,KAAA,IAAAiuD,EAAAZ,EAAAvtD,IACA,IAAA0tD,EAAAjuD,QAAAkuD,GACAL,EAAAQ,IASAK,EAAA5vD,UAAAyvD,IAAA,WACA5tD,KAAAmtD,IAAAhuD,MAAA,KAAAa,KAAAhB,QAEAwtD,EAAAjW,MAAA,UACAiW,EAAA0B,SAAA,EACA1B,EAAA2B,IAAA,GACA3B,EAAAC,KAAA,GACAD,EAAA4B,QAAA,GACA5B,EAAA6B,SAAA,GAIA7B,EAAA/f,GAAAuhB,EACAxB,EAAA8B,YAAAN,EACAxB,EAAA5f,KAAAohB,EACAxB,EAAA1f,IAAAkhB,EACAxB,EAAA+B,eAAAP,EACAxB,EAAAgC,mBAAAR,EACAxB,EAAAphB,KAAA4iB,EACAxB,EAAAiC,gBAAAT,EACAxB,EAAAkC,oBAAAV,EAEAxB,EAAAmC,UAAA,SAAA7xD,GAAqC,UAErC0vD,EAAAoC,QAAA,SAAA9xD,GACA,UAAA0B,MAAA,qCAGAguD,EAAAqC,IAAA,WAA2B,WAC3BrC,EAAAsC,MAAA,SAAAC,GACA,UAAAvwD,MAAA,mCAEAguD,EAAAwC,MAAA,WAA4B,qGC/KrB,SAAmBluD,GAAoB,IAAZmuD,EAAYtvD,UAAAN,OAAA,QAAA0B,IAAApB,UAAA,GAAAA,UAAA,GAAH,EAGzC,OAFAmB,EAASA,EAAOuc,UAAU4xC,EAAQnuD,EAAOzB,OAAS4vD","file":"formula-parser.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"formulaParser\"] = factory();\n\telse\n\t\troot[\"formulaParser\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","exports.nil = new Error('#NULL!');\nexports.div0 = new Error('#DIV/0!');\nexports.value = new Error('#VALUE!');\nexports.ref = new Error('#REF!');\nexports.name = new Error('#NAME?');\nexports.num = new Error('#NUM!');\nexports.na = new Error('#N/A');\nexports.error = new Error('#ERROR!');\nexports.data = new Error('#GETTING_DATA');\n","var error = require('./error');\n\nexports.flattenShallow = function(array) {\n  if (!array || !array.reduce) {\n    return array;\n  }\n  return [].concat.apply([], array);\n};\n\nexports.isFlat = function(array) {\n  if (!array) {\n    return false;\n  }\n\n  for (var i = 0; i < array.length; ++i) {\n    if (Array.isArray(array[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexports.flatten = function() {\n  var result = exports.argsToArray.apply(null, arguments);\n\n  while (!exports.isFlat(result)) {\n    result = exports.flattenShallow(result);\n  }\n\n  return result;\n};\n\nexports.argsToArray = function(args) {\n  var result = [];\n\n  exports.arrayEach(args, function(value) {\n    result.push(value);\n  });\n\n  return result;\n};\n\nexports.numbers = function() {\n  var possibleNumbers = this.flatten.apply(null, arguments);\n  return possibleNumbers.filter(function(el) {\n    return typeof el === 'number';\n  });\n};\n\nexports.cleanFloat = function(number) {\n  var power = 1e14;\n  return Math.round(number * power) / power;\n};\n\nexports.parseBool = function(bool) {\n  if (typeof bool === 'boolean') {\n    return bool;\n  }\n\n  if (bool instanceof Error) {\n    return bool;\n  }\n\n  if (typeof bool === 'number') {\n    return bool !== 0;\n  }\n\n  if (typeof bool === 'string') {\n    var up = bool.toUpperCase();\n    if (up === 'TRUE') {\n      return true;\n    }\n\n    if (up === 'FALSE') {\n      return false;\n    }\n  }\n\n  if (bool instanceof Date && !isNaN(bool)) {\n    return true;\n  }\n\n  return error.value;\n};\n\nexports.parseNumber = function(string) {\n  if (string === undefined || string === '') {\n    return error.value;\n  }\n  if (!isNaN(string)) {\n    return parseFloat(string);\n  }\n\n  return error.value;\n};\n\nexports.parseNumberArray = function(arr) {\n  var len;\n\n  if (!arr || (len = arr.length) === 0) {\n    return error.value;\n  }\n\n  var parsed;\n\n  while (len--) {\n    parsed = exports.parseNumber(arr[len]);\n    if (parsed === error.value) {\n      return parsed;\n    }\n    arr[len] = parsed;\n  }\n\n  return arr;\n};\n\nexports.parseMatrix = function(matrix) {\n  var n;\n\n  if (!matrix || (n = matrix.length) === 0) {\n    return error.value;\n  }\n  var pnarr;\n\n  for (var i = 0; i < matrix.length; i++) {\n    pnarr = exports.parseNumberArray(matrix[i]);\n    matrix[i] = pnarr;\n\n    if (pnarr instanceof Error) {\n      return pnarr;\n    }\n  }\n\n  return matrix;\n};\n\nvar d1900 = new Date(Date.UTC(1900, 0, 1));\nexports.parseDate = function(date) {\n  if (!isNaN(date)) {\n    if (date instanceof Date) {\n      return new Date(date);\n    }\n    var d = parseInt(date, 10);\n    if (d < 0) {\n      return error.num;\n    }\n    if (d <= 60) {\n      return new Date(d1900.getTime() + (d - 1) * 86400000);\n    }\n    return new Date(d1900.getTime() + (d - 2) * 86400000);\n  }\n  if (typeof date === 'string') {\n    date = new Date(date);\n    if (!isNaN(date)) {\n      return date;\n    }\n  }\n  return error.value;\n};\n\nexports.parseDateArray = function(arr) {\n  var len = arr.length;\n  var parsed;\n  while (len--) {\n    parsed = this.parseDate(arr[len]);\n    if (parsed === error.value) {\n      return parsed;\n    }\n    arr[len] = parsed;\n  }\n  return arr;\n};\n\nexports.anyIsError = function() {\n  var n = arguments.length;\n  while (n--) {\n    if (arguments[n] instanceof Error) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.arrayValuesToNumbers = function(arr) {\n  var n = arr.length;\n  var el;\n  while (n--) {\n    el = arr[n];\n    if (typeof el === 'number') {\n      continue;\n    }\n    if (el === true) {\n      arr[n] = 1;\n      continue;\n    }\n    if (el === false) {\n      arr[n] = 0;\n      continue;\n    }\n    if (typeof el === 'string') {\n      var number = this.parseNumber(el);\n      if (number instanceof Error) {\n        arr[n] = 0;\n      } else {\n        arr[n] = number;\n      }\n    }\n  }\n  return arr;\n};\n\nexports.rest = function(array, idx) {\n  idx = idx || 1;\n  if (!array || typeof array.slice !== 'function') {\n    return array;\n  }\n  return array.slice(idx);\n};\n\nexports.initial = function(array, idx) {\n  idx = idx || 1;\n  if (!array || typeof array.slice !== 'function') {\n    return array;\n  }\n  return array.slice(0, array.length - idx);\n};\n\nexports.arrayEach = function(array, iteratee) {\n  var index = -1, length = array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n\n  return array;\n};\n\nexports.transpose = function(matrix) {\n  if(!matrix) { \n    return error.value;\n  }\n\n  return matrix[0].map(function(col, i) { \n    return matrix.map(function(row) { \n      return row[i];\n    });\n  });\n};\n","export const ERROR = 'ERROR';\nexport const ERROR_DIV_ZERO = 'DIV/0';\nexport const ERROR_NAME = 'NAME';\nexport const ERROR_NOT_AVAILABLE = 'N/A';\nexport const ERROR_NULL = 'NULL';\nexport const ERROR_NUM = 'NUM';\nexport const ERROR_REF = 'REF';\nexport const ERROR_VALUE = 'VALUE';\n\nconst errors = {\n  [ERROR]: '#ERROR!',\n  [ERROR_DIV_ZERO]: '#DIV/0!',\n  [ERROR_NAME]: '#NAME?',\n  [ERROR_NOT_AVAILABLE]: '#N/A',\n  [ERROR_NULL]: '#NULL!',\n  [ERROR_NUM]: '#NUM!',\n  [ERROR_REF]: '#REF!',\n  [ERROR_VALUE]: '#VALUE!',\n};\n\n/**\n * Return error type based on provided error id.\n *\n * @param {String} type Error type.\n * @returns {String|null} Returns error id.\n */\nexport default function error(type) {\n  let result;\n\n  type = (`${type}`).replace(/#|!|\\?/g, '');\n\n  if (errors[type]) {\n    result = errors[type];\n  }\n\n  return result ? result : null;\n}\n\n/**\n * Check if error type is strict valid with knows errors.\n *\n * @param {String} Error type.\n * @return {Boolean}\n */\nexport function isValidStrict(type) {\n  let valid = false;\n\n  for (const i in errors) {\n    if (Object.prototype.hasOwnProperty.call(errors, i) && errors[i] === type) {\n      valid = true;\n      break;\n    }\n  }\n\n  return valid;\n}\n","/**\n * Convert value into number.\n *\n * @param {String|Number} number\n * @returns {*}\n */\nexport function toNumber(number) {\n  let result;\n\n  if (typeof number === 'number') {\n    result = number;\n\n  } else if (typeof number === 'string') {\n    result = number.indexOf('.') > -1 ? parseFloat(number) : parseInt(number, 10);\n  }\n\n  return result;\n}\n\n/**\n * Invert provided number.\n *\n * @param {Number} number\n * @returns {Number} Returns inverted number.\n */\nexport function invertNumber(number) {\n  return -1 * toNumber(number);\n}\n","var utils = require('./utils');\nvar error = require('./error');\nvar statistical = require('./statistical');\nvar information = require('./information');\n\nexports.ABS = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = Math.abs(number);\n\n  return result;\n};\n\nexports.ACOS = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = Math.acos(number);\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.ACOSH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = Math.log(number + Math.sqrt(number * number - 1));\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.ACOT = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = Math.atan(1 / number);\n\n  return result;\n};\n\nexports.ACOTH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = 0.5 * Math.log((number + 1) / (number - 1));\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\n//TODO: use options\nexports.AGGREGATE = function(function_num, options, ref1, ref2) {\n  function_num = utils.parseNumber(function_num);\n  options = utils.parseNumber(function_num);\n  if (utils.anyIsError(function_num, options)) {\n    return error.value;\n  }\n  switch (function_num) {\n    case 1:\n      return statistical.AVERAGE(ref1);\n    case 2:\n      return statistical.COUNT(ref1);\n    case 3:\n      return statistical.COUNTA(ref1);\n    case 4:\n      return statistical.MAX(ref1);\n    case 5:\n      return statistical.MIN(ref1);\n    case 6:\n      return exports.PRODUCT(ref1);\n    case 7:\n      return statistical.STDEV.S(ref1);\n    case 8:\n      return statistical.STDEV.P(ref1);\n    case 9:\n      return exports.SUM(ref1);\n    case 10:\n      return statistical.VAR.S(ref1);\n    case 11:\n      return statistical.VAR.P(ref1);\n    case 12:\n      return statistical.MEDIAN(ref1);\n    case 13:\n      return statistical.MODE.SNGL(ref1);\n    case 14:\n      return statistical.LARGE(ref1, ref2);\n    case 15:\n      return statistical.SMALL(ref1, ref2);\n    case 16:\n      return statistical.PERCENTILE.INC(ref1, ref2);\n    case 17:\n      return statistical.QUARTILE.INC(ref1, ref2);\n    case 18:\n      return statistical.PERCENTILE.EXC(ref1, ref2);\n    case 19:\n      return statistical.QUARTILE.EXC(ref1, ref2);\n  }\n};\n\nexports.ARABIC = function(text) {\n  // Credits: Rafa? Kukawski\n  if (!/^M*(?:D?C{0,3}|C[MD])(?:L?X{0,3}|X[CL])(?:V?I{0,3}|I[XV])$/.test(text)) {\n    return error.value;\n  }\n  var r = 0;\n  text.replace(/[MDLV]|C[MD]?|X[CL]?|I[XV]?/g, function(i) {\n    r += {\n      M: 1000,\n      CM: 900,\n      D: 500,\n      CD: 400,\n      C: 100,\n      XC: 90,\n      L: 50,\n      XL: 40,\n      X: 10,\n      IX: 9,\n      V: 5,\n      IV: 4,\n      I: 1\n    }[i];\n  });\n  return r;\n};\n\nexports.ASIN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = Math.asin(number);\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.ASINH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.log(number + Math.sqrt(number * number + 1));\n};\n\nexports.ATAN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.atan(number);\n};\n\nexports.ATAN2 = function(number_x, number_y) {\n  number_x = utils.parseNumber(number_x);\n  number_y = utils.parseNumber(number_y);\n  if (utils.anyIsError(number_x, number_y)) {\n    return error.value;\n  }\n  return Math.atan2(number_x, number_y);\n};\n\nexports.ATANH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var result = Math.log((1 + number) / (1 - number)) / 2;\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.BASE = function(number, radix, min_length) {\n  min_length = min_length || 0;\n\n  number = utils.parseNumber(number);\n  radix = utils.parseNumber(radix);\n  min_length = utils.parseNumber(min_length);\n  if (utils.anyIsError(number, radix, min_length)) {\n    return error.value;\n  }\n  min_length = (min_length === undefined) ? 0 : min_length;\n  var result = number.toString(radix);\n  return new Array(Math.max(min_length + 1 - result.length, 0)).join('0') + result;\n};\n\nexports.CEILING = function(number, significance, mode) {\n  significance = (significance === undefined) ? 1 : Math.abs(significance);\n  mode = mode || 0;\n\n  number = utils.parseNumber(number);\n  significance = utils.parseNumber(significance);\n  mode = utils.parseNumber(mode);\n  if (utils.anyIsError(number, significance, mode)) {\n    return error.value;\n  }\n  if (significance === 0) {\n    return 0;\n  }\n  var precision = -Math.floor(Math.log(significance) / Math.log(10));\n  if (number >= 0) {\n    return exports.ROUND(Math.ceil(number / significance) * significance, precision);\n  } else {\n    if (mode === 0) {\n      return -exports.ROUND(Math.floor(Math.abs(number) / significance) * significance, precision);\n    } else {\n      return -exports.ROUND(Math.ceil(Math.abs(number) / significance) * significance, precision);\n    }\n  }\n};\n\nexports.CEILING.MATH = exports.CEILING;\n\nexports.CEILING.PRECISE = exports.CEILING;\n\nexports.COMBIN = function(number, number_chosen) {\n  number = utils.parseNumber(number);\n  number_chosen = utils.parseNumber(number_chosen);\n  if (utils.anyIsError(number, number_chosen)) {\n    return error.value;\n  }\n  return exports.FACT(number) / (exports.FACT(number_chosen) * exports.FACT(number - number_chosen));\n};\n\nexports.COMBINA = function(number, number_chosen) {\n  number = utils.parseNumber(number);\n  number_chosen = utils.parseNumber(number_chosen);\n  if (utils.anyIsError(number, number_chosen)) {\n    return error.value;\n  }\n  return (number === 0 && number_chosen === 0) ? 1 : exports.COMBIN(number + number_chosen - 1, number - 1);\n};\n\nexports.COS = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.cos(number);\n};\n\nexports.COSH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return (Math.exp(number) + Math.exp(-number)) / 2;\n};\n\nexports.COT = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return 1 / Math.tan(number);\n};\n\nexports.COTH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var e2 = Math.exp(2 * number);\n  return (e2 + 1) / (e2 - 1);\n};\n\nexports.CSC = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return 1 / Math.sin(number);\n};\n\nexports.CSCH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return 2 / (Math.exp(number) - Math.exp(-number));\n};\n\nexports.DECIMAL = function(number, radix) {\n  if (arguments.length < 1) {\n    return error.value;\n  }\n\n  return parseInt(number, radix);\n};\n\nexports.DEGREES = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return number * 180 / Math.PI;\n};\n\nexports.EVEN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return exports.CEILING(number, -2, -1);\n};\n\nexports.EXP = function(number) {\n  if (arguments.length < 1) {\n    return error.na;\n  }\n  if (typeof number !== 'number' || arguments.length > 1) {\n    return error.error;\n  }\n\n  number = Math.exp(number);\n\n  return number;\n};\n\nvar MEMOIZED_FACT = [];\nexports.FACT = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var n = Math.floor(number);\n  if (n === 0 || n === 1) {\n    return 1;\n  } else if (MEMOIZED_FACT[n] > 0) {\n    return MEMOIZED_FACT[n];\n  } else {\n    MEMOIZED_FACT[n] = exports.FACT(n - 1) * n;\n    return MEMOIZED_FACT[n];\n  }\n};\n\nexports.FACTDOUBLE = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var n = Math.floor(number);\n  if (n <= 0) {\n    return 1;\n  } else {\n    return n * exports.FACTDOUBLE(n - 2);\n  }\n};\n\nexports.FLOOR = function(number, significance) {\n  number = utils.parseNumber(number);\n  significance = utils.parseNumber(significance);\n  if (utils.anyIsError(number, significance)) {\n    return error.value;\n  }\n  if (significance === 0) {\n    return 0;\n  }\n\n  if (!(number > 0 && significance > 0) && !(number < 0 && significance < 0)) {\n    return error.num;\n  }\n\n  significance = Math.abs(significance);\n  var precision = -Math.floor(Math.log(significance) / Math.log(10));\n  if (number >= 0) {\n    return exports.ROUND(Math.floor(number / significance) * significance, precision);\n  } else {\n    return -exports.ROUND(Math.ceil(Math.abs(number) / significance), precision);\n  }\n};\n\n//TODO: Verify\nexports.FLOOR.MATH = function(number, significance, mode) {\n  significance = (significance === undefined) ? 1 : significance;\n  mode = (mode === undefined) ? 0 : mode;\n\n  number = utils.parseNumber(number);\n  significance = utils.parseNumber(significance);\n  mode = utils.parseNumber(mode);\n  if (utils.anyIsError(number, significance, mode)) {\n    return error.value;\n  }\n  if (significance === 0) {\n    return 0;\n  }\n\n  significance = significance ? Math.abs(significance) : 1;\n  var precision = -Math.floor(Math.log(significance) / Math.log(10));\n  if (number >= 0) {\n    return exports.ROUND(Math.floor(number / significance) * significance, precision);\n  } else if (mode === 0 || mode === undefined) {\n    return -exports.ROUND(Math.ceil(Math.abs(number) / significance) * significance, precision);\n  }\n  return -exports.ROUND(Math.floor(Math.abs(number) / significance) * significance, precision);\n};\n\n// Deprecated\nexports.FLOOR.PRECISE = exports.FLOOR.MATH;\n\n// adapted http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript\nexports.GCD = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var n = range.length;\n  var r0 = range[0];\n  var x = r0 < 0 ? -r0 : r0;\n  for (var i = 1; i < n; i++) {\n    var ri = range[i];\n    var y = ri < 0 ? -ri : ri;\n    while (x && y) {\n      if (x > y) {\n        x %= y;\n      } else {\n        y %= x;\n      }\n    }\n    x += y;\n  }\n  return x;\n};\n\n\nexports.INT = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.floor(number);\n};\n\n//TODO: verify\nexports.ISO = {\n  CEILING: exports.CEILING\n};\n\nexports.LCM = function() {\n  // Credits: Jonas Raoni Soares Silva\n  var o = utils.parseNumberArray(utils.flatten(arguments));\n  if (o instanceof Error) {\n    return o;\n  }\n  for (var i, j, n, d, r = 1;\n       (n = o.pop()) !== undefined;) {\n    while (n > 1) {\n      if (n % 2) {\n        for (i = 3, j = Math.floor(Math.sqrt(n)); i <= j && n % i; i += 2) {\n          //empty\n        }\n        d = (i <= j) ? i : n;\n      } else {\n        d = 2;\n      }\n      for (n /= d, r *= d, i = o.length; i;\n           (o[--i] % d) === 0 && (o[i] /= d) === 1 && o.splice(i, 1)) {\n        //empty\n      }\n    }\n  }\n  return r;\n};\n\nexports.LN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.log(number);\n};\n\nexports.LN10 = function() {\n  return Math.log(10);\n};\n\nexports.LN2 = function() {\n  return Math.log(2);\n};\n\nexports.LOG10E = function() {\n  return Math.LOG10E;\n};\n\nexports.LOG2E = function() {\n  return Math.LOG2E;\n};\n\nexports.LOG = function(number, base) {\n  number = utils.parseNumber(number);\n  base = utils.parseNumber(base);\n  if (utils.anyIsError(number, base)) {\n    return error.value;\n  }\n  base = (base === undefined) ? 10 : base;\n  return Math.log(number) / Math.log(base);\n};\n\nexports.LOG10 = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.log(number) / Math.log(10);\n};\n\nexports.MOD = function(dividend, divisor) {\n  dividend = utils.parseNumber(dividend);\n  divisor = utils.parseNumber(divisor);\n  if (utils.anyIsError(dividend, divisor)) {\n    return error.value;\n  }\n  if (divisor === 0) {\n    return error.div0;\n  }\n  var modulus = Math.abs(dividend % divisor);\n  return (divisor > 0) ? modulus : -modulus;\n};\n\nexports.MROUND = function(number, multiple) {\n  number = utils.parseNumber(number);\n  multiple = utils.parseNumber(multiple);\n  if (utils.anyIsError(number, multiple)) {\n    return error.value;\n  }\n  if (number * multiple < 0) {\n    return error.num;\n  }\n\n  return Math.round(number / multiple) * multiple;\n};\n\nexports.MULTINOMIAL = function() {\n  var args = utils.parseNumberArray(utils.flatten(arguments));\n  if (args instanceof Error) {\n    return args;\n  }\n  var sum = 0;\n  var divisor = 1;\n  for (var i = 0; i < args.length; i++) {\n    sum += args[i];\n    divisor *= exports.FACT(args[i]);\n  }\n  return exports.FACT(sum) / divisor;\n};\n\nexports.ODD = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var temp = Math.ceil(Math.abs(number));\n  temp = (temp & 1) ? temp : temp + 1;\n  return (number > 0) ? temp : -temp;\n};\n\nexports.PI = function() {\n  return Math.PI;\n};\n\nexports.E = function() {\n  return Math.E;\n};\n\nexports.POWER = function(number, power) {\n  number = utils.parseNumber(number);\n  power = utils.parseNumber(power);\n  if (utils.anyIsError(number, power)) {\n    return error.value;\n  }\n  var result = Math.pow(number, power);\n  if (isNaN(result)) {\n    return error.num;\n  }\n\n  return result;\n};\n\nexports.PRODUCT = function() {\n  var args = utils.parseNumberArray(utils.flatten(arguments));\n  if (args instanceof Error) {\n    return args;\n  }\n  var result = 1;\n  for (var i = 0; i < args.length; i++) {\n    result *= args[i];\n  }\n  return result;\n};\n\nexports.QUOTIENT = function(numerator, denominator) {\n  numerator = utils.parseNumber(numerator);\n  denominator = utils.parseNumber(denominator);\n  if (utils.anyIsError(numerator, denominator)) {\n    return error.value;\n  }\n  return parseInt(numerator / denominator, 10);\n};\n\nexports.RADIANS = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return number * Math.PI / 180;\n};\n\nexports.RAND = function() {\n  return Math.random();\n};\n\nexports.RANDBETWEEN = function(bottom, top) {\n  bottom = utils.parseNumber(bottom);\n  top = utils.parseNumber(top);\n  if (utils.anyIsError(bottom, top)) {\n    return error.value;\n  }\n  // Creative Commons Attribution 3.0 License\n  // Copyright (c) 2012 eqcode\n  return bottom + Math.ceil((top - bottom + 1) * Math.random()) - 1;\n};\n\n// TODO\nexports.ROMAN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  // The MIT License\n  // Copyright (c) 2008 Steven Levithan\n  var digits = String(number).split('');\n  var key = ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM', '', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC', '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'];\n  var roman = '';\n  var i = 3;\n  while (i--) {\n    roman = (key[+digits.pop() + (i * 10)] || '') + roman;\n  }\n  return new Array(+digits.join('') + 1).join('M') + roman;\n};\n\nexports.ROUND = function(number, digits) {\n  number = utils.parseNumber(number);\n  digits = utils.parseNumber(digits);\n  if (utils.anyIsError(number, digits)) {\n    return error.value;\n  }\n  return Math.round(number * Math.pow(10, digits)) / Math.pow(10, digits);\n};\n\nexports.ROUNDDOWN = function(number, digits) {\n  number = utils.parseNumber(number);\n  digits = utils.parseNumber(digits);\n  if (utils.anyIsError(number, digits)) {\n    return error.value;\n  }\n  var sign = (number > 0) ? 1 : -1;\n  return sign * (Math.floor(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);\n};\n\nexports.ROUNDUP = function(number, digits) {\n  number = utils.parseNumber(number);\n  digits = utils.parseNumber(digits);\n  if (utils.anyIsError(number, digits)) {\n    return error.value;\n  }\n  var sign = (number > 0) ? 1 : -1;\n  return sign * (Math.ceil(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);\n};\n\nexports.SEC = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return 1 / Math.cos(number);\n};\n\nexports.SECH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return 2 / (Math.exp(number) + Math.exp(-number));\n};\n\nexports.SERIESSUM = function(x, n, m, coefficients) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  m = utils.parseNumber(m);\n  coefficients = utils.parseNumberArray(coefficients);\n  if (utils.anyIsError(x, n, m, coefficients)) {\n    return error.value;\n  }\n  var result = coefficients[0] * Math.pow(x, n);\n  for (var i = 1; i < coefficients.length; i++) {\n    result += coefficients[i] * Math.pow(x, n + i * m);\n  }\n  return result;\n};\n\nexports.SIGN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  if (number < 0) {\n    return -1;\n  } else if (number === 0) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\nexports.SIN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.sin(number);\n};\n\nexports.SINH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return (Math.exp(number) - Math.exp(-number)) / 2;\n};\n\nexports.SQRT = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  if (number < 0) {\n    return error.num;\n  }\n  return Math.sqrt(number);\n};\n\nexports.SQRTPI = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.sqrt(number * Math.PI);\n};\n\nexports.SQRT1_2 = function() {\n  return 1 / Math.sqrt(2);\n};\n\nexports.SQRT2 = function() {\n  return Math.sqrt(2);\n};\n\nexports.SUBTOTAL = function(function_code, ref1) {\n  function_code = utils.parseNumber(function_code);\n  if (function_code instanceof Error) {\n    return function_code;\n  }\n  switch (function_code) {\n    case 1:\n      return statistical.AVERAGE(ref1);\n    case 2:\n      return statistical.COUNT(ref1);\n    case 3:\n      return statistical.COUNTA(ref1);\n    case 4:\n      return statistical.MAX(ref1);\n    case 5:\n      return statistical.MIN(ref1);\n    case 6:\n      return exports.PRODUCT(ref1);\n    case 7:\n      return statistical.STDEV.S(ref1);\n    case 8:\n      return statistical.STDEV.P(ref1);\n    case 9:\n      return exports.SUM(ref1);\n    case 10:\n      return statistical.VAR.S(ref1);\n    case 11:\n      return statistical.VAR.P(ref1);\n    // no hidden values for us\n    case 101:\n      return statistical.AVERAGE(ref1);\n    case 102:\n      return statistical.COUNT(ref1);\n    case 103:\n      return statistical.COUNTA(ref1);\n    case 104:\n      return statistical.MAX(ref1);\n    case 105:\n      return statistical.MIN(ref1);\n    case 106:\n      return exports.PRODUCT(ref1);\n    case 107:\n      return statistical.STDEV.S(ref1);\n    case 108:\n      return statistical.STDEV.P(ref1);\n    case 109:\n      return exports.SUM(ref1);\n    case 110:\n      return statistical.VAR.S(ref1);\n    case 111:\n      return statistical.VAR.P(ref1);\n\n  }\n};\n\nexports.ADD = function (num1, num2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  num1 = utils.parseNumber(num1);\n  num2 = utils.parseNumber(num2);\n  if (utils.anyIsError(num1, num2)) {\n    return error.value;\n  }\n\n  return num1 + num2;\n};\n\nexports.MINUS = function (num1, num2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  num1 = utils.parseNumber(num1);\n  num2 = utils.parseNumber(num2);\n  if (utils.anyIsError(num1, num2)) {\n    return error.value;\n  }\n\n  return num1 - num2;\n};\n\nexports.DIVIDE = function (dividend, divisor) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  dividend = utils.parseNumber(dividend);\n  divisor = utils.parseNumber(divisor);\n  if (utils.anyIsError(dividend, divisor)) {\n    return error.value;\n  }\n\n  if (divisor === 0) {\n    return error.div0;\n  }\n\n  return dividend / divisor;\n};\n\nexports.MULTIPLY = function (factor1, factor2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  factor1 = utils.parseNumber(factor1);\n  factor2 = utils.parseNumber(factor2);\n  if (utils.anyIsError(factor1, factor2)) {\n    return error.value;\n  }\n\n  return factor1 * factor2;\n};\n\nexports.GTE = function (num1, num2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  num1 = utils.parseNumber(num1);\n  num2 = utils.parseNumber(num2);\n  if (utils.anyIsError(num1, num2)) {\n    return error.error;\n  }\n\n  return num1 >= num2;\n};\n\nexports.LT = function (num1, num2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  num1 = utils.parseNumber(num1);\n  num2 = utils.parseNumber(num2);\n  if (utils.anyIsError(num1, num2)) {\n    return error.error;\n  }\n\n  return num1 < num2;\n};\n\n\nexports.LTE = function (num1, num2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  num1 = utils.parseNumber(num1);\n  num2 = utils.parseNumber(num2);\n  if (utils.anyIsError(num1, num2)) {\n    return error.error;\n  }\n\n  return num1 <= num2;\n};\n\nexports.EQ = function (value1, value2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  return value1 === value2;\n};\n\nexports.NE = function (value1, value2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  return value1 !== value2;\n};\n\nexports.POW = function (base, exponent) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  base = utils.parseNumber(base);\n  exponent = utils.parseNumber(exponent);\n  if (utils.anyIsError(base, exponent)) {\n    return error.error;\n  }\n\n  return exports.POWER(base, exponent);\n};\n\nexports.SUM = function() {\n  var result = 0;\n\n  utils.arrayEach(utils.argsToArray(arguments), function(value) {\n    if (typeof value === 'number') {\n      result += value;\n\n    } else if (typeof value === 'string') {\n      var parsed = parseFloat(value);\n\n      !isNaN(parsed) && (result += parsed);\n\n    } else if (Array.isArray(value)) {\n      result += exports.SUM.apply(null, value);\n    }\n  });\n\n  return result;\n};\n\nexports.SUMIF = function(range, criteria, sumRange) {\n  range = utils.flatten(range);\n  if (sumRange !== undefined) {\n    sumRange = utils.flatten(sumRange);\n  }\n  else{\n    sumRange = range;\n  }\n  var result = 0;\n\n  if (criteria.includes('>') || criteria.includes('<') || criteria.includes('=')) {\n    criteria = criteria.replace(/=/g, '==').replace(/<>/g, '!=');\n    for (var i = 0; i < range.length; i++) {\n      result += (eval('\"' + range[i] + '\"' + criteria)) ? sumRange[i] : 0; // jshint ignore:line\n    }\n  }\n  else {\n    // check if the criteria is same as range[i]\n    for (var i = 0; i < range.length; i++) {\n      result += ((\"\" + range[i]).toLowerCase() === (criteria + \"\").toLowerCase()) ? sumRange[i] : 0; // jshint ignore:line\n    }\n  }\n\n  return result;\n};\n\nexports.SUMIFS = function() {\n  var args = utils.argsToArray(arguments);\n  var range = utils.parseNumberArray(utils.flatten(args.shift()));\n  if (range instanceof Error) {\n    return range;\n  }\n  var criteria = args;\n\n  var n_range_elements = range.length;\n  var n_criterias = criteria.length;\n\n  var result = 0;\n  for (var i = 0; i < n_range_elements; i++) {\n    var el = range[i];\n    var condition = '';\n    for (var c = 0; c < n_criterias; c++) {\n      condition += el + criteria[c];\n      if (c !== n_criterias - 1) {\n        condition += '&&';\n      }\n    }\n    if (eval(condition)) { // jshint ignore:line\n      result += el;\n    }\n  }\n  return result;\n};\n\nexports.SUMPRODUCT = function() {\n  if (!arguments || arguments.length === 0) {\n    return error.value;\n  }\n  var arrays = arguments.length + 1;\n  var result = 0;\n  var product;\n  var k;\n  var _i;\n  var _ij;\n  for (var i = 0; i < arguments[0].length; i++) {\n    if (!(arguments[0][i] instanceof Array)) {\n      product = 1;\n      for (k = 1; k < arrays; k++) {\n        _i = utils.parseNumber(arguments[k - 1][i]);\n        if (_i instanceof Error) {\n          return _i;\n        }\n        product *= _i;\n      }\n      result += product;\n    } else {\n      for (var j = 0; j < arguments[0][i].length; j++) {\n        product = 1;\n        for (k = 1; k < arrays; k++) {\n          _ij = utils.parseNumber(arguments[k - 1][i][j]);\n          if (_ij instanceof Error) {\n            return _ij;\n          }\n          product *= _ij;\n        }\n        result += product;\n      }\n    }\n  }\n  return result;\n};\n\nexports.SUMSQ = function() {\n  var numbers = utils.parseNumberArray(utils.flatten(arguments));\n  if (numbers instanceof Error) {\n    return numbers;\n  }\n  var result = 0;\n  var length = numbers.length;\n  for (var i = 0; i < length; i++) {\n    result += (information.ISNUMBER(numbers[i])) ? numbers[i] * numbers[i] : 0;\n  }\n  return result;\n};\n\nexports.SUMX2MY2 = function(array_x, array_y) {\n  array_x = utils.parseNumberArray(utils.flatten(array_x));\n  array_y = utils.parseNumberArray(utils.flatten(array_y));\n  if (utils.anyIsError(array_x, array_y)) {\n    return error.value;\n  }\n  var result = 0;\n  for (var i = 0; i < array_x.length; i++) {\n    result += array_x[i] * array_x[i] - array_y[i] * array_y[i];\n  }\n  return result;\n};\n\nexports.SUMX2PY2 = function(array_x, array_y) {\n  array_x = utils.parseNumberArray(utils.flatten(array_x));\n  array_y = utils.parseNumberArray(utils.flatten(array_y));\n  if (utils.anyIsError(array_x, array_y)) {\n    return error.value;\n  }\n  var result = 0;\n  array_x = utils.parseNumberArray(utils.flatten(array_x));\n  array_y = utils.parseNumberArray(utils.flatten(array_y));\n  for (var i = 0; i < array_x.length; i++) {\n    result += array_x[i] * array_x[i] + array_y[i] * array_y[i];\n  }\n  return result;\n};\n\nexports.SUMXMY2 = function(array_x, array_y) {\n  array_x = utils.parseNumberArray(utils.flatten(array_x));\n  array_y = utils.parseNumberArray(utils.flatten(array_y));\n  if (utils.anyIsError(array_x, array_y)) {\n    return error.value;\n  }\n  var result = 0;\n  array_x = utils.flatten(array_x);\n  array_y = utils.flatten(array_y);\n  for (var i = 0; i < array_x.length; i++) {\n    result += Math.pow(array_x[i] - array_y[i], 2);\n  }\n  return result;\n};\n\nexports.TAN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return Math.tan(number);\n};\n\nexports.TANH = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  var e2 = Math.exp(2 * number);\n  return (e2 - 1) / (e2 + 1);\n};\n\nexports.TRUNC = function(number, digits) {\n  digits = (digits === undefined) ? 0 : digits;\n  number = utils.parseNumber(number);\n  digits = utils.parseNumber(digits);\n  if (utils.anyIsError(number, digits)) {\n    return error.value;\n  }\n  var sign = (number > 0) ? 1 : -1;\n  return sign * (Math.floor(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);\n};\n","var mathTrig = require('./math-trig');\nvar text = require('./text');\nvar jStat = require('jStat').jStat;\nvar utils = require('./utils');\nvar error = require('./error');\nvar misc = require('./miscellaneous');\n\nvar SQRT2PI = 2.5066282746310002;\n\nexports.AVEDEV = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  return jStat.sum(jStat(range).subtract(jStat.mean(range)).abs()[0]) / range.length;\n};\n\nexports.AVERAGE = function() {\n  var range = utils.numbers(utils.flatten(arguments));\n  var n = range.length;\n  var sum = 0;\n  var count = 0;\n  var result;\n\n  for (var i = 0; i < n; i++) {\n    sum += range[i];\n    count += 1;\n  }\n  result = sum / count;\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.AVERAGEA = function() {\n  var range = utils.flatten(arguments);\n  var n = range.length;\n  var sum = 0;\n  var count = 0;\n  var result;\n  for (var i = 0; i < n; i++) {\n    var el = range[i];\n    if (typeof el === 'number') {\n      sum += el;\n    }\n    if (el === true) {\n      sum++;\n    }\n    if (el !== null) {\n      count++;\n    }\n  }\n  result = sum / count;\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.AVERAGEIF = function(range, criteria, average_range) {\n  if (arguments.length <= 1) {\n    return error.na;\n  }\n  average_range = average_range || range;\n  range = utils.flatten(range);\n  average_range = utils.parseNumberArray(utils.flatten(average_range));\n  if (average_range instanceof Error) {\n    return average_range;\n  }\n  var average_count = 0;\n  var result = 0;\n  for (var i = 0; i < range.length; i++) {\n    if (eval(range[i] + criteria)) { // jshint ignore:line\n      result += average_range[i];\n      average_count++;\n    }\n  }\n  return result / average_count;\n};\n\nexports.AVERAGEIFS = function() {\n  // Does not work with multi dimensional ranges yet!\n  //http://office.microsoft.com/en-001/excel-help/averageifs-function-HA010047493.aspx\n  var args = utils.argsToArray(arguments);\n  var criteria = (args.length - 1) / 2;\n  var range = utils.flatten(args[0]);\n  var count = 0;\n  var result = 0;\n  for (var i = 0; i < range.length; i++) {\n    var condition = '';\n    for (var j = 0; j < criteria; j++) {\n      condition += args[2 * j + 1][i] + args[2 * j + 2];\n      if (j !== criteria - 1) {\n        condition += '&&';\n      }\n    }\n    if (eval(condition)) { // jshint ignore:line\n      result += range[i];\n      count++;\n    }\n  }\n\n  var average = result / count;\n  if (isNaN(average)) {\n    return 0;\n  } else {\n    return average;\n  }\n};\n\nexports.BETA = {};\n\nexports.BETA.DIST = function(x, alpha, beta, cumulative, A, B) {\n  if (arguments.length < 4) {\n    return error.value;\n  }\n\n  A = (A === undefined) ? 0 : A;\n  B = (B === undefined) ? 1 : B;\n\n  x = utils.parseNumber(x);\n  alpha = utils.parseNumber(alpha);\n  beta = utils.parseNumber(beta);\n  A = utils.parseNumber(A);\n  B = utils.parseNumber(B);\n  if (utils.anyIsError(x, alpha, beta, A, B)) {\n    return error.value;\n  }\n\n  x = (x - A) / (B - A);\n  return (cumulative) ? jStat.beta.cdf(x, alpha, beta) : jStat.beta.pdf(x, alpha, beta);\n};\n\nexports.BETA.INV = function(probability, alpha, beta, A, B) {\n  A = (A === undefined) ? 0 : A;\n  B = (B === undefined) ? 1 : B;\n\n  probability = utils.parseNumber(probability);\n  alpha = utils.parseNumber(alpha);\n  beta = utils.parseNumber(beta);\n  A = utils.parseNumber(A);\n  B = utils.parseNumber(B);\n  if (utils.anyIsError(probability, alpha, beta, A, B)) {\n    return error.value;\n  }\n\n  return jStat.beta.inv(probability, alpha, beta) * (B - A) + A;\n};\n\nexports.BINOM = {};\n\nexports.BINOM.DIST = function(successes, trials, probability, cumulative) {\n  successes = utils.parseNumber(successes);\n  trials = utils.parseNumber(trials);\n  probability = utils.parseNumber(probability);\n  cumulative = utils.parseNumber(cumulative);\n  if (utils.anyIsError(successes, trials, probability, cumulative)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.binomial.cdf(successes, trials, probability) : jStat.binomial.pdf(successes, trials, probability);\n};\n\nexports.BINOM.DIST.RANGE = function(trials, probability, successes, successes2) {\n  successes2 = (successes2 === undefined) ? successes : successes2;\n\n  trials = utils.parseNumber(trials);\n  probability = utils.parseNumber(probability);\n  successes = utils.parseNumber(successes);\n  successes2 = utils.parseNumber(successes2);\n  if (utils.anyIsError(trials, probability, successes, successes2)) {\n    return error.value;\n  }\n\n  var result = 0;\n  for (var i = successes; i <= successes2; i++) {\n    result += mathTrig.COMBIN(trials, i) * Math.pow(probability, i) * Math.pow(1 - probability, trials - i);\n  }\n  return result;\n};\n\nexports.BINOM.INV = function(trials, probability, alpha) {\n  trials = utils.parseNumber(trials);\n  probability = utils.parseNumber(probability);\n  alpha = utils.parseNumber(alpha);\n  if (utils.anyIsError(trials, probability, alpha)) {\n    return error.value;\n  }\n\n  var x = 0;\n  while (x <= trials) {\n    if (jStat.binomial.cdf(x, trials, probability) >= alpha) {\n      return x;\n    }\n    x++;\n  }\n};\n\nexports.CHISQ = {};\n\nexports.CHISQ.DIST = function(x, k, cumulative) {\n  x = utils.parseNumber(x);\n  k = utils.parseNumber(k);\n  if (utils.anyIsError(x, k)) {\n    return error.value;\n  }\n\n  return (cumulative) ? jStat.chisquare.cdf(x, k) : jStat.chisquare.pdf(x, k);\n};\n\nexports.CHISQ.DIST.RT = function(x, k) {\n  if (!x | !k) {\n    return error.na;\n  }\n\n  if (x < 1 || k > Math.pow(10, 10)) {\n    return error.num;\n  }\n\n  if ((typeof x !== 'number') || (typeof k !== 'number')) {\n    return error.value;\n  }\n\n  return 1 -  jStat.chisquare.cdf(x, k);\n};\n\nexports.CHISQ.INV = function(probability, k) {\n  probability = utils.parseNumber(probability);\n  k = utils.parseNumber(k);\n  if (utils.anyIsError(probability, k)) {\n    return error.value;\n  }\n  return jStat.chisquare.inv(probability, k);\n};\n\nexports.CHISQ.INV.RT = function(p, k) {\n  if (!p | !k) {\n    return error.na;\n  }\n\n  if (p < 0 || p > 1 || k < 1 || k > Math.pow(10, 10)) {\n    return error.num;\n  }\n\n  if ((typeof p !== 'number') || (typeof k !== 'number')) {\n    return error.value;\n  }\n\n  return jStat.chisquare.inv(1.0 - p, k);\n};\n\nexports.CHISQ.TEST = function(observed, expected) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  if ((!(observed instanceof Array)) || (!(expected instanceof Array))) {\n    return error.value;\n  }\n\n  if (observed.length !== expected.length) {\n    return error.value;\n  }\n\n  if (observed[0] && expected[0] &&\n    observed[0].length !== expected[0].length) {\n    return error.value;\n  }\n\n  var row = observed.length;\n  var tmp, i, j;\n\n  // Convert single-dimension array into two-dimension array\n  for (i = 0; i < row; i ++) {\n    if (!(observed[i] instanceof Array)) {\n      tmp = observed[i];\n      observed[i] = [];\n      observed[i].push(tmp);\n    }\n    if (!(expected[i] instanceof Array)) {\n      tmp = expected[i];\n      expected[i] = [];\n      expected[i].push(tmp);\n    }\n  }\n\n  var col = observed[0].length;\n  var dof = (col === 1) ? row-1 : (row-1)*(col-1);\n  var xsqr = 0;\n  var Pi =Math.PI;\n\n  for (i = 0; i < row; i ++) {\n    for (j = 0; j < col; j ++) {\n      xsqr += Math.pow((observed[i][j] - expected[i][j]), 2) / expected[i][j];\n    }\n  }\n\n  // Get independency by X square and its degree of freedom\n  function ChiSq(xsqr, dof) {\n    var p = Math.exp(-0.5 * xsqr);\n    if((dof%2) === 1) {\n      p = p * Math.sqrt(2 * xsqr/Pi);\n    }\n    var k = dof;\n    while(k >= 2) {\n      p = p * xsqr/k;\n      k = k - 2;\n    }\n    var t = p;\n    var a = dof;\n    while (t > 0.0000000001*p) {\n      a = a + 2;\n      t = t * xsqr/a;\n      p = p + t;\n    }\n    return 1-p;\n  }\n\n  return Math.round(ChiSq(xsqr, dof) * 1000000) / 1000000;\n};\n\nexports.COLUMN = function(matrix, index) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  if (index < 0) {\n    return error.num;\n  }\n\n  if (!(matrix instanceof Array) || (typeof index !== 'number')) {\n    return error.value;\n  }\n\n  if (matrix.length === 0) {\n    return undefined;\n  }\n\n  return jStat.col(matrix, index);\n};\n\nexports.COLUMNS = function(matrix) {\n  if (arguments.length !== 1) {\n    return error.na;\n  }\n\n  if (!(matrix instanceof Array)) {\n    return error.value;\n  }\n\n  if (matrix.length === 0) {\n    return 0;\n  }\n\n  return jStat.cols(matrix);\n};\n\nexports.CONFIDENCE = {};\n\nexports.CONFIDENCE.NORM = function(alpha, sd, n) {\n  alpha = utils.parseNumber(alpha);\n  sd = utils.parseNumber(sd);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(alpha, sd, n)) {\n    return error.value;\n  }\n  return jStat.normalci(1, alpha, sd, n)[1] - 1;\n};\n\nexports.CONFIDENCE.T = function(alpha, sd, n) {\n  alpha = utils.parseNumber(alpha);\n  sd = utils.parseNumber(sd);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(alpha, sd, n)) {\n    return error.value;\n  }\n  return jStat.tci(1, alpha, sd, n)[1] - 1;\n};\n\nexports.CORREL = function(array1, array2) {\n  array1 = utils.parseNumberArray(utils.flatten(array1));\n  array2 = utils.parseNumberArray(utils.flatten(array2));\n  if (utils.anyIsError(array1, array2)) {\n    return error.value;\n  }\n  return jStat.corrcoeff(array1, array2);\n};\n\nexports.COUNT = function() {\n  return utils.numbers(utils.flatten(arguments)).length;\n};\n\nexports.COUNTA = function() {\n  var range = utils.flatten(arguments);\n  return range.length - exports.COUNTBLANK(range);\n};\n\nexports.COUNTIN = function (range, value) {\n  var result = 0;\n\n  range = utils.flatten(range);\n\n  for (var i = 0; i < range.length; i++) {\n    if (range[i] === value) {\n      result++;\n    }\n  }\n  return result;\n};\n\n\nexports.COUNTBLANK = function() {\n  var range = utils.flatten(arguments);\n  var blanks = 0;\n  var element;\n  for (var i = 0; i < range.length; i++) {\n    element = range[i];\n    if (element === null || element === '') {\n      blanks++;\n    }\n  }\n  return blanks;\n};\n\nexports.COUNTIF = function(range, criteria) {\n  range = utils.flatten(range);\n  if (!/[<>=!]/.test(criteria)) {\n    criteria = '==\"' + criteria + '\"';\n  }\n  var matches = 0;\n  for (var i = 0; i < range.length; i++) {\n    if (typeof range[i] !== 'string') {\n      if (eval(range[i] + criteria)) { // jshint ignore:line\n        matches++;\n      }\n    } else {\n      if (eval('\"' + range[i] + '\"' + criteria)) { // jshint ignore:line\n        matches++;\n      }\n    }\n  }\n  return matches;\n};\n\nexports.COUNTIFS = function() {\n  var args = utils.argsToArray(arguments);\n  var results = new Array(utils.flatten(args[0]).length);\n  for (var i = 0; i < results.length; i++) {\n    results[i] = true;\n  }\n  for (i = 0; i < args.length; i += 2) {\n    var range = utils.flatten(args[i]);\n    var criteria = args[i + 1];\n    if (!/[<>=!]/.test(criteria)) {\n      criteria = '==\"' + criteria + '\"';\n    }\n    for (var j = 0; j < range.length; j++) {\n      if (typeof range[j] !== 'string') {\n        results[j] = results[j] && eval(range[j] + criteria); // jshint ignore:line\n      } else {\n        results[j] = results[j] && eval('\"' + range[j] + '\"' + criteria); // jshint ignore:line\n      }\n    }\n  }\n  var result = 0;\n  for (i = 0; i < results.length; i++) {\n    if (results[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n\nexports.COUNTUNIQUE = function () {\n  return misc.UNIQUE.apply(null, utils.flatten(arguments)).length;\n};\n\nexports.COVARIANCE = {};\n\nexports.COVARIANCE.P = function(array1, array2) {\n  array1 = utils.parseNumberArray(utils.flatten(array1));\n  array2 = utils.parseNumberArray(utils.flatten(array2));\n  if (utils.anyIsError(array1, array2)) {\n    return error.value;\n  }\n  var mean1 = jStat.mean(array1);\n  var mean2 = jStat.mean(array2);\n  var result = 0;\n  var n = array1.length;\n  for (var i = 0; i < n; i++) {\n    result += (array1[i] - mean1) * (array2[i] - mean2);\n  }\n  return result / n;\n};\n\nexports.COVARIANCE.S = function(array1, array2) {\n  array1 = utils.parseNumberArray(utils.flatten(array1));\n  array2 = utils.parseNumberArray(utils.flatten(array2));\n  if (utils.anyIsError(array1, array2)) {\n    return error.value;\n  }\n  return jStat.covariance(array1, array2);\n};\n\nexports.DEVSQ = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var mean = jStat.mean(range);\n  var result = 0;\n  for (var i = 0; i < range.length; i++) {\n    result += Math.pow((range[i] - mean), 2);\n  }\n  return result;\n};\n\nexports.EXPON = {};\n\nexports.EXPON.DIST = function(x, lambda, cumulative) {\n  x = utils.parseNumber(x);\n  lambda = utils.parseNumber(lambda);\n  if (utils.anyIsError(x, lambda)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.exponential.cdf(x, lambda) : jStat.exponential.pdf(x, lambda);\n};\n\nexports.F = {};\n\nexports.F.DIST = function(x, d1, d2, cumulative) {\n  x = utils.parseNumber(x);\n  d1 = utils.parseNumber(d1);\n  d2 = utils.parseNumber(d2);\n  if (utils.anyIsError(x, d1, d2)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.centralF.cdf(x, d1, d2) : jStat.centralF.pdf(x, d1, d2);\n};\n\nexports.F.DIST.RT = function(x, d1, d2) {\n  if (arguments.length !== 3) {\n    return error.na;\n  }\n\n  if (x < 0 || d1 < 1 || d2 < 1) {\n    return error.num;\n  }\n\n  if ((typeof x !== 'number') || (typeof d1 !== 'number') || (typeof d2 !== 'number')) {\n    return error.value;\n  }\n\n  return 1 - jStat.centralF.cdf(x, d1, d2);\n};\n\nexports.F.INV = function(probability, d1, d2) {\n  probability = utils.parseNumber(probability);\n  d1 = utils.parseNumber(d1);\n  d2 = utils.parseNumber(d2);\n  if (utils.anyIsError(probability, d1, d2)) {\n    return error.value;\n  }\n  if (probability <= 0.0 || probability > 1.0) {\n    return error.num;\n  }\n\n  return jStat.centralF.inv(probability, d1, d2);\n};\n\nexports.F.INV.RT = function(p, d1, d2) {\n  if (arguments.length !== 3) {\n    return error.na;\n  }\n\n  if (p < 0 || p > 1 || d1 < 1 || d1 > Math.pow(10, 10) || d2 < 1 || d2 > Math.pow(10, 10)) {\n    return error.num;\n  }\n\n  if ((typeof p !== 'number') || (typeof d1 !== 'number') || (typeof d2 !== 'number')) {\n    return error.value;\n  }\n\n  return jStat.centralF.inv(1.0 - p, d1, d2);\n};\n\nexports.F.TEST = function(array1, array2) {\n  if (!array1 || !array2) {\n    return error.na;\n  }\n\n  if (!(array1 instanceof Array) || !(array2 instanceof Array)) {\n    return error.na;\n  }\n\n  if (array1.length < 2 || array2.length < 2) {\n    return error.div0;\n  }\n\n  var sumOfSquares = function(values, x1) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n      sum +=Math.pow((values[i] - x1), 2);\n    }\n    return sum;\n  };\n\n  var x1 = mathTrig.SUM(array1) / array1.length;\n  var x2 = mathTrig.SUM(array2) / array2.length;\n  var sum1 = sumOfSquares(array1, x1) / (array1.length - 1);\n  var sum2 = sumOfSquares(array2, x2) / (array2.length - 1);\n\n  return sum1 / sum2;\n};\n\nexports.FISHER = function(x) {\n  x = utils.parseNumber(x);\n  if (x instanceof Error) {\n    return x;\n  }\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n\nexports.FISHERINV = function(y) {\n  y = utils.parseNumber(y);\n  if (y instanceof Error) {\n    return y;\n  }\n  var e2y = Math.exp(2 * y);\n  return (e2y - 1) / (e2y + 1);\n};\n\nexports.FORECAST = function(x, data_y, data_x) {\n  x = utils.parseNumber(x);\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  if (utils.anyIsError(x, data_y, data_x)) {\n    return error.value;\n  }\n  var xmean = jStat.mean(data_x);\n  var ymean = jStat.mean(data_y);\n  var n = data_x.length;\n  var num = 0;\n  var den = 0;\n  for (var i = 0; i < n; i++) {\n    num += (data_x[i] - xmean) * (data_y[i] - ymean);\n    den += Math.pow(data_x[i] - xmean, 2);\n  }\n  var b = num / den;\n  var a = ymean - b * xmean;\n  return a + b * x;\n};\n\nexports.FREQUENCY = function(data, bins) {\n  data = utils.parseNumberArray(utils.flatten(data));\n  bins = utils.parseNumberArray(utils.flatten(bins));\n  if (utils.anyIsError(data, bins)) {\n    return error.value;\n  }\n  var n = data.length;\n  var b = bins.length;\n  var r = [];\n  for (var i = 0; i <= b; i++) {\n    r[i] = 0;\n    for (var j = 0; j < n; j++) {\n      if (i === 0) {\n        if (data[j] <= bins[0]) {\n          r[0] += 1;\n        }\n      } else if (i < b) {\n        if (data[j] > bins[i - 1] && data[j] <= bins[i]) {\n          r[i] += 1;\n        }\n      } else if (i === b) {\n        if (data[j] > bins[b - 1]) {\n          r[b] += 1;\n        }\n      }\n    }\n  }\n  return r;\n};\n\n\nexports.GAMMA = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  if (number === 0) {\n    return error.num;\n  }\n\n  if (parseInt(number, 10) === number && number < 0) {\n    return error.num;\n  }\n\n  return jStat.gammafn(number);\n};\n\nexports.GAMMA.DIST = function(value, alpha, beta, cumulative) {\n  if (arguments.length !== 4) {\n    return error.na;\n  }\n\n  if (value < 0 || alpha <= 0 || beta <= 0) {\n    return error.value;\n  }\n\n  if ((typeof value !== 'number') || (typeof alpha !== 'number') || (typeof beta !== 'number')) {\n    return error.value;\n  }\n\n  return cumulative ? jStat.gamma.cdf(value, alpha, beta, true) : jStat.gamma.pdf(value, alpha, beta, false);\n};\n\nexports.GAMMA.INV = function(probability, alpha, beta) {\n  if (arguments.length !== 3) {\n    return error.na;\n  }\n\n  if (probability < 0 || probability > 1 || alpha <= 0 || beta <= 0) {\n    return error.num;\n  }\n\n  if ((typeof probability !== 'number') || (typeof alpha !== 'number') || (typeof beta !== 'number')) {\n    return error.value;\n  }\n\n  return jStat.gamma.inv(probability, alpha, beta);\n};\n\nexports.GAMMALN = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return jStat.gammaln(number);\n};\n\nexports.GAMMALN.PRECISE = function(x) {\n  if (arguments.length !== 1) {\n    return error.na;\n  }\n\n  if (x <= 0) {\n    return error.num;\n  }\n\n  if (typeof x !== 'number') {\n    return error.value;\n  }\n\n  return jStat.gammaln(x);\n};\n\nexports.GAUSS = function(z) {\n  z = utils.parseNumber(z);\n  if (z instanceof Error) {\n    return z;\n  }\n  return jStat.normal.cdf(z, 0, 1) - 0.5;\n};\n\nexports.GEOMEAN = function() {\n  var args = utils.parseNumberArray(utils.flatten(arguments));\n  if (args instanceof Error) {\n    return args;\n  }\n  return jStat.geomean(args);\n};\n\nexports.GROWTH = function(known_y, known_x, new_x, use_const) {\n  // Credits: Ilmari Karonen (http://stackoverflow.com/questions/14161990/how-to-implement-growth-function-in-javascript)\n\n  known_y = utils.parseNumberArray(known_y);\n  if (known_y instanceof Error) {\n    return known_y;\n  }\n\n  // Default values for optional parameters:\n  var i;\n  if (known_x === undefined) {\n    known_x = [];\n    for (i = 1; i <= known_y.length; i++) {\n      known_x.push(i);\n    }\n  }\n  if (new_x === undefined) {\n    new_x = [];\n    for (i = 1; i <= known_y.length; i++) {\n      new_x.push(i);\n    }\n  }\n\n  known_x = utils.parseNumberArray(known_x);\n  new_x = utils.parseNumberArray(new_x);\n  if (utils.anyIsError(known_x, new_x)) {\n    return error.value;\n  }\n\n\n  if (use_const === undefined) {\n    use_const = true;\n  }\n\n  // Calculate sums over the data:\n  var n = known_y.length;\n  var avg_x = 0;\n  var avg_y = 0;\n  var avg_xy = 0;\n  var avg_xx = 0;\n  for (i = 0; i < n; i++) {\n    var x = known_x[i];\n    var y = Math.log(known_y[i]);\n    avg_x += x;\n    avg_y += y;\n    avg_xy += x * y;\n    avg_xx += x * x;\n  }\n  avg_x /= n;\n  avg_y /= n;\n  avg_xy /= n;\n  avg_xx /= n;\n\n  // Compute linear regression coefficients:\n  var beta;\n  var alpha;\n  if (use_const) {\n    beta = (avg_xy - avg_x * avg_y) / (avg_xx - avg_x * avg_x);\n    alpha = avg_y - beta * avg_x;\n  } else {\n    beta = avg_xy / avg_xx;\n    alpha = 0;\n  }\n\n  // Compute and return result array:\n  var new_y = [];\n  for (i = 0; i < new_x.length; i++) {\n    new_y.push(Math.exp(alpha + beta * new_x[i]));\n  }\n  return new_y;\n};\n\nexports.HARMEAN = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var n = range.length;\n  var den = 0;\n  for (var i = 0; i < n; i++) {\n    den += 1 / range[i];\n  }\n  return n / den;\n};\n\nexports.HYPGEOM = {};\n\nexports.HYPGEOM.DIST = function(x, n, M, N, cumulative) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  M = utils.parseNumber(M);\n  N = utils.parseNumber(N);\n  if (utils.anyIsError(x, n, M, N)) {\n    return error.value;\n  }\n\n  function pdf(x, n, M, N) {\n    return mathTrig.COMBIN(M, x) * mathTrig.COMBIN(N - M, n - x) / mathTrig.COMBIN(N, n);\n  }\n\n  function cdf(x, n, M, N) {\n    var result = 0;\n    for (var i = 0; i <= x; i++) {\n      result += pdf(i, n, M, N);\n    }\n    return result;\n  }\n\n  return (cumulative) ? cdf(x, n, M, N) : pdf(x, n, M, N);\n};\n\nexports.INTERCEPT = function(known_y, known_x) {\n  known_y = utils.parseNumberArray(known_y);\n  known_x = utils.parseNumberArray(known_x);\n  if (utils.anyIsError(known_y, known_x)) {\n    return error.value;\n  }\n  if (known_y.length !== known_x.length) {\n    return error.na;\n  }\n  return exports.FORECAST(0, known_y, known_x);\n};\n\nexports.KURT = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var mean = jStat.mean(range);\n  var n = range.length;\n  var sigma = 0;\n  for (var i = 0; i < n; i++) {\n    sigma += Math.pow(range[i] - mean, 4);\n  }\n  sigma = sigma / Math.pow(jStat.stdev(range, true), 4);\n  return ((n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3))) * sigma - 3 * (n - 1) * (n - 1) / ((n - 2) * (n - 3));\n};\n\nexports.LARGE = function(range, k) {\n  range = utils.parseNumberArray(utils.flatten(range));\n  k = utils.parseNumber(k);\n  if (utils.anyIsError(range, k)) {\n    return range;\n  }\n  return range.sort(function(a, b) {\n    return b - a;\n  })[k - 1];\n};\n\nexports.LINEST = function(data_y, data_x) {\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  if (utils.anyIsError(data_y, data_x)) {\n    return error.value;\n  }\n  var ymean = jStat.mean(data_y);\n  var xmean = jStat.mean(data_x);\n  var n = data_x.length;\n  var num = 0;\n  var den = 0;\n  for (var i = 0; i < n; i++) {\n    num += (data_x[i] - xmean) * (data_y[i] - ymean);\n    den += Math.pow(data_x[i] - xmean, 2);\n  }\n  var m = num / den;\n  var b = ymean - m * xmean;\n  return [m, b];\n};\n\n// According to Microsoft:\n// http://office.microsoft.com/en-us/starter-help/logest-function-HP010342665.aspx\n// LOGEST returns are based on the following linear model:\n// ln y = x1 ln m1 + ... + xn ln mn + ln b\nexports.LOGEST = function(data_y, data_x) {\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  if (utils.anyIsError(data_y, data_x)) {\n    return error.value;\n  }\n  for (var i = 0; i < data_y.length; i ++) {\n    data_y[i] = Math.log(data_y[i]);\n  }\n\n  var result = exports.LINEST(data_y, data_x);\n  result[0] = Math.round(Math.exp(result[0])*1000000)/1000000;\n  result[1] = Math.round(Math.exp(result[1])*1000000)/1000000;\n  return result;\n};\n\nexports.LOGNORM = {};\n\nexports.LOGNORM.DIST = function(x, mean, sd, cumulative) {\n  x = utils.parseNumber(x);\n  mean = utils.parseNumber(mean);\n  sd = utils.parseNumber(sd);\n  if (utils.anyIsError(x, mean, sd)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.lognormal.cdf(x, mean, sd) : jStat.lognormal.pdf(x, mean, sd);\n};\n\nexports.LOGNORM.INV = function(probability, mean, sd) {\n  probability = utils.parseNumber(probability);\n  mean = utils.parseNumber(mean);\n  sd = utils.parseNumber(sd);\n  if (utils.anyIsError(probability, mean, sd)) {\n    return error.value;\n  }\n  return jStat.lognormal.inv(probability, mean, sd);\n};\n\nexports.MAX = function() {\n  var range = utils.numbers(utils.flatten(arguments));\n  return (range.length === 0) ? 0 : Math.max.apply(Math, range);\n};\n\nexports.MAXA = function() {\n  var range = utils.arrayValuesToNumbers(utils.flatten(arguments));\n  return (range.length === 0) ? 0 : Math.max.apply(Math, range);\n};\n\nexports.MEDIAN = function() {\n  var range = utils.arrayValuesToNumbers(utils.flatten(arguments));\n  var result = jStat.median(range);\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.MIN = function() {\n  var range = utils.numbers(utils.flatten(arguments));\n  return (range.length === 0) ? 0 : Math.min.apply(Math, range);\n};\n\nexports.MINA = function() {\n  var range = utils.arrayValuesToNumbers(utils.flatten(arguments));\n  return (range.length === 0) ? 0 : Math.min.apply(Math, range);\n};\n\nexports.MODE = {};\n\nexports.MODE.MULT = function() {\n  // Credits: Roönaän\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var n = range.length;\n  var count = {};\n  var maxItems = [];\n  var max = 0;\n  var currentItem;\n\n  for (var i = 0; i < n; i++) {\n    currentItem = range[i];\n    count[currentItem] = count[currentItem] ? count[currentItem] + 1 : 1;\n    if (count[currentItem] > max) {\n      max = count[currentItem];\n      maxItems = [];\n    }\n    if (count[currentItem] === max) {\n      maxItems[maxItems.length] = currentItem;\n    }\n  }\n  return maxItems;\n};\n\nexports.MODE.SNGL = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  return exports.MODE.MULT(range).sort(function(a, b) {\n    return a - b;\n  })[0];\n};\n\nexports.NEGBINOM = {};\n\nexports.NEGBINOM.DIST = function(k, r, p, cumulative) {\n  k = utils.parseNumber(k);\n  r = utils.parseNumber(r);\n  p = utils.parseNumber(p);\n  if (utils.anyIsError(k, r, p)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.negbin.cdf(k, r, p) : jStat.negbin.pdf(k, r, p);\n};\n\nexports.NORM = {};\n\nexports.NORM.DIST = function(x, mean, sd, cumulative) {\n  x = utils.parseNumber(x);\n  mean = utils.parseNumber(mean);\n  sd = utils.parseNumber(sd);\n  if (utils.anyIsError(x, mean, sd)) {\n    return error.value;\n  }\n  if (sd <= 0) {\n    return error.num;\n  }\n\n  // Return normal distribution computed by jStat [http://jstat.org]\n  return (cumulative) ? jStat.normal.cdf(x, mean, sd) : jStat.normal.pdf(x, mean, sd);\n};\n\nexports.NORM.INV = function(probability, mean, sd) {\n  probability = utils.parseNumber(probability);\n  mean = utils.parseNumber(mean);\n  sd = utils.parseNumber(sd);\n  if (utils.anyIsError(probability, mean, sd)) {\n    return error.value;\n  }\n  return jStat.normal.inv(probability, mean, sd);\n};\n\nexports.NORM.S = {};\n\nexports.NORM.S.DIST = function(z, cumulative) {\n  z = utils.parseNumber(z);\n  if (z instanceof Error) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.normal.cdf(z, 0, 1) : jStat.normal.pdf(z, 0, 1);\n};\n\nexports.NORM.S.INV = function(probability) {\n  probability = utils.parseNumber(probability);\n  if (probability instanceof Error) {\n    return error.value;\n  }\n  return jStat.normal.inv(probability, 0, 1);\n};\n\nexports.PEARSON = function(data_x, data_y) {\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  if (utils.anyIsError(data_y, data_x)) {\n    return error.value;\n  }\n  var xmean = jStat.mean(data_x);\n  var ymean = jStat.mean(data_y);\n  var n = data_x.length;\n  var num = 0;\n  var den1 = 0;\n  var den2 = 0;\n  for (var i = 0; i < n; i++) {\n    num += (data_x[i] - xmean) * (data_y[i] - ymean);\n    den1 += Math.pow(data_x[i] - xmean, 2);\n    den2 += Math.pow(data_y[i] - ymean, 2);\n  }\n  return num / Math.sqrt(den1 * den2);\n};\n\nexports.PERCENTILE = {};\n\nexports.PERCENTILE.EXC = function(array, k) {\n  array = utils.parseNumberArray(utils.flatten(array));\n  k = utils.parseNumber(k);\n  if (utils.anyIsError(array, k)) {\n    return error.value;\n  }\n  array = array.sort(function(a, b) {\n    {\n      return a - b;\n    }\n  });\n  var n = array.length;\n  if (k < 1 / (n + 1) || k > 1 - 1 / (n + 1)) {\n    return error.num;\n  }\n  var l = k * (n + 1) - 1;\n  var fl = Math.floor(l);\n  return utils.cleanFloat((l === fl) ? array[l] : array[fl] + (l - fl) * (array[fl + 1] - array[fl]));\n};\n\nexports.PERCENTILE.INC = function(array, k) {\n  array = utils.parseNumberArray(utils.flatten(array));\n  k = utils.parseNumber(k);\n  if (utils.anyIsError(array, k)) {\n    return error.value;\n  }\n  array = array.sort(function(a, b) {\n    return a - b;\n  });\n  var n = array.length;\n  var l = k * (n - 1);\n  var fl = Math.floor(l);\n  return utils.cleanFloat((l === fl) ? array[l] : array[fl] + (l - fl) * (array[fl + 1] - array[fl]));\n};\n\nexports.PERCENTRANK = {};\n\nexports.PERCENTRANK.EXC = function(array, x, significance) {\n  significance = (significance === undefined) ? 3 : significance;\n  array = utils.parseNumberArray(utils.flatten(array));\n  x = utils.parseNumber(x);\n  significance = utils.parseNumber(significance);\n  if (utils.anyIsError(array, x, significance)) {\n    return error.value;\n  }\n  array = array.sort(function(a, b) {\n    return a - b;\n  });\n  var uniques = misc.UNIQUE.apply(null, array);\n  var n = array.length;\n  var m = uniques.length;\n  var power = Math.pow(10, significance);\n  var result = 0;\n  var match = false;\n  var i = 0;\n  while (!match && i < m) {\n    if (x === uniques[i]) {\n      result = (array.indexOf(uniques[i]) + 1) / (n + 1);\n      match = true;\n    } else if (x >= uniques[i] && (x < uniques[i + 1] || i === m - 1)) {\n      result = (array.indexOf(uniques[i]) + 1 + (x - uniques[i]) / (uniques[i + 1] - uniques[i])) / (n + 1);\n      match = true;\n    }\n    i++;\n  }\n  return Math.floor(result * power) / power;\n};\n\nexports.PERCENTRANK.INC = function(array, x, significance) {\n  significance = (significance === undefined) ? 3 : significance;\n  array = utils.parseNumberArray(utils.flatten(array));\n  x = utils.parseNumber(x);\n  significance = utils.parseNumber(significance);\n  if (utils.anyIsError(array, x, significance)) {\n    return error.value;\n  }\n  array = array.sort(function(a, b) {\n    return a - b;\n  });\n  var uniques = misc.UNIQUE.apply(null, array);\n  var n = array.length;\n  var m = uniques.length;\n  var power = Math.pow(10, significance);\n  var result = 0;\n  var match = false;\n  var i = 0;\n  while (!match && i < m) {\n    if (x === uniques[i]) {\n      result = array.indexOf(uniques[i]) / (n - 1);\n      match = true;\n    } else if (x >= uniques[i] && (x < uniques[i + 1] || i === m - 1)) {\n      result = (array.indexOf(uniques[i]) + (x - uniques[i]) / (uniques[i + 1] - uniques[i])) / (n - 1);\n      match = true;\n    }\n    i++;\n  }\n  return Math.floor(result * power) / power;\n};\n\nexports.PERMUT = function(number, number_chosen) {\n  number = utils.parseNumber(number);\n  number_chosen = utils.parseNumber(number_chosen);\n  if (utils.anyIsError(number, number_chosen)) {\n    return error.value;\n  }\n  return mathTrig.FACT(number) / mathTrig.FACT(number - number_chosen);\n};\n\nexports.PERMUTATIONA = function(number, number_chosen) {\n  number = utils.parseNumber(number);\n  number_chosen = utils.parseNumber(number_chosen);\n  if (utils.anyIsError(number, number_chosen)) {\n    return error.value;\n  }\n  return Math.pow(number, number_chosen);\n};\n\nexports.PHI = function(x) {\n  x = utils.parseNumber(x);\n  if (x instanceof Error) {\n    return error.value;\n  }\n  return Math.exp(-0.5 * x * x) / SQRT2PI;\n};\n\nexports.POISSON = {};\n\nexports.POISSON.DIST = function(x, mean, cumulative) {\n  x = utils.parseNumber(x);\n  mean = utils.parseNumber(mean);\n  if (utils.anyIsError(x, mean)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.poisson.cdf(x, mean) : jStat.poisson.pdf(x, mean);\n};\n\nexports.PROB = function(range, probability, lower, upper) {\n  if (lower === undefined) {\n    return 0;\n  }\n  upper = (upper === undefined) ? lower : upper;\n\n  range = utils.parseNumberArray(utils.flatten(range));\n  probability = utils.parseNumberArray(utils.flatten(probability));\n  lower = utils.parseNumber(lower);\n  upper = utils.parseNumber(upper);\n  if (utils.anyIsError(range, probability, lower, upper)) {\n    return error.value;\n  }\n\n  if (lower === upper) {\n    return (range.indexOf(lower) >= 0) ? probability[range.indexOf(lower)] : 0;\n  }\n\n  var sorted = range.sort(function(a, b) {\n    return a - b;\n  });\n  var n = sorted.length;\n  var result = 0;\n  for (var i = 0; i < n; i++) {\n    if (sorted[i] >= lower && sorted[i] <= upper) {\n      result += probability[range.indexOf(sorted[i])];\n    }\n  }\n  return result;\n};\n\nexports.QUARTILE = {};\n\nexports.QUARTILE.EXC = function(range, quart) {\n  range = utils.parseNumberArray(utils.flatten(range));\n  quart = utils.parseNumber(quart);\n  if (utils.anyIsError(range, quart)) {\n    return error.value;\n  }\n  switch (quart) {\n    case 1:\n      return exports.PERCENTILE.EXC(range, 0.25);\n    case 2:\n      return exports.PERCENTILE.EXC(range, 0.5);\n    case 3:\n      return exports.PERCENTILE.EXC(range, 0.75);\n    default:\n      return error.num;\n  }\n};\n\nexports.QUARTILE.INC = function(range, quart) {\n  range = utils.parseNumberArray(utils.flatten(range));\n  quart = utils.parseNumber(quart);\n  if (utils.anyIsError(range, quart)) {\n    return error.value;\n  }\n  switch (quart) {\n    case 1:\n      return exports.PERCENTILE.INC(range, 0.25);\n    case 2:\n      return exports.PERCENTILE.INC(range, 0.5);\n    case 3:\n      return exports.PERCENTILE.INC(range, 0.75);\n    default:\n      return error.num;\n  }\n};\n\nexports.RANK = {};\n\nexports.RANK.AVG = function(number, range, order) {\n  number = utils.parseNumber(number);\n  range = utils.parseNumberArray(utils.flatten(range));\n  if (utils.anyIsError(number, range)) {\n    return error.value;\n  }\n  range = utils.flatten(range);\n  order = order || false;\n  var sort = (order) ? function(a, b) {\n    return a - b;\n  } : function(a, b) {\n    return b - a;\n  };\n  range = range.sort(sort);\n\n  var length = range.length;\n  var count = 0;\n  for (var i = 0; i < length; i++) {\n    if (range[i] === number) {\n      count++;\n    }\n  }\n\n  return (count > 1) ? (2 * range.indexOf(number) + count + 1) / 2 : range.indexOf(number) + 1;\n};\n\nexports.RANK.EQ = function(number, range, order) {\n  number = utils.parseNumber(number);\n  range = utils.parseNumberArray(utils.flatten(range));\n  if (utils.anyIsError(number, range)) {\n    return error.value;\n  }\n  order = order || false;\n  var sort = (order) ? function(a, b) {\n    return a - b;\n  } : function(a, b) {\n    return b - a;\n  };\n  range = range.sort(sort);\n  return range.indexOf(number) + 1;\n};\n\nexports.ROW = function(matrix, index) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  if (index < 0) {\n    return error.num;\n  }\n\n  if (!(matrix instanceof Array) || (typeof index !== 'number')) {\n    return error.value;\n  }\n\n  if (matrix.length === 0) {\n    return undefined;\n  }\n\n  return jStat.row(matrix, index);\n};\n\nexports.ROWS = function(matrix) {\n  if (arguments.length !== 1) {\n    return error.na;\n  }\n\n  if (!(matrix instanceof Array)) {\n    return error.value;\n  }\n\n  if (matrix.length === 0) {\n    return 0;\n  }\n\n  return jStat.rows(matrix);\n};\n\nexports.RSQ = function(data_x, data_y) { // no need to flatten here, PEARSON will take care of that\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  if (utils.anyIsError(data_x, data_y)) {\n    return error.value;\n  }\n  return Math.pow(exports.PEARSON(data_x, data_y), 2);\n};\n\nexports.SKEW = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var mean = jStat.mean(range);\n  var n = range.length;\n  var sigma = 0;\n  for (var i = 0; i < n; i++) {\n    sigma += Math.pow(range[i] - mean, 3);\n  }\n  return n * sigma / ((n - 1) * (n - 2) * Math.pow(jStat.stdev(range, true), 3));\n};\n\nexports.SKEW.P = function() {\n  var range = utils.parseNumberArray(utils.flatten(arguments));\n  if (range instanceof Error) {\n    return range;\n  }\n  var mean = jStat.mean(range);\n  var n = range.length;\n  var m2 = 0;\n  var m3 = 0;\n  for (var i = 0; i < n; i++) {\n    m3 += Math.pow(range[i] - mean, 3);\n    m2 += Math.pow(range[i] - mean, 2);\n  }\n  m3 = m3 / n;\n  m2 = m2 / n;\n  return m3 / Math.pow(m2, 3 / 2);\n};\n\nexports.SLOPE = function(data_y, data_x) {\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  if (utils.anyIsError(data_y, data_x)) {\n    return error.value;\n  }\n  var xmean = jStat.mean(data_x);\n  var ymean = jStat.mean(data_y);\n  var n = data_x.length;\n  var num = 0;\n  var den = 0;\n  for (var i = 0; i < n; i++) {\n    num += (data_x[i] - xmean) * (data_y[i] - ymean);\n    den += Math.pow(data_x[i] - xmean, 2);\n  }\n  return num / den;\n};\n\nexports.SMALL = function(range, k) {\n  range = utils.parseNumberArray(utils.flatten(range));\n  k = utils.parseNumber(k);\n  if (utils.anyIsError(range, k)) {\n    return range;\n  }\n  return range.sort(function(a, b) {\n    return a - b;\n  })[k - 1];\n};\n\nexports.STANDARDIZE = function(x, mean, sd) {\n  x = utils.parseNumber(x);\n  mean = utils.parseNumber(mean);\n  sd = utils.parseNumber(sd);\n  if (utils.anyIsError(x, mean, sd)) {\n    return error.value;\n  }\n  return (x - mean) / sd;\n};\n\nexports.STDEV = {};\n\nexports.STDEV.P = function() {\n  var v = exports.VAR.P.apply(this, arguments);\n  var result = Math.sqrt(v);\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.STDEV.S = function() {\n  var v = exports.VAR.S.apply(this, arguments);\n  var result = Math.sqrt(v);\n\n  return result;\n};\n\nexports.STDEVA = function() {\n  var v = exports.VARA.apply(this, arguments);\n  var result = Math.sqrt(v);\n\n  return result;\n};\n\nexports.STDEVPA = function() {\n  var v = exports.VARPA.apply(this, arguments);\n  var result = Math.sqrt(v);\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\n\nexports.STEYX = function(data_y, data_x) {\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  if (utils.anyIsError(data_y, data_x)) {\n    return error.value;\n  }\n  var xmean = jStat.mean(data_x);\n  var ymean = jStat.mean(data_y);\n  var n = data_x.length;\n  var lft = 0;\n  var num = 0;\n  var den = 0;\n  for (var i = 0; i < n; i++) {\n    lft += Math.pow(data_y[i] - ymean, 2);\n    num += (data_x[i] - xmean) * (data_y[i] - ymean);\n    den += Math.pow(data_x[i] - xmean, 2);\n  }\n  return Math.sqrt((lft - num * num / den) / (n - 2));\n};\n\nexports.TRANSPOSE = function(matrix) {\n  if (!matrix) {\n    return error.na;\n  }\n  return jStat.transpose(matrix);\n};\n\nexports.T = text.T;\n\nexports.T.DIST = function(x, df, cumulative) {\n  x = utils.parseNumber(x);\n  df = utils.parseNumber(df);\n  if (utils.anyIsError(x, df)) {\n    return error.value;\n  }\n  return (cumulative) ? jStat.studentt.cdf(x, df) : jStat.studentt.pdf(x, df);\n};\n\nexports.T.DIST['2T'] = function(x, df) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  if (x < 0 || df < 1) {\n    return error.num;\n  }\n\n  if ((typeof x !== 'number') || (typeof df !== 'number')) {\n    return error.value;\n  }\n\n  return (1 - jStat.studentt.cdf(x , df)) * 2;\n};\n\nexports.T.DIST.RT = function(x, df) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n\n  if (x < 0 || df < 1) {\n    return error.num;\n  }\n\n  if ((typeof x !== 'number') || (typeof df !== 'number')) {\n    return error.value;\n  }\n\n  return 1 - jStat.studentt.cdf(x , df);\n};\n\nexports.T.INV = function(probability, df) {\n  probability = utils.parseNumber(probability);\n  df = utils.parseNumber(df);\n  if (utils.anyIsError(probability, df)) {\n    return error.value;\n  }\n  return jStat.studentt.inv(probability, df);\n};\n\nexports.T.INV['2T'] = function(probability, df) {\n  probability = utils.parseNumber(probability);\n  df = utils.parseNumber(df);\n  if (probability <= 0 || probability > 1 || df < 1) {\n    return error.num;\n  }\n  if (utils.anyIsError(probability, df)) {\n    return error.value;\n  }\n  return Math.abs(jStat.studentt.inv(probability/2, df));\n};\n\n// The algorithm can be found here:\n// http://www.chem.uoa.gr/applets/AppletTtest/Appl_Ttest2.html\nexports.T.TEST = function(data_x, data_y) {\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  if (utils.anyIsError(data_x, data_y)) {\n    return error.value;\n  }\n\n  var mean_x = jStat.mean(data_x);\n  var mean_y = jStat.mean(data_y);\n  var s_x = 0;\n  var s_y = 0;\n  var i;\n\n  for (i = 0; i < data_x.length; i++) {\n    s_x += Math.pow(data_x[i] - mean_x, 2);\n  }\n  for (i = 0; i < data_y.length; i++) {\n    s_y += Math.pow(data_y[i] - mean_y, 2);\n  }\n\n  s_x = s_x / (data_x.length-1);\n  s_y = s_y / (data_y.length-1);\n\n  var t = Math.abs(mean_x - mean_y) / Math.sqrt(s_x/data_x.length + s_y/data_y.length);\n\n  return exports.T.DIST['2T'](t, data_x.length+data_y.length-2);\n};\n\nexports.TREND = function(data_y, data_x, new_data_x) {\n  data_y = utils.parseNumberArray(utils.flatten(data_y));\n  data_x = utils.parseNumberArray(utils.flatten(data_x));\n  new_data_x = utils.parseNumberArray(utils.flatten(new_data_x));\n  if (utils.anyIsError(data_y, data_x, new_data_x)) {\n    return error.value;\n  }\n  var linest = exports.LINEST(data_y, data_x);\n  var m = linest[0];\n  var b = linest[1];\n  var result = [];\n\n  new_data_x.forEach(function(x) {\n    result.push(m * x + b);\n  });\n\n  return result;\n};\n\nexports.TRIMMEAN = function(range, percent) {\n  range = utils.parseNumberArray(utils.flatten(range));\n  percent = utils.parseNumber(percent);\n  if (utils.anyIsError(range, percent)) {\n    return error.value;\n  }\n  var trim = mathTrig.FLOOR(range.length * percent, 2) / 2;\n  return jStat.mean(utils.initial(utils.rest(range.sort(function(a, b) {\n    return a - b;\n  }), trim), trim));\n};\n\nexports.VAR = {};\n\nexports.VAR.P = function() {\n  var range = utils.numbers(utils.flatten(arguments));\n  var n = range.length;\n  var sigma = 0;\n  var mean = exports.AVERAGE(range);\n  var result;\n  for (var i = 0; i < n; i++) {\n    sigma += Math.pow(range[i] - mean, 2);\n  }\n  result = sigma / n;\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.VAR.S = function() {\n  var range = utils.numbers(utils.flatten(arguments));\n  var n = range.length;\n  var sigma = 0;\n  var mean = exports.AVERAGE(range);\n  for (var i = 0; i < n; i++) {\n    sigma += Math.pow(range[i] - mean, 2);\n  }\n  return sigma / (n - 1);\n};\n\nexports.VARA = function() {\n  var range = utils.flatten(arguments);\n  var n = range.length;\n  var sigma = 0;\n  var count = 0;\n  var mean = exports.AVERAGEA(range);\n  for (var i = 0; i < n; i++) {\n    var el = range[i];\n    if (typeof el === 'number') {\n      sigma += Math.pow(el - mean, 2);\n    } else if (el === true) {\n      sigma += Math.pow(1 - mean, 2);\n    } else {\n      sigma += Math.pow(0 - mean, 2);\n    }\n\n    if (el !== null) {\n      count++;\n    }\n  }\n  return sigma / (count - 1);\n};\n\nexports.VARPA = function() {\n  var range = utils.flatten(arguments);\n  var n = range.length;\n  var sigma = 0;\n  var count = 0;\n  var mean = exports.AVERAGEA(range);\n  var result;\n  for (var i = 0; i < n; i++) {\n    var el = range[i];\n    if (typeof el === 'number') {\n      sigma += Math.pow(el - mean, 2);\n    } else if (el === true) {\n      sigma += Math.pow(1 - mean, 2);\n    } else {\n      sigma += Math.pow(0 - mean, 2);\n    }\n\n    if (el !== null) {\n      count++;\n    }\n  }\n  result = sigma / count;\n\n  if (isNaN(result)) {\n    result = error.num;\n  }\n\n  return result;\n};\n\nexports.WEIBULL = {};\n\nexports.WEIBULL.DIST = function(x, alpha, beta, cumulative) {\n  x = utils.parseNumber(x);\n  alpha = utils.parseNumber(alpha);\n  beta = utils.parseNumber(beta);\n  if (utils.anyIsError(x, alpha, beta)) {\n    return error.value;\n  }\n  return (cumulative) ? 1 - Math.exp(-Math.pow(x / beta, alpha)) : Math.pow(x, alpha - 1) * Math.exp(-Math.pow(x / beta, alpha)) * alpha / Math.pow(beta, alpha);\n};\n\nexports.Z = {};\n\nexports.Z.TEST = function(range, x, sd) {\n  range = utils.parseNumberArray(utils.flatten(range));\n  x = utils.parseNumber(x);\n  if (utils.anyIsError(range, x)) {\n    return error.value;\n  }\n\n  sd = sd || exports.STDEV.S(range);\n  var n = range.length;\n  return 1 - exports.NORM.S.DIST((exports.AVERAGE(range) - x) / (sd / Math.sqrt(n)), true);\n};\n","var utils = require('./utils');\nvar error = require('./error');\n\n//TODO\nexports.ASC = function() {\n  throw new Error('ASC is not implemented');\n};\n\n//TODO\nexports.BAHTTEXT = function() {\n  throw new Error('BAHTTEXT is not implemented');\n};\n\nexports.CHAR = function(number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return String.fromCharCode(number);\n};\n\nexports.CLEAN = function(text) {\n  text = text || '';\n  var re = /[\\0-\\x1F]/g;\n  return text.replace(re, \"\");\n};\n\nexports.CODE = function(text) {\n  text = text || '';\n  var result = text.charCodeAt(0);\n\n  if (isNaN(result)) {\n    result = error.na;\n  }\n  return result;\n};\n\nexports.CONCATENATE = function() {\n  var args = utils.flatten(arguments);\n\n  var trueFound = 0;\n  while ((trueFound = args.indexOf(true)) > -1) {\n    args[trueFound] = 'TRUE';\n  }\n\n  var falseFound = 0;\n  while ((falseFound = args.indexOf(false)) > -1) {\n    args[falseFound] = 'FALSE';\n  }\n\n  return args.join('');\n};\n\n//TODO\nexports.DBCS = function() {\n  throw new Error('DBCS is not implemented');\n};\n\n//TODO\nexports.DOLLAR = function() {\n  throw new Error('DOLLAR is not implemented');\n};\n\nexports.EXACT = function(text1, text2) {\n  if (arguments.length !== 2) {\n    return error.na;\n  }\n  return text1 === text2;\n};\n\nexports.FIND = function(find_text, within_text, position) {\n  if (arguments.length < 2) {\n    return error.na;\n  }\n  position = (position === undefined) ? 0 : position;\n  return within_text ? within_text.indexOf(find_text, position - 1) + 1 : null;\n};\n\n//TODO\nexports.FIXED = function() {\n  throw new Error('FIXED is not implemented');\n};\n\nexports.HTML2TEXT = function (value) {\n  var result = '';\n\n  if (value) {\n    if (value instanceof Array) {\n      value.forEach(function (line) {\n        if (result !== '') {\n          result += '\\n';\n        }\n        result += (line.replace(/<(?:.|\\n)*?>/gm, ''));\n      });\n    } else {\n      result = value.replace(/<(?:.|\\n)*?>/gm, '');\n    }\n  }\n\n  return result;\n};\n\nexports.LEFT = function(text, number) {\n  number = (number === undefined) ? 1 : number;\n  number = utils.parseNumber(number);\n  if (number instanceof Error || typeof text !== 'string') {\n    return error.value;\n  }\n  return text ? text.substring(0, number) : null;\n};\n\nexports.LEN = function(text) {\n  if (arguments.length === 0) {\n    return error.error;\n  }\n\n  if (typeof text === 'string') {\n    return text ? text.length : 0;\n  }\n\n  if (text.length) {\n    return text.length;\n  }\n\n  return error.value;\n};\n\nexports.LOWER = function(text) {\n  if (typeof text !== 'string') {\n    return error.value;\n  }\n  return text ? text.toLowerCase() : text;\n};\n\nexports.MID = function(text, start, number) {\n  start = utils.parseNumber(start);\n  number = utils.parseNumber(number);\n  if (utils.anyIsError(start, number) || typeof text !== 'string') {\n    return number;\n  }\n\n  var begin = start - 1;\n  var end = begin + number;\n\n  return text.substring(begin, end);\n};\n\n// TODO\nexports.NUMBERVALUE = function (text, decimal_separator, group_separator)  {\n  decimal_separator = (typeof decimal_separator === 'undefined') ? '.' : decimal_separator;\n  group_separator = (typeof group_separator === 'undefined') ? ',' : group_separator;\n  return Number(text.replace(decimal_separator, '.').replace(group_separator, ''));\n};\n\n// TODO\nexports.PRONETIC = function() {\n  throw new Error('PRONETIC is not implemented');\n};\n\nexports.PROPER = function(text) {\n  if (text === undefined || text.length === 0) {\n    return error.value;\n  }\n  if (text === true) {\n    text = 'TRUE';\n  }\n  if (text === false) {\n    text = 'FALSE';\n  }\n  if (isNaN(text) && typeof text === 'number') {\n    return error.value;\n  }\n  if (typeof text === 'number') {\n    text = '' + text;\n  }\n\n  return text.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nexports.REGEXEXTRACT = function (text, regular_expression) {\n  if (arguments.length < 2) {\n    return error.na;\n  }\n  var match = text.match(new RegExp(regular_expression));\n  return match ? (match[match.length > 1 ? match.length - 1 : 0]) : null;\n};\n\nexports.REGEXMATCH = function (text, regular_expression, full) {\n  if (arguments.length < 2) {\n    return error.na;\n  }\n  var match = text.match(new RegExp(regular_expression));\n  return full ? match : !!match;\n};\n\nexports.REGEXREPLACE = function (text, regular_expression, replacement) {\n  if (arguments.length < 3) {\n    return error.na;\n  }\n  return text.replace(new RegExp(regular_expression), replacement);\n};\n\nexports.REPLACE = function(text, position, length, new_text) {\n  position = utils.parseNumber(position);\n  length = utils.parseNumber(length);\n  if (utils.anyIsError(position, length) ||\n    typeof text !== 'string' ||\n    typeof new_text !== 'string') {\n    return error.value;\n  }\n  return text.substr(0, position - 1) + new_text + text.substr(position - 1 + length);\n};\n\nexports.REPT = function(text, number) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return new Array(number + 1).join(text);\n};\n\nexports.RIGHT = function(text, number) {\n  number = (number === undefined) ? 1 : number;\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n  return text ? text.substring(text.length - number) : error.na;\n};\n\nexports.SEARCH = function(find_text, within_text, position) {\n  var foundAt;\n  if (typeof find_text !== 'string' || typeof within_text !== 'string') {\n    return error.value;\n  }\n  position = (position === undefined) ? 0 : position;\n  foundAt = within_text.toLowerCase().indexOf(find_text.toLowerCase(), position - 1)+1;\n  return (foundAt === 0)?error.value:foundAt;\n};\n\nexports.SPLIT = function (text, separator) {\n  return text.split(separator);\n};\n\nexports.SUBSTITUTE = function(text, old_text, new_text, occurrence) {\n  if (arguments.length < 2) {\n    return error.na;\n  }\n  if (!text || !old_text || !new_text) {\n    return text;\n  } else if (occurrence === undefined) {\n    return text.replace(new RegExp(old_text, 'g'), new_text);\n  } else {\n    var index = 0;\n    var i = 0;\n    while (text.indexOf(old_text, index) > 0) {\n      index = text.indexOf(old_text, index + 1);\n      i++;\n      if (i === occurrence) {\n        return text.substring(0, index) + new_text + text.substring(index + old_text.length);\n      }\n    }\n  }\n};\n\nexports.T = function(value) {\n  return (typeof value === \"string\") ? value : '';\n};\n\n// TODO incomplete implementation\nexports.TEXT = function() {\n  throw new Error('TEXT is not implemented');\n};\n\nexports.TRIM = function(text) {\n  if (typeof text !== 'string') {\n    return error.value;\n  }\n  return text.replace(/ +/g, ' ').trim();\n};\n\nexports.UNICHAR = exports.CHAR;\n\nexports.UNICODE = exports.CODE;\n\nexports.UPPER = function(text) {\n  if (typeof text !== 'string') {\n    return error.value;\n  }\n  return text.toUpperCase();\n};\n\n//TODO\nexports.VALUE = function() {\n  throw new Error('VALUE is not implemented');\n};\n","var error = require('./error');\n\n// TODO\nexports.CELL = function() {\n  throw new Error('CELL is not implemented');\n};\n\nexports.ERROR = {};\nexports.ERROR.TYPE = function(error_val) {\n  switch (error_val) {\n    case error.nil: return 1;\n    case error.div0: return 2;\n    case error.value: return 3;\n    case error.ref: return 4;\n    case error.name: return 5;\n    case error.num: return 6;\n    case error.na: return 7;\n    case error.data: return 8;\n  }\n  return error.na;\n};\n\n// TODO\nexports.INFO = function() {\n  throw new Error('INFO is not implemented');\n};\n\nexports.ISBLANK = function(value) {\n  return value === null;\n};\n\nexports.ISBINARY = function (number) {\n  return (/^[01]{1,10}$/).test(number);\n};\n\nexports.ISERR = function(value) {\n  return ([error.value, error.ref, error.div0, error.num, error.name, error.nil]).indexOf(value) >= 0 ||\n    (typeof value === 'number' && (isNaN(value) || !isFinite(value)));\n};\n\nexports.ISERROR = function(value) {\n  return exports.ISERR(value) || value === error.na;\n};\n\nexports.ISEVEN = function(number) {\n  return (Math.floor(Math.abs(number)) & 1) ? false : true;\n};\n\n// TODO\nexports.ISFORMULA = function() {\n  throw new Error('ISFORMULA is not implemented');\n};\n\nexports.ISLOGICAL = function(value) {\n  return value === true || value === false;\n};\n\nexports.ISNA = function(value) {\n  return value === error.na;\n};\n\nexports.ISNONTEXT = function(value) {\n  return typeof(value) !== 'string';\n};\n\nexports.ISNUMBER = function(value) {\n  return typeof(value) === 'number' && !isNaN(value) && isFinite(value);\n};\n\nexports.ISODD = function(number) {\n  return (Math.floor(Math.abs(number)) & 1) ? true : false;\n};\n\n// TODO\nexports.ISREF = function() {\n  throw new Error('ISREF is not implemented');\n};\n\nexports.ISTEXT = function(value) {\n  return typeof(value) === 'string';\n};\n\nexports.N = function(value) {\n  if (this.ISNUMBER(value)) {\n    return value;\n  }\n  if (value instanceof Date) {\n    return value.getTime();\n  }\n  if (value === true) {\n    return 1;\n  }\n  if (value === false) {\n    return 0;\n  }\n  if (this.ISERROR(value)) {\n    return value;\n  }\n  return 0;\n};\n\nexports.NA = function() {\n  return error.na;\n};\n\n\n// TODO\nexports.SHEET = function() {\n  throw new Error('SHEET is not implemented');\n};\n\n// TODO\nexports.SHEETS = function() {\n  throw new Error('SHEETS is not implemented');\n};\n\nexports.TYPE = function(value) {\n  if (this.ISNUMBER(value)) {\n    return 1;\n  }\n  if (this.ISTEXT(value)) {\n    return 2;\n  }\n  if (this.ISLOGICAL(value)) {\n    return 4;\n  }\n  if (this.ISERROR(value)) {\n    return 16;\n  }\n  if (Array.isArray(value)) {\n    return 64;\n  }\n};\n","var error = require('./error');\nvar utils = require('./utils');\n\nvar d1900 = new Date(Date.UTC(1900, 0, 1));\nvar WEEK_STARTS = [\n  undefined,\n  0,\n  1,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  0\n];\nvar WEEK_TYPES = [\n  [],\n  [1, 2, 3, 4, 5, 6, 7],\n  [7, 1, 2, 3, 4, 5, 6],\n  [6, 0, 1, 2, 3, 4, 5],\n  [],\n  [],\n  [],\n  [],\n  [],\n  [],\n  [],\n  [7, 1, 2, 3, 4, 5, 6],\n  [6, 7, 1, 2, 3, 4, 5],\n  [5, 6, 7, 1, 2, 3, 4],\n  [4, 5, 6, 7, 1, 2, 3],\n  [3, 4, 5, 6, 7, 1, 2],\n  [2, 3, 4, 5, 6, 7, 1],\n  [1, 2, 3, 4, 5, 6, 7]\n];\nvar WEEKEND_TYPES = [\n  [],\n  [6, 0],\n  [0, 1],\n  [1, 2],\n  [2, 3],\n  [3, 4],\n  [4, 5],\n  [5, 6],\n  undefined,\n  undefined,\n  undefined, [0, 0],\n  [1, 1],\n  [2, 2],\n  [3, 3],\n  [4, 4],\n  [5, 5],\n  [6, 6]\n];\n\nexports.DATE = function(year, month, day) {\n  var result;\n\n  year = utils.parseNumber(year);\n  month = utils.parseNumber(month);\n  day = utils.parseNumber(day);\n\n  if (utils.anyIsError(year, month, day)) {\n    result = error.value;\n\n  } else if (year < 0 || month < 0 || day < 0) {\n    result = error.num;\n\n  } else {\n    result = new Date(year, month - 1, day);\n  }\n\n  return result;\n};\n\nexports.DATEDIF = function(start_date, end_date, interval) {\n  end_date = utils.parseDate(end_date);\n  start_date = utils.parseDate(start_date);\n\n  if (end_date instanceof Error) {\n    return end_date;\n  }\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  if (typeof interval !== 'string') {\n    return error.value;\n  }\n\n  var difference = end_date - start_date;\n  switch (interval.toLowerCase()) {\n    case 'y':\n      return Math.floor(difference / 31556952000);\n    case 'm':\n      return Math.floor(difference / 2629746000);\n    case 'd':\n      return Math.floor(difference / 86400000);\n  }\n};\n\nexports.DATEVALUE = function(date_text) {\n  var modifier = 2;\n  var date;\n\n  if (typeof date_text !== 'string') {\n    return error.value;\n  }\n\n  date = Date.parse(date_text);\n\n  if (isNaN(date)) {\n    return error.value;\n  }\n\n  if (date <= -2203891200000) {\n    modifier = 1;\n  }\n\n  return Math.ceil((date - d1900) / 86400000) + modifier;\n};\n\nexports.DAY = function(serial_number) {\n  var date = utils.parseDate(serial_number);\n  if (date instanceof Error) {\n    return date;\n  }\n\n  return date.getDate();\n};\n\nexports.DAYS = function(end_date, start_date) {\n  end_date = utils.parseDate(end_date);\n  start_date = utils.parseDate(start_date);\n\n  if (end_date instanceof Error) {\n    return end_date;\n  }\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n\n  return serial(end_date) - serial(start_date);\n};\n\nexports.DAYS360 = function(start_date, end_date, method) {\n  method = utils.parseBool(method);\n  start_date = utils.parseDate(start_date);\n  end_date = utils.parseDate(end_date);\n\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  if (end_date instanceof Error) {\n    return end_date;\n  }\n  if (method instanceof Error) {\n    return method;\n  }\n  var sm = start_date.getMonth();\n  var em = end_date.getMonth();\n  var sd, ed;\n\n  if (method) {\n    sd = start_date.getDate() === 31 ? 30 : start_date.getDate();\n    ed = end_date.getDate() === 31 ? 30 : end_date.getDate();\n  } else {\n    var smd = new Date(start_date.getFullYear(), sm + 1, 0).getDate();\n    var emd = new Date(end_date.getFullYear(), em + 1, 0).getDate();\n    sd = start_date.getDate() === smd ? 30 : start_date.getDate();\n    if (end_date.getDate() === emd) {\n      if (sd < 30) {\n        em++;\n        ed = 1;\n      } else {\n        ed = 30;\n      }\n    } else {\n      ed = end_date.getDate();\n    }\n  }\n\n  return 360 * (end_date.getFullYear() - start_date.getFullYear()) +\n    30 * (em - sm) + (ed - sd);\n};\n\nexports.EDATE = function(start_date, months) {\n  start_date = utils.parseDate(start_date);\n\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  if (isNaN(months)) {\n    return error.value;\n  }\n  months = parseInt(months, 10);\n  start_date.setMonth(start_date.getMonth() + months);\n\n  return serial(start_date);\n};\n\nexports.EOMONTH = function(start_date, months) {\n  start_date = utils.parseDate(start_date);\n\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  if (isNaN(months)) {\n    return error.value;\n  }\n  months = parseInt(months, 10);\n\n  return serial(new Date(start_date.getFullYear(), start_date.getMonth() + months + 1, 0));\n};\n\nexports.HOUR = function(serial_number) {\n  serial_number = utils.parseDate(serial_number);\n\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n\n  return serial_number.getHours();\n};\n\nexports.INTERVAL = function (second) {\n  if (typeof second !== 'number' && typeof second !== 'string') {\n    return error.value;\n  } else {\n    second = parseInt(second, 10);\n  }\n\n  var year  = Math.floor(second/946080000);\n  second    = second%946080000;\n  var month = Math.floor(second/2592000);\n  second    = second%2592000;\n  var day   = Math.floor(second/86400);\n  second    = second%86400;\n\n  var hour  = Math.floor(second/3600);\n  second    = second%3600;\n  var min   = Math.floor(second/60);\n  second    = second%60;\n  var sec   = second;\n\n  year  = (year  > 0) ? year  + 'Y' : '';\n  month = (month > 0) ? month + 'M' : '';\n  day   = (day   > 0) ? day   + 'D' : '';\n  hour  = (hour  > 0) ? hour  + 'H' : '';\n  min   = (min   > 0) ? min   + 'M' : '';\n  sec   = (sec   > 0) ? sec   + 'S' : '';\n\n  return 'P' + year + month + day + 'T' + hour + min + sec;\n};\n\nexports.ISOWEEKNUM = function(date) {\n  date = utils.parseDate(date);\n\n  if (date instanceof Error) {\n    return date;\n  }\n\n  date.setHours(0, 0, 0);\n  date.setDate(date.getDate() + 4 - (date.getDay() || 7));\n  var yearStart = new Date(date.getFullYear(), 0, 1);\n\n  return Math.ceil((((date - yearStart) / 86400000) + 1) / 7);\n};\n\nexports.MINUTE = function(serial_number) {\n  serial_number = utils.parseDate(serial_number);\n\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n\n  return serial_number.getMinutes();\n};\n\nexports.MONTH = function(serial_number) {\n  serial_number = utils.parseDate(serial_number);\n\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n\n  return serial_number.getMonth() + 1;\n};\n\nexports.NETWORKDAYS = function(start_date, end_date, holidays) {\n  return this.NETWORKDAYS.INTL(start_date, end_date, 1, holidays);\n};\n\nexports.NETWORKDAYS.INTL = function(start_date, end_date, weekend, holidays) {\n  start_date = utils.parseDate(start_date);\n\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  end_date = utils.parseDate(end_date);\n\n  if (end_date instanceof Error) {\n    return end_date;\n  }\n  if (weekend === undefined) {\n    weekend = WEEKEND_TYPES[1];\n  } else {\n    weekend = WEEKEND_TYPES[weekend];\n  }\n  if (!(weekend instanceof Array)) {\n    return error.value;\n  }\n  if (holidays === undefined) {\n    holidays = [];\n  } else if (!(holidays instanceof Array)) {\n    holidays = [holidays];\n  }\n\n  for (var i = 0; i < holidays.length; i++) {\n    var h = utils.parseDate(holidays[i]);\n    if (h instanceof Error) {\n      return h;\n    }\n    holidays[i] = h;\n  }\n  var days = (end_date - start_date) / (1000 * 60 * 60 * 24) + 1;\n  var total = days;\n  var day = start_date;\n  for (i = 0; i < days; i++) {\n    var d = (new Date().getTimezoneOffset() > 0) ? day.getUTCDay() : day.getDay();\n    var dec = false;\n    if (d === weekend[0] || d === weekend[1]) {\n      dec = true;\n    }\n    for (var j = 0; j < holidays.length; j++) {\n      var holiday = holidays[j];\n      if (holiday.getDate() === day.getDate() &&\n        holiday.getMonth() === day.getMonth() &&\n        holiday.getFullYear() === day.getFullYear()) {\n        dec = true;\n        break;\n      }\n    }\n    if (dec) {\n      total--;\n    }\n    day.setDate(day.getDate() + 1);\n  }\n\n  return total;\n};\n\nexports.NOW = function() {\n  return new Date();\n};\n\nexports.SECOND = function(serial_number) {\n  serial_number = utils.parseDate(serial_number);\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n\n  return serial_number.getSeconds();\n};\n\nexports.TIME = function(hour, minute, second) {\n  hour = utils.parseNumber(hour);\n  minute = utils.parseNumber(minute);\n  second = utils.parseNumber(second);\n  if (utils.anyIsError(hour, minute, second)) {\n    return error.value;\n  }\n  if (hour < 0 || minute < 0 || second < 0) {\n    return error.num;\n  }\n\n  return (3600 * hour + 60 * minute + second) / 86400;\n};\n\nexports.TIMEVALUE = function(time_text) {\n  time_text = utils.parseDate(time_text);\n\n  if (time_text instanceof Error) {\n    return time_text;\n  }\n\n  return (3600 * time_text.getHours() + 60 * time_text.getMinutes() + time_text.getSeconds()) / 86400;\n};\n\nexports.TODAY = function() {\n  return new Date();\n};\n\nexports.WEEKDAY = function(serial_number, return_type) {\n  serial_number = utils.parseDate(serial_number);\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n  if (return_type === undefined) {\n    return_type = 1;\n  }\n  var day = serial_number.getDay();\n\n  return WEEK_TYPES[return_type][day];\n};\n\nexports.WEEKNUM = function(serial_number, return_type) {\n  serial_number = utils.parseDate(serial_number);\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n  if (return_type === undefined) {\n    return_type = 1;\n  }\n  if (return_type === 21) {\n    return this.ISOWEEKNUM(serial_number);\n  }\n  var week_start = WEEK_STARTS[return_type];\n  var jan = new Date(serial_number.getFullYear(), 0, 1);\n  var inc = jan.getDay() < week_start ? 1 : 0;\n  jan -= Math.abs(jan.getDay() - week_start) * 24 * 60 * 60 * 1000;\n\n  return Math.floor(((serial_number - jan) / (1000 * 60 * 60 * 24)) / 7 + 1) + inc;\n};\n\nexports.WORKDAY = function(start_date, days, holidays) {\n  return this.WORKDAY.INTL(start_date, days, 1, holidays);\n};\n\nexports.WORKDAY.INTL = function(start_date, days, weekend, holidays) {\n  start_date = utils.parseDate(start_date);\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  days = utils.parseNumber(days);\n  if (days instanceof Error) {\n    return days;\n  }\n  if (days < 0) {\n    return error.num;\n  }\n  if (weekend === undefined) {\n    weekend = WEEKEND_TYPES[1];\n  } else {\n    weekend = WEEKEND_TYPES[weekend];\n  }\n  if (!(weekend instanceof Array)) {\n    return error.value;\n  }\n  if (holidays === undefined) {\n    holidays = [];\n  } else if (!(holidays instanceof Array)) {\n    holidays = [holidays];\n  }\n  for (var i = 0; i < holidays.length; i++) {\n    var h = utils.parseDate(holidays[i]);\n    if (h instanceof Error) {\n      return h;\n    }\n    holidays[i] = h;\n  }\n  var d = 0;\n  while (d < days) {\n    start_date.setDate(start_date.getDate() + 1);\n    var day = start_date.getDay();\n    if (day === weekend[0] || day === weekend[1]) {\n      continue;\n    }\n    for (var j = 0; j < holidays.length; j++) {\n      var holiday = holidays[j];\n      if (holiday.getDate() === start_date.getDate() &&\n        holiday.getMonth() === start_date.getMonth() &&\n        holiday.getFullYear() === start_date.getFullYear()) {\n        d--;\n        break;\n      }\n    }\n    d++;\n  }\n\n  return start_date;\n};\n\nexports.YEAR = function(serial_number) {\n  serial_number = utils.parseDate(serial_number);\n\n  if (serial_number instanceof Error) {\n    return serial_number;\n  }\n\n  return serial_number.getFullYear();\n};\n\nfunction isLeapYear(year) {\n  return new Date(year, 1, 29).getMonth() === 1;\n}\n\n// TODO : Use DAYS ?\nfunction daysBetween(start_date, end_date) {\n  return Math.ceil((end_date - start_date) / 1000 / 60 / 60 / 24);\n}\n\nexports.YEARFRAC = function(start_date, end_date, basis) {\n  start_date = utils.parseDate(start_date);\n  if (start_date instanceof Error) {\n    return start_date;\n  }\n  end_date = utils.parseDate(end_date);\n  if (end_date instanceof Error) {\n    return end_date;\n  }\n\n  basis = basis || 0;\n  var sd = start_date.getDate();\n  var sm = start_date.getMonth() + 1;\n  var sy = start_date.getFullYear();\n  var ed = end_date.getDate();\n  var em = end_date.getMonth() + 1;\n  var ey = end_date.getFullYear();\n\n  switch (basis) {\n    case 0:\n      // US (NASD) 30/360\n      if (sd === 31 && ed === 31) {\n        sd = 30;\n        ed = 30;\n      } else if (sd === 31) {\n        sd = 30;\n      } else if (sd === 30 && ed === 31) {\n        ed = 30;\n      }\n      return ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;\n    case 1:\n      // Actual/actual\n      var feb29Between = function(date1, date2) {\n        var year1 = date1.getFullYear();\n        var mar1year1 = new Date(year1, 2, 1);\n        if (isLeapYear(year1) && date1 < mar1year1 && date2 >= mar1year1) {\n          return true;\n        }\n        var year2 = date2.getFullYear();\n        var mar1year2 = new Date(year2, 2, 1);\n        return (isLeapYear(year2) && date2 >= mar1year2 && date1 < mar1year2);\n      };\n      var ylength = 365;\n      if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {\n        if ((sy === ey && isLeapYear(sy)) ||\n          feb29Between(start_date, end_date) ||\n          (em === 1 && ed === 29)) {\n          ylength = 366;\n        }\n        return daysBetween(start_date, end_date) / ylength;\n      }\n      var years = (ey - sy) + 1;\n      var days = (new Date(ey + 1, 0, 1) - new Date(sy, 0, 1)) / 1000 / 60 / 60 / 24;\n      var average = days / years;\n      return daysBetween(start_date, end_date) / average;\n    case 2:\n      // Actual/360\n      return daysBetween(start_date, end_date) / 360;\n    case 3:\n      // Actual/365\n      return daysBetween(start_date, end_date) / 365;\n    case 4:\n      // European 30/360\n      return ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;\n  }\n};\n\nfunction serial(date) {\n  var addOn = (date > -2203891200000) ? 2 : 1;\n\n  return Math.ceil((date - d1900) / 86400000) + addOn;\n}\n","(function (window, factory) {\n    if (typeof exports === 'object') {\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else {\n        window.jStat = factory();\n    }\n})(this, function () {\nvar jStat = (function(Math, undefined) {\n\n// For quick reference.\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\nvar toString = Object.prototype.toString;\n\n// Calculate correction for IEEE error\n// TODO: This calculation can be improved.\nfunction calcRdx(n, m) {\n  var val = n > m ? n : m;\n  return Math.pow(10,\n                  17 - ~~(Math.log(((val > 0) ? val : -val)) * Math.LOG10E));\n}\n\n\nvar isArray = Array.isArray || function isArray(arg) {\n  return toString.call(arg) === '[object Array]';\n};\n\n\nfunction isFunction(arg) {\n  return toString.call(arg) === '[object Function]';\n}\n\n\nfunction isNumber(arg) {\n  return typeof arg === 'number' && arg === arg;\n}\n\n\n// Converts the jStat matrix to vector.\nfunction toVector(arr) {\n  return concat.apply([], arr);\n}\n\n\n// The one and only jStat constructor.\nfunction jStat() {\n  return new jStat._init(arguments);\n}\n\n\n// TODO: Remove after all references in src files have been removed.\njStat.fn = jStat.prototype;\n\n\n// By separating the initializer from the constructor it's easier to handle\n// always returning a new instance whether \"new\" was used or not.\njStat._init = function _init(args) {\n  var i;\n\n  // If first argument is an array, must be vector or matrix.\n  if (isArray(args[0])) {\n    // Check if matrix.\n    if (isArray(args[0][0])) {\n      // See if a mapping function was also passed.\n      if (isFunction(args[1]))\n        args[0] = jStat.map(args[0], args[1]);\n      // Iterate over each is faster than this.push.apply(this, args[0].\n      for (var i = 0; i < args[0].length; i++)\n        this[i] = args[0][i];\n      this.length = args[0].length;\n\n    // Otherwise must be a vector.\n    } else {\n      this[0] = isFunction(args[1]) ? jStat.map(args[0], args[1]) : args[0];\n      this.length = 1;\n    }\n\n  // If first argument is number, assume creation of sequence.\n  } else if (isNumber(args[0])) {\n    this[0] = jStat.seq.apply(null, args);\n    this.length = 1;\n\n  // Handle case when jStat object is passed to jStat.\n  } else if (args[0] instanceof jStat) {\n    // Duplicate the object and pass it back.\n    return jStat(args[0].toArray());\n\n  // Unexpected argument value, return empty jStat object.\n  // TODO: This is strange behavior. Shouldn't this throw or some such to let\n  // the user know they had bad arguments?\n  } else {\n    this[0] = [];\n    this.length = 1;\n  }\n\n  return this;\n};\njStat._init.prototype = jStat.prototype;\njStat._init.constructor = jStat;\n\n\n// Utility functions.\n// TODO: for internal use only?\njStat.utils = {\n  calcRdx: calcRdx,\n  isArray: isArray,\n  isFunction: isFunction,\n  isNumber: isNumber,\n  toVector: toVector\n};\n\n\n// Easily extend the jStat object.\n// TODO: is this seriously necessary?\njStat.extend = function extend(obj) {\n  var i, j;\n\n  if (arguments.length === 1) {\n    for (j in obj)\n      jStat[j] = obj[j];\n    return this;\n  }\n\n  for (var i = 1; i < arguments.length; i++) {\n    for (j in arguments[i])\n      obj[j] = arguments[i][j];\n  }\n\n  return obj;\n};\n\n\n// Returns the number of rows in the matrix.\njStat.rows = function rows(arr) {\n  return arr.length || 1;\n};\n\n\n// Returns the number of columns in the matrix.\njStat.cols = function cols(arr) {\n  return arr[0].length || 1;\n};\n\n\n// Returns the dimensions of the object { rows: i, cols: j }\njStat.dimensions = function dimensions(arr) {\n  return {\n    rows: jStat.rows(arr),\n    cols: jStat.cols(arr)\n  };\n};\n\n\n// Returns a specified row as a vector or return a sub matrix by pick some rows\njStat.row = function row(arr, index) {\n  if (isArray(index)) {\n    return index.map(function(i) {\n      return jStat.row(arr, i);\n    })\n  }\n  return arr[index];\n};\n\n\n// return row as array\n// rowa([[1,2],[3,4]],0) -> [1,2]\njStat.rowa = function rowa(arr, i) {\n  return jStat.row(arr, i);\n};\n\n\n// Returns the specified column as a vector or return a sub matrix by pick some\n// columns\njStat.col = function col(arr, index) {\n  if (isArray(index)) {\n    var submat = jStat.arange(arr.length).map(function(i) {\n      return new Array(index.length);\n    });\n    index.forEach(function(ind, i){\n      jStat.arange(arr.length).forEach(function(j) {\n        submat[j][i] = arr[j][ind];\n      });\n    });\n    return submat;\n  }\n  var column = new Array(arr.length);\n  for (var i = 0; i < arr.length; i++)\n    column[i] = [arr[i][index]];\n  return column;\n};\n\n\n// return column as array\n// cola([[1,2],[3,4]],0) -> [1,3]\njStat.cola = function cola(arr, i) {\n  return jStat.col(arr, i).map(function(a){ return a[0] });\n};\n\n\n// Returns the diagonal of the matrix\njStat.diag = function diag(arr) {\n  var nrow = jStat.rows(arr);\n  var res = new Array(nrow);\n  for (var row = 0; row < nrow; row++)\n    res[row] = [arr[row][row]];\n  return res;\n};\n\n\n// Returns the anti-diagonal of the matrix\njStat.antidiag = function antidiag(arr) {\n  var nrow = jStat.rows(arr) - 1;\n  var res = new Array(nrow);\n  for (var i = 0; nrow >= 0; nrow--, i++)\n    res[i] = [arr[i][nrow]];\n  return res;\n};\n\n// Transpose a matrix or array.\njStat.transpose = function transpose(arr) {\n  var obj = [];\n  var objArr, rows, cols, j, i;\n\n  // Make sure arr is in matrix format.\n  if (!isArray(arr[0]))\n    arr = [arr];\n\n  rows = arr.length;\n  cols = arr[0].length;\n\n  for (var i = 0; i < cols; i++) {\n    objArr = new Array(rows);\n    for (j = 0; j < rows; j++)\n      objArr[j] = arr[j][i];\n    obj.push(objArr);\n  }\n\n  // If obj is vector, return only single array.\n  return obj.length === 1 ? obj[0] : obj;\n};\n\n\n// Map a function to an array or array of arrays.\n// \"toAlter\" is an internal variable.\njStat.map = function map(arr, func, toAlter) {\n  var row, nrow, ncol, res, col;\n\n  if (!isArray(arr[0]))\n    arr = [arr];\n\n  nrow = arr.length;\n  ncol = arr[0].length;\n  res = toAlter ? arr : new Array(nrow);\n\n  for (row = 0; row < nrow; row++) {\n    // if the row doesn't exist, create it\n    if (!res[row])\n      res[row] = new Array(ncol);\n    for (col = 0; col < ncol; col++)\n      res[row][col] = func(arr[row][col], row, col);\n  }\n\n  return res.length === 1 ? res[0] : res;\n};\n\n\n// Cumulatively combine the elements of an array or array of arrays using a function.\njStat.cumreduce = function cumreduce(arr, func, toAlter) {\n  var row, nrow, ncol, res, col;\n\n  if (!isArray(arr[0]))\n    arr = [arr];\n\n  nrow = arr.length;\n  ncol = arr[0].length;\n  res = toAlter ? arr : new Array(nrow);\n\n  for (row = 0; row < nrow; row++) {\n    // if the row doesn't exist, create it\n    if (!res[row])\n      res[row] = new Array(ncol);\n    if (ncol > 0)\n      res[row][0] = arr[row][0];\n    for (col = 1; col < ncol; col++)\n      res[row][col] = func(res[row][col-1], arr[row][col]);\n  }\n  return res.length === 1 ? res[0] : res;\n};\n\n\n// Destructively alter an array.\njStat.alter = function alter(arr, func) {\n  return jStat.map(arr, func, true);\n};\n\n\n// Generate a rows x cols matrix according to the supplied function.\njStat.create = function  create(rows, cols, func) {\n  var res = new Array(rows);\n  var i, j;\n\n  if (isFunction(cols)) {\n    func = cols;\n    cols = rows;\n  }\n\n  for (var i = 0; i < rows; i++) {\n    res[i] = new Array(cols);\n    for (j = 0; j < cols; j++)\n      res[i][j] = func(i, j);\n  }\n\n  return res;\n};\n\n\nfunction retZero() { return 0; }\n\n\n// Generate a rows x cols matrix of zeros.\njStat.zeros = function zeros(rows, cols) {\n  if (!isNumber(cols))\n    cols = rows;\n  return jStat.create(rows, cols, retZero);\n};\n\n\nfunction retOne() { return 1; }\n\n\n// Generate a rows x cols matrix of ones.\njStat.ones = function ones(rows, cols) {\n  if (!isNumber(cols))\n    cols = rows;\n  return jStat.create(rows, cols, retOne);\n};\n\n\n// Generate a rows x cols matrix of uniformly random numbers.\njStat.rand = function rand(rows, cols) {\n  if (!isNumber(cols))\n    cols = rows;\n  return jStat.create(rows, cols, Math.random);\n};\n\n\nfunction retIdent(i, j) { return i === j ? 1 : 0; }\n\n\n// Generate an identity matrix of size row x cols.\njStat.identity = function identity(rows, cols) {\n  if (!isNumber(cols))\n    cols = rows;\n  return jStat.create(rows, cols, retIdent);\n};\n\n\n// Tests whether a matrix is symmetric\njStat.symmetric = function symmetric(arr) {\n  var issymmetric = true;\n  var size = arr.length;\n  var row, col;\n\n  if (arr.length !== arr[0].length)\n    return false;\n\n  for (row = 0; row < size; row++) {\n    for (col = 0; col < size; col++)\n      if (arr[col][row] !== arr[row][col])\n        return false;\n  }\n\n  return true;\n};\n\n\n// Set all values to zero.\njStat.clear = function clear(arr) {\n  return jStat.alter(arr, retZero);\n};\n\n\n// Generate sequence.\njStat.seq = function seq(min, max, length, func) {\n  if (!isFunction(func))\n    func = false;\n\n  var arr = [];\n  var hival = calcRdx(min, max);\n  var step = (max * hival - min * hival) / ((length - 1) * hival);\n  var current = min;\n  var cnt;\n\n  // Current is assigned using a technique to compensate for IEEE error.\n  // TODO: Needs better implementation.\n  for (cnt = 0;\n       current <= max && cnt < length;\n       cnt++, current = (min * hival + step * hival * cnt) / hival) {\n    arr.push((func ? func(current, cnt) : current));\n  }\n\n  return arr;\n};\n\n\n// arange(5) -> [0,1,2,3,4]\n// arange(1,5) -> [1,2,3,4]\n// arange(5,1,-1) -> [5,4,3,2]\njStat.arange = function arange(start, end, step) {\n  var rl = [];\n  step = step || 1;\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  }\n  if (start === end || step === 0) {\n    return [];\n  }\n  if (start < end && step < 0) {\n    return [];\n  }\n  if (start > end && step > 0) {\n    return [];\n  }\n  if (step > 0) {\n    for (i = start; i < end; i += step) {\n      rl.push(i);\n    }\n  } else {\n    for (i = start; i > end; i += step) {\n      rl.push(i);\n    }\n  }\n  return rl;\n};\n\n\n// A=[[1,2,3],[4,5,6],[7,8,9]]\n// slice(A,{row:{end:2},col:{start:1}}) -> [[2,3],[5,6]]\n// slice(A,1,{start:1}) -> [5,6]\n// as numpy code A[:2,1:]\njStat.slice = (function(){\n  function _slice(list, start, end, step) {\n    // note it's not equal to range.map mode it's a bug\n    var i;\n    var rl = [];\n    var length = list.length;\n    if (start === undefined && end === undefined && step === undefined) {\n      return jStat.copy(list);\n    }\n\n    start = start || 0;\n    end = end || list.length;\n    start = start >= 0 ? start : length + start;\n    end = end >= 0 ? end : length + end;\n    step = step || 1;\n    if (start === end || step === 0) {\n      return [];\n    }\n    if (start < end && step < 0) {\n      return [];\n    }\n    if (start > end && step > 0) {\n      return [];\n    }\n    if (step > 0) {\n      for (i = start; i < end; i += step) {\n        rl.push(list[i]);\n      }\n    } else {\n      for (i = start; i > end;i += step) {\n        rl.push(list[i]);\n      }\n    }\n    return rl;\n  }\n\n  function slice(list, rcSlice) {\n    rcSlice = rcSlice || {};\n    if (isNumber(rcSlice.row)) {\n      if (isNumber(rcSlice.col))\n        return list[rcSlice.row][rcSlice.col];\n      var row = jStat.rowa(list, rcSlice.row);\n      var colSlice = rcSlice.col || {};\n      return _slice(row, colSlice.start, colSlice.end, colSlice.step);\n    }\n\n    if (isNumber(rcSlice.col)) {\n      var col = jStat.cola(list, rcSlice.col);\n      var rowSlice = rcSlice.row || {};\n      return _slice(col, rowSlice.start, rowSlice.end, rowSlice.step);\n    }\n\n    var rowSlice = rcSlice.row || {};\n    var colSlice = rcSlice.col || {};\n    var rows = _slice(list, rowSlice.start, rowSlice.end, rowSlice.step);\n    return rows.map(function(row) {\n      return _slice(row, colSlice.start, colSlice.end, colSlice.step);\n    });\n  }\n\n  return slice;\n}());\n\n\n// A=[[1,2,3],[4,5,6],[7,8,9]]\n// sliceAssign(A,{row:{start:1},col:{start:1}},[[0,0],[0,0]])\n// A=[[1,2,3],[4,0,0],[7,0,0]]\njStat.sliceAssign = function sliceAssign(A, rcSlice, B) {\n  if (isNumber(rcSlice.row)) {\n    if (isNumber(rcSlice.col))\n      return A[rcSlice.row][rcSlice.col] = B;\n    rcSlice.col = rcSlice.col || {};\n    rcSlice.col.start = rcSlice.col.start || 0;\n    rcSlice.col.end = rcSlice.col.end || A[0].length;\n    rcSlice.col.step = rcSlice.col.step || 1;\n    var nl = jStat.arange(rcSlice.col.start,\n                          Math.min(A.length, rcSlice.col.end),\n                          rcSlice.col.step);\n    var m = rcSlice.row;\n    nl.forEach(function(n, i) {\n      A[m][n] = B[i];\n    });\n    return A;\n  }\n\n  if (isNumber(rcSlice.col)) {\n    rcSlice.row = rcSlice.row || {};\n    rcSlice.row.start = rcSlice.row.start || 0;\n    rcSlice.row.end = rcSlice.row.end || A.length;\n    rcSlice.row.step = rcSlice.row.step || 1;\n    var ml = jStat.arange(rcSlice.row.start,\n                          Math.min(A[0].length, rcSlice.row.end),\n                          rcSlice.row.step);\n    var n = rcSlice.col;\n    ml.forEach(function(m, j) {\n      A[m][n] = B[j];\n    });\n    return A;\n  }\n\n  if (B[0].length === undefined) {\n    B = [B];\n  }\n  rcSlice.row.start = rcSlice.row.start || 0;\n  rcSlice.row.end = rcSlice.row.end || A.length;\n  rcSlice.row.step = rcSlice.row.step || 1;\n  rcSlice.col.start = rcSlice.col.start || 0;\n  rcSlice.col.end = rcSlice.col.end || A[0].length;\n  rcSlice.col.step = rcSlice.col.step || 1;\n  var ml = jStat.arange(rcSlice.row.start,\n                        Math.min(A.length, rcSlice.row.end),\n                        rcSlice.row.step);\n  var nl = jStat.arange(rcSlice.col.start,\n                        Math.min(A[0].length, rcSlice.col.end),\n                        rcSlice.col.step);\n  ml.forEach(function(m, i) {\n    nl.forEach(function(n, j) {\n      A[m][n] = B[i][j];\n    });\n  });\n  return A;\n};\n\n\n// [1,2,3] ->\n// [[1,0,0],[0,2,0],[0,0,3]]\njStat.diagonal = function diagonal(diagArray) {\n  var mat = jStat.zeros(diagArray.length, diagArray.length);\n  diagArray.forEach(function(t, i) {\n    mat[i][i] = t;\n  });\n  return mat;\n};\n\n\n// return copy of A\njStat.copy = function copy(A) {\n  return A.map(function(row) {\n    if (isNumber(row))\n      return row;\n    return row.map(function(t) {\n      return t;\n    });\n  });\n};\n\n\n// TODO: Go over this entire implementation. Seems a tragic waste of resources\n// doing all this work. Instead, and while ugly, use new Function() to generate\n// a custom function for each static method.\n\n// Quick reference.\nvar jProto = jStat.prototype;\n\n// Default length.\njProto.length = 0;\n\n// For internal use only.\n// TODO: Check if they're actually used, and if they are then rename them\n// to _*\njProto.push = Array.prototype.push;\njProto.sort = Array.prototype.sort;\njProto.splice = Array.prototype.splice;\njProto.slice = Array.prototype.slice;\n\n\n// Return a clean array.\njProto.toArray = function toArray() {\n  return this.length > 1 ? slice.call(this) : slice.call(this)[0];\n};\n\n\n// Map a function to a matrix or vector.\njProto.map = function map(func, toAlter) {\n  return jStat(jStat.map(this, func, toAlter));\n};\n\n\n// Cumulatively combine the elements of a matrix or vector using a function.\njProto.cumreduce = function cumreduce(func, toAlter) {\n  return jStat(jStat.cumreduce(this, func, toAlter));\n};\n\n\n// Destructively alter an array.\njProto.alter = function alter(func) {\n  jStat.alter(this, func);\n  return this;\n};\n\n\n// Extend prototype with methods that have no argument.\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jProto[passfunc] = function(func) {\n      var self = this,\n      results;\n      // Check for callback.\n      if (func) {\n        setTimeout(function() {\n          func.call(self, jProto[passfunc].call(self));\n        });\n        return this;\n      }\n      results = jStat[passfunc](this);\n      return isArray(results) ? jStat(results) : results;\n    };\n  })(funcs[i]);\n})('transpose clear symmetric rows cols dimensions diag antidiag'.split(' '));\n\n\n// Extend prototype with methods that have one argument.\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jProto[passfunc] = function(index, func) {\n      var self = this;\n      // check for callback\n      if (func) {\n        setTimeout(function() {\n          func.call(self, jProto[passfunc].call(self, index));\n        });\n        return this;\n      }\n      return jStat(jStat[passfunc](this, index));\n    };\n  })(funcs[i]);\n})('row col'.split(' '));\n\n\n// Extend prototype with simple shortcut methods.\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jProto[passfunc] = new Function(\n        'return jStat(jStat.' + passfunc + '.apply(null, arguments));');\n  })(funcs[i]);\n})('create zeros ones rand identity'.split(' '));\n\n\n// Exposing jStat.\nreturn jStat;\n\n}(Math));\n(function(jStat, Math) {\n\nvar isFunction = jStat.utils.isFunction;\n\n// Ascending functions for sort\nfunction ascNum(a, b) { return a - b; }\n\nfunction clip(arg, min, max) {\n  return Math.max(min, Math.min(arg, max));\n}\n\n\n// sum of an array\njStat.sum = function sum(arr) {\n  var sum = 0;\n  var i = arr.length;\n  while (--i >= 0)\n    sum += arr[i];\n  return sum;\n};\n\n\n// sum squared\njStat.sumsqrd = function sumsqrd(arr) {\n  var sum = 0;\n  var i = arr.length;\n  while (--i >= 0)\n    sum += arr[i] * arr[i];\n  return sum;\n};\n\n\n// sum of squared errors of prediction (SSE)\njStat.sumsqerr = function sumsqerr(arr) {\n  var mean = jStat.mean(arr);\n  var sum = 0;\n  var i = arr.length;\n  var tmp;\n  while (--i >= 0) {\n    tmp = arr[i] - mean;\n    sum += tmp * tmp;\n  }\n  return sum;\n};\n\n// sum of an array in each row\njStat.sumrow = function sumrow(arr) {\n  var sum = 0;\n  var i = arr.length;\n  while (--i >= 0)\n    sum += arr[i];\n  return sum;\n};\n\n// product of an array\njStat.product = function product(arr) {\n  var prod = 1;\n  var i = arr.length;\n  while (--i >= 0)\n    prod *= arr[i];\n  return prod;\n};\n\n\n// minimum value of an array\njStat.min = function min(arr) {\n  var low = arr[0];\n  var i = 0;\n  while (++i < arr.length)\n    if (arr[i] < low)\n      low = arr[i];\n  return low;\n};\n\n\n// maximum value of an array\njStat.max = function max(arr) {\n  var high = arr[0];\n  var i = 0;\n  while (++i < arr.length)\n    if (arr[i] > high)\n      high = arr[i];\n  return high;\n};\n\n\n// unique values of an array\njStat.unique = function unique(arr) {\n  var hash = {}, _arr = [];\n  for(var i = 0; i < arr.length; i++) {\n    if (!hash[arr[i]]) {\n      hash[arr[i]] = true;\n      _arr.push(arr[i]);\n    }\n  }\n  return _arr;\n};\n\n\n// mean value of an array\njStat.mean = function mean(arr) {\n  return jStat.sum(arr) / arr.length;\n};\n\n\n// mean squared error (MSE)\njStat.meansqerr = function meansqerr(arr) {\n  return jStat.sumsqerr(arr) / arr.length;\n};\n\n\n// geometric mean of an array\njStat.geomean = function geomean(arr) {\n  return Math.pow(jStat.product(arr), 1 / arr.length);\n};\n\n\n// median of an array\njStat.median = function median(arr) {\n  var arrlen = arr.length;\n  var _arr = arr.slice().sort(ascNum);\n  // check if array is even or odd, then return the appropriate\n  return !(arrlen & 1)\n    ? (_arr[(arrlen / 2) - 1 ] + _arr[(arrlen / 2)]) / 2\n    : _arr[(arrlen / 2) | 0 ];\n};\n\n\n// cumulative sum of an array\njStat.cumsum = function cumsum(arr) {\n  return jStat.cumreduce(arr, function (a, b) { return a + b; });\n};\n\n\n// cumulative product of an array\njStat.cumprod = function cumprod(arr) {\n  return jStat.cumreduce(arr, function (a, b) { return a * b; });\n};\n\n\n// successive differences of a sequence\njStat.diff = function diff(arr) {\n  var diffs = [];\n  var arrLen = arr.length;\n  var i;\n  for (var i = 1; i < arrLen; i++)\n    diffs.push(arr[i] - arr[i - 1]);\n  return diffs;\n};\n\n\n// ranks of an array\njStat.rank = function (arr) {\n  var arrlen = arr.length;\n  var sorted = arr.slice().sort(ascNum);\n  var ranks = new Array(arrlen);\n  for (var i = 0; i < arrlen; i++) {\n    var first = sorted.indexOf(arr[i]);\n    var last = sorted.lastIndexOf(arr[i]);\n    if (first === last) {\n      var val = first;\n    } else {\n      var val = (first + last) / 2;\n    }\n    ranks[i] = val + 1;\n  }\n  return ranks;\n};\n\n\n// mode of an array\n// if there are multiple modes of an array, return all of them\n// is this the appropriate way of handling it?\njStat.mode = function mode(arr) {\n  var arrLen = arr.length;\n  var _arr = arr.slice().sort(ascNum);\n  var count = 1;\n  var maxCount = 0;\n  var numMaxCount = 0;\n  var mode_arr = [];\n  var i;\n\n  for (var i = 0; i < arrLen; i++) {\n    if (_arr[i] === _arr[i + 1]) {\n      count++;\n    } else {\n      if (count > maxCount) {\n        mode_arr = [_arr[i]];\n        maxCount = count;\n        numMaxCount = 0;\n      }\n      // are there multiple max counts\n      else if (count === maxCount) {\n        mode_arr.push(_arr[i]);\n        numMaxCount++;\n      }\n      // resetting count for new value in array\n      count = 1;\n    }\n  }\n\n  return numMaxCount === 0 ? mode_arr[0] : mode_arr;\n};\n\n\n// range of an array\njStat.range = function range(arr) {\n  return jStat.max(arr) - jStat.min(arr);\n};\n\n// variance of an array\n// flag = true indicates sample instead of population\njStat.variance = function variance(arr, flag) {\n  return jStat.sumsqerr(arr) / (arr.length - (flag ? 1 : 0));\n};\n\n// pooled variance of an array of arrays\njStat.pooledvariance = function pooledvariance(arr) {\n  var sumsqerr = arr.reduce(function (a, samples) {return a + jStat.sumsqerr(samples);}, 0);\n  var count = arr.reduce(function (a, samples) {return a + samples.length;}, 0);\n  return sumsqerr / (count - arr.length);\n};\n\n// deviation of an array\njStat.deviation = function (arr) {\n  var mean = jStat.mean(arr);\n  var arrlen = arr.length;\n  var dev = new Array(arrlen);\n  for (var i = 0; i < arrlen; i++) {\n    dev[i] = arr[i] - mean;\n  }\n  return dev;\n};\n\n// standard deviation of an array\n// flag = true indicates sample instead of population\njStat.stdev = function stdev(arr, flag) {\n  return Math.sqrt(jStat.variance(arr, flag));\n};\n\n// pooled standard deviation of an array of arrays\njStat.pooledstdev = function pooledstdev(arr) {\n  return Math.sqrt(jStat.pooledvariance(arr));\n};\n\n// mean deviation (mean absolute deviation) of an array\njStat.meandev = function meandev(arr) {\n  var mean = jStat.mean(arr);\n  var a = [];\n  for (var i = arr.length - 1; i >= 0; i--) {\n    a.push(Math.abs(arr[i] - mean));\n  }\n  return jStat.mean(a);\n};\n\n\n// median deviation (median absolute deviation) of an array\njStat.meddev = function meddev(arr) {\n  var median = jStat.median(arr);\n  var a = [];\n  for (var i = arr.length - 1; i >= 0; i--) {\n    a.push(Math.abs(arr[i] - median));\n  }\n  return jStat.median(a);\n};\n\n\n// coefficient of variation\njStat.coeffvar = function coeffvar(arr) {\n  return jStat.stdev(arr) / jStat.mean(arr);\n};\n\n\n// quartiles of an array\njStat.quartiles = function quartiles(arr) {\n  var arrlen = arr.length;\n  var _arr = arr.slice().sort(ascNum);\n  return [\n    _arr[ Math.round((arrlen) / 4) - 1 ],\n    _arr[ Math.round((arrlen) / 2) - 1 ],\n    _arr[ Math.round((arrlen) * 3 / 4) - 1 ]\n  ];\n};\n\n\n// Arbitary quantiles of an array. Direct port of the scipy.stats\n// implementation by Pierre GF Gerard-Marchant.\njStat.quantiles = function quantiles(arr, quantilesArray, alphap, betap) {\n  var sortedArray = arr.slice().sort(ascNum);\n  var quantileVals = [quantilesArray.length];\n  var n = arr.length;\n  var i, p, m, aleph, k, gamma;\n\n  if (typeof alphap === 'undefined')\n    alphap = 3 / 8;\n  if (typeof betap === 'undefined')\n    betap = 3 / 8;\n\n  for (var i = 0; i < quantilesArray.length; i++) {\n    p = quantilesArray[i];\n    m = alphap + p * (1 - alphap - betap);\n    aleph = n * p + m;\n    k = Math.floor(clip(aleph, 1, n - 1));\n    gamma = clip(aleph - k, 0, 1);\n    quantileVals[i] = (1 - gamma) * sortedArray[k - 1] + gamma * sortedArray[k];\n  }\n\n  return quantileVals;\n};\n\n// Returns the k-th percentile of values in a range, where k is in the\n// range 0..1, exclusive.\njStat.percentile = function percentile(arr, k) {\n  var _arr = arr.slice().sort(ascNum);\n  var realIndex = k * (_arr.length - 1);\n  var index = parseInt(realIndex);\n  var frac = realIndex - index;\n\n  if (index + 1 < _arr.length) {\n    return _arr[index] * (1 - frac) + _arr[index + 1] * frac;\n  } else {\n    return _arr[index];\n  }\n}\n\n\n// The percentile rank of score in a given array. Returns the percentage\n// of all values in the input array that are less than (kind='strict') or\n// less or equal than (kind='weak') score. Default is weak.\njStat.percentileOfScore = function percentileOfScore(arr, score, kind) {\n  var counter = 0;\n  var len = arr.length;\n  var strict = false;\n  var value, i;\n\n  if (kind === 'strict')\n    strict = true;\n\n  for (var i = 0; i < len; i++) {\n    value = arr[i];\n    if ((strict && value < score) ||\n        (!strict && value <= score)) {\n      counter++;\n    }\n  }\n\n  return counter / len;\n};\n\n\n// Histogram (bin count) data\njStat.histogram = function histogram(arr, bins) {\n  var first = jStat.min(arr);\n  var binCnt = bins || 4;\n  var binWidth = (jStat.max(arr) - first) / binCnt;\n  var len = arr.length;\n  var bins = [];\n  var i;\n\n  for (var i = 0; i < binCnt; i++)\n    bins[i] = 0;\n  for (var i = 0; i < len; i++)\n    bins[Math.min(Math.floor(((arr[i] - first) / binWidth)), binCnt - 1)] += 1;\n\n  return bins;\n};\n\n\n// covariance of two arrays\njStat.covariance = function covariance(arr1, arr2) {\n  var u = jStat.mean(arr1);\n  var v = jStat.mean(arr2);\n  var arr1Len = arr1.length;\n  var sq_dev = new Array(arr1Len);\n  var i;\n\n  for (var i = 0; i < arr1Len; i++)\n    sq_dev[i] = (arr1[i] - u) * (arr2[i] - v);\n\n  return jStat.sum(sq_dev) / (arr1Len - 1);\n};\n\n\n// (pearson's) population correlation coefficient, rho\njStat.corrcoeff = function corrcoeff(arr1, arr2) {\n  return jStat.covariance(arr1, arr2) /\n      jStat.stdev(arr1, 1) /\n      jStat.stdev(arr2, 1);\n};\n\n  // (spearman's) rank correlation coefficient, sp\njStat.spearmancoeff =  function (arr1, arr2) {\n  arr1 = jStat.rank(arr1);\n  arr2 = jStat.rank(arr2);\n  //return pearson's correlation of the ranks:\n  return jStat.corrcoeff(arr1, arr2);\n}\n\n\n// statistical standardized moments (general form of skew/kurt)\njStat.stanMoment = function stanMoment(arr, n) {\n  var mu = jStat.mean(arr);\n  var sigma = jStat.stdev(arr);\n  var len = arr.length;\n  var skewSum = 0;\n\n  for (var i = 0; i < len; i++)\n    skewSum += Math.pow((arr[i] - mu) / sigma, n);\n\n  return skewSum / arr.length;\n};\n\n// (pearson's) moment coefficient of skewness\njStat.skewness = function skewness(arr) {\n  return jStat.stanMoment(arr, 3);\n};\n\n// (pearson's) (excess) kurtosis\njStat.kurtosis = function kurtosis(arr) {\n  return jStat.stanMoment(arr, 4) - 3;\n};\n\n\nvar jProto = jStat.prototype;\n\n\n// Extend jProto with method for calculating cumulative sums and products.\n// This differs from the similar extension below as cumsum and cumprod should\n// not be run again in the case fullbool === true.\n// If a matrix is passed, automatically assume operation should be done on the\n// columns.\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    // If a matrix is passed, automatically assume operation should be done on\n    // the columns.\n    jProto[passfunc] = function(fullbool, func) {\n      var arr = [];\n      var i = 0;\n      var tmpthis = this;\n      // Assignment reassignation depending on how parameters were passed in.\n      if (isFunction(fullbool)) {\n        func = fullbool;\n        fullbool = false;\n      }\n      // Check if a callback was passed with the function.\n      if (func) {\n        setTimeout(function() {\n          func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));\n        });\n        return this;\n      }\n      // Check if matrix and run calculations.\n      if (this.length > 1) {\n        tmpthis = fullbool === true ? this : this.transpose();\n        for (; i < tmpthis.length; i++)\n          arr[i] = jStat[passfunc](tmpthis[i]);\n        return arr;\n      }\n      // Pass fullbool if only vector, not a matrix. for variance and stdev.\n      return jStat[passfunc](this[0], fullbool);\n    };\n  })(funcs[i]);\n})(('cumsum cumprod').split(' '));\n\n\n// Extend jProto with methods which don't require arguments and work on columns.\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    // If a matrix is passed, automatically assume operation should be done on\n    // the columns.\n    jProto[passfunc] = function(fullbool, func) {\n      var arr = [];\n      var i = 0;\n      var tmpthis = this;\n      // Assignment reassignation depending on how parameters were passed in.\n      if (isFunction(fullbool)) {\n        func = fullbool;\n        fullbool = false;\n      }\n      // Check if a callback was passed with the function.\n      if (func) {\n        setTimeout(function() {\n          func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));\n        });\n        return this;\n      }\n      // Check if matrix and run calculations.\n      if (this.length > 1) {\n        if (passfunc !== 'sumrow')\n          tmpthis = fullbool === true ? this : this.transpose();\n        for (; i < tmpthis.length; i++)\n          arr[i] = jStat[passfunc](tmpthis[i]);\n        return fullbool === true\n            ? jStat[passfunc](jStat.utils.toVector(arr))\n            : arr;\n      }\n      // Pass fullbool if only vector, not a matrix. for variance and stdev.\n      return jStat[passfunc](this[0], fullbool);\n    };\n  })(funcs[i]);\n})(('sum sumsqrd sumsqerr sumrow product min max unique mean meansqerr ' +\n    'geomean median diff rank mode range variance deviation stdev meandev ' +\n    'meddev coeffvar quartiles histogram skewness kurtosis').split(' '));\n\n\n// Extend jProto with functions that take arguments. Operations on matrices are\n// done on columns.\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jProto[passfunc] = function() {\n      var arr = [];\n      var i = 0;\n      var tmpthis = this;\n      var args = Array.prototype.slice.call(arguments);\n\n      // If the last argument is a function, we assume it's a callback; we\n      // strip the callback out and call the function again.\n      if (isFunction(args[args.length - 1])) {\n        var callbackFunction = args[args.length - 1];\n        var argsToPass = args.slice(0, args.length - 1);\n\n        setTimeout(function() {\n          callbackFunction.call(tmpthis,\n                                jProto[passfunc].apply(tmpthis, argsToPass));\n        });\n        return this;\n\n      // Otherwise we curry the function args and call normally.\n      } else {\n        var callbackFunction = undefined;\n        var curriedFunction = function curriedFunction(vector) {\n          return jStat[passfunc].apply(tmpthis, [vector].concat(args));\n        }\n      }\n\n      // If this is a matrix, run column-by-column.\n      if (this.length > 1) {\n        tmpthis = tmpthis.transpose();\n        for (; i < tmpthis.length; i++)\n          arr[i] = curriedFunction(tmpthis[i]);\n        return arr;\n      }\n\n      // Otherwise run on the vector.\n      return curriedFunction(this[0]);\n    };\n  })(funcs[i]);\n})('quantiles percentileOfScore'.split(' '));\n\n}(jStat, Math));\n// Special functions //\n(function(jStat, Math) {\n\n// Log-gamma function\njStat.gammaln = function gammaln(x) {\n  var j = 0;\n  var cof = [\n    76.18009172947146, -86.50532032941677, 24.01409824083091,\n    -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5\n  ];\n  var ser = 1.000000000190015;\n  var xx, y, tmp;\n  tmp = (y = xx = x) + 5.5;\n  tmp -= (xx + 0.5) * Math.log(tmp);\n  for (; j < 6; j++)\n    ser += cof[j] / ++y;\n  return Math.log(2.5066282746310005 * ser / xx) - tmp;\n};\n\n\n// gamma of x\njStat.gammafn = function gammafn(x) {\n  var p = [-1.716185138865495, 24.76565080557592, -379.80425647094563,\n           629.3311553128184, 866.9662027904133, -31451.272968848367,\n           -36144.413418691176, 66456.14382024054\n  ];\n  var q = [-30.8402300119739, 315.35062697960416, -1015.1563674902192,\n           -3107.771671572311, 22538.118420980151, 4755.8462775278811,\n           -134659.9598649693, -115132.2596755535];\n  var fact = false;\n  var n = 0;\n  var xden = 0;\n  var xnum = 0;\n  var y = x;\n  var i, z, yi, res, sum, ysq;\n  if (y <= 0) {\n    res = y % 1 + 3.6e-16;\n    if (res) {\n      fact = (!(y & 1) ? 1 : -1) * Math.PI / Math.sin(Math.PI * res);\n      y = 1 - y;\n    } else {\n      return Infinity;\n    }\n  }\n  yi = y;\n  if (y < 1) {\n    z = y++;\n  } else {\n    z = (y -= n = (y | 0) - 1) - 1;\n  }\n  for (var i = 0; i < 8; ++i) {\n    xnum = (xnum + p[i]) * z;\n    xden = xden * z + q[i];\n  }\n  res = xnum / xden + 1;\n  if (yi < y) {\n    res /= yi;\n  } else if (yi > y) {\n    for (var i = 0; i < n; ++i) {\n      res *= y;\n      y++;\n    }\n  }\n  if (fact) {\n    res = fact / res;\n  }\n  return res;\n};\n\n\n// lower incomplete gamma function, which is usually typeset with a\n// lower-case greek gamma as the function symbol\njStat.gammap = function gammap(a, x) {\n  return jStat.lowRegGamma(a, x) * jStat.gammafn(a);\n};\n\n\n// The lower regularized incomplete gamma function, usually written P(a,x)\njStat.lowRegGamma = function lowRegGamma(a, x) {\n  var aln = jStat.gammaln(a);\n  var ap = a;\n  var sum = 1 / a;\n  var del = sum;\n  var b = x + 1 - a;\n  var c = 1 / 1.0e-30;\n  var d = 1 / b;\n  var h = d;\n  var i = 1;\n  // calculate maximum number of itterations required for a\n  var ITMAX = -~(Math.log((a >= 1) ? a : 1 / a) * 8.5 + a * 0.4 + 17);\n  var an, endval;\n\n  if (x < 0 || a <= 0) {\n    return NaN;\n  } else if (x < a + 1) {\n    for (; i <= ITMAX; i++) {\n      sum += del *= x / ++ap;\n    }\n    return (sum * Math.exp(-x + a * Math.log(x) - (aln)));\n  }\n\n  for (; i <= ITMAX; i++) {\n    an = -i * (i - a);\n    b += 2;\n    d = an * d + b;\n    c = b + an / c;\n    d = 1 / d;\n    h *= d * c;\n  }\n\n  return (1 - h * Math.exp(-x + a * Math.log(x) - (aln)));\n};\n\n// natural log factorial of n\njStat.factorialln = function factorialln(n) {\n  return n < 0 ? NaN : jStat.gammaln(n + 1);\n};\n\n// factorial of n\njStat.factorial = function factorial(n) {\n  return n < 0 ? NaN : jStat.gammafn(n + 1);\n};\n\n// combinations of n, m\njStat.combination = function combination(n, m) {\n  // make sure n or m don't exceed the upper limit of usable values\n  return (n > 170 || m > 170)\n      ? Math.exp(jStat.combinationln(n, m))\n      : (jStat.factorial(n) / jStat.factorial(m)) / jStat.factorial(n - m);\n};\n\n\njStat.combinationln = function combinationln(n, m){\n  return jStat.factorialln(n) - jStat.factorialln(m) - jStat.factorialln(n - m);\n};\n\n\n// permutations of n, m\njStat.permutation = function permutation(n, m) {\n  return jStat.factorial(n) / jStat.factorial(n - m);\n};\n\n\n// beta function\njStat.betafn = function betafn(x, y) {\n  // ensure arguments are positive\n  if (x <= 0 || y <= 0)\n    return undefined;\n  // make sure x + y doesn't exceed the upper limit of usable values\n  return (x + y > 170)\n      ? Math.exp(jStat.betaln(x, y))\n      : jStat.gammafn(x) * jStat.gammafn(y) / jStat.gammafn(x + y);\n};\n\n\n// natural logarithm of beta function\njStat.betaln = function betaln(x, y) {\n  return jStat.gammaln(x) + jStat.gammaln(y) - jStat.gammaln(x + y);\n};\n\n\n// Evaluates the continued fraction for incomplete beta function by modified\n// Lentz's method.\njStat.betacf = function betacf(x, a, b) {\n  var fpmin = 1e-30;\n  var m = 1;\n  var qab = a + b;\n  var qap = a + 1;\n  var qam = a - 1;\n  var c = 1;\n  var d = 1 - qab * x / qap;\n  var m2, aa, del, h;\n\n  // These q's will be used in factors that occur in the coefficients\n  if (Math.abs(d) < fpmin)\n    d = fpmin;\n  d = 1 / d;\n  h = d;\n\n  for (; m <= 100; m++) {\n    m2 = 2 * m;\n    aa = m * (b - m) * x / ((qam + m2) * (a + m2));\n    // One step (the even one) of the recurrence\n    d = 1 + aa * d;\n    if (Math.abs(d) < fpmin)\n      d = fpmin;\n    c = 1 + aa / c;\n    if (Math.abs(c) < fpmin)\n      c = fpmin;\n    d = 1 / d;\n    h *= d * c;\n    aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2));\n    // Next step of the recurrence (the odd one)\n    d = 1 + aa * d;\n    if (Math.abs(d) < fpmin)\n      d = fpmin;\n    c = 1 + aa / c;\n    if (Math.abs(c) < fpmin)\n      c = fpmin;\n    d = 1 / d;\n    del = d * c;\n    h *= del;\n    if (Math.abs(del - 1.0) < 3e-7)\n      break;\n  }\n\n  return h;\n};\n\n\n// Returns the inverse of the lower regularized inomplete gamma function\njStat.gammapinv = function gammapinv(p, a) {\n  var j = 0;\n  var a1 = a - 1;\n  var EPS = 1e-8;\n  var gln = jStat.gammaln(a);\n  var x, err, t, u, pp, lna1, afac;\n\n  if (p >= 1)\n    return Math.max(100, a + 100 * Math.sqrt(a));\n  if (p <= 0)\n    return 0;\n  if (a > 1) {\n    lna1 = Math.log(a1);\n    afac = Math.exp(a1 * (lna1 - 1) - gln);\n    pp = (p < 0.5) ? p : 1 - p;\n    t = Math.sqrt(-2 * Math.log(pp));\n    x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;\n    if (p < 0.5)\n      x = -x;\n    x = Math.max(1e-3,\n                 a * Math.pow(1 - 1 / (9 * a) - x / (3 * Math.sqrt(a)), 3));\n  } else {\n    t = 1 - a * (0.253 + a * 0.12);\n    if (p < t)\n      x = Math.pow(p / t, 1 / a);\n    else\n      x = 1 - Math.log(1 - (p - t) / (1 - t));\n  }\n\n  for(; j < 12; j++) {\n    if (x <= 0)\n      return 0;\n    err = jStat.lowRegGamma(a, x) - p;\n    if (a > 1)\n      t = afac * Math.exp(-(x - a1) + a1 * (Math.log(x) - lna1));\n    else\n      t = Math.exp(-x + a1 * Math.log(x) - gln);\n    u = err / t;\n    x -= (t = u / (1 - 0.5 * Math.min(1, u * ((a - 1) / x - 1))));\n    if (x <= 0)\n      x = 0.5 * (x + t);\n    if (Math.abs(t) < EPS * x)\n      break;\n  }\n\n  return x;\n};\n\n\n// Returns the error function erf(x)\njStat.erf = function erf(x) {\n  var cof = [-1.3026537197817094, 6.4196979235649026e-1, 1.9476473204185836e-2,\n             -9.561514786808631e-3, -9.46595344482036e-4, 3.66839497852761e-4,\n             4.2523324806907e-5, -2.0278578112534e-5, -1.624290004647e-6,\n             1.303655835580e-6, 1.5626441722e-8, -8.5238095915e-8,\n             6.529054439e-9, 5.059343495e-9, -9.91364156e-10,\n             -2.27365122e-10, 9.6467911e-11, 2.394038e-12,\n             -6.886027e-12, 8.94487e-13, 3.13092e-13,\n             -1.12708e-13, 3.81e-16, 7.106e-15,\n             -1.523e-15, -9.4e-17, 1.21e-16,\n             -2.8e-17];\n  var j = cof.length - 1;\n  var isneg = false;\n  var d = 0;\n  var dd = 0;\n  var t, ty, tmp, res;\n\n  if (x < 0) {\n    x = -x;\n    isneg = true;\n  }\n\n  t = 2 / (2 + x);\n  ty = 4 * t - 2;\n\n  for(; j > 0; j--) {\n    tmp = d;\n    d = ty * d - dd + cof[j];\n    dd = tmp;\n  }\n\n  res = t * Math.exp(-x * x + 0.5 * (cof[0] + ty * d) - dd);\n  return isneg ? res - 1 : 1 - res;\n};\n\n\n// Returns the complmentary error function erfc(x)\njStat.erfc = function erfc(x) {\n  return 1 - jStat.erf(x);\n};\n\n\n// Returns the inverse of the complementary error function\njStat.erfcinv = function erfcinv(p) {\n  var j = 0;\n  var x, err, t, pp;\n  if (p >= 2)\n    return -100;\n  if (p <= 0)\n    return 100;\n  pp = (p < 1) ? p : 2 - p;\n  t = Math.sqrt(-2 * Math.log(pp / 2));\n  x = -0.70711 * ((2.30753 + t * 0.27061) /\n                  (1 + t * (0.99229 + t * 0.04481)) - t);\n  for (; j < 2; j++) {\n    err = jStat.erfc(x) - pp;\n    x += err / (1.12837916709551257 * Math.exp(-x * x) - x * err);\n  }\n  return (p < 1) ? x : -x;\n};\n\n\n// Returns the inverse of the incomplete beta function\njStat.ibetainv = function ibetainv(p, a, b) {\n  var EPS = 1e-8;\n  var a1 = a - 1;\n  var b1 = b - 1;\n  var j = 0;\n  var lna, lnb, pp, t, u, err, x, al, h, w, afac;\n  if (p <= 0)\n    return 0;\n  if (p >= 1)\n    return 1;\n  if (a >= 1 && b >= 1) {\n    pp = (p < 0.5) ? p : 1 - p;\n    t = Math.sqrt(-2 * Math.log(pp));\n    x = (2.30753 + t * 0.27061) / (1 + t* (0.99229 + t * 0.04481)) - t;\n    if (p < 0.5)\n      x = -x;\n    al = (x * x - 3) / 6;\n    h = 2 / (1 / (2 * a - 1)  + 1 / (2 * b - 1));\n    w = (x * Math.sqrt(al + h) / h) - (1 / (2 * b - 1) - 1 / (2 * a - 1)) *\n        (al + 5 / 6 - 2 / (3 * h));\n    x = a / (a + b * Math.exp(2 * w));\n  } else {\n    lna = Math.log(a / (a + b));\n    lnb = Math.log(b / (a + b));\n    t = Math.exp(a * lna) / a;\n    u = Math.exp(b * lnb) / b;\n    w = t + u;\n    if (p < t / w)\n      x = Math.pow(a * w * p, 1 / a);\n    else\n      x = 1 - Math.pow(b * w * (1 - p), 1 / b);\n  }\n  afac = -jStat.gammaln(a) - jStat.gammaln(b) + jStat.gammaln(a + b);\n  for(; j < 10; j++) {\n    if (x === 0 || x === 1)\n      return x;\n    err = jStat.ibeta(x, a, b) - p;\n    t = Math.exp(a1 * Math.log(x) + b1 * Math.log(1 - x) + afac);\n    u = err / t;\n    x -= (t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x)))));\n    if (x <= 0)\n      x = 0.5 * (x + t);\n    if (x >= 1)\n      x = 0.5 * (x + t + 1);\n    if (Math.abs(t) < EPS * x && j > 0)\n      break;\n  }\n  return x;\n};\n\n\n// Returns the incomplete beta function I_x(a,b)\njStat.ibeta = function ibeta(x, a, b) {\n  // Factors in front of the continued fraction.\n  var bt = (x === 0 || x === 1) ?  0 :\n    Math.exp(jStat.gammaln(a + b) - jStat.gammaln(a) -\n             jStat.gammaln(b) + a * Math.log(x) + b *\n             Math.log(1 - x));\n  if (x < 0 || x > 1)\n    return false;\n  if (x < (a + 1) / (a + b + 2))\n    // Use continued fraction directly.\n    return bt * jStat.betacf(x, a, b) / a;\n  // else use continued fraction after making the symmetry transformation.\n  return 1 - bt * jStat.betacf(1 - x, b, a) / b;\n};\n\n\n// Returns a normal deviate (mu=0, sigma=1).\n// If n and m are specified it returns a object of normal deviates.\njStat.randn = function randn(n, m) {\n  var u, v, x, y, q, mat;\n  if (!m)\n    m = n;\n  if (n)\n    return jStat.create(n, m, function() { return jStat.randn(); });\n  do {\n    u = Math.random();\n    v = 1.7156 * (Math.random() - 0.5);\n    x = u - 0.449871;\n    y = Math.abs(v) + 0.386595;\n    q = x * x + y * (0.19600 * y - 0.25472 * x);\n  } while (q > 0.27597 && (q > 0.27846 || v * v > -4 * Math.log(u) * u * u));\n  return v / u;\n};\n\n\n// Returns a gamma deviate by the method of Marsaglia and Tsang.\njStat.randg = function randg(shape, n, m) {\n  var oalph = shape;\n  var a1, a2, u, v, x, mat;\n  if (!m)\n    m = n;\n  if (!shape)\n    shape = 1;\n  if (n) {\n    mat = jStat.zeros(n,m);\n    mat.alter(function() { return jStat.randg(shape); });\n    return mat;\n  }\n  if (shape < 1)\n    shape += 1;\n  a1 = shape - 1 / 3;\n  a2 = 1 / Math.sqrt(9 * a1);\n  do {\n    do {\n      x = jStat.randn();\n      v = 1 + a2 * x;\n    } while(v <= 0);\n    v = v * v * v;\n    u = Math.random();\n  } while(u > 1 - 0.331 * Math.pow(x, 4) &&\n          Math.log(u) > 0.5 * x*x + a1 * (1 - v + Math.log(v)));\n  // alpha > 1\n  if (shape == oalph)\n    return a1 * v;\n  // alpha < 1\n  do {\n    u = Math.random();\n  } while(u === 0);\n  return Math.pow(u, 1 / oalph) * a1 * v;\n};\n\n\n// making use of static methods on the instance\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jStat.fn[passfunc] = function() {\n      return jStat(\n          jStat.map(this, function(value) { return jStat[passfunc](value); }));\n    }\n  })(funcs[i]);\n})('gammaln gammafn factorial factorialln'.split(' '));\n\n\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jStat.fn[passfunc] = function() {\n      return jStat(jStat[passfunc].apply(null, arguments));\n    };\n  })(funcs[i]);\n})('randn'.split(' '));\n\n}(jStat, Math));\n(function(jStat, Math) {\n\n// generate all distribution instance methods\n(function(list) {\n  for (var i = 0; i < list.length; i++) (function(func) {\n    // distribution instance method\n    jStat[func] = function(a, b, c) {\n      if (!(this instanceof arguments.callee))\n        return new arguments.callee(a, b, c);\n      this._a = a;\n      this._b = b;\n      this._c = c;\n      return this;\n    };\n    // distribution method to be used on a jStat instance\n    jStat.fn[func] = function(a, b, c) {\n      var newthis = jStat[func](a, b, c);\n      newthis.data = this;\n      return newthis;\n    };\n    // sample instance method\n    jStat[func].prototype.sample = function(arr) {\n      var a = this._a;\n      var b = this._b;\n      var c = this._c;\n      if (arr)\n        return jStat.alter(arr, function() {\n          return jStat[func].sample(a, b, c);\n        });\n      else\n        return jStat[func].sample(a, b, c);\n    };\n    // generate the pdf, cdf and inv instance methods\n    (function(vals) {\n      for (var i = 0; i < vals.length; i++) (function(fnfunc) {\n        jStat[func].prototype[fnfunc] = function(x) {\n          var a = this._a;\n          var b = this._b;\n          var c = this._c;\n          if (!x && x !== 0)\n            x = this.data;\n          if (typeof x !== 'number') {\n            return jStat.fn.map.call(x, function(x) {\n              return jStat[func][fnfunc](x, a, b, c);\n            });\n          }\n          return jStat[func][fnfunc](x, a, b, c);\n        };\n      })(vals[i]);\n    })('pdf cdf inv'.split(' '));\n    // generate the mean, median, mode and variance instance methods\n    (function(vals) {\n      for (var i = 0; i < vals.length; i++) (function(fnfunc) {\n        jStat[func].prototype[fnfunc] = function() {\n          return jStat[func][fnfunc](this._a, this._b, this._c);\n        };\n      })(vals[i]);\n    })('mean median mode variance'.split(' '));\n  })(list[i]);\n})((\n  'beta centralF cauchy chisquare exponential gamma invgamma kumaraswamy ' +\n  'laplace lognormal noncentralt normal pareto studentt weibull uniform ' +\n  'binomial negbin hypgeom poisson triangular tukey arcsine'\n).split(' '));\n\n\n\n// extend beta function with static methods\njStat.extend(jStat.beta, {\n  pdf: function pdf(x, alpha, beta) {\n    // PDF is zero outside the support\n    if (x > 1 || x < 0)\n      return 0;\n    // PDF is one for the uniform case\n    if (alpha == 1 && beta == 1)\n      return 1;\n\n    if (alpha < 512 && beta < 512) {\n      return (Math.pow(x, alpha - 1) * Math.pow(1 - x, beta - 1)) /\n          jStat.betafn(alpha, beta);\n    } else {\n      return Math.exp((alpha - 1) * Math.log(x) +\n                      (beta - 1) * Math.log(1 - x) -\n                      jStat.betaln(alpha, beta));\n    }\n  },\n\n  cdf: function cdf(x, alpha, beta) {\n    return (x > 1 || x < 0) ? (x > 1) * 1 : jStat.ibeta(x, alpha, beta);\n  },\n\n  inv: function inv(x, alpha, beta) {\n    return jStat.ibetainv(x, alpha, beta);\n  },\n\n  mean: function mean(alpha, beta) {\n    return alpha / (alpha + beta);\n  },\n\n  median: function median(alpha, beta) {\n    return jStat.ibetainv(0.5, alpha, beta);\n  },\n\n  mode: function mode(alpha, beta) {\n    return (alpha - 1 ) / ( alpha + beta - 2);\n  },\n\n  // return a random sample\n  sample: function sample(alpha, beta) {\n    var u = jStat.randg(alpha);\n    return u / (u + jStat.randg(beta));\n  },\n\n  variance: function variance(alpha, beta) {\n    return (alpha * beta) / (Math.pow(alpha + beta, 2) * (alpha + beta + 1));\n  }\n});\n\n// extend F function with static methods\njStat.extend(jStat.centralF, {\n  // This implementation of the pdf function avoids float overflow\n  // See the way that R calculates this value:\n  // https://svn.r-project.org/R/trunk/src/nmath/df.c\n  pdf: function pdf(x, df1, df2) {\n    var p, q, f;\n\n    if (x < 0)\n      return 0;\n\n    if (df1 <= 2) {\n      if (x === 0 && df1 < 2) {\n        return Infinity;\n      }\n      if (x === 0 && df1 === 2) {\n        return 1;\n      }\n      return (1 / jStat.betafn(df1 / 2, df2 / 2)) *\n              Math.pow(df1 / df2, df1 / 2) *\n              Math.pow(x, (df1/2) - 1) *\n              Math.pow((1 + (df1 / df2) * x), -(df1 + df2) / 2);\n    }\n\n    p = (df1 * x) / (df2 + x * df1);\n    q = df2 / (df2 + x * df1);\n    f = df1 * q / 2.0;\n    return f * jStat.binomial.pdf((df1 - 2) / 2, (df1 + df2 - 2) / 2, p);\n  },\n\n  cdf: function cdf(x, df1, df2) {\n    if (x < 0)\n      return 0;\n    return jStat.ibeta((df1 * x) / (df1 * x + df2), df1 / 2, df2 / 2);\n  },\n\n  inv: function inv(x, df1, df2) {\n    return df2 / (df1 * (1 / jStat.ibetainv(x, df1 / 2, df2 / 2) - 1));\n  },\n\n  mean: function mean(df1, df2) {\n    return (df2 > 2) ? df2 / (df2 - 2) : undefined;\n  },\n\n  mode: function mode(df1, df2) {\n    return (df1 > 2) ? (df2 * (df1 - 2)) / (df1 * (df2 + 2)) : undefined;\n  },\n\n  // return a random sample\n  sample: function sample(df1, df2) {\n    var x1 = jStat.randg(df1 / 2) * 2;\n    var x2 = jStat.randg(df2 / 2) * 2;\n    return (x1 / df1) / (x2 / df2);\n  },\n\n  variance: function variance(df1, df2) {\n    if (df2 <= 4)\n      return undefined;\n    return 2 * df2 * df2 * (df1 + df2 - 2) /\n        (df1 * (df2 - 2) * (df2 - 2) * (df2 - 4));\n  }\n});\n\n\n// extend cauchy function with static methods\njStat.extend(jStat.cauchy, {\n  pdf: function pdf(x, local, scale) {\n    if (scale < 0) { return 0; }\n\n    return (scale / (Math.pow(x - local, 2) + Math.pow(scale, 2))) / Math.PI;\n  },\n\n  cdf: function cdf(x, local, scale) {\n    return Math.atan((x - local) / scale) / Math.PI + 0.5;\n  },\n\n  inv: function(p, local, scale) {\n    return local + scale * Math.tan(Math.PI * (p - 0.5));\n  },\n\n  median: function median(local, scale) {\n    return local;\n  },\n\n  mode: function mode(local, scale) {\n    return local;\n  },\n\n  sample: function sample(local, scale) {\n    return jStat.randn() *\n        Math.sqrt(1 / (2 * jStat.randg(0.5))) * scale + local;\n  }\n});\n\n\n\n// extend chisquare function with static methods\njStat.extend(jStat.chisquare, {\n  pdf: function pdf(x, dof) {\n    if (x < 0)\n      return 0;\n    return (x === 0 && dof === 2) ? 0.5 :\n        Math.exp((dof / 2 - 1) * Math.log(x) - x / 2 - (dof / 2) *\n                 Math.log(2) - jStat.gammaln(dof / 2));\n  },\n\n  cdf: function cdf(x, dof) {\n    if (x < 0)\n      return 0;\n    return jStat.lowRegGamma(dof / 2, x / 2);\n  },\n\n  inv: function(p, dof) {\n    return 2 * jStat.gammapinv(p, 0.5 * dof);\n  },\n\n  mean : function(dof) {\n    return dof;\n  },\n\n  // TODO: this is an approximation (is there a better way?)\n  median: function median(dof) {\n    return dof * Math.pow(1 - (2 / (9 * dof)), 3);\n  },\n\n  mode: function mode(dof) {\n    return (dof - 2 > 0) ? dof - 2 : 0;\n  },\n\n  sample: function sample(dof) {\n    return jStat.randg(dof / 2) * 2;\n  },\n\n  variance: function variance(dof) {\n    return 2 * dof;\n  }\n});\n\n\n\n// extend exponential function with static methods\njStat.extend(jStat.exponential, {\n  pdf: function pdf(x, rate) {\n    return x < 0 ? 0 : rate * Math.exp(-rate * x);\n  },\n\n  cdf: function cdf(x, rate) {\n    return x < 0 ? 0 : 1 - Math.exp(-rate * x);\n  },\n\n  inv: function(p, rate) {\n    return -Math.log(1 - p) / rate;\n  },\n\n  mean : function(rate) {\n    return 1 / rate;\n  },\n\n  median: function (rate) {\n    return (1 / rate) * Math.log(2);\n  },\n\n  mode: function mode(rate) {\n    return 0;\n  },\n\n  sample: function sample(rate) {\n    return -1 / rate * Math.log(Math.random());\n  },\n\n  variance : function(rate) {\n    return Math.pow(rate, -2);\n  }\n});\n\n\n\n// extend gamma function with static methods\njStat.extend(jStat.gamma, {\n  pdf: function pdf(x, shape, scale) {\n    if (x < 0)\n      return 0;\n    return (x === 0 && shape === 1) ? 1 / scale :\n            Math.exp((shape - 1) * Math.log(x) - x / scale -\n                    jStat.gammaln(shape) - shape * Math.log(scale));\n  },\n\n  cdf: function cdf(x, shape, scale) {\n    if (x < 0)\n      return 0;\n    return jStat.lowRegGamma(shape, x / scale);\n  },\n\n  inv: function(p, shape, scale) {\n    return jStat.gammapinv(p, shape) * scale;\n  },\n\n  mean : function(shape, scale) {\n    return shape * scale;\n  },\n\n  mode: function mode(shape, scale) {\n    if(shape > 1) return (shape - 1) * scale;\n    return undefined;\n  },\n\n  sample: function sample(shape, scale) {\n    return jStat.randg(shape) * scale;\n  },\n\n  variance: function variance(shape, scale) {\n    return shape * scale * scale;\n  }\n});\n\n// extend inverse gamma function with static methods\njStat.extend(jStat.invgamma, {\n  pdf: function pdf(x, shape, scale) {\n    if (x <= 0)\n      return 0;\n    return Math.exp(-(shape + 1) * Math.log(x) - scale / x -\n                    jStat.gammaln(shape) + shape * Math.log(scale));\n  },\n\n  cdf: function cdf(x, shape, scale) {\n    if (x <= 0)\n      return 0;\n    return 1 - jStat.lowRegGamma(shape, scale / x);\n  },\n\n  inv: function(p, shape, scale) {\n    return scale / jStat.gammapinv(1 - p, shape);\n  },\n\n  mean : function(shape, scale) {\n    return (shape > 1) ? scale / (shape - 1) : undefined;\n  },\n\n  mode: function mode(shape, scale) {\n    return scale / (shape + 1);\n  },\n\n  sample: function sample(shape, scale) {\n    return scale / jStat.randg(shape);\n  },\n\n  variance: function variance(shape, scale) {\n    if (shape <= 2)\n      return undefined;\n    return scale * scale / ((shape - 1) * (shape - 1) * (shape - 2));\n  }\n});\n\n\n// extend kumaraswamy function with static methods\njStat.extend(jStat.kumaraswamy, {\n  pdf: function pdf(x, alpha, beta) {\n    if (x === 0 && alpha === 1)\n      return beta;\n    else if (x === 1 && beta === 1)\n      return alpha;\n    return Math.exp(Math.log(alpha) + Math.log(beta) + (alpha - 1) *\n                    Math.log(x) + (beta - 1) *\n                    Math.log(1 - Math.pow(x, alpha)));\n  },\n\n  cdf: function cdf(x, alpha, beta) {\n    if (x < 0)\n      return 0;\n    else if (x > 1)\n      return 1;\n    return (1 - Math.pow(1 - Math.pow(x, alpha), beta));\n  },\n\n  inv: function inv(p, alpha, beta) {\n    return Math.pow(1 - Math.pow(1 - p, 1 / beta), 1 / alpha);\n  },\n\n  mean : function(alpha, beta) {\n    return (beta * jStat.gammafn(1 + 1 / alpha) *\n            jStat.gammafn(beta)) / (jStat.gammafn(1 + 1 / alpha + beta));\n  },\n\n  median: function median(alpha, beta) {\n    return Math.pow(1 - Math.pow(2, -1 / beta), 1 / alpha);\n  },\n\n  mode: function mode(alpha, beta) {\n    if (!(alpha >= 1 && beta >= 1 && (alpha !== 1 && beta !== 1)))\n      return undefined;\n    return Math.pow((alpha - 1) / (alpha * beta - 1), 1 / alpha);\n  },\n\n  variance: function variance(alpha, beta) {\n    throw new Error('variance not yet implemented');\n    // TODO: complete this\n  }\n});\n\n\n\n// extend lognormal function with static methods\njStat.extend(jStat.lognormal, {\n  pdf: function pdf(x, mu, sigma) {\n    if (x <= 0)\n      return 0;\n    return Math.exp(-Math.log(x) - 0.5 * Math.log(2 * Math.PI) -\n                    Math.log(sigma) - Math.pow(Math.log(x) - mu, 2) /\n                    (2 * sigma * sigma));\n  },\n\n  cdf: function cdf(x, mu, sigma) {\n    if (x < 0)\n      return 0;\n    return 0.5 +\n        (0.5 * jStat.erf((Math.log(x) - mu) / Math.sqrt(2 * sigma * sigma)));\n  },\n\n  inv: function(p, mu, sigma) {\n    return Math.exp(-1.41421356237309505 * sigma * jStat.erfcinv(2 * p) + mu);\n  },\n\n  mean: function mean(mu, sigma) {\n    return Math.exp(mu + sigma * sigma / 2);\n  },\n\n  median: function median(mu, sigma) {\n    return Math.exp(mu);\n  },\n\n  mode: function mode(mu, sigma) {\n    return Math.exp(mu - sigma * sigma);\n  },\n\n  sample: function sample(mu, sigma) {\n    return Math.exp(jStat.randn() * sigma + mu);\n  },\n\n  variance: function variance(mu, sigma) {\n    return (Math.exp(sigma * sigma) - 1) * Math.exp(2 * mu + sigma * sigma);\n  }\n});\n\n\n\n// extend noncentralt function with static methods\njStat.extend(jStat.noncentralt, {\n  pdf: function pdf(x, dof, ncp) {\n    var tol = 1e-14;\n    if (Math.abs(ncp) < tol)  // ncp approx 0; use student-t\n      return jStat.studentt.pdf(x, dof)\n\n    if (Math.abs(x) < tol) {  // different formula for x == 0\n      return Math.exp(jStat.gammaln((dof + 1) / 2) - ncp * ncp / 2 -\n                      0.5 * Math.log(Math.PI * dof) - jStat.gammaln(dof / 2));\n    }\n\n    // formula for x != 0\n    return dof / x *\n        (jStat.noncentralt.cdf(x * Math.sqrt(1 + 2 / dof), dof+2, ncp) -\n         jStat.noncentralt.cdf(x, dof, ncp));\n  },\n\n  cdf: function cdf(x, dof, ncp) {\n    var tol = 1e-14;\n    var min_iterations = 200;\n\n    if (Math.abs(ncp) < tol)  // ncp approx 0; use student-t\n      return jStat.studentt.cdf(x, dof);\n\n    // turn negative x into positive and flip result afterwards\n    var flip = false;\n    if (x < 0) {\n      flip = true;\n      ncp = -ncp;\n    }\n\n    var prob = jStat.normal.cdf(-ncp, 0, 1);\n    var value = tol + 1;\n    // use value at last two steps to determine convergence\n    var lastvalue = value;\n    var y = x * x / (x * x + dof);\n    var j = 0;\n    var p = Math.exp(-ncp * ncp / 2);\n    var q = Math.exp(-ncp * ncp / 2 - 0.5 * Math.log(2) -\n                     jStat.gammaln(3 / 2)) * ncp;\n    while (j < min_iterations || lastvalue > tol || value > tol) {\n      lastvalue = value;\n      if (j > 0) {\n        p *= (ncp * ncp) / (2 * j);\n        q *= (ncp * ncp) / (2 * (j + 1 / 2));\n      }\n      value = p * jStat.beta.cdf(y, j + 0.5, dof / 2) +\n          q * jStat.beta.cdf(y, j+1, dof/2);\n      prob += 0.5 * value;\n      j++;\n    }\n\n    return flip ? (1 - prob) : prob;\n  }\n});\n\n\n// extend normal function with static methods\njStat.extend(jStat.normal, {\n  pdf: function pdf(x, mean, std) {\n    return Math.exp(-0.5 * Math.log(2 * Math.PI) -\n                    Math.log(std) - Math.pow(x - mean, 2) / (2 * std * std));\n  },\n\n  cdf: function cdf(x, mean, std) {\n    return 0.5 * (1 + jStat.erf((x - mean) / Math.sqrt(2 * std * std)));\n  },\n\n  inv: function(p, mean, std) {\n    return -1.41421356237309505 * std * jStat.erfcinv(2 * p) + mean;\n  },\n\n  mean : function(mean, std) {\n    return mean;\n  },\n\n  median: function median(mean, std) {\n    return mean;\n  },\n\n  mode: function (mean, std) {\n    return mean;\n  },\n\n  sample: function sample(mean, std) {\n    return jStat.randn() * std + mean;\n  },\n\n  variance : function(mean, std) {\n    return std * std;\n  }\n});\n\n\n\n// extend pareto function with static methods\njStat.extend(jStat.pareto, {\n  pdf: function pdf(x, scale, shape) {\n    if (x < scale)\n      return 0;\n    return (shape * Math.pow(scale, shape)) / Math.pow(x, shape + 1);\n  },\n\n  cdf: function cdf(x, scale, shape) {\n    if (x < scale)\n      return 0;\n    return 1 - Math.pow(scale / x, shape);\n  },\n\n  inv: function inv(p, scale, shape) {\n    return scale / Math.pow(1 - p, 1 / shape);\n  },\n\n  mean: function mean(scale, shape) {\n    if (shape <= 1)\n      return undefined;\n    return (shape * Math.pow(scale, shape)) / (shape - 1);\n  },\n\n  median: function median(scale, shape) {\n    return scale * (shape * Math.SQRT2);\n  },\n\n  mode: function mode(scale, shape) {\n    return scale;\n  },\n\n  variance : function(scale, shape) {\n    if (shape <= 2)\n      return undefined;\n    return (scale*scale * shape) / (Math.pow(shape - 1, 2) * (shape - 2));\n  }\n});\n\n\n\n// extend studentt function with static methods\njStat.extend(jStat.studentt, {\n  pdf: function pdf(x, dof) {\n    dof = dof > 1e100 ? 1e100 : dof;\n    return (1/(Math.sqrt(dof) * jStat.betafn(0.5, dof/2))) *\n        Math.pow(1 + ((x * x) / dof), -((dof + 1) / 2));\n  },\n\n  cdf: function cdf(x, dof) {\n    var dof2 = dof / 2;\n    return jStat.ibeta((x + Math.sqrt(x * x + dof)) /\n                       (2 * Math.sqrt(x * x + dof)), dof2, dof2);\n  },\n\n  inv: function(p, dof) {\n    var x = jStat.ibetainv(2 * Math.min(p, 1 - p), 0.5 * dof, 0.5);\n    x = Math.sqrt(dof * (1 - x) / x);\n    return (p > 0.5) ? x : -x;\n  },\n\n  mean: function mean(dof) {\n    return (dof > 1) ? 0 : undefined;\n  },\n\n  median: function median(dof) {\n    return 0;\n  },\n\n  mode: function mode(dof) {\n    return 0;\n  },\n\n  sample: function sample(dof) {\n    return jStat.randn() * Math.sqrt(dof / (2 * jStat.randg(dof / 2)));\n  },\n\n  variance: function variance(dof) {\n    return (dof  > 2) ? dof / (dof - 2) : (dof > 1) ? Infinity : undefined;\n  }\n});\n\n\n\n// extend weibull function with static methods\njStat.extend(jStat.weibull, {\n  pdf: function pdf(x, scale, shape) {\n    if (x < 0 || scale < 0 || shape < 0)\n      return 0;\n    return (shape / scale) * Math.pow((x / scale), (shape - 1)) *\n        Math.exp(-(Math.pow((x / scale), shape)));\n  },\n\n  cdf: function cdf(x, scale, shape) {\n    return x < 0 ? 0 : 1 - Math.exp(-Math.pow((x / scale), shape));\n  },\n\n  inv: function(p, scale, shape) {\n    return scale * Math.pow(-Math.log(1 - p), 1 / shape);\n  },\n\n  mean : function(scale, shape) {\n    return scale * jStat.gammafn(1 + 1 / shape);\n  },\n\n  median: function median(scale, shape) {\n    return scale * Math.pow(Math.log(2), 1 / shape);\n  },\n\n  mode: function mode(scale, shape) {\n    if (shape <= 1)\n      return 0;\n    return scale * Math.pow((shape - 1) / shape, 1 / shape);\n  },\n\n  sample: function sample(scale, shape) {\n    return scale * Math.pow(-Math.log(Math.random()), 1 / shape);\n  },\n\n  variance: function variance(scale, shape) {\n    return scale * scale * jStat.gammafn(1 + 2 / shape) -\n        Math.pow(jStat.weibull.mean(scale, shape), 2);\n  }\n});\n\n\n\n// extend uniform function with static methods\njStat.extend(jStat.uniform, {\n  pdf: function pdf(x, a, b) {\n    return (x < a || x > b) ? 0 : 1 / (b - a);\n  },\n\n  cdf: function cdf(x, a, b) {\n    if (x < a)\n      return 0;\n    else if (x < b)\n      return (x - a) / (b - a);\n    return 1;\n  },\n\n  inv: function(p, a, b) {\n    return a + (p * (b - a));\n  },\n\n  mean: function mean(a, b) {\n    return 0.5 * (a + b);\n  },\n\n  median: function median(a, b) {\n    return jStat.mean(a, b);\n  },\n\n  mode: function mode(a, b) {\n    throw new Error('mode is not yet implemented');\n  },\n\n  sample: function sample(a, b) {\n    return (a / 2 + b / 2) + (b / 2 - a / 2) * (2 * Math.random() - 1);\n  },\n\n  variance: function variance(a, b) {\n    return Math.pow(b - a, 2) / 12;\n  }\n});\n\n\n\n// extend uniform function with static methods\njStat.extend(jStat.binomial, {\n  pdf: function pdf(k, n, p) {\n    return (p === 0 || p === 1) ?\n      ((n * p) === k ? 1 : 0) :\n      jStat.combination(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);\n  },\n\n  cdf: function cdf(x, n, p) {\n    var binomarr = [],\n    k = 0;\n    if (x < 0) {\n      return 0;\n    }\n    if (x < n) {\n      for (; k <= x; k++) {\n        binomarr[ k ] = jStat.binomial.pdf(k, n, p);\n      }\n      return jStat.sum(binomarr);\n    }\n    return 1;\n  }\n});\n\n\n\n// extend uniform function with static methods\njStat.extend(jStat.negbin, {\n  pdf: function pdf(k, r, p) {\n    if (k !== k >>> 0)\n      return false;\n    if (k < 0)\n      return 0;\n    return jStat.combination(k + r - 1, r - 1) *\n        Math.pow(1 - p, k) * Math.pow(p, r);\n  },\n\n  cdf: function cdf(x, r, p) {\n    var sum = 0,\n    k = 0;\n    if (x < 0) return 0;\n    for (; k <= x; k++) {\n      sum += jStat.negbin.pdf(k, r, p);\n    }\n    return sum;\n  }\n});\n\n\n\n// extend uniform function with static methods\njStat.extend(jStat.hypgeom, {\n  pdf: function pdf(k, N, m, n) {\n    // Hypergeometric PDF.\n\n    // A simplification of the CDF algorithm below.\n\n    // k = number of successes drawn\n    // N = population size\n    // m = number of successes in population\n    // n = number of items drawn from population\n\n    if(k !== k | 0) {\n      return false;\n    } else if(k < 0 || k < m - (N - n)) {\n      // It's impossible to have this few successes drawn.\n      return 0;\n    } else if(k > n || k > m) {\n      // It's impossible to have this many successes drawn.\n      return 0;\n    } else if (m * 2 > N) {\n      // More than half the population is successes.\n\n      if(n * 2 > N) {\n        // More than half the population is sampled.\n\n        return jStat.hypgeom.pdf(N - m - n + k, N, N - m, N - n)\n      } else {\n        // Half or less of the population is sampled.\n\n        return jStat.hypgeom.pdf(n - k, N, N - m, n);\n      }\n\n    } else if(n * 2 > N) {\n      // Half or less is successes.\n\n      return jStat.hypgeom.pdf(m - k, N, m, N - n);\n\n    } else if(m < n) {\n      // We want to have the number of things sampled to be less than the\n      // successes available. So swap the definitions of successful and sampled.\n      return jStat.hypgeom.pdf(k, N, n, m);\n    } else {\n      // If we get here, half or less of the population was sampled, half or\n      // less of it was successes, and we had fewer sampled things than\n      // successes. Now we can do this complicated iterative algorithm in an\n      // efficient way.\n\n      // The basic premise of the algorithm is that we partially normalize our\n      // intermediate product to keep it in a numerically good region, and then\n      // finish the normalization at the end.\n\n      // This variable holds the scaled probability of the current number of\n      // successes.\n      var scaledPDF = 1;\n\n      // This keeps track of how much we have normalized.\n      var samplesDone = 0;\n\n      for(var i = 0; i < k; i++) {\n        // For every possible number of successes up to that observed...\n\n        while(scaledPDF > 1 && samplesDone < n) {\n          // Intermediate result is growing too big. Apply some of the\n          // normalization to shrink everything.\n\n          scaledPDF *= 1 - (m / (N - samplesDone));\n\n          // Say we've normalized by this sample already.\n          samplesDone++;\n        }\n\n        // Work out the partially-normalized hypergeometric PDF for the next\n        // number of successes\n        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));\n      }\n\n      for(; samplesDone < n; samplesDone++) {\n        // Apply all the rest of the normalization\n        scaledPDF *= 1 - (m / (N - samplesDone));\n      }\n\n      // Bound answer sanely before returning.\n      return Math.min(1, Math.max(0, scaledPDF));\n    }\n  },\n\n  cdf: function cdf(x, N, m, n) {\n    // Hypergeometric CDF.\n\n    // This algorithm is due to Prof. Thomas S. Ferguson, <tom@math.ucla.edu>,\n    // and comes from his hypergeometric test calculator at\n    // <http://www.math.ucla.edu/~tom/distributions/Hypergeometric.html>.\n\n    // x = number of successes drawn\n    // N = population size\n    // m = number of successes in population\n    // n = number of items drawn from population\n\n    if(x < 0 || x < m - (N - n)) {\n      // It's impossible to have this few successes drawn or fewer.\n      return 0;\n    } else if(x >= n || x >= m) {\n      // We will always have this many successes or fewer.\n      return 1;\n    } else if (m * 2 > N) {\n      // More than half the population is successes.\n\n      if(n * 2 > N) {\n        // More than half the population is sampled.\n\n        return jStat.hypgeom.cdf(N - m - n + x, N, N - m, N - n)\n      } else {\n        // Half or less of the population is sampled.\n\n        return 1 - jStat.hypgeom.cdf(n - x - 1, N, N - m, n);\n      }\n\n    } else if(n * 2 > N) {\n      // Half or less is successes.\n\n      return 1 - jStat.hypgeom.cdf(m - x - 1, N, m, N - n);\n\n    } else if(m < n) {\n      // We want to have the number of things sampled to be less than the\n      // successes available. So swap the definitions of successful and sampled.\n      return jStat.hypgeom.cdf(x, N, n, m);\n    } else {\n      // If we get here, half or less of the population was sampled, half or\n      // less of it was successes, and we had fewer sampled things than\n      // successes. Now we can do this complicated iterative algorithm in an\n      // efficient way.\n\n      // The basic premise of the algorithm is that we partially normalize our\n      // intermediate sum to keep it in a numerically good region, and then\n      // finish the normalization at the end.\n\n      // Holds the intermediate, scaled total CDF.\n      var scaledCDF = 1;\n\n      // This variable holds the scaled probability of the current number of\n      // successes.\n      var scaledPDF = 1;\n\n      // This keeps track of how much we have normalized.\n      var samplesDone = 0;\n\n      for(var i = 0; i < x; i++) {\n        // For every possible number of successes up to that observed...\n\n        while(scaledCDF > 1 && samplesDone < n) {\n          // Intermediate result is growing too big. Apply some of the\n          // normalization to shrink everything.\n\n          var factor = 1 - (m / (N - samplesDone));\n\n          scaledPDF *= factor;\n          scaledCDF *= factor;\n\n          // Say we've normalized by this sample already.\n          samplesDone++;\n        }\n\n        // Work out the partially-normalized hypergeometric PDF for the next\n        // number of successes\n        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));\n\n        // Add to the CDF answer.\n        scaledCDF += scaledPDF;\n      }\n\n      for(; samplesDone < n; samplesDone++) {\n        // Apply all the rest of the normalization\n        scaledCDF *= 1 - (m / (N - samplesDone));\n      }\n\n      // Bound answer sanely before returning.\n      return Math.min(1, Math.max(0, scaledCDF));\n    }\n  }\n});\n\n\n\n// extend uniform function with static methods\njStat.extend(jStat.poisson, {\n  pdf: function pdf(k, l) {\n    if (l < 0 || (k % 1) !== 0 || k < 0) {\n      return 0;\n    }\n\n    return Math.pow(l, k) * Math.exp(-l) / jStat.factorial(k);\n  },\n\n  cdf: function cdf(x, l) {\n    var sumarr = [],\n    k = 0;\n    if (x < 0) return 0;\n    for (; k <= x; k++) {\n      sumarr.push(jStat.poisson.pdf(k, l));\n    }\n    return jStat.sum(sumarr);\n  },\n\n  mean : function(l) {\n    return l;\n  },\n\n  variance : function(l) {\n    return l;\n  },\n\n  sample: function sample(l) {\n    var p = 1, k = 0, L = Math.exp(-l);\n    do {\n      k++;\n      p *= Math.random();\n    } while (p > L);\n    return k - 1;\n  }\n});\n\n// extend triangular function with static methods\njStat.extend(jStat.triangular, {\n  pdf: function pdf(x, a, b, c) {\n    if (b <= a || c < a || c > b) {\n      return NaN;\n    } else {\n      if (x < a || x > b) {\n        return 0;\n      } else if (x < c) {\n          return (2 * (x - a)) / ((b - a) * (c - a));\n      } else if (x === c) {\n          return (2 / (b - a));\n      } else { // x > c\n          return (2 * (b - x)) / ((b - a) * (b - c));\n      }\n    }\n  },\n\n  cdf: function cdf(x, a, b, c) {\n    if (b <= a || c < a || c > b)\n      return NaN;\n    if (x <= a)\n      return 0;\n    else if (x >= b)\n      return 1;\n    if (x <= c)\n      return Math.pow(x - a, 2) / ((b - a) * (c - a));\n    else // x > c\n      return 1 - Math.pow(b - x, 2) / ((b - a) * (b - c));\n  },\n\n  inv: function inv(p, a, b, c) {\n    if (b <= a || c < a || c > b) {\n      return NaN;\n    } else {\n      if (p <= ((c - a) / (b - a))) {\n        return a + (b - a) * Math.sqrt(p * ((c - a) / (b - a)));\n      } else { // p > ((c - a) / (b - a))\n        return a + (b - a) * (1 - Math.sqrt((1 - p) * (1 - ((c - a) / (b - a)))));\n      }\n    }\n  },\n\n  mean: function mean(a, b, c) {\n    return (a + b + c) / 3;\n  },\n\n  median: function median(a, b, c) {\n    if (c <= (a + b) / 2) {\n      return b - Math.sqrt((b - a) * (b - c)) / Math.sqrt(2);\n    } else if (c > (a + b) / 2) {\n      return a + Math.sqrt((b - a) * (c - a)) / Math.sqrt(2);\n    }\n  },\n\n  mode: function mode(a, b, c) {\n    return c;\n  },\n\n  sample: function sample(a, b, c) {\n    var u = Math.random();\n    if (u < ((c - a) / (b - a)))\n      return a + Math.sqrt(u * (b - a) * (c - a))\n    return b - Math.sqrt((1 - u) * (b - a) * (b - c));\n  },\n\n  variance: function variance(a, b, c) {\n    return (a * a + b * b + c * c - a * b - a * c - b * c) / 18;\n  }\n});\n\n\n// extend arcsine function with static methods\njStat.extend(jStat.arcsine, {\n  pdf: function pdf(x, a, b) {\n    if (b <= a) return NaN;\n\n    return (x <= a || x >= b) ? 0 :\n      (2 / Math.PI) *\n        Math.pow(Math.pow(b - a, 2) -\n                  Math.pow(2 * x - a - b, 2), -0.5);\n  },\n\n  cdf: function cdf(x, a, b) {\n    if (x < a)\n      return 0;\n    else if (x < b)\n      return (2 / Math.PI) * Math.asin(Math.sqrt((x - a)/(b - a)));\n    return 1;\n  },\n\n  inv: function(p, a, b) {\n    return a + (0.5 - 0.5 * Math.cos(Math.PI * p)) * (b - a);\n  },\n\n  mean: function mean(a, b) {\n    if (b <= a) return NaN;\n    return (a + b) / 2;\n  },\n\n  median: function median(a, b) {\n    if (b <= a) return NaN;\n    return (a + b) / 2;\n  },\n\n  mode: function mode(a, b) {\n    throw new Error('mode is not yet implemented');\n  },\n\n  sample: function sample(a, b) {\n    return ((a + b) / 2) + ((b - a) / 2) *\n      Math.sin(2 * Math.PI * jStat.uniform.sample(0, 1));\n  },\n\n  variance: function variance(a, b) {\n    if (b <= a) return NaN;\n    return Math.pow(b - a, 2) / 8;\n  }\n});\n\n\nfunction laplaceSign(x) { return x / Math.abs(x); }\n\njStat.extend(jStat.laplace, {\n  pdf: function pdf(x, mu, b) {\n    return (b <= 0) ? 0 : (Math.exp(-Math.abs(x - mu) / b)) / (2 * b);\n  },\n\n  cdf: function cdf(x, mu, b) {\n    if (b <= 0) { return 0; }\n\n    if(x < mu) {\n      return 0.5 * Math.exp((x - mu) / b);\n    } else {\n      return 1 - 0.5 * Math.exp(- (x - mu) / b);\n    }\n  },\n\n  mean: function(mu, b) {\n    return mu;\n  },\n\n  median: function(mu, b) {\n    return mu;\n  },\n\n  mode: function(mu, b) {\n    return mu;\n  },\n\n  variance: function(mu, b) {\n    return 2 * b * b;\n  },\n\n  sample: function sample(mu, b) {\n    var u = Math.random() - 0.5;\n\n    return mu - (b * laplaceSign(u) * Math.log(1 - (2 * Math.abs(u))));\n  }\n});\n\nfunction tukeyWprob(w, rr, cc) {\n  var nleg = 12;\n  var ihalf = 6;\n\n  var C1 = -30;\n  var C2 = -50;\n  var C3 = 60;\n  var bb   = 8;\n  var wlar = 3;\n  var wincr1 = 2;\n  var wincr2 = 3;\n  var xleg = [\n    0.981560634246719250690549090149,\n    0.904117256370474856678465866119,\n    0.769902674194304687036893833213,\n    0.587317954286617447296702418941,\n    0.367831498998180193752691536644,\n    0.125233408511468915472441369464\n  ];\n  var aleg = [\n    0.047175336386511827194615961485,\n    0.106939325995318430960254718194,\n    0.160078328543346226334652529543,\n    0.203167426723065921749064455810,\n    0.233492536538354808760849898925,\n    0.249147045813402785000562436043\n  ];\n\n  var qsqz = w * 0.5;\n\n  // if w >= 16 then the integral lower bound (occurs for c=20)\n  // is 0.99999999999995 so return a value of 1.\n\n  if (qsqz >= bb)\n    return 1.0;\n\n  // find (f(w/2) - 1) ^ cc\n  // (first term in integral of hartley's form).\n\n  var pr_w = 2 * jStat.normal.cdf(qsqz, 0, 1, 1, 0) - 1; // erf(qsqz / M_SQRT2)\n  // if pr_w ^ cc < 2e-22 then set pr_w = 0\n  if (pr_w >= Math.exp(C2 / cc))\n    pr_w = Math.pow(pr_w, cc);\n  else\n    pr_w = 0.0;\n\n  // if w is large then the second component of the\n  // integral is small, so fewer intervals are needed.\n\n  var wincr;\n  if (w > wlar)\n    wincr = wincr1;\n  else\n    wincr = wincr2;\n\n  // find the integral of second term of hartley's form\n  // for the integral of the range for equal-length\n  // intervals using legendre quadrature.  limits of\n  // integration are from (w/2, 8).  two or three\n  // equal-length intervals are used.\n\n  // blb and bub are lower and upper limits of integration.\n\n  var blb = qsqz;\n  var binc = (bb - qsqz) / wincr;\n  var bub = blb + binc;\n  var einsum = 0.0;\n\n  // integrate over each interval\n\n  var cc1 = cc - 1.0;\n  for (var wi = 1; wi <= wincr; wi++) {\n    var elsum = 0.0;\n    var a = 0.5 * (bub + blb);\n\n    // legendre quadrature with order = nleg\n\n    var b = 0.5 * (bub - blb);\n\n    for (var jj = 1; jj <= nleg; jj++) {\n      var j, xx;\n      if (ihalf < jj) {\n        j = (nleg - jj) + 1;\n        xx = xleg[j-1];\n      } else {\n        j = jj;\n        xx = -xleg[j-1];\n      }\n      var c = b * xx;\n      var ac = a + c;\n\n      // if exp(-qexpo/2) < 9e-14,\n      // then doesn't contribute to integral\n\n      var qexpo = ac * ac;\n      if (qexpo > C3)\n        break;\n\n      var pplus = 2 * jStat.normal.cdf(ac, 0, 1, 1, 0);\n      var pminus= 2 * jStat.normal.cdf(ac, w, 1, 1, 0);\n\n      // if rinsum ^ (cc-1) < 9e-14,\n      // then doesn't contribute to integral\n\n      var rinsum = (pplus * 0.5) - (pminus * 0.5);\n      if (rinsum >= Math.exp(C1 / cc1)) {\n        rinsum = (aleg[j-1] * Math.exp(-(0.5 * qexpo))) * Math.pow(rinsum, cc1);\n        elsum += rinsum;\n      }\n    }\n    elsum *= (((2.0 * b) * cc) / Math.sqrt(2 * Math.PI));\n    einsum += elsum;\n    blb = bub;\n    bub += binc;\n  }\n\n  // if pr_w ^ rr < 9e-14, then return 0\n  pr_w += einsum;\n  if (pr_w <= Math.exp(C1 / rr))\n    return 0;\n\n  pr_w = Math.pow(pr_w, rr);\n  if (pr_w >= 1) // 1 was iMax was eps\n    return 1;\n  return pr_w;\n}\n\nfunction tukeyQinv(p, c, v) {\n  var p0 = 0.322232421088;\n  var q0 = 0.993484626060e-01;\n  var p1 = -1.0;\n  var q1 = 0.588581570495;\n  var p2 = -0.342242088547;\n  var q2 = 0.531103462366;\n  var p3 = -0.204231210125;\n  var q3 = 0.103537752850;\n  var p4 = -0.453642210148e-04;\n  var q4 = 0.38560700634e-02;\n  var c1 = 0.8832;\n  var c2 = 0.2368;\n  var c3 = 1.214;\n  var c4 = 1.208;\n  var c5 = 1.4142;\n  var vmax = 120.0;\n\n  var ps = 0.5 - 0.5 * p;\n  var yi = Math.sqrt(Math.log(1.0 / (ps * ps)));\n  var t = yi + (((( yi * p4 + p3) * yi + p2) * yi + p1) * yi + p0)\n     / (((( yi * q4 + q3) * yi + q2) * yi + q1) * yi + q0);\n  if (v < vmax) t += (t * t * t + t) / v / 4.0;\n  var q = c1 - c2 * t;\n  if (v < vmax) q += -c3 / v + c4 * t / v;\n  return t * (q * Math.log(c - 1.0) + c5);\n}\n\njStat.extend(jStat.tukey, {\n  cdf: function cdf(q, nmeans, df) {\n    // Identical implementation as the R ptukey() function as of commit 68947\n    var rr = 1;\n    var cc = nmeans;\n\n    var nlegq = 16;\n    var ihalfq = 8;\n\n    var eps1 = -30.0;\n    var eps2 = 1.0e-14;\n    var dhaf  = 100.0;\n    var dquar = 800.0;\n    var deigh = 5000.0;\n    var dlarg = 25000.0;\n    var ulen1 = 1.0;\n    var ulen2 = 0.5;\n    var ulen3 = 0.25;\n    var ulen4 = 0.125;\n    var xlegq = [\n      0.989400934991649932596154173450,\n      0.944575023073232576077988415535,\n      0.865631202387831743880467897712,\n      0.755404408355003033895101194847,\n      0.617876244402643748446671764049,\n      0.458016777657227386342419442984,\n      0.281603550779258913230460501460,\n      0.950125098376374401853193354250e-1\n    ];\n    var alegq = [\n      0.271524594117540948517805724560e-1,\n      0.622535239386478928628438369944e-1,\n      0.951585116824927848099251076022e-1,\n      0.124628971255533872052476282192,\n      0.149595988816576732081501730547,\n      0.169156519395002538189312079030,\n      0.182603415044923588866763667969,\n      0.189450610455068496285396723208\n    ];\n\n    if (q <= 0)\n      return 0;\n\n    // df must be > 1\n    // there must be at least two values\n\n    if (df < 2 || rr < 1 || cc < 2) return NaN;\n\n    if (!Number.isFinite(q))\n      return 1;\n\n    if (df > dlarg)\n      return tukeyWprob(q, rr, cc);\n\n    // calculate leading constant\n\n    var f2 = df * 0.5;\n    var f2lf = ((f2 * Math.log(df)) - (df * Math.log(2))) - jStat.gammaln(f2);\n    var f21 = f2 - 1.0;\n\n    // integral is divided into unit, half-unit, quarter-unit, or\n    // eighth-unit length intervals depending on the value of the\n    // degrees of freedom.\n\n    var ff4 = df * 0.25;\n    var ulen;\n    if      (df <= dhaf)  ulen = ulen1;\n    else if (df <= dquar) ulen = ulen2;\n    else if (df <= deigh) ulen = ulen3;\n    else                  ulen = ulen4;\n\n    f2lf += Math.log(ulen);\n\n    // integrate over each subinterval\n\n    var ans = 0.0;\n\n    for (var i = 1; i <= 50; i++) {\n      var otsum = 0.0;\n\n      // legendre quadrature with order = nlegq\n      // nodes (stored in xlegq) are symmetric around zero.\n\n      var twa1 = (2 * i - 1) * ulen;\n\n      for (var jj = 1; jj <= nlegq; jj++) {\n        var j, t1;\n        if (ihalfq < jj) {\n          j = jj - ihalfq - 1;\n          t1 = (f2lf + (f21 * Math.log(twa1 + (xlegq[j] * ulen))))\n              - (((xlegq[j] * ulen) + twa1) * ff4);\n        } else {\n          j = jj - 1;\n          t1 = (f2lf + (f21 * Math.log(twa1 - (xlegq[j] * ulen))))\n              + (((xlegq[j] * ulen) - twa1) * ff4);\n        }\n\n        // if exp(t1) < 9e-14, then doesn't contribute to integral\n        var qsqz;\n        if (t1 >= eps1) {\n          if (ihalfq < jj) {\n            qsqz = q * Math.sqrt(((xlegq[j] * ulen) + twa1) * 0.5);\n          } else {\n            qsqz = q * Math.sqrt(((-(xlegq[j] * ulen)) + twa1) * 0.5);\n          }\n\n          // call wprob to find integral of range portion\n\n          var wprb = tukeyWprob(qsqz, rr, cc);\n          var rotsum = (wprb * alegq[j]) * Math.exp(t1);\n          otsum += rotsum;\n        }\n        // end legendre integral for interval i\n        // L200:\n      }\n\n      // if integral for interval i < 1e-14, then stop.\n      // However, in order to avoid small area under left tail,\n      // at least  1 / ulen  intervals are calculated.\n      if (i * ulen >= 1.0 && otsum <= eps2)\n        break;\n\n      // end of interval i\n      // L330:\n\n      ans += otsum;\n    }\n\n    if (otsum > eps2) { // not converged\n      throw new Error('tukey.cdf failed to converge');\n    }\n    if (ans > 1)\n      ans = 1;\n    return ans;\n  },\n\n  inv: function(p, nmeans, df) {\n    // Identical implementation as the R qtukey() function as of commit 68947\n    var rr = 1;\n    var cc = nmeans;\n\n    var eps = 0.0001;\n    var maxiter = 50;\n\n    // df must be > 1 ; there must be at least two values\n    if (df < 2 || rr < 1 || cc < 2) return NaN;\n\n    if (p < 0 || p > 1) return NaN;\n    if (p === 0) return 0;\n    if (p === 1) return Infinity;\n\n    // Initial value\n\n    var x0 = tukeyQinv(p, cc, df);\n\n    // Find prob(value < x0)\n\n    var valx0 = jStat.tukey.cdf(x0, nmeans, df) - p;\n\n    // Find the second iterate and prob(value < x1).\n    // If the first iterate has probability value\n    // exceeding p then second iterate is 1 less than\n    // first iterate; otherwise it is 1 greater.\n\n    var x1;\n    if (valx0 > 0.0)\n      x1 = Math.max(0.0, x0 - 1.0);\n    else\n      x1 = x0 + 1.0;\n    var valx1 = jStat.tukey.cdf(x1, nmeans, df) - p;\n\n    // Find new iterate\n\n    var ans;\n    for(var iter = 1; iter < maxiter; iter++) {\n      ans = x1 - ((valx1 * (x1 - x0)) / (valx1 - valx0));\n      valx0 = valx1;\n\n      // New iterate must be >= 0\n\n      x0 = x1;\n      if (ans < 0.0) {\n        ans = 0.0;\n        valx1 = -p;\n      }\n      // Find prob(value < new iterate)\n\n      valx1 = jStat.tukey.cdf(ans, nmeans, df) - p;\n      x1 = ans;\n\n      // If the difference between two successive\n      // iterates is less than eps, stop\n\n      var xabs = Math.abs(x1 - x0);\n      if (xabs < eps)\n        return ans;\n    }\n\n    throw new Error('tukey.inv failed to converge');\n  }\n});\n\n}(jStat, Math));\n/* Provides functions for the solution of linear system of equations, integration, extrapolation,\n * interpolation, eigenvalue problems, differential equations and PCA analysis. */\n\n(function(jStat, Math) {\n\nvar push = Array.prototype.push;\nvar isArray = jStat.utils.isArray;\n\nfunction isUsable(arg) {\n  return isArray(arg) || arg instanceof jStat;\n}\n\njStat.extend({\n\n  // add a vector/matrix to a vector/matrix or scalar\n  add: function add(arr, arg) {\n    // check if arg is a vector or scalar\n    if (isUsable(arg)) {\n      if (!isUsable(arg[0])) arg = [ arg ];\n      return jStat.map(arr, function(value, row, col) {\n        return value + arg[row][col];\n      });\n    }\n    return jStat.map(arr, function(value) { return value + arg; });\n  },\n\n  // subtract a vector or scalar from the vector\n  subtract: function subtract(arr, arg) {\n    // check if arg is a vector or scalar\n    if (isUsable(arg)) {\n      if (!isUsable(arg[0])) arg = [ arg ];\n      return jStat.map(arr, function(value, row, col) {\n        return value - arg[row][col] || 0;\n      });\n    }\n    return jStat.map(arr, function(value) { return value - arg; });\n  },\n\n  // matrix division\n  divide: function divide(arr, arg) {\n    if (isUsable(arg)) {\n      if (!isUsable(arg[0])) arg = [ arg ];\n      return jStat.multiply(arr, jStat.inv(arg));\n    }\n    return jStat.map(arr, function(value) { return value / arg; });\n  },\n\n  // matrix multiplication\n  multiply: function multiply(arr, arg) {\n    var row, col, nrescols, sum, nrow, ncol, res, rescols;\n    // eg: arr = 2 arg = 3 -> 6 for res[0][0] statement closure\n    if (arr.length === undefined && arg.length === undefined) {\n      return arr * arg;\n    }\n    nrow = arr.length,\n    ncol = arr[0].length,\n    res = jStat.zeros(nrow, nrescols = (isUsable(arg)) ? arg[0].length : ncol),\n    rescols = 0;\n    if (isUsable(arg)) {\n      for (; rescols < nrescols; rescols++) {\n        for (row = 0; row < nrow; row++) {\n          sum = 0;\n          for (col = 0; col < ncol; col++)\n          sum += arr[row][col] * arg[col][rescols];\n          res[row][rescols] = sum;\n        }\n      }\n      return (nrow === 1 && rescols === 1) ? res[0][0] : res;\n    }\n    return jStat.map(arr, function(value) { return value * arg; });\n  },\n\n  // outer([1,2,3],[4,5,6])\n  // ===\n  // [[1],[2],[3]] times [[4,5,6]]\n  // ->\n  // [[4,5,6],[8,10,12],[12,15,18]]\n  outer:function outer(A, B) {\n    return jStat.multiply(A.map(function(t){ return [t] }), [B]);\n  },\n\n\n  // Returns the dot product of two matricies\n  dot: function dot(arr, arg) {\n    if (!isUsable(arr[0])) arr = [ arr ];\n    if (!isUsable(arg[0])) arg = [ arg ];\n    // convert column to row vector\n    var left = (arr[0].length === 1 && arr.length !== 1) ? jStat.transpose(arr) : arr,\n    right = (arg[0].length === 1 && arg.length !== 1) ? jStat.transpose(arg) : arg,\n    res = [],\n    row = 0,\n    nrow = left.length,\n    ncol = left[0].length,\n    sum, col;\n    for (; row < nrow; row++) {\n      res[row] = [];\n      sum = 0;\n      for (col = 0; col < ncol; col++)\n      sum += left[row][col] * right[row][col];\n      res[row] = sum;\n    }\n    return (res.length === 1) ? res[0] : res;\n  },\n\n  // raise every element by a scalar\n  pow: function pow(arr, arg) {\n    return jStat.map(arr, function(value) { return Math.pow(value, arg); });\n  },\n\n  // exponentiate every element\n  exp: function exp(arr) {\n    return jStat.map(arr, function(value) { return Math.exp(value); });\n  },\n\n  // generate the natural log of every element\n  log: function exp(arr) {\n    return jStat.map(arr, function(value) { return Math.log(value); });\n  },\n\n  // generate the absolute values of the vector\n  abs: function abs(arr) {\n    return jStat.map(arr, function(value) { return Math.abs(value); });\n  },\n\n  // computes the p-norm of the vector\n  // In the case that a matrix is passed, uses the first row as the vector\n  norm: function norm(arr, p) {\n    var nnorm = 0,\n    i = 0;\n    // check the p-value of the norm, and set for most common case\n    if (isNaN(p)) p = 2;\n    // check if multi-dimensional array, and make vector correction\n    if (isUsable(arr[0])) arr = arr[0];\n    // vector norm\n    for (; i < arr.length; i++) {\n      nnorm += Math.pow(Math.abs(arr[i]), p);\n    }\n    return Math.pow(nnorm, 1 / p);\n  },\n\n  // computes the angle between two vectors in rads\n  // In case a matrix is passed, this uses the first row as the vector\n  angle: function angle(arr, arg) {\n    return Math.acos(jStat.dot(arr, arg) / (jStat.norm(arr) * jStat.norm(arg)));\n  },\n\n  // augment one matrix by another\n  // Note: this function returns a matrix, not a jStat object\n  aug: function aug(a, b) {\n    var newarr = [];\n    for (var i = 0; i < a.length; i++) {\n      newarr.push(a[i].slice());\n    }\n    for (var i = 0; i < newarr.length; i++) {\n      push.apply(newarr[i], b[i]);\n    }\n    return newarr;\n  },\n\n  // The inv() function calculates the inverse of a matrix\n  // Create the inverse by augmenting the matrix by the identity matrix of the\n  // appropriate size, and then use G-J elimination on the augmented matrix.\n  inv: function inv(a) {\n    var rows = a.length;\n    var cols = a[0].length;\n    var b = jStat.identity(rows, cols);\n    var c = jStat.gauss_jordan(a, b);\n    var result = [];\n    var i = 0;\n    var j;\n\n    //We need to copy the inverse portion to a new matrix to rid G-J artifacts\n    for (; i < rows; i++) {\n      result[i] = [];\n      for (j = cols; j < c[0].length; j++)\n        result[i][j - cols] = c[i][j];\n    }\n    return result;\n  },\n\n  // calculate the determinant of a matrix\n  det: function det(a) {\n    var alen = a.length,\n    alend = alen * 2,\n    vals = new Array(alend),\n    rowshift = alen - 1,\n    colshift = alend - 1,\n    mrow = rowshift - alen + 1,\n    mcol = colshift,\n    i = 0,\n    result = 0,\n    j;\n    // check for special 2x2 case\n    if (alen === 2) {\n      return a[0][0] * a[1][1] - a[0][1] * a[1][0];\n    }\n    for (; i < alend; i++) {\n      vals[i] = 1;\n    }\n    for (var i = 0; i < alen; i++) {\n      for (j = 0; j < alen; j++) {\n        vals[(mrow < 0) ? mrow + alen : mrow ] *= a[i][j];\n        vals[(mcol < alen) ? mcol + alen : mcol ] *= a[i][j];\n        mrow++;\n        mcol--;\n      }\n      mrow = --rowshift - alen + 1;\n      mcol = --colshift;\n    }\n    for (var i = 0; i < alen; i++) {\n      result += vals[i];\n    }\n    for (; i < alend; i++) {\n      result -= vals[i];\n    }\n    return result;\n  },\n\n  gauss_elimination: function gauss_elimination(a, b) {\n    var i = 0,\n    j = 0,\n    n = a.length,\n    m = a[0].length,\n    factor = 1,\n    sum = 0,\n    x = [],\n    maug, pivot, temp, k;\n    a = jStat.aug(a, b);\n    maug = a[0].length;\n    for(var i = 0; i < n; i++) {\n      pivot = a[i][i];\n      j = i;\n      for (k = i + 1; k < m; k++) {\n        if (pivot < Math.abs(a[k][i])) {\n          pivot = a[k][i];\n          j = k;\n        }\n      }\n      if (j != i) {\n        for(k = 0; k < maug; k++) {\n          temp = a[i][k];\n          a[i][k] = a[j][k];\n          a[j][k] = temp;\n        }\n      }\n      for (j = i + 1; j < n; j++) {\n        factor = a[j][i] / a[i][i];\n        for(k = i; k < maug; k++) {\n          a[j][k] = a[j][k] - factor * a[i][k];\n        }\n      }\n    }\n    for (var i = n - 1; i >= 0; i--) {\n      sum = 0;\n      for (j = i + 1; j<= n - 1; j++) {\n        sum = sum + x[j] * a[i][j];\n      }\n      x[i] =(a[i][maug - 1] - sum) / a[i][i];\n    }\n    return x;\n  },\n\n  gauss_jordan: function gauss_jordan(a, b) {\n    var m = jStat.aug(a, b),\n    h = m.length,\n    w = m[0].length;\n    var c = 0;\n    // find max pivot\n    for (var y = 0; y < h; y++) {\n      var maxrow = y;\n      for (var y2 = y+1; y2 < h; y2++) {\n        if (Math.abs(m[y2][y]) > Math.abs(m[maxrow][y]))\n          maxrow = y2;\n      }\n      var tmp = m[y];\n      m[y] = m[maxrow];\n      m[maxrow] = tmp\n      for (var y2 = y+1; y2 < h; y2++) {\n        c = m[y2][y] / m[y][y];\n        for (var x = y; x < w; x++) {\n          m[y2][x] -= m[y][x] * c;\n        }\n      }\n    }\n    // backsubstitute\n    for (var y = h-1; y >= 0; y--) {\n      c = m[y][y];\n      for (var y2 = 0; y2 < y; y2++) {\n        for (var x = w-1; x > y-1; x--) {\n          m[y2][x] -= m[y][x] * m[y2][y] / c;\n        }\n      }\n      m[y][y] /= c;\n      for (var x = h; x < w; x++) {\n        m[y][x] /= c;\n      }\n    }\n    return m;\n  },\n\n  // solve equation\n  // Ax=b\n  // A is upper triangular matrix\n  // A=[[1,2,3],[0,4,5],[0,6,7]]\n  // b=[1,2,3]\n  // triaUpSolve(A,b) // -> [2.666,0.1666,1.666]\n  // if you use matrix style\n  // A=[[1,2,3],[0,4,5],[0,6,7]]\n  // b=[[1],[2],[3]]\n  // will return [[2.666],[0.1666],[1.666]]\n  triaUpSolve: function triaUpSolve(A, b) {\n    var size = A[0].length;\n    var x = jStat.zeros(1, size)[0];\n    var parts;\n    var matrix_mode = false;\n\n    if (b[0].length != undefined) {\n      b = b.map(function(i){ return i[0] });\n      matrix_mode = true;\n    }\n\n    jStat.arange(size - 1, -1, -1).forEach(function(i) {\n      parts = jStat.arange(i + 1, size).map(function(j) {\n        return x[j] * A[i][j];\n      });\n      x[i] = (b[i] - jStat.sum(parts)) / A[i][i];\n    });\n\n    if (matrix_mode)\n      return x.map(function(i){ return [i] });\n    return x;\n  },\n\n  triaLowSolve: function triaLowSolve(A, b) {\n    // like to triaUpSolve but A is lower triangular matrix\n    var size = A[0].length;\n    var x = jStat.zeros(1, size)[0];\n    var parts;\n\n    var matrix_mode=false;\n    if (b[0].length != undefined) {\n      b = b.map(function(i){ return i[0] });\n      matrix_mode = true;\n    }\n\n    jStat.arange(size).forEach(function(i) {\n      parts = jStat.arange(i).map(function(j) {\n        return A[i][j] * x[j];\n      });\n      x[i] = (b[i] - jStat.sum(parts)) / A[i][i];\n    })\n\n    if (matrix_mode)\n      return x.map(function(i){ return [i] });\n    return x;\n  },\n\n\n  // A -> [L,U]\n  // A=LU\n  // L is lower triangular matrix\n  // U is upper triangular matrix\n  lu: function lu(A) {\n    var size = A.length;\n    //var L=jStat.diagonal(jStat.ones(1,size)[0]);\n    var L = jStat.identity(size);\n    var R = jStat.zeros(A.length, A[0].length);\n    var parts;\n    jStat.arange(size).forEach(function(t) {\n      R[0][t] = A[0][t];\n    });\n    jStat.arange(1, size).forEach(function(l) {\n      jStat.arange(l).forEach(function(i) {\n        parts = jStat.arange(i).map(function(jj) {\n          return L[l][jj] * R[jj][i];\n        });\n        L[l][i] = (A[l][i] - jStat.sum(parts)) / R[i][i];\n      });\n      jStat.arange(l, size).forEach(function(j) {\n        parts = jStat.arange(l).map(function(jj) {\n          return L[l][jj] * R[jj][j];\n        });\n        R[l][j] = A[i][j] - jStat.sum(parts);\n      });\n    });\n    return [L, R];\n  },\n\n  // A -> T\n  // A=TT'\n  // T is lower triangular matrix\n  cholesky: function cholesky(A) {\n    var size = A.length;\n    var T = jStat.zeros(A.length, A[0].length);\n    var parts;\n    jStat.arange(size).forEach(function(i) {\n      parts = jStat.arange(i).map(function(t) {\n        return Math.pow(T[i][t],2);\n      });\n      T[i][i] = Math.sqrt(A[i][i] - jStat.sum(parts));\n      jStat.arange(i + 1, size).forEach(function(j) {\n        parts = jStat.arange(i).map(function(t) {\n          return T[i][t] * T[j][t];\n        });\n        T[j][i] = (A[i][j] - jStat.sum(parts)) / T[i][i];\n      });\n    });\n    return T;\n  },\n\n\n  gauss_jacobi: function gauss_jacobi(a, b, x, r) {\n    var i = 0;\n    var j = 0;\n    var n = a.length;\n    var l = [];\n    var u = [];\n    var d = [];\n    var xv, c, h, xk;\n    for (; i < n; i++) {\n      l[i] = [];\n      u[i] = [];\n      d[i] = [];\n      for (j = 0; j < n; j++) {\n        if (i > j) {\n          l[i][j] = a[i][j];\n          u[i][j] = d[i][j] = 0;\n        } else if (i < j) {\n          u[i][j] = a[i][j];\n          l[i][j] = d[i][j] = 0;\n        } else {\n          d[i][j] = a[i][j];\n          l[i][j] = u[i][j] = 0;\n        }\n      }\n    }\n    h = jStat.multiply(jStat.multiply(jStat.inv(d), jStat.add(l, u)), -1);\n    c = jStat.multiply(jStat.inv(d), b);\n    xv = x;\n    xk = jStat.add(jStat.multiply(h, x), c);\n    i = 2;\n    while (Math.abs(jStat.norm(jStat.subtract(xk,xv))) > r) {\n      xv = xk;\n      xk = jStat.add(jStat.multiply(h, xv), c);\n      i++;\n    }\n    return xk;\n  },\n\n  gauss_seidel: function gauss_seidel(a, b, x, r) {\n    var i = 0;\n    var n = a.length;\n    var l = [];\n    var u = [];\n    var d = [];\n    var j, xv, c, h, xk;\n    for (; i < n; i++) {\n      l[i] = [];\n      u[i] = [];\n      d[i] = [];\n      for (j = 0; j < n; j++) {\n        if (i > j) {\n          l[i][j] = a[i][j];\n          u[i][j] = d[i][j] = 0;\n        } else if (i < j) {\n          u[i][j] = a[i][j];\n          l[i][j] = d[i][j] = 0;\n        } else {\n          d[i][j] = a[i][j];\n          l[i][j] = u[i][j] = 0;\n        }\n      }\n    }\n    h = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d, l)), u), -1);\n    c = jStat.multiply(jStat.inv(jStat.add(d, l)), b);\n    xv = x;\n    xk = jStat.add(jStat.multiply(h, x), c);\n    i = 2;\n    while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {\n      xv = xk;\n      xk = jStat.add(jStat.multiply(h, xv), c);\n      i = i + 1;\n    }\n    return xk;\n  },\n\n  SOR: function SOR(a, b, x, r, w) {\n    var i = 0;\n    var n = a.length;\n    var l = [];\n    var u = [];\n    var d = [];\n    var j, xv, c, h, xk;\n    for (; i < n; i++) {\n      l[i] = [];\n      u[i] = [];\n      d[i] = [];\n      for (j = 0; j < n; j++) {\n        if (i > j) {\n          l[i][j] = a[i][j];\n          u[i][j] = d[i][j] = 0;\n        } else if (i < j) {\n          u[i][j] = a[i][j];\n          l[i][j] = d[i][j] = 0;\n        } else {\n          d[i][j] = a[i][j];\n          l[i][j] = u[i][j] = 0;\n        }\n      }\n    }\n    h = jStat.multiply(jStat.inv(jStat.add(d, jStat.multiply(l, w))),\n                       jStat.subtract(jStat.multiply(d, 1 - w),\n                                      jStat.multiply(u, w)));\n    c = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d,\n        jStat.multiply(l, w))), b), w);\n    xv = x;\n    xk = jStat.add(jStat.multiply(h, x), c);\n    i = 2;\n    while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {\n      xv = xk;\n      xk = jStat.add(jStat.multiply(h, xv), c);\n      i++;\n    }\n    return xk;\n  },\n\n  householder: function householder(a) {\n    var m = a.length;\n    var n = a[0].length;\n    var i = 0;\n    var w = [];\n    var p = [];\n    var alpha, r, k, j, factor;\n    for (; i < m - 1; i++) {\n      alpha = 0;\n      for (j = i + 1; j < n; j++)\n      alpha += (a[j][i] * a[j][i]);\n      factor = (a[i + 1][i] > 0) ? -1 : 1;\n      alpha = factor * Math.sqrt(alpha);\n      r = Math.sqrt((((alpha * alpha) - a[i + 1][i] * alpha) / 2));\n      w = jStat.zeros(m, 1);\n      w[i + 1][0] = (a[i + 1][i] - alpha) / (2 * r);\n      for (k = i + 2; k < m; k++) w[k][0] = a[k][i] / (2 * r);\n      p = jStat.subtract(jStat.identity(m, n),\n          jStat.multiply(jStat.multiply(w, jStat.transpose(w)), 2));\n      a = jStat.multiply(p, jStat.multiply(a, p));\n    }\n    return a;\n  },\n\n  // A -> [Q,R]\n  // Q is orthogonal matrix\n  // R is upper triangular\n  QR: (function() {\n    // x -> Q\n    // find a orthogonal matrix Q st.\n    // Qx=y\n    // y is [||x||,0,0,...]\n\n    // quick ref\n    var sum   = jStat.sum;\n    var range = jStat.arange;\n\n    function get_Q1(x) {\n      var size = x.length;\n      var norm_x = jStat.norm(x, 2);\n      var e1 = jStat.zeros(1, size)[0];\n      e1[0] = 1;\n      var u = jStat.add(jStat.multiply(jStat.multiply(e1, norm_x), -1), x);\n      var norm_u = jStat.norm(u, 2);\n      var v = jStat.divide(u, norm_u);\n      var Q = jStat.subtract(jStat.identity(size),\n                             jStat.multiply(jStat.outer(v, v), 2));\n      return Q;\n    }\n\n    function qr(A) {\n      var size = A[0].length;\n      var QList = [];\n      jStat.arange(size).forEach(function(i) {\n        var x = jStat.slice(A, { row: { start: i }, col: i });\n        var Q = get_Q1(x);\n        var Qn = jStat.identity(A.length);\n        Qn = jStat.sliceAssign(Qn, { row: { start: i }, col: { start: i }}, Q);\n        A = jStat.multiply(Qn, A);\n        QList.push(Qn);\n      });\n      var Q = QList.reduce(function(x, y){ return jStat.multiply(x,y) });\n      var R = A;\n      return [Q, R];\n    }\n\n    function qr2(x) {\n      // quick impletation\n      // https://www.stat.wisc.edu/~larget/math496/qr.html\n\n      var n = x.length;\n      var p = x[0].length;\n\n      x = jStat.copy(x);\n      r = jStat.zeros(p, p);\n\n      var i,j,k;\n      for(j = 0; j < p; j++){\n        r[j][j] = Math.sqrt(sum(range(n).map(function(i){\n          return x[i][j] * x[i][j];\n        })));\n        for(i = 0; i < n; i++){\n          x[i][j] = x[i][j] / r[j][j];\n        }\n        for(k = j+1; k < p; k++){\n          r[j][k] = sum(range(n).map(function(i){\n            return x[i][j] * x[i][k];\n          }));\n          for(i = 0; i < n; i++){\n            x[i][k] = x[i][k] - x[i][j]*r[j][k];\n          }\n        }\n      }\n      return [x, r];\n    }\n\n    return qr2;\n  }()),\n\n  lstsq: (function(A, b) {\n    // solve least squard problem for Ax=b as QR decomposition way if b is\n    // [[b1],[b2],[b3]] form will return [[x1],[x2],[x3]] array form solution\n    // else b is [b1,b2,b3] form will return [x1,x2,x3] array form solution\n    function R_I(A) {\n      A = jStat.copy(A);\n      var size = A.length;\n      var I = jStat.identity(size);\n      jStat.arange(size - 1, -1, -1).forEach(function(i) {\n        jStat.sliceAssign(\n            I, { row: i }, jStat.divide(jStat.slice(I, { row: i }), A[i][i]));\n        jStat.sliceAssign(\n            A, { row: i }, jStat.divide(jStat.slice(A, { row: i }), A[i][i]));\n        jStat.arange(i).forEach(function(j) {\n          var c = jStat.multiply(A[j][i], -1);\n          var Aj = jStat.slice(A, { row: j });\n          var cAi = jStat.multiply(jStat.slice(A, { row: i }), c);\n          jStat.sliceAssign(A, { row: j }, jStat.add(Aj, cAi));\n          var Ij = jStat.slice(I, { row: j });\n          var cIi = jStat.multiply(jStat.slice(I, { row: i }), c);\n          jStat.sliceAssign(I, { row: j }, jStat.add(Ij, cIi));\n        })\n      });\n      return I;\n    }\n\n    function qr_solve(A, b){\n      var array_mode = false;\n      if (b[0].length === undefined) {\n        // [c1,c2,c3] mode\n        b = b.map(function(x){ return [x] });\n        array_mode = true;\n      }\n      var QR = jStat.QR(A);\n      var Q = QR[0];\n      var R = QR[1];\n      var attrs = A[0].length;\n      var Q1 = jStat.slice(Q,{col:{end:attrs}});\n      var R1 = jStat.slice(R,{row:{end:attrs}});\n      var RI = R_I(R1);\n\t  var Q2 = jStat.transpose(Q1);\n\n\t  if(Q2[0].length === undefined){\n\t\t  Q2 = [Q2]; // The confusing jStat.multifly implementation threat nature process again.\n\t  }\n\n      var x = jStat.multiply(jStat.multiply(RI, Q2), b);\n\n\t  if(x.length === undefined){\n\t\t  x = [[x]]; // The confusing jStat.multifly implementation threat nature process again.\n\t  }\n\n\n      if (array_mode)\n        return x.map(function(i){ return i[0] });\n      return x;\n    }\n\n    return qr_solve;\n  }()),\n\n  jacobi: function jacobi(a) {\n    var condition = 1;\n    var count = 0;\n    var n = a.length;\n    var e = jStat.identity(n, n);\n    var ev = [];\n    var b, i, j, p, q, maxim, theta, s;\n    // condition === 1 only if tolerance is not reached\n    while (condition === 1) {\n      count++;\n      maxim = a[0][1];\n      p = 0;\n      q = 1;\n      for (var i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          if (i != j) {\n            if (maxim < Math.abs(a[i][j])) {\n              maxim = Math.abs(a[i][j]);\n              p = i;\n              q = j;\n            }\n          }\n        }\n      }\n      if (a[p][p] === a[q][q])\n        theta = (a[p][q] > 0) ? Math.PI / 4 : -Math.PI / 4;\n      else\n        theta = Math.atan(2 * a[p][q] / (a[p][p] - a[q][q])) / 2;\n      s = jStat.identity(n, n);\n      s[p][p] = Math.cos(theta);\n      s[p][q] = -Math.sin(theta);\n      s[q][p] = Math.sin(theta);\n      s[q][q] = Math.cos(theta);\n      // eigen vector matrix\n      e = jStat.multiply(e, s);\n      b = jStat.multiply(jStat.multiply(jStat.inv(s), a), s);\n      a = b;\n      condition = 0;\n      for (var i = 1; i < n; i++) {\n        for (j = 1; j < n; j++) {\n          if (i != j && Math.abs(a[i][j]) > 0.001) {\n            condition = 1;\n          }\n        }\n      }\n    }\n    for (var i = 0; i < n; i++) ev.push(a[i][i]);\n    //returns both the eigenvalue and eigenmatrix\n    return [e, ev];\n  },\n\n  rungekutta: function rungekutta(f, h, p, t_j, u_j, order) {\n    var k1, k2, u_j1, k3, k4;\n    if (order === 2) {\n      while (t_j <= p) {\n        k1 = h * f(t_j, u_j);\n        k2 = h * f(t_j + h, u_j + k1);\n        u_j1 = u_j + (k1 + k2) / 2;\n        u_j = u_j1;\n        t_j = t_j + h;\n      }\n    }\n    if (order === 4) {\n      while (t_j <= p) {\n        k1 = h * f(t_j, u_j);\n        k2 = h * f(t_j + h / 2, u_j + k1 / 2);\n        k3 = h * f(t_j + h / 2, u_j + k2 / 2);\n        k4 = h * f(t_j +h, u_j + k3);\n        u_j1 = u_j + (k1 + 2 * k2 + 2 * k3 + k4) / 6;\n        u_j = u_j1;\n        t_j = t_j + h;\n      }\n    }\n    return u_j;\n  },\n\n  romberg: function romberg(f, a, b, order) {\n    var i = 0;\n    var h = (b - a) / 2;\n    var x = [];\n    var h1 = [];\n    var g = [];\n    var m, a1, j, k, I, d;\n    while (i < order / 2) {\n      I = f(a);\n      for (j = a, k = 0; j <= b; j = j + h, k++) x[k] = j;\n      m = x.length;\n      for (j = 1; j < m - 1; j++) {\n        I += (((j % 2) !== 0) ? 4 : 2) * f(x[j]);\n      }\n      I = (h / 3) * (I + f(b));\n      g[i] = I;\n      h /= 2;\n      i++;\n    }\n    a1 = g.length;\n    m = 1;\n    while (a1 !== 1) {\n      for (j = 0; j < a1 - 1; j++)\n      h1[j] = ((Math.pow(4, m)) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);\n      a1 = h1.length;\n      g = h1;\n      h1 = [];\n      m++;\n    }\n    return g;\n  },\n\n  richardson: function richardson(X, f, x, h) {\n    function pos(X, x) {\n      var i = 0;\n      var n = X.length;\n      var p;\n      for (; i < n; i++)\n        if (X[i] === x) p = i;\n      return p;\n    }\n    var n = X.length,\n    h_min = Math.abs(x - X[pos(X, x) + 1]),\n    i = 0,\n    g = [],\n    h1 = [],\n    y1, y2, m, a, j;\n    while (h >= h_min) {\n      y1 = pos(X, x + h);\n      y2 = pos(X, x);\n      g[i] = (f[y1] - 2 * f[y2] + f[2 * y2 - y1]) / (h * h);\n      h /= 2;\n      i++;\n    }\n    a = g.length;\n    m = 1;\n    while (a != 1) {\n      for (j = 0; j < a - 1; j++)\n      h1[j] = ((Math.pow(4, m)) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);\n      a = h1.length;\n      g = h1;\n      h1 = [];\n      m++;\n    }\n    return g;\n  },\n\n  simpson: function simpson(f, a, b, n) {\n    var h = (b - a) / n;\n    var I = f(a);\n    var x = [];\n    var j = a;\n    var k = 0;\n    var i = 1;\n    var m;\n    for (; j <= b; j = j + h, k++)\n      x[k] = j;\n    m = x.length;\n    for (; i < m - 1; i++) {\n      I += ((i % 2 !== 0) ? 4 : 2) * f(x[i]);\n    }\n    return (h / 3) * (I + f(b));\n  },\n\n  hermite: function hermite(X, F, dF, value) {\n    var n = X.length;\n    var p = 0;\n    var i = 0;\n    var l = [];\n    var dl = [];\n    var A = [];\n    var B = [];\n    var j;\n    for (; i < n; i++) {\n      l[i] = 1;\n      for (j = 0; j < n; j++) {\n        if (i != j) l[i] *= (value - X[j]) / (X[i] - X[j]);\n      }\n      dl[i] = 0;\n      for (j = 0; j < n; j++) {\n        if (i != j) dl[i] += 1 / (X [i] - X[j]);\n      }\n      A[i] = (1 - 2 * (value - X[i]) * dl[i]) * (l[i] * l[i]);\n      B[i] = (value - X[i]) * (l[i] * l[i]);\n      p += (A[i] * F[i] + B[i] * dF[i]);\n    }\n    return p;\n  },\n\n  lagrange: function lagrange(X, F, value) {\n    var p = 0;\n    var i = 0;\n    var j, l;\n    var n = X.length;\n    for (; i < n; i++) {\n      l = F[i];\n      for (j = 0; j < n; j++) {\n        // calculating the lagrange polynomial L_i\n        if (i != j) l *= (value - X[j]) / (X[i] - X[j]);\n      }\n      // adding the lagrange polynomials found above\n      p += l;\n    }\n    return p;\n  },\n\n  cubic_spline: function cubic_spline(X, F, value) {\n    var n = X.length;\n    var i = 0, j;\n    var A = [];\n    var B = [];\n    var alpha = [];\n    var c = [];\n    var h = [];\n    var b = [];\n    var d = [];\n    for (; i < n - 1; i++)\n      h[i] = X[i + 1] - X[i];\n    alpha[0] = 0;\n    for (var i = 1; i < n - 1; i++) {\n      alpha[i] = (3 / h[i]) * (F[i + 1] - F[i]) -\n          (3 / h[i-1]) * (F[i] - F[i-1]);\n    }\n    for (var i = 1; i < n - 1; i++) {\n      A[i] = [];\n      B[i] = [];\n      A[i][i-1] = h[i-1];\n      A[i][i] = 2 * (h[i - 1] + h[i]);\n      A[i][i+1] = h[i];\n      B[i][0] = alpha[i];\n    }\n    c = jStat.multiply(jStat.inv(A), B);\n    for (j = 0; j < n - 1; j++) {\n      b[j] = (F[j + 1] - F[j]) / h[j] - h[j] * (c[j + 1][0] + 2 * c[j][0]) / 3;\n      d[j] = (c[j + 1][0] - c[j][0]) / (3 * h[j]);\n    }\n    for (j = 0; j < n; j++) {\n      if (X[j] > value) break;\n    }\n    j -= 1;\n    return F[j] + (value - X[j]) * b[j] + jStat.sq(value-X[j]) *\n        c[j] + (value - X[j]) * jStat.sq(value - X[j]) * d[j];\n  },\n\n  gauss_quadrature: function gauss_quadrature() {\n    throw new Error('gauss_quadrature not yet implemented');\n  },\n\n  PCA: function PCA(X) {\n    var m = X.length;\n    var n = X[0].length;\n    var flag = false;\n    var i = 0;\n    var j, temp1;\n    var u = [];\n    var D = [];\n    var result = [];\n    var temp2 = [];\n    var Y = [];\n    var Bt = [];\n    var B = [];\n    var C = [];\n    var V = [];\n    var Vt = [];\n    for (var i = 0; i < m; i++) {\n      u[i] = jStat.sum(X[i]) / n;\n    }\n    for (var i = 0; i < n; i++) {\n      B[i] = [];\n      for(j = 0; j < m; j++) {\n        B[i][j] = X[j][i] - u[j];\n      }\n    }\n    B = jStat.transpose(B);\n    for (var i = 0; i < m; i++) {\n      C[i] = [];\n      for (j = 0; j < m; j++) {\n        C[i][j] = (jStat.dot([B[i]], [B[j]])) / (n - 1);\n      }\n    }\n    result = jStat.jacobi(C);\n    V = result[0];\n    D = result[1];\n    Vt = jStat.transpose(V);\n    for (var i = 0; i < D.length; i++) {\n      for (j = i; j < D.length; j++) {\n        if(D[i] < D[j])  {\n          temp1 = D[i];\n          D[i] = D[j];\n          D[j] = temp1;\n          temp2 = Vt[i];\n          Vt[i] = Vt[j];\n          Vt[j] = temp2;\n        }\n      }\n    }\n    Bt = jStat.transpose(B);\n    for (var i = 0; i < m; i++) {\n      Y[i] = [];\n      for (j = 0; j < Bt.length; j++) {\n        Y[i][j] = jStat.dot([Vt[i]], [Bt[j]]);\n      }\n    }\n    return [X, D, Vt, Y];\n  }\n});\n\n// extend jStat.fn with methods that require one argument\n(function(funcs) {\n  for (var i = 0; i < funcs.length; i++) (function(passfunc) {\n    jStat.fn[passfunc] = function(arg, func) {\n      var tmpthis = this;\n      // check for callback\n      if (func) {\n        setTimeout(function() {\n          func.call(tmpthis, jStat.fn[passfunc].call(tmpthis, arg));\n        }, 15);\n        return this;\n      }\n      if (typeof jStat[passfunc](this, arg) === 'number')\n        return jStat[passfunc](this, arg);\n      else\n        return jStat(jStat[passfunc](this, arg));\n    };\n  }(funcs[i]));\n}('add divide multiply subtract dot pow exp log abs norm angle'.split(' ')));\n\n}(jStat, Math));\n(function(jStat, Math) {\n\nvar slice = [].slice;\nvar isNumber = jStat.utils.isNumber;\nvar isArray = jStat.utils.isArray;\n\n// flag==true denotes use of sample standard deviation\n// Z Statistics\njStat.extend({\n  // 2 different parameter lists:\n  // (value, mean, sd)\n  // (value, array, flag)\n  zscore: function zscore() {\n    var args = slice.call(arguments);\n    if (isNumber(args[1])) {\n      return (args[0] - args[1]) / args[2];\n    }\n    return (args[0] - jStat.mean(args[1])) / jStat.stdev(args[1], args[2]);\n  },\n\n  // 3 different paramter lists:\n  // (value, mean, sd, sides)\n  // (zscore, sides)\n  // (value, array, sides, flag)\n  ztest: function ztest() {\n    var args = slice.call(arguments);\n    var z;\n    if (isArray(args[1])) {\n      // (value, array, sides, flag)\n      z = jStat.zscore(args[0],args[1],args[3]);\n      return (args[2] === 1) ?\n        (jStat.normal.cdf(-Math.abs(z), 0, 1)) :\n        (jStat.normal.cdf(-Math.abs(z), 0, 1)*2);\n    } else {\n      if (args.length > 2) {\n        // (value, mean, sd, sides)\n        z = jStat.zscore(args[0],args[1],args[2]);\n        return (args[3] === 1) ?\n          (jStat.normal.cdf(-Math.abs(z),0,1)) :\n          (jStat.normal.cdf(-Math.abs(z),0,1)* 2);\n      } else {\n        // (zscore, sides)\n        z = args[0];\n        return (args[1] === 1) ?\n          (jStat.normal.cdf(-Math.abs(z),0,1)) :\n          (jStat.normal.cdf(-Math.abs(z),0,1)*2);\n      }\n    }\n  }\n});\n\njStat.extend(jStat.fn, {\n  zscore: function zscore(value, flag) {\n    return (value - this.mean()) / this.stdev(flag);\n  },\n\n  ztest: function ztest(value, sides, flag) {\n    var zscore = Math.abs(this.zscore(value, flag));\n    return (sides === 1) ?\n      (jStat.normal.cdf(-zscore, 0, 1)) :\n      (jStat.normal.cdf(-zscore, 0, 1) * 2);\n  }\n});\n\n// T Statistics\njStat.extend({\n  // 2 parameter lists\n  // (value, mean, sd, n)\n  // (value, array)\n  tscore: function tscore() {\n    var args = slice.call(arguments);\n    return (args.length === 4) ?\n      ((args[0] - args[1]) / (args[2] / Math.sqrt(args[3]))) :\n      ((args[0] - jStat.mean(args[1])) /\n       (jStat.stdev(args[1], true) / Math.sqrt(args[1].length)));\n  },\n\n  // 3 different paramter lists:\n  // (value, mean, sd, n, sides)\n  // (tscore, n, sides)\n  // (value, array, sides)\n  ttest: function ttest() {\n    var args = slice.call(arguments);\n    var tscore;\n    if (args.length === 5) {\n      tscore = Math.abs(jStat.tscore(args[0], args[1], args[2], args[3]));\n      return (args[4] === 1) ?\n        (jStat.studentt.cdf(-tscore, args[3]-1)) :\n        (jStat.studentt.cdf(-tscore, args[3]-1)*2);\n    }\n    if (isNumber(args[1])) {\n      tscore = Math.abs(args[0])\n      return (args[2] == 1) ?\n        (jStat.studentt.cdf(-tscore, args[1]-1)) :\n        (jStat.studentt.cdf(-tscore, args[1]-1) * 2);\n    }\n    tscore = Math.abs(jStat.tscore(args[0], args[1]))\n    return (args[2] == 1) ?\n      (jStat.studentt.cdf(-tscore, args[1].length-1)) :\n      (jStat.studentt.cdf(-tscore, args[1].length-1) * 2);\n  }\n});\n\njStat.extend(jStat.fn, {\n  tscore: function tscore(value) {\n    return (value - this.mean()) / (this.stdev(true) / Math.sqrt(this.cols()));\n  },\n\n  ttest: function ttest(value, sides) {\n    return (sides === 1) ?\n      (1 - jStat.studentt.cdf(Math.abs(this.tscore(value)), this.cols()-1)) :\n      (jStat.studentt.cdf(-Math.abs(this.tscore(value)), this.cols()-1)*2);\n  }\n});\n\n// F Statistics\njStat.extend({\n  // Paramter list is as follows:\n  // (array1, array2, array3, ...)\n  // or it is an array of arrays\n  // array of arrays conversion\n  anovafscore: function anovafscore() {\n    var args = slice.call(arguments),\n    expVar, sample, sampMean, sampSampMean, tmpargs, unexpVar, i, j;\n    if (args.length === 1) {\n      tmpargs = new Array(args[0].length);\n      for (var i = 0; i < args[0].length; i++) {\n        tmpargs[i] = args[0][i];\n      }\n      args = tmpargs;\n    }\n    // 2 sample case\n    if (args.length === 2) {\n      return jStat.variance(args[0]) / jStat.variance(args[1]);\n    }\n    // Builds sample array\n    sample = new Array();\n    for (var i = 0; i < args.length; i++) {\n      sample = sample.concat(args[i]);\n    }\n    sampMean = jStat.mean(sample);\n    // Computes the explained variance\n    expVar = 0;\n    for (var i = 0; i < args.length; i++) {\n      expVar = expVar + args[i].length * Math.pow(jStat.mean(args[i]) - sampMean, 2);\n    }\n    expVar /= (args.length - 1);\n    // Computes unexplained variance\n    unexpVar = 0;\n    for (var i = 0; i < args.length; i++) {\n      sampSampMean = jStat.mean(args[i]);\n      for (j = 0; j < args[i].length; j++) {\n        unexpVar += Math.pow(args[i][j] - sampSampMean, 2);\n      }\n    }\n    unexpVar /= (sample.length - args.length);\n    return expVar / unexpVar;\n  },\n\n  // 2 different paramter setups\n  // (array1, array2, array3, ...)\n  // (anovafscore, df1, df2)\n  anovaftest: function anovaftest() {\n    var args = slice.call(arguments),\n    df1, df2, n, i;\n    if (isNumber(args[0])) {\n      return 1 - jStat.centralF.cdf(args[0], args[1], args[2]);\n    }\n    anovafscore = jStat.anovafscore(args);\n    df1 = args.length - 1;\n    n = 0;\n    for (var i = 0; i < args.length; i++) {\n      n = n + args[i].length;\n    }\n    df2 = n - df1 - 1;\n    return 1 - jStat.centralF.cdf(anovafscore, df1, df2);\n  },\n\n  ftest: function ftest(fscore, df1, df2) {\n    return 1 - jStat.centralF.cdf(fscore, df1, df2);\n  }\n});\n\njStat.extend(jStat.fn, {\n  anovafscore: function anovafscore() {\n    return jStat.anovafscore(this.toArray());\n  },\n\n  anovaftes: function anovaftes() {\n    var n = 0;\n    var i;\n    for (var i = 0; i < this.length; i++) {\n      n = n + this[i].length;\n    }\n    return jStat.ftest(this.anovafscore(), this.length - 1, n - this.length);\n  }\n});\n\n// Tukey's range test\njStat.extend({\n  // 2 parameter lists\n  // (mean1, mean2, n1, n2, sd)\n  // (array1, array2, sd)\n  qscore: function qscore() {\n    var args = slice.call(arguments);\n    var mean1, mean2, n1, n2, sd;\n    if (isNumber(args[0])) {\n        mean1 = args[0];\n        mean2 = args[1];\n        n1 = args[2];\n        n2 = args[3];\n        sd = args[4];\n    } else {\n        mean1 = jStat.mean(args[0]);\n        mean2 = jStat.mean(args[1]);\n        n1 = args[0].length;\n        n2 = args[1].length;\n        sd = args[2];\n    }\n    return Math.abs(mean1 - mean2) / (sd * Math.sqrt((1 / n1 + 1 / n2) / 2));\n  },\n\n  // 3 different parameter lists:\n  // (qscore, n, k)\n  // (mean1, mean2, n1, n2, sd, n, k)\n  // (array1, array2, sd, n, k)\n  qtest: function qtest() {\n    var args = slice.call(arguments);\n\n    var qscore;\n    if (args.length === 3) {\n      qscore = args[0];\n      args = args.slice(1);\n    } else if (args.length === 7) {\n      qscore = jStat.qscore(args[0], args[1], args[2], args[3], args[4]);\n      args = args.slice(5);\n    } else {\n      qscore = jStat.qscore(args[0], args[1], args[2]);\n      args = args.slice(3);\n    }\n\n    var n = args[0];\n    var k = args[1];\n\n    return 1 - jStat.tukey.cdf(qscore, k, n - k);\n  },\n\n  tukeyhsd: function tukeyhsd(arrays) {\n    var sd = jStat.pooledstdev(arrays);\n    var means = arrays.map(function (arr) {return jStat.mean(arr);});\n    var n = arrays.reduce(function (n, arr) {return n + arr.length;}, 0);\n\n    var results = [];\n    for (var i = 0; i < arrays.length; ++i) {\n        for (var j = i + 1; j < arrays.length; ++j) {\n            var p = jStat.qtest(means[i], means[j], arrays[i].length, arrays[j].length, sd, n, arrays.length);\n            results.push([[i, j], p]);\n        }\n    }\n\n    return results;\n  }\n});\n\n// Error Bounds\njStat.extend({\n  // 2 different parameter setups\n  // (value, alpha, sd, n)\n  // (value, alpha, array)\n  normalci: function normalci() {\n    var args = slice.call(arguments),\n    ans = new Array(2),\n    change;\n    if (args.length === 4) {\n      change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) *\n                        args[2] / Math.sqrt(args[3]));\n    } else {\n      change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) *\n                        jStat.stdev(args[2]) / Math.sqrt(args[2].length));\n    }\n    ans[0] = args[0] - change;\n    ans[1] = args[0] + change;\n    return ans;\n  },\n\n  // 2 different parameter setups\n  // (value, alpha, sd, n)\n  // (value, alpha, array)\n  tci: function tci() {\n    var args = slice.call(arguments),\n    ans = new Array(2),\n    change;\n    if (args.length === 4) {\n      change = Math.abs(jStat.studentt.inv(args[1] / 2, args[3] - 1) *\n                        args[2] / Math.sqrt(args[3]));\n    } else {\n      change = Math.abs(jStat.studentt.inv(args[1] / 2, args[2].length - 1) *\n                        jStat.stdev(args[2], true) / Math.sqrt(args[2].length));\n    }\n    ans[0] = args[0] - change;\n    ans[1] = args[0] + change;\n    return ans;\n  },\n\n  significant: function significant(pvalue, alpha) {\n    return pvalue < alpha;\n  }\n});\n\njStat.extend(jStat.fn, {\n  normalci: function normalci(value, alpha) {\n    return jStat.normalci(value, alpha, this.toArray());\n  },\n\n  tci: function tci(value, alpha) {\n    return jStat.tci(value, alpha, this.toArray());\n  }\n});\n\n// internal method for calculating the z-score for a difference of proportions test\nfunction differenceOfProportions(p1, n1, p2, n2) {\n  if (p1 > 1 || p2 > 1 || p1 <= 0 || p2 <= 0) {\n    throw new Error(\"Proportions should be greater than 0 and less than 1\")\n  }\n  var pooled = (p1 * n1 + p2 * n2) / (n1 + n2);\n  var se = Math.sqrt(pooled * (1 - pooled) * ((1/n1) + (1/n2)));\n  return (p1 - p2) / se;\n}\n\n// Difference of Proportions\njStat.extend(jStat.fn, {\n  oneSidedDifferenceOfProportions: function oneSidedDifferenceOfProportions(p1, n1, p2, n2) {\n    var z = differenceOfProportions(p1, n1, p2, n2);\n    return jStat.ztest(z, 1);\n  },\n\n  twoSidedDifferenceOfProportions: function twoSidedDifferenceOfProportions(p1, n1, p2, n2) {\n    var z = differenceOfProportions(p1, n1, p2, n2);\n    return jStat.ztest(z, 2);\n  }\n});\n\n}(jStat, Math));\njStat.models = (function(){\n\n  function sub_regress(endog, exog) {\n    return ols(endog, exog);\n  }\n\n  function sub_regress(exog) {\n    var var_count = exog[0].length;\n    var modelList = jStat.arange(var_count).map(function(endog_index) {\n      var exog_index =\n          jStat.arange(var_count).filter(function(i){return i!==endog_index});\n      return ols(jStat.col(exog, endog_index).map(function(x){ return x[0] }),\n                 jStat.col(exog, exog_index))\n    });\n    return modelList;\n  }\n\n  // do OLS model regress\n  // exog have include const columns ,it will not generate it .In fact, exog is\n  // \"design matrix\" look at\n  //https://en.wikipedia.org/wiki/Design_matrix\n  function ols(endog, exog) {\n    var nobs = endog.length;\n    var df_model = exog[0].length - 1;\n    var df_resid = nobs-df_model - 1;\n    var coef = jStat.lstsq(exog, endog);\n    var predict =\n        jStat.multiply(exog, coef.map(function(x) { return [x] }))\n            .map(function(p) { return p[0] });\n    var resid = jStat.subtract(endog, predict);\n    var ybar = jStat.mean(endog);\n    // constant cause problem\n    // var SST = jStat.sum(endog.map(function(y) {\n    //   return Math.pow(y-ybar,2);\n    // }));\n    var SSE = jStat.sum(predict.map(function(f) {\n      return Math.pow(f - ybar, 2);\n    }));\n    var SSR = jStat.sum(endog.map(function(y, i) {\n      return Math.pow(y - predict[i], 2);\n    }));\n    var SST = SSE + SSR;\n    var R2 = (SSE / SST);\n    return {\n        exog:exog,\n        endog:endog,\n        nobs:nobs,\n        df_model:df_model,\n        df_resid:df_resid,\n        coef:coef,\n        predict:predict,\n        resid:resid,\n        ybar:ybar,\n        SST:SST,\n        SSE:SSE,\n        SSR:SSR,\n        R2:R2\n    };\n  }\n\n  // H0: b_I=0\n  // H1: b_I!=0\n  function t_test(model) {\n    var subModelList = sub_regress(model.exog);\n    //var sigmaHat=jStat.stdev(model.resid);\n    var sigmaHat = Math.sqrt(model.SSR / (model.df_resid));\n    var seBetaHat = subModelList.map(function(mod) {\n      var SST = mod.SST;\n      var R2 = mod.R2;\n      return sigmaHat / Math.sqrt(SST * (1 - R2));\n    });\n    var tStatistic = model.coef.map(function(coef, i) {\n      return (coef - 0) / seBetaHat[i];\n    });\n    var pValue = tStatistic.map(function(t) {\n      var leftppf = jStat.studentt.cdf(t, model.df_resid);\n      return (leftppf > 0.5 ? 1 - leftppf : leftppf) * 2;\n    });\n    var c = jStat.studentt.inv(0.975, model.df_resid);\n    var interval95 = model.coef.map(function(coef, i) {\n      var d = c * seBetaHat[i];\n      return [coef - d, coef + d];\n    })\n    return {\n        se: seBetaHat,\n        t: tStatistic,\n        p: pValue,\n        sigmaHat: sigmaHat,\n        interval95: interval95\n    };\n  }\n\n  function F_test(model) {\n    var F_statistic =\n        (model.R2 / model.df_model) / ((1 - model.R2) / model.df_resid);\n    var fcdf = function(x, n1, n2) {\n      return jStat.beta.cdf(x / (n2 / n1 + x), n1 / 2, n2 / 2)\n    }\n    var pvalue = 1 - fcdf(F_statistic, model.df_model, model.df_resid);\n    return { F_statistic: F_statistic, pvalue: pvalue };\n  }\n\n  function ols_wrap(endog, exog) {\n    var model = ols(endog,exog);\n    var ttest = t_test(model);\n    var ftest = F_test(model);\n    // Provide the Wherry / Ezekiel / McNemar / Cohen Adjusted R^2\n    // Which matches the 'adjusted R^2' provided by R's lm package\n    var adjust_R2 =\n        1 - (1 - model.R2) * ((model.nobs - 1) / (model.df_resid));\n    model.t = ttest;\n    model.f = ftest;\n    model.adjust_R2 = adjust_R2;\n    return model;\n  }\n\n  return { ols: ols_wrap };\n})();\n  // Make it compatible with previous version.\n  jStat.jStat = jStat;\n\n  return jStat;\n});\n","var utils = require('./utils');\nvar error = require('./error');\n\nexports.UNIQUE = function () {\n  var result = [];\n  for (var i = 0; i < arguments.length; ++i) {\n    var hasElement = false;\n    var element    = arguments[i];\n\n    // Check if we've already seen this element.\n    for (var j = 0; j < result.length; ++j) {\n      hasElement = result[j] === element;\n      if (hasElement) { break; }\n    }\n\n    // If we did not find it, add it to the result.\n    if (!hasElement) {\n      result.push(element);\n    }\n  }\n  return result;\n};\n\nexports.FLATTEN = utils.flatten;\n\nexports.ARGS2ARRAY = function () {\n  return Array.prototype.slice.call(arguments, 0);\n};\n\nexports.REFERENCE = function (context, reference) {\n  if (!arguments.length) {\n    return error.error;\n  }\n  try {\n    var path = reference.split('.');\n    var result = context;\n    for (var i = 0; i < path.length; ++i) {\n      var step = path[i];\n      if (step[step.length - 1] === ']') {\n        var opening = step.indexOf('[');\n        var index = step.substring(opening + 1, step.length - 1);\n        result = result[step.substring(0, opening)][index];\n      } else {\n        result = result[step];\n      }\n    }\n    return result;\n  } catch (error) {}\n};\n\nexports.JOIN = function (array, separator) {\n  return array.join(separator);\n};\n\nexports.NUMBERS = function () {\n  var possibleNumbers = utils.flatten(arguments);\n  return possibleNumbers.filter(function (el) {\n    return typeof el === 'number';\n  });\n};","var error = require('./error');\nvar jStat = require('jStat').jStat;\nvar text = require('./text');\nvar utils = require('./utils');\nvar bessel = require('bessel');\n\nfunction isValidBinaryNumber(number) {\n  return (/^[01]{1,10}$/).test(number);\n}\n\nexports.BESSELI = function(x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n\n  return bessel.besseli(x, n);\n};\n\nexports.BESSELJ = function(x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n\n  return bessel.besselj(x, n);\n};\n\nexports.BESSELK = function(x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n\n  return bessel.besselk(x, n);\n};\n\nexports.BESSELY = function(x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n\n  return bessel.bessely(x, n);\n};\n\nexports.BIN2DEC = function(number) {\n  // Return error if number is not binary or contains more than 10 characters (10 digits)\n  if (!isValidBinaryNumber(number)) {\n    return error.num;\n  }\n\n  // Convert binary number to decimal\n  var result = parseInt(number, 2);\n\n  // Handle negative numbers\n  var stringified = number.toString();\n  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\n    return parseInt(stringified.substring(1), 2) - 512;\n  } else {\n    return result;\n  }\n};\n\n\nexports.BIN2HEX = function(number, places) {\n  // Return error if number is not binary or contains more than 10 characters (10 digits)\n  if (!isValidBinaryNumber(number)) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character hexadecimal number if number is negative\n  var stringified = number.toString();\n  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\n    return (1099511627264 + parseInt(stringified.substring(1), 2)).toString(16);\n  }\n\n  // Convert binary number to hexadecimal\n  var result = parseInt(number, 2).toString(16);\n\n  // Return hexadecimal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.BIN2OCT = function(number, places) {\n  // Return error if number is not binary or contains more than 10 characters (10 digits)\n  if (!isValidBinaryNumber(number)) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character octal number if number is negative\n  var stringified = number.toString();\n  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\n    return (1073741312 + parseInt(stringified.substring(1), 2)).toString(8);\n  }\n\n  // Convert binary number to octal\n  var result = parseInt(number, 2).toString(8);\n\n  // Return octal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.BITAND = function(number1, number2) {\n  // Return error if either number is a non-numeric value\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return error if either number is less than 0\n  if (number1 < 0 || number2 < 0) {\n    return error.num;\n  }\n\n  // Return error if either number is a non-integer\n  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\n    return error.num;\n  }\n\n  // Return error if either number is greater than (2^48)-1\n  if (number1 > 281474976710655 || number2 > 281474976710655) {\n    return error.num;\n  }\n\n  // Return bitwise AND of two numbers\n  return number1 & number2;\n};\n\nexports.BITLSHIFT = function(number, shift) {\n  number = utils.parseNumber(number);\n  shift = utils.parseNumber(shift);\n  if (utils.anyIsError(number, shift)) {\n    return error.value;\n  }\n\n  // Return error if number is less than 0\n  if (number < 0) {\n    return error.num;\n  }\n\n  // Return error if number is a non-integer\n  if (Math.floor(number) !== number) {\n    return error.num;\n  }\n\n  // Return error if number is greater than (2^48)-1\n  if (number > 281474976710655) {\n    return error.num;\n  }\n\n  // Return error if the absolute value of shift is greater than 53\n  if (Math.abs(shift) > 53) {\n    return error.num;\n  }\n\n  // Return number shifted by shift bits to the left or to the right if shift is negative\n  return (shift >= 0) ? number << shift : number >> -shift;\n};\n\nexports.BITOR = function(number1, number2) {\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return error if either number is less than 0\n  if (number1 < 0 || number2 < 0) {\n    return error.num;\n  }\n\n  // Return error if either number is a non-integer\n  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\n    return error.num;\n  }\n\n  // Return error if either number is greater than (2^48)-1\n  if (number1 > 281474976710655 || number2 > 281474976710655) {\n    return error.num;\n  }\n\n  // Return bitwise OR of two numbers\n  return number1 | number2;\n};\n\nexports.BITRSHIFT = function(number, shift) {\n  number = utils.parseNumber(number);\n  shift = utils.parseNumber(shift);\n  if (utils.anyIsError(number, shift)) {\n    return error.value;\n  }\n\n  // Return error if number is less than 0\n  if (number < 0) {\n    return error.num;\n  }\n\n  // Return error if number is a non-integer\n  if (Math.floor(number) !== number) {\n    return error.num;\n  }\n\n  // Return error if number is greater than (2^48)-1\n  if (number > 281474976710655) {\n    return error.num;\n  }\n\n  // Return error if the absolute value of shift is greater than 53\n  if (Math.abs(shift) > 53) {\n    return error.num;\n  }\n\n  // Return number shifted by shift bits to the right or to the left if shift is negative\n  return (shift >= 0) ? number >> shift : number << -shift;\n};\n\nexports.BITXOR = function(number1, number2) {\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return error if either number is less than 0\n  if (number1 < 0 || number2 < 0) {\n    return error.num;\n  }\n\n  // Return error if either number is a non-integer\n  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\n    return error.num;\n  }\n\n  // Return error if either number is greater than (2^48)-1\n  if (number1 > 281474976710655 || number2 > 281474976710655) {\n    return error.num;\n  }\n\n  // Return bitwise XOR of two numbers\n  return number1 ^ number2;\n};\n\nexports.COMPLEX = function(real, imaginary, suffix) {\n  real = utils.parseNumber(real);\n  imaginary = utils.parseNumber(imaginary);\n  if (utils.anyIsError(real, imaginary)) {\n    return real;\n  }\n\n  // Set suffix\n  suffix = (suffix === undefined) ? 'i' : suffix;\n\n  // Return error if suffix is neither \"i\" nor \"j\"\n  if (suffix !== 'i' && suffix !== 'j') {\n    return error.value;\n  }\n\n  // Return complex number\n  if (real === 0 && imaginary === 0) {\n    return 0;\n  } else if (real === 0) {\n    return (imaginary === 1) ? suffix : imaginary.toString() + suffix;\n  } else if (imaginary === 0) {\n    return real.toString();\n  } else {\n    var sign = (imaginary > 0) ? '+' : '';\n    return real.toString() + sign + ((imaginary === 1) ? suffix : imaginary.toString() + suffix);\n  }\n};\n\nexports.CONVERT = function(number, from_unit, to_unit) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // List of units supported by CONVERT and units defined by the International System of Units\n  // [Name, Symbol, Alternate symbols, Quantity, ISU, CONVERT, Conversion ratio]\n  var units = [\n    [\"a.u. of action\", \"?\", null, \"action\", false, false, 1.05457168181818e-34],\n    [\"a.u. of charge\", \"e\", null, \"electric_charge\", false, false, 1.60217653141414e-19],\n    [\"a.u. of energy\", \"Eh\", null, \"energy\", false, false, 4.35974417757576e-18],\n    [\"a.u. of length\", \"a?\", null, \"length\", false, false, 5.29177210818182e-11],\n    [\"a.u. of mass\", \"m?\", null, \"mass\", false, false, 9.10938261616162e-31],\n    [\"a.u. of time\", \"?/Eh\", null, \"time\", false, false, 2.41888432650516e-17],\n    [\"admiralty knot\", \"admkn\", null, \"speed\", false, true, 0.514773333],\n    [\"ampere\", \"A\", null, \"electric_current\", true, false, 1],\n    [\"ampere per meter\", \"A/m\", null, \"magnetic_field_intensity\", true, false, 1],\n    [\"ångström\", \"Å\", [\"ang\"], \"length\", false, true, 1e-10],\n    [\"are\", \"ar\", null, \"area\", false, true, 100],\n    [\"astronomical unit\", \"ua\", null, \"length\", false, false, 1.49597870691667e-11],\n    [\"bar\", \"bar\", null, \"pressure\", false, false, 100000],\n    [\"barn\", \"b\", null, \"area\", false, false, 1e-28],\n    [\"becquerel\", \"Bq\", null, \"radioactivity\", true, false, 1],\n    [\"bit\", \"bit\", [\"b\"], \"information\", false, true, 1],\n    [\"btu\", \"BTU\", [\"btu\"], \"energy\", false, true, 1055.05585262],\n    [\"byte\", \"byte\", null, \"information\", false, true, 8],\n    [\"candela\", \"cd\", null, \"luminous_intensity\", true, false, 1],\n    [\"candela per square metre\", \"cd/m?\", null, \"luminance\", true, false, 1],\n    [\"coulomb\", \"C\", null, \"electric_charge\", true, false, 1],\n    [\"cubic ångström\", \"ang3\", [\"ang^3\"], \"volume\", false, true, 1e-30],\n    [\"cubic foot\", \"ft3\", [\"ft^3\"], \"volume\", false, true, 0.028316846592],\n    [\"cubic inch\", \"in3\", [\"in^3\"], \"volume\", false, true, 0.000016387064],\n    [\"cubic light-year\", \"ly3\", [\"ly^3\"], \"volume\", false, true, 8.46786664623715e-47],\n    [\"cubic metre\", \"m?\", null, \"volume\", true, true, 1],\n    [\"cubic mile\", \"mi3\", [\"mi^3\"], \"volume\", false, true, 4168181825.44058],\n    [\"cubic nautical mile\", \"Nmi3\", [\"Nmi^3\"], \"volume\", false, true, 6352182208],\n    [\"cubic Pica\", \"Pica3\", [\"Picapt3\", \"Pica^3\", \"Picapt^3\"], \"volume\", false, true, 7.58660370370369e-8],\n    [\"cubic yard\", \"yd3\", [\"yd^3\"], \"volume\", false, true, 0.764554857984],\n    [\"cup\", \"cup\", null, \"volume\", false, true, 0.0002365882365],\n    [\"dalton\", \"Da\", [\"u\"], \"mass\", false, false, 1.66053886282828e-27],\n    [\"day\", \"d\", [\"day\"], \"time\", false, true, 86400],\n    [\"degree\", \"°\", null, \"angle\", false, false, 0.0174532925199433],\n    [\"degrees Rankine\", \"Rank\", null, \"temperature\", false, true, 0.555555555555556],\n    [\"dyne\", \"dyn\", [\"dy\"], \"force\", false, true, 0.00001],\n    [\"electronvolt\", \"eV\", [\"ev\"], \"energy\", false, true, 1.60217656514141],\n    [\"ell\", \"ell\", null, \"length\", false, true, 1.143],\n    [\"erg\", \"erg\", [\"e\"], \"energy\", false, true, 1e-7],\n    [\"farad\", \"F\", null, \"electric_capacitance\", true, false, 1],\n    [\"fluid ounce\", \"oz\", null, \"volume\", false, true, 0.0000295735295625],\n    [\"foot\", \"ft\", null, \"length\", false, true, 0.3048],\n    [\"foot-pound\", \"flb\", null, \"energy\", false, true, 1.3558179483314],\n    [\"gal\", \"Gal\", null, \"acceleration\", false, false, 0.01],\n    [\"gallon\", \"gal\", null, \"volume\", false, true, 0.003785411784],\n    [\"gauss\", \"G\", [\"ga\"], \"magnetic_flux_density\", false, true, 1],\n    [\"grain\", \"grain\", null, \"mass\", false, true, 0.0000647989],\n    [\"gram\", \"g\", null, \"mass\", false, true, 0.001],\n    [\"gray\", \"Gy\", null, \"absorbed_dose\", true, false, 1],\n    [\"gross registered ton\", \"GRT\", [\"regton\"], \"volume\", false, true, 2.8316846592],\n    [\"hectare\", \"ha\", null, \"area\", false, true, 10000],\n    [\"henry\", \"H\", null, \"inductance\", true, false, 1],\n    [\"hertz\", \"Hz\", null, \"frequency\", true, false, 1],\n    [\"horsepower\", \"HP\", [\"h\"], \"power\", false, true, 745.69987158227],\n    [\"horsepower-hour\", \"HPh\", [\"hh\", \"hph\"], \"energy\", false, true, 2684519.538],\n    [\"hour\", \"h\", [\"hr\"], \"time\", false, true, 3600],\n    [\"imperial gallon (U.K.)\", \"uk_gal\", null, \"volume\", false, true, 0.00454609],\n    [\"imperial hundredweight\", \"lcwt\", [\"uk_cwt\", \"hweight\"], \"mass\", false, true, 50.802345],\n    [\"imperial quart (U.K)\", \"uk_qt\", null, \"volume\", false, true, 0.0011365225],\n    [\"imperial ton\", \"brton\", [\"uk_ton\", \"LTON\"], \"mass\", false, true, 1016.046909],\n    [\"inch\", \"in\", null, \"length\", false, true, 0.0254],\n    [\"international acre\", \"uk_acre\", null, \"area\", false, true, 4046.8564224],\n    [\"IT calorie\", \"cal\", null, \"energy\", false, true, 4.1868],\n    [\"joule\", \"J\", null, \"energy\", true, true, 1],\n    [\"katal\", \"kat\", null, \"catalytic_activity\", true, false, 1],\n    [\"kelvin\", \"K\", [\"kel\"], \"temperature\", true, true, 1],\n    [\"kilogram\", \"kg\", null, \"mass\", true, true, 1],\n    [\"knot\", \"kn\", null, \"speed\", false, true, 0.514444444444444],\n    [\"light-year\", \"ly\", null, \"length\", false, true, 9460730472580800],\n    [\"litre\", \"L\", [\"l\", \"lt\"], \"volume\", false, true, 0.001],\n    [\"lumen\", \"lm\", null, \"luminous_flux\", true, false, 1],\n    [\"lux\", \"lx\", null, \"illuminance\", true, false, 1],\n    [\"maxwell\", \"Mx\", null, \"magnetic_flux\", false, false, 1e-18],\n    [\"measurement ton\", \"MTON\", null, \"volume\", false, true, 1.13267386368],\n    [\"meter per hour\", \"m/h\", [\"m/hr\"], \"speed\", false, true, 0.00027777777777778],\n    [\"meter per second\", \"m/s\", [\"m/sec\"], \"speed\", true, true, 1],\n    [\"meter per second squared\", \"m?s??\", null, \"acceleration\", true, false, 1],\n    [\"parsec\", \"pc\", [\"parsec\"], \"length\", false, true, 30856775814671900],\n    [\"meter squared per second\", \"m?/s\", null, \"kinematic_viscosity\", true, false, 1],\n    [\"metre\", \"m\", null, \"length\", true, true, 1],\n    [\"miles per hour\", \"mph\", null, \"speed\", false, true, 0.44704],\n    [\"millimetre of mercury\", \"mmHg\", null, \"pressure\", false, false, 133.322],\n    [\"minute\", \"?\", null, \"angle\", false, false, 0.000290888208665722],\n    [\"minute\", \"min\", [\"mn\"], \"time\", false, true, 60],\n    [\"modern teaspoon\", \"tspm\", null, \"volume\", false, true, 0.000005],\n    [\"mole\", \"mol\", null, \"amount_of_substance\", true, false, 1],\n    [\"morgen\", \"Morgen\", null, \"area\", false, true, 2500],\n    [\"n.u. of action\", \"?\", null, \"action\", false, false, 1.05457168181818e-34],\n    [\"n.u. of mass\", \"m?\", null, \"mass\", false, false, 9.10938261616162e-31],\n    [\"n.u. of speed\", \"c?\", null, \"speed\", false, false, 299792458],\n    [\"n.u. of time\", \"?/(me?c??)\", null, \"time\", false, false, 1.28808866778687e-21],\n    [\"nautical mile\", \"M\", [\"Nmi\"], \"length\", false, true, 1852],\n    [\"newton\", \"N\", null, \"force\", true, true, 1],\n    [\"œrsted\", \"Oe \", null, \"magnetic_field_intensity\", false, false, 79.5774715459477],\n    [\"ohm\", \"Ω\", null, \"electric_resistance\", true, false, 1],\n    [\"ounce mass\", \"ozm\", null, \"mass\", false, true, 0.028349523125],\n    [\"pascal\", \"Pa\", null, \"pressure\", true, false, 1],\n    [\"pascal second\", \"Pa?s\", null, \"dynamic_viscosity\", true, false, 1],\n    [\"pferdestärke\", \"PS\", null, \"power\", false, true, 735.49875],\n    [\"phot\", \"ph\", null, \"illuminance\", false, false, 0.0001],\n    [\"pica (1/6 inch)\", \"pica\", null, \"length\", false, true, 0.00035277777777778],\n    [\"pica (1/72 inch)\", \"Pica\", [\"Picapt\"], \"length\", false, true, 0.00423333333333333],\n    [\"poise\", \"P\", null, \"dynamic_viscosity\", false, false, 0.1],\n    [\"pond\", \"pond\", null, \"force\", false, true, 0.00980665],\n    [\"pound force\", \"lbf\", null, \"force\", false, true, 4.4482216152605],\n    [\"pound mass\", \"lbm\", null, \"mass\", false, true, 0.45359237],\n    [\"quart\", \"qt\", null, \"volume\", false, true, 0.000946352946],\n    [\"radian\", \"rad\", null, \"angle\", true, false, 1],\n    [\"second\", \"?\", null, \"angle\", false, false, 0.00000484813681109536],\n    [\"second\", \"s\", [\"sec\"], \"time\", true, true, 1],\n    [\"short hundredweight\", \"cwt\", [\"shweight\"], \"mass\", false, true, 45.359237],\n    [\"siemens\", \"S\", null, \"electrical_conductance\", true, false, 1],\n    [\"sievert\", \"Sv\", null, \"equivalent_dose\", true, false, 1],\n    [\"slug\", \"sg\", null, \"mass\", false, true, 14.59390294],\n    [\"square ångström\", \"ang2\", [\"ang^2\"], \"area\", false, true, 1e-20],\n    [\"square foot\", \"ft2\", [\"ft^2\"], \"area\", false, true, 0.09290304],\n    [\"square inch\", \"in2\", [\"in^2\"], \"area\", false, true, 0.00064516],\n    [\"square light-year\", \"ly2\", [\"ly^2\"], \"area\", false, true, 8.95054210748189e+31],\n    [\"square meter\", \"m?\", null, \"area\", true, true, 1],\n    [\"square mile\", \"mi2\", [\"mi^2\"], \"area\", false, true, 2589988.110336],\n    [\"square nautical mile\", \"Nmi2\", [\"Nmi^2\"], \"area\", false, true, 3429904],\n    [\"square Pica\", \"Pica2\", [\"Picapt2\", \"Pica^2\", \"Picapt^2\"], \"area\", false, true, 0.00001792111111111],\n    [\"square yard\", \"yd2\", [\"yd^2\"], \"area\", false, true, 0.83612736],\n    [\"statute mile\", \"mi\", null, \"length\", false, true, 1609.344],\n    [\"steradian\", \"sr\", null, \"solid_angle\", true, false, 1],\n    [\"stilb\", \"sb\", null, \"luminance\", false, false, 0.0001],\n    [\"stokes\", \"St\", null, \"kinematic_viscosity\", false, false, 0.0001],\n    [\"stone\", \"stone\", null, \"mass\", false, true, 6.35029318],\n    [\"tablespoon\", \"tbs\", null, \"volume\", false, true, 0.0000147868],\n    [\"teaspoon\", \"tsp\", null, \"volume\", false, true, 0.00000492892],\n    [\"tesla\", \"T\", null, \"magnetic_flux_density\", true, true, 1],\n    [\"thermodynamic calorie\", \"c\", null, \"energy\", false, true, 4.184],\n    [\"ton\", \"ton\", null, \"mass\", false, true, 907.18474],\n    [\"tonne\", \"t\", null, \"mass\", false, false, 1000],\n    [\"U.K. pint\", \"uk_pt\", null, \"volume\", false, true, 0.00056826125],\n    [\"U.S. bushel\", \"bushel\", null, \"volume\", false, true, 0.03523907],\n    [\"U.S. oil barrel\", \"barrel\", null, \"volume\", false, true, 0.158987295],\n    [\"U.S. pint\", \"pt\", [\"us_pt\"], \"volume\", false, true, 0.000473176473],\n    [\"U.S. survey mile\", \"survey_mi\", null, \"length\", false, true, 1609.347219],\n    [\"U.S. survey/statute acre\", \"us_acre\", null, \"area\", false, true, 4046.87261],\n    [\"volt\", \"V\", null, \"voltage\", true, false, 1],\n    [\"watt\", \"W\", null, \"power\", true, true, 1],\n    [\"watt-hour\", \"Wh\", [\"wh\"], \"energy\", false, true, 3600],\n    [\"weber\", \"Wb\", null, \"magnetic_flux\", true, false, 1],\n    [\"yard\", \"yd\", null, \"length\", false, true, 0.9144],\n    [\"year\", \"yr\", null, \"time\", false, true, 31557600]\n  ];\n\n  // Binary prefixes\n  // [Name, Prefix power of 2 value, Previx value, Abbreviation, Derived from]\n  var binary_prefixes = {\n    Yi: [\"yobi\", 80, 1208925819614629174706176, \"Yi\", \"yotta\"],\n    Zi: [\"zebi\", 70, 1180591620717411303424, \"Zi\", \"zetta\"],\n    Ei: [\"exbi\", 60, 1152921504606846976, \"Ei\", \"exa\"],\n    Pi: [\"pebi\", 50, 1125899906842624, \"Pi\", \"peta\"],\n    Ti: [\"tebi\", 40, 1099511627776, \"Ti\", \"tera\"],\n    Gi: [\"gibi\", 30, 1073741824, \"Gi\", \"giga\"],\n    Mi: [\"mebi\", 20, 1048576, \"Mi\", \"mega\"],\n    ki: [\"kibi\", 10, 1024, \"ki\", \"kilo\"]\n  };\n\n  // Unit prefixes\n  // [Name, Multiplier, Abbreviation]\n  var unit_prefixes = {\n    Y: [\"yotta\", 1e+24, \"Y\"],\n    Z: [\"zetta\", 1e+21, \"Z\"],\n    E: [\"exa\", 1e+18, \"E\"],\n    P: [\"peta\", 1e+15, \"P\"],\n    T: [\"tera\", 1e+12, \"T\"],\n    G: [\"giga\", 1e+09, \"G\"],\n    M: [\"mega\", 1e+06, \"M\"],\n    k: [\"kilo\", 1e+03, \"k\"],\n    h: [\"hecto\", 1e+02, \"h\"],\n    e: [\"dekao\", 1e+01, \"e\"],\n    d: [\"deci\", 1e-01, \"d\"],\n    c: [\"centi\", 1e-02, \"c\"],\n    m: [\"milli\", 1e-03, \"m\"],\n    u: [\"micro\", 1e-06, \"u\"],\n    n: [\"nano\", 1e-09, \"n\"],\n    p: [\"pico\", 1e-12, \"p\"],\n    f: [\"femto\", 1e-15, \"f\"],\n    a: [\"atto\", 1e-18, \"a\"],\n    z: [\"zepto\", 1e-21, \"z\"],\n    y: [\"yocto\", 1e-24, \"y\"]\n  };\n\n  // Initialize units and multipliers\n  var from = null;\n  var to = null;\n  var base_from_unit = from_unit;\n  var base_to_unit = to_unit;\n  var from_multiplier = 1;\n  var to_multiplier = 1;\n  var alt;\n\n  // Lookup from and to units\n  for (var i = 0; i < units.length; i++) {\n    alt = (units[i][2] === null) ? [] : units[i][2];\n    if (units[i][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {\n      from = units[i];\n    }\n    if (units[i][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {\n      to = units[i];\n    }\n  }\n\n  // Lookup from prefix\n  if (from === null) {\n    var from_binary_prefix = binary_prefixes[from_unit.substring(0, 2)];\n    var from_unit_prefix = unit_prefixes[from_unit.substring(0, 1)];\n\n    // Handle dekao unit prefix (only unit prefix with two characters)\n    if (from_unit.substring(0, 2) === 'da') {\n      from_unit_prefix = [\"dekao\", 1e+01, \"da\"];\n    }\n\n    // Handle binary prefixes first (so that 'Yi' is processed before 'Y')\n    if (from_binary_prefix) {\n      from_multiplier = from_binary_prefix[2];\n      base_from_unit = from_unit.substring(2);\n    } else if (from_unit_prefix) {\n      from_multiplier = from_unit_prefix[1];\n      base_from_unit = from_unit.substring(from_unit_prefix[2].length);\n    }\n\n    // Lookup from unit\n    for (var j = 0; j < units.length; j++) {\n      alt = (units[j][2] === null) ? [] : units[j][2];\n      if (units[j][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {\n        from = units[j];\n      }\n    }\n  }\n\n  // Lookup to prefix\n  if (to === null) {\n    var to_binary_prefix = binary_prefixes[to_unit.substring(0, 2)];\n    var to_unit_prefix = unit_prefixes[to_unit.substring(0, 1)];\n\n    // Handle dekao unit prefix (only unit prefix with two characters)\n    if (to_unit.substring(0, 2) === 'da') {\n      to_unit_prefix = [\"dekao\", 1e+01, \"da\"];\n    }\n\n    // Handle binary prefixes first (so that 'Yi' is processed before 'Y')\n    if (to_binary_prefix) {\n      to_multiplier = to_binary_prefix[2];\n      base_to_unit = to_unit.substring(2);\n    } else if (to_unit_prefix) {\n      to_multiplier = to_unit_prefix[1];\n      base_to_unit = to_unit.substring(to_unit_prefix[2].length);\n    }\n\n    // Lookup to unit\n    for (var k = 0; k < units.length; k++) {\n      alt = (units[k][2] === null) ? [] : units[k][2];\n      if (units[k][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {\n        to = units[k];\n      }\n    }\n  }\n\n  // Return error if a unit does not exist\n  if (from === null || to === null) {\n    return error.na;\n  }\n\n  // Return error if units represent different quantities\n  if (from[3] !== to[3]) {\n    return error.na;\n  }\n\n  // Return converted number\n  return number * from[6] * from_multiplier / (to[6] * to_multiplier);\n};\n\nexports.DEC2BIN = function(number, places) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // Return error if number is not decimal, is lower than -512, or is greater than 511\n  if (!/^-?[0-9]{1,3}$/.test(number) || number < -512 || number > 511) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character binary number if number is negative\n  if (number < 0) {\n    return '1' + text.REPT('0', 9 - (512 + number).toString(2).length) + (512 + number).toString(2);\n  }\n\n  // Convert decimal number to binary\n  var result = parseInt(number, 10).toString(2);\n\n  // Return binary number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.DEC2HEX = function(number, places) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // Return error if number is not decimal, is lower than -549755813888, or is greater than 549755813887\n  if (!/^-?[0-9]{1,12}$/.test(number) || number < -549755813888 || number > 549755813887) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character hexadecimal number if number is negative\n  if (number < 0) {\n    return (1099511627776 + number).toString(16);\n  }\n\n  // Convert decimal number to hexadecimal\n  var result = parseInt(number, 10).toString(16);\n\n  // Return hexadecimal number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.DEC2OCT = function(number, places) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // Return error if number is not decimal, is lower than -549755813888, or is greater than 549755813887\n  if (!/^-?[0-9]{1,9}$/.test(number) || number < -536870912 || number > 536870911) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character octal number if number is negative\n  if (number < 0) {\n    return (1073741824 + number).toString(8);\n  }\n\n  // Convert decimal number to octal\n  var result = parseInt(number, 10).toString(8);\n\n  // Return octal number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.DELTA = function(number1, number2) {\n  // Set number2 to zero if undefined\n  number2 = (number2 === undefined) ? 0 : number2;\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return delta\n  return (number1 === number2) ? 1 : 0;\n};\n\n// TODO: why is upper_bound not used ? The excel documentation has no examples with upper_bound\nexports.ERF = function(lower_bound, upper_bound) {\n  // Set number2 to zero if undefined\n  upper_bound = (upper_bound === undefined) ? 0 : upper_bound;\n\n  lower_bound = utils.parseNumber(lower_bound);\n  upper_bound = utils.parseNumber(upper_bound);\n  if (utils.anyIsError(lower_bound, upper_bound)) {\n    return error.value;\n  }\n\n  return jStat.erf(lower_bound);\n};\n\n// TODO\nexports.ERF.PRECISE = function() {\n  throw new Error('ERF.PRECISE is not implemented');\n};\n\nexports.ERFC = function(x) {\n  // Return error if x is not a number\n  if (isNaN(x)) {\n    return error.value;\n  }\n\n  return jStat.erfc(x);\n};\n\n// TODO\nexports.ERFC.PRECISE = function() {\n  throw new Error('ERFC.PRECISE is not implemented');\n};\n\nexports.GESTEP = function(number, step) {\n  step = step || 0;\n  number = utils.parseNumber(number);\n  if (utils.anyIsError(step, number)) {\n    return number;\n  }\n\n  // Return delta\n  return (number >= step) ? 1 : 0;\n};\n\nexports.HEX2BIN = function(number, places) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Check if number is negative\n  var negative = (number.length === 10 && number.substring(0, 1).toLowerCase() === 'f') ? true : false;\n\n  // Convert hexadecimal number to decimal\n  var decimal = (negative) ? parseInt(number, 16) - 1099511627776 : parseInt(number, 16);\n\n  // Return error if number is lower than -512 or greater than 511\n  if (decimal < -512 || decimal > 511) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character binary number if number is negative\n  if (negative) {\n    return '1' + text.REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);\n  }\n\n  // Convert decimal number to binary\n  var result = decimal.toString(2);\n\n  // Return binary number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.HEX2DEC = function(number) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert hexadecimal number to decimal\n  var decimal = parseInt(number, 16);\n\n  // Return decimal number\n  return (decimal >= 549755813888) ? decimal - 1099511627776 : decimal;\n};\n\nexports.HEX2OCT = function(number, places) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert hexadecimal number to decimal\n  var decimal = parseInt(number, 16);\n\n  // Return error if number is positive and greater than 0x1fffffff (536870911)\n  if (decimal > 536870911 && decimal < 1098974756864) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character octal number if number is negative\n  if (decimal >= 1098974756864) {\n    return (decimal - 1098437885952).toString(8);\n  }\n\n  // Convert decimal number to octal\n  var result = decimal.toString(8);\n\n  // Return octal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.IMABS = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return absolute value of complex number\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n};\n\nexports.IMAGINARY = function(inumber) {\n  if (inumber === undefined || inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Return 0 if inumber is equal to 0\n  if (inumber === 0 || inumber === '0') {\n    return 0;\n  }\n\n  // Handle special cases\n  if (['i', 'j'].indexOf(inumber) >= 0) {\n    return 1;\n  }\n\n  // Normalize imaginary coefficient\n  inumber = inumber.replace('+i', '+1i').replace('-i', '-1i').replace('+j', '+1j').replace('-j', '-1j');\n\n  // Lookup sign\n  var plus = inumber.indexOf('+');\n  var minus = inumber.indexOf('-');\n  if (plus === 0) {\n    plus = inumber.indexOf('+', 1);\n  }\n\n  if (minus === 0) {\n    minus = inumber.indexOf('-', 1);\n  }\n\n  // Lookup imaginary unit\n  var last = inumber.substring(inumber.length - 1, inumber.length);\n  var unit = (last === 'i' || last === 'j');\n\n  if (plus >= 0 || minus >= 0) {\n    // Return error if imaginary unit is neither i nor j\n    if (!unit) {\n      return error.num;\n    }\n\n    // Return imaginary coefficient of complex number\n    if (plus >= 0) {\n      return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ?\n        error.num :\n        Number(inumber.substring(plus + 1, inumber.length - 1));\n    } else {\n      return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ?\n        error.num :\n        -Number(inumber.substring(minus + 1, inumber.length - 1));\n    }\n  } else {\n    if (unit) {\n      return (isNaN(inumber.substring(0, inumber.length - 1))) ? error.num : inumber.substring(0, inumber.length - 1);\n    } else {\n      return (isNaN(inumber)) ? error.num : 0;\n    }\n  }\n};\n\nexports.IMARGUMENT = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return error if inumber is equal to zero\n  if (x === 0 && y === 0) {\n    return error.div0;\n  }\n\n  // Return PI/2 if x is equal to zero and y is positive\n  if (x === 0 && y > 0) {\n    return Math.PI / 2;\n  }\n\n  // Return -PI/2 if x is equal to zero and y is negative\n  if (x === 0 && y < 0) {\n    return -Math.PI / 2;\n  }\n\n  // Return zero if x is negative and y is equal to zero\n  if (y === 0 && x > 0) {\n    return 0;\n  }\n\n  // Return zero if x is negative and y is equal to zero\n  if (y === 0 && x < 0) {\n    return -Math.PI;\n  }\n\n  // Return argument of complex number\n  if (x > 0) {\n    return Math.atan(y / x);\n  } else if (x < 0 && y >= 0) {\n    return Math.atan(y / x) + Math.PI;\n  } else {\n    return Math.atan(y / x) - Math.PI;\n  }\n};\n\nexports.IMCONJUGATE = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return conjugate of complex number\n  return (y !== 0) ? exports.COMPLEX(x, -y, unit) : inumber;\n};\n\nexports.IMCOS = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return cosine of complex number\n  return exports.COMPLEX(Math.cos(x) * (Math.exp(y) + Math.exp(-y)) / 2, -Math.sin(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);\n};\n\nexports.IMCOSH = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return hyperbolic cosine of complex number\n  return exports.COMPLEX(Math.cos(y) * (Math.exp(x) + Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) - Math.exp(-x)) / 2, unit);\n};\n\nexports.IMCOT = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return cotangent of complex number\n  return exports.IMDIV(exports.IMCOS(inumber), exports.IMSIN(inumber));\n};\n\nexports.IMDIV = function(inumber1, inumber2) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var a = exports.IMREAL(inumber1);\n  var b = exports.IMAGINARY(inumber1);\n  var c = exports.IMREAL(inumber2);\n  var d = exports.IMAGINARY(inumber2);\n\n  if (utils.anyIsError(a, b, c, d)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit1 = inumber1.substring(inumber1.length - 1);\n  var unit2 = inumber2.substring(inumber2.length - 1);\n  var unit = 'i';\n  if (unit1 === 'j') {\n    unit = 'j';\n  } else if (unit2 === 'j') {\n    unit = 'j';\n  }\n\n  // Return error if inumber2 is null\n  if (c === 0 && d === 0) {\n    return error.num;\n  }\n\n  // Return exponential of complex number\n  var den = c * c + d * d;\n  return exports.COMPLEX((a * c + b * d) / den, (b * c - a * d) / den, unit);\n};\n\nexports.IMEXP = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return exponential of complex number\n  var e = Math.exp(x);\n  return exports.COMPLEX(e * Math.cos(y), e * Math.sin(y), unit);\n};\n\nexports.IMLN = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return exponential of complex number\n  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)), Math.atan(y / x), unit);\n};\n\nexports.IMLOG10 = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return exponential of complex number\n  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(10), Math.atan(y / x) / Math.log(10), unit);\n};\n\nexports.IMLOG2 = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return exponential of complex number\n  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(2), Math.atan(y / x) / Math.log(2), unit);\n};\n\nexports.IMPOWER = function(inumber, number) {\n  number = utils.parseNumber(number);\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(number, x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Calculate power of modulus\n  var p = Math.pow(exports.IMABS(inumber), number);\n\n  // Calculate argument\n  var t = exports.IMARGUMENT(inumber);\n\n  // Return exponential of complex number\n  return exports.COMPLEX(p * Math.cos(number * t), p * Math.sin(number * t), unit);\n};\n\nexports.IMPRODUCT = function() {\n  // Initialize result\n  var result = arguments[0];\n\n  if (!arguments.length) {\n    return error.value;\n  }\n\n  // Loop on all numbers\n  for (var i = 1; i < arguments.length; i++) {\n    // Lookup coefficients of two complex numbers\n    var a = exports.IMREAL(result);\n    var b = exports.IMAGINARY(result);\n    var c = exports.IMREAL(arguments[i]);\n    var d = exports.IMAGINARY(arguments[i]);\n\n    if (utils.anyIsError(a, b, c, d)) {\n      return error.value;\n    }\n\n    // Complute product of two complex numbers\n    result = exports.COMPLEX(a * c - b * d, a * d + b * c);\n  }\n\n  // Return product of complex numbers\n  return result;\n};\n\nexports.IMREAL = function(inumber) {\n  if (inumber === undefined || inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Return 0 if inumber is equal to 0\n  if (inumber === 0 || inumber === '0') {\n    return 0;\n  }\n\n  // Handle special cases\n  if (['i', '+i', '1i', '+1i', '-i', '-1i', 'j', '+j', '1j', '+1j', '-j', '-1j'].indexOf(inumber) >= 0) {\n    return 0;\n  }\n\n  // Lookup sign\n  var plus = inumber.indexOf('+');\n  var minus = inumber.indexOf('-');\n  if (plus === 0) {\n    plus = inumber.indexOf('+', 1);\n  }\n  if (minus === 0) {\n    minus = inumber.indexOf('-', 1);\n  }\n\n  // Lookup imaginary unit\n  var last = inumber.substring(inumber.length - 1, inumber.length);\n  var unit = (last === 'i' || last === 'j');\n\n  if (plus >= 0 || minus >= 0) {\n    // Return error if imaginary unit is neither i nor j\n    if (!unit) {\n      return error.num;\n    }\n\n    // Return real coefficient of complex number\n    if (plus >= 0) {\n      return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ?\n        error.num :\n        Number(inumber.substring(0, plus));\n    } else {\n      return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ?\n        error.num :\n        Number(inumber.substring(0, minus));\n    }\n  } else {\n    if (unit) {\n      return (isNaN(inumber.substring(0, inumber.length - 1))) ? error.num : 0;\n    } else {\n      return (isNaN(inumber)) ? error.num : inumber;\n    }\n  }\n};\n\nexports.IMSEC = function(inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return secant of complex number\n  return exports.IMDIV('1', exports.IMCOS(inumber));\n};\n\nexports.IMSECH = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return hyperbolic secant of complex number\n  return exports.IMDIV('1', exports.IMCOSH(inumber));\n};\n\nexports.IMSIN = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return sine of complex number\n  return exports.COMPLEX(Math.sin(x) * (Math.exp(y) + Math.exp(-y)) / 2, Math.cos(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);\n};\n\nexports.IMSINH = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return hyperbolic sine of complex number\n  return exports.COMPLEX(Math.cos(y) * (Math.exp(x) - Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) + Math.exp(-x)) / 2, unit);\n};\n\nexports.IMSQRT = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Calculate power of modulus\n  var s = Math.sqrt(exports.IMABS(inumber));\n\n  // Calculate argument\n  var t = exports.IMARGUMENT(inumber);\n\n  // Return exponential of complex number\n  return exports.COMPLEX(s * Math.cos(t / 2), s * Math.sin(t / 2), unit);\n};\n\nexports.IMCSC = function (inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.num;\n  }\n\n  // Return cosecant of complex number\n  return exports.IMDIV('1', exports.IMSIN(inumber));\n};\n\nexports.IMCSCH = function (inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.num;\n  }\n\n  // Return hyperbolic cosecant of complex number\n  return exports.IMDIV('1', exports.IMSINH(inumber));\n};\n\nexports.IMSUB = function(inumber1, inumber2) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var a = this.IMREAL(inumber1);\n  var b = this.IMAGINARY(inumber1);\n  var c = this.IMREAL(inumber2);\n  var d = this.IMAGINARY(inumber2);\n\n  if (utils.anyIsError(a, b, c, d)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit1 = inumber1.substring(inumber1.length - 1);\n  var unit2 = inumber2.substring(inumber2.length - 1);\n  var unit = 'i';\n  if (unit1 === 'j') {\n    unit = 'j';\n  } else if (unit2 === 'j') {\n    unit = 'j';\n  }\n\n  // Return _ of two complex numbers\n  return this.COMPLEX(a - c, b - d, unit);\n};\n\nexports.IMSUM = function() {\n  if (!arguments.length) {\n    return error.value;\n  }\n  var args = utils.flatten(arguments);\n\n  // Initialize result\n  var result = args[0];\n\n  // Loop on all numbers\n  for (var i = 1; i < args.length; i++) {\n    // Lookup coefficients of two complex numbers\n    var a = this.IMREAL(result);\n    var b = this.IMAGINARY(result);\n    var c = this.IMREAL(args[i]);\n    var d = this.IMAGINARY(args[i]);\n\n    if (utils.anyIsError(a, b, c, d)) {\n      return error.value;\n    }\n\n    // Complute product of two complex numbers\n    result = this.COMPLEX(a + c, b + d);\n  }\n\n  // Return sum of complex numbers\n  return result;\n};\n\nexports.IMTAN = function(inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return tangent of complex number\n  return this.IMDIV(this.IMSIN(inumber), this.IMCOS(inumber));\n};\n\nexports.OCT2BIN = function(number, places) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-7]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Check if number is negative\n  var negative = (number.length === 10 && number.substring(0, 1) === '7') ? true : false;\n\n  // Convert octal number to decimal\n  var decimal = (negative) ? parseInt(number, 8) - 1073741824 : parseInt(number, 8);\n\n  // Return error if number is lower than -512 or greater than 511\n  if (decimal < -512 || decimal > 511) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character binary number if number is negative\n  if (negative) {\n    return '1' + text.REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);\n  }\n\n  // Convert decimal number to binary\n  var result = decimal.toString(2);\n\n  // Return binary number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.OCT2DEC = function(number) {\n  // Return error if number is not octal or contains more than ten characters (10 digits)\n  if (!/^[0-7]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert octal number to decimal\n  var decimal = parseInt(number, 8);\n\n  // Return decimal number\n  return (decimal >= 536870912) ? decimal - 1073741824 : decimal;\n};\n\nexports.OCT2HEX = function(number, places) {\n  // Return error if number is not octal or contains more than ten characters (10 digits)\n  if (!/^[0-7]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert octal number to decimal\n  var decimal = parseInt(number, 8);\n\n  // Ignore places and return a 10-character octal number if number is negative\n  if (decimal >= 536870912) {\n    return 'ff' + (decimal + 3221225472).toString(16);\n  }\n\n  // Convert decimal number to hexadecimal\n  var result = decimal.toString(16);\n\n  // Return hexadecimal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n","const SUPPORTED_FORMULAS = [\n  'ABS',\n  'ACCRINT',\n  'ACOS',\n  'ACOSH',\n  'ACOT',\n  'ACOTH',\n  'ADD',\n  'AGGREGATE',\n  'AND',\n  'ARABIC',\n  'ARGS2ARRAY',\n  'ASIN',\n  'ASINH',\n  'ATAN',\n  'ATAN2',\n  'ATANH',\n  'AVEDEV',\n  'AVERAGE',\n  'AVERAGEA',\n  'AVERAGEIF',\n  'AVERAGEIFS',\n  'BASE',\n  'BESSELI',\n  'BESSELJ',\n  'BESSELK',\n  'BESSELY',\n  'BETA.DIST',\n  'BETA.INV',\n  'BETADIST',\n  'BETAINV',\n  'BIN2DEC',\n  'BIN2HEX',\n  'BIN2OCT',\n  'BINOM.DIST',\n  'BINOM.DIST.RANGE',\n  'BINOM.INV',\n  'BINOMDIST',\n  'BITAND',\n  'BITLSHIFT',\n  'BITOR',\n  'BITRSHIFT',\n  'BITXOR',\n  'CEILING',\n  'CEILINGMATH',\n  'CEILINGPRECISE',\n  'CHAR',\n  'CHISQ.DIST',\n  'CHISQ.DIST.RT',\n  'CHISQ.INV',\n  'CHISQ.INV.RT',\n  'CHOOSE',\n  'CHOOSE',\n  'CLEAN',\n  'CODE',\n  'COLUMN',\n  'COLUMNS',\n  'COMBIN',\n  'COMBINA',\n  'COMPLEX',\n  'CONCATENATE',\n  'CONFIDENCE',\n  'CONFIDENCE.NORM',\n  'CONFIDENCE.T',\n  'CONVERT',\n  'CORREL',\n  'COS',\n  'COSH',\n  'COT',\n  'COTH',\n  'COUNT',\n  'COUNTA',\n  'COUNTBLANK',\n  'COUNTIF',\n  'COUNTIFS',\n  'COUNTIN',\n  'COUNTUNIQUE',\n  'COVARIANCE.P',\n  'COVARIANCE.S',\n  'CSC',\n  'CSCH',\n  'CUMIPMT',\n  'CUMPRINC',\n  'DATE',\n  'DATEDIF',\n  'DATEVALUE',\n  'DAY',\n  'DAYS',\n  'DAYS360',\n  'DB',\n  'DDB',\n  'DEC2BIN',\n  'DEC2HEX',\n  'DEC2OCT',\n  'DECIMAL',\n  'DEGREES',\n  'DELTA',\n  'DEVSQ',\n  'DIVIDE',\n  'DOLLARDE',\n  'DOLLARFR',\n  'E',\n  'EDATE',\n  'EFFECT',\n  'EOMONTH',\n  'EQ',\n  'ERF',\n  'ERFC',\n  'EVEN',\n  'EXACT',\n  'EXP',\n  'EXPON.DIST',\n  'EXPONDIST',\n  'F.DIST',\n  'F.DIST.RT',\n  'F.INV',\n  'F.INV.RT',\n  'FACT',\n  'FACTDOUBLE',\n  'FALSE',\n  'FDIST',\n  'FDISTRT',\n  'FIND',\n  'FINV',\n  'FINVRT',\n  'FISHER',\n  'FISHERINV',\n  'FLATTEN',\n  'FLOOR',\n  'FORECAST',\n  'FREQUENCY',\n  'FV',\n  'FVSCHEDULE',\n  'GAMMA',\n  'GAMMA.DIST',\n  'GAMMA.INV',\n  'GAMMADIST',\n  'GAMMAINV',\n  'GAMMALN',\n  'GAMMALN.PRECISE',\n  'GAUSS',\n  'GCD',\n  'GEOMEAN',\n  'GESTEP',\n  'GROWTH',\n  'GTE',\n  'HARMEAN',\n  'HEX2BIN',\n  'HEX2DEC',\n  'HEX2OCT',\n  'HOUR',\n  'HTML2TEXT',\n  'HYPGEOM.DIST',\n  'HYPGEOMDIST',\n  'IF',\n  'IMABS',\n  'IMAGINARY',\n  'IMARGUMENT',\n  'IMCONJUGATE',\n  'IMCOS',\n  'IMCOSH',\n  'IMCOT',\n  'IMCSC',\n  'IMCSCH',\n  'IMDIV',\n  'IMEXP',\n  'IMLN',\n  'IMLOG10',\n  'IMLOG2',\n  'IMPOWER',\n  'IMPRODUCT',\n  'IMREAL',\n  'IMSEC',\n  'IMSECH',\n  'IMSIN',\n  'IMSINH',\n  'IMSQRT',\n  'IMSUB',\n  'IMSUM',\n  'IMTAN',\n  'INDEX',\n  'INT',\n  'INTERCEPT',\n  'INTERVAL',\n  'IPMT',\n  'IRR',\n  'ISBINARY',\n  'ISBLANK',\n  'ISEVEN',\n  'ISLOGICAL',\n  'ISNA',\n  'ISNONTEXT',\n  'ISNUMBER',\n  'ISODD',\n  'ISODD',\n  'ISOWEEKNUM',\n  'ISPMT',\n  'ISTEXT',\n  'JOIN',\n  'KURT',\n  'LARGE',\n  'LCM',\n  'LEFT',\n  'LEN',\n  'LINEST',\n  'LN',\n  'LOG',\n  'LOG10',\n  'LOGEST',\n  'LOGNORM.DIST',\n  'LOGNORM.INV',\n  'LOGNORMDIST',\n  'LOGNORMINV',\n  'LOOKUP',\n  'LOWER',\n  'LT',\n  'LTE',\n  'MATCH',\n  'MAX',\n  'MAXA',\n  'MEDIAN',\n  'MID',\n  'MIN',\n  'MINA',\n  'MINUS',\n  'MINUTE',\n  'MIRR',\n  'MOD',\n  'MODE.MULT',\n  'MODE.SNGL',\n  'MODEMULT',\n  'MODESNGL',\n  'MONTH',\n  'MROUND',\n  'MULTINOMIAL',\n  'MULTIPLY',\n  'NA',\n  'NE',\n  'NEGBINOM.DIST',\n  'NEGBINOMDIST',\n  'NETWORKDAYS',\n  'NOMINAL',\n  'NORM.DIST',\n  'NORM.INV',\n  'NORM.S.DIST',\n  'NORM.S.INV',\n  'NORMDIST',\n  'NORMINV',\n  'NORMSDIST',\n  'NORMSINV',\n  'NOT',\n  'NOW',\n  'NPER',\n  'NPV',\n  'NUMBERS',\n  'OCT2BIN',\n  'OCT2DEC',\n  'OCT2HEX',\n  'ODD',\n  'OR',\n  'PDURATION',\n  'PEARSON',\n  'PERCENTILEEXC',\n  'PERCENTILEINC',\n  'PERCENTRANKEXC',\n  'PERCENTRANKINC',\n  'PERMUT',\n  'PERMUTATIONA',\n  'PHI',\n  'PI',\n  'PMT',\n  'POISSON.DIST',\n  'POISSONDIST',\n  'POW',\n  'POWER',\n  'PPMT',\n  'PROB',\n  'PRODUCT',\n  'PROPER',\n  'PV',\n  'QUARTILE.EXC',\n  'QUARTILE.INC',\n  'QUARTILEEXC',\n  'QUARTILEINC',\n  'QUOTIENT',\n  'RADIANS',\n  'RAND',\n  'RANDBETWEEN',\n  'RANK.AVG',\n  'RANK.EQ',\n  'RANKAVG',\n  'RANKEQ',\n  'RATE',\n  'REFERENCE',\n  'REGEXEXTRACT',\n  'REGEXMATCH',\n  'REGEXREPLACE',\n  'REPLACE',\n  'REPT',\n  'RIGHT',\n  'ROMAN',\n  'ROUND',\n  'ROUNDDOWN',\n  'ROUNDUP',\n  'ROW',\n  'ROWS',\n  'RRI',\n  'RSQ',\n  'SEARCH',\n  'SEC',\n  'SECH',\n  'SECOND',\n  'SERIESSUM',\n  'SIGN',\n  'SIN',\n  'SINH',\n  'SKEW',\n  'SKEW.P',\n  'SKEWP',\n  'SLN',\n  'SLOPE',\n  'SMALL',\n  'SPLIT',\n  'SPLIT',\n  'SQRT',\n  'SQRTPI',\n  'STANDARDIZE',\n  'STDEV.P',\n  'STDEV.S',\n  'STDEVA',\n  'STDEVP',\n  'STDEVPA',\n  'STDEVS',\n  'STEYX',\n  'SUBSTITUTE',\n  'SUBTOTAL',\n  'SUM',\n  'SUMIF',\n  'SUMIFS',\n  'SUMPRODUCT',\n  'SUMSQ',\n  'SUMX2MY2',\n  'SUMX2PY2',\n  'SUMXMY2',\n  'SWITCH',\n  'SYD',\n  'T',\n  'T.DIST',\n  'T.DIST.2T',\n  'T.DIST.RT',\n  'T.INV',\n  'T.INV.2T',\n  'TAN',\n  'TANH',\n  'TBILLEQ',\n  'TBILLPRICE',\n  'TBILLYIELD',\n  'TDIST',\n  'TDIST2T',\n  'TDISTRT',\n  'TIME',\n  'TIMEVALUE',\n  'TINV',\n  'TINV2T',\n  'TODAY',\n  'TRANSPOSE',\n  'TREND',\n  'TRIM',\n  'TRIMMEAN',\n  'TRUE',\n  'TRUNC',\n  'UNICHAR',\n  'UNICODE',\n  'UNIQUE',\n  'UPPER',\n  'VAR.P',\n  'VAR.S',\n  'VARA',\n  'VARP',\n  'VARPA',\n  'VARS',\n  'WEEKDAY',\n  'WEEKNUM',\n  'WEIBULL.DIST',\n  'WEIBULLDIST',\n  'WORKDAY',\n  'XIRR',\n  'XNPV',\n  'XOR',\n  'YEAR',\n  'YEARFRAC',\n  'VLOOKUP',\n  'HLOOKUP',\n  'IFERROR',\n  'IFNA',\n];\n\nexport default SUPPORTED_FORMULAS;\n","/**\n * Convert row label to index.\n *\n * @param {String} label Row label (eq. '1', '5')\n * @returns {Number} Returns -1 if label is not recognized otherwise proper row index.\n */\nexport function rowLabelToIndex(label) {\n  let result = parseInt(label, 10);\n\n  if (isNaN(result)) {\n    result = -1;\n  } else {\n    result = Math.max(result - 1, -1);\n  }\n\n  return result;\n}\n\n/**\n * Convert row index to label.\n *\n * @param {Number} row Row index.\n * @returns {String} Returns row label (eq. '1', '7').\n */\nexport function rowIndexToLabel(row) {\n  let result = '';\n\n  if (row >= 0) {\n    result = `${row + 1}`;\n  }\n\n  return result;\n}\n\nconst COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\n\n/**\n * Convert column label to index.\n *\n * @param {String} label Column label (eq. 'ABB', 'CNQ')\n * @returns {Number} Returns -1 if label is not recognized otherwise proper column index.\n */\nexport function columnLabelToIndex(label) {\n  let result = 0;\n\n  if (typeof label === 'string') {\n    label = label.toUpperCase();\n\n    for (let i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\n      result += Math.pow(COLUMN_LABEL_BASE_LENGTH, j) * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\n    }\n  }\n  --result;\n\n  return result;\n}\n\n/**\n * Convert column index to label.\n *\n * @param {Number} column Column index.\n * @returns {String} Returns column label (eq. 'ABB', 'CNQ').\n */\nexport function columnIndexToLabel(column) {\n  let result = '';\n\n  while (column >= 0) {\n    result = String.fromCharCode((column % COLUMN_LABEL_BASE_LENGTH) + 97) + result;\n    column = Math.floor(column / COLUMN_LABEL_BASE_LENGTH) - 1;\n  }\n\n  return result.toUpperCase();\n}\n\nconst LABEL_EXTRACT_REGEXP = /^([$])?([A-Za-z]+)([$])?([0-9]+)$/;\n\n/**\n * Extract cell coordinates.\n *\n * @param {String} label Cell coordinates (eq. 'A1', '$B6', '$N$98').\n * @returns {Array} Returns an array of objects.\n */\nexport function extractLabel(label) {\n  if (typeof label !== 'string' || !LABEL_EXTRACT_REGEXP.test(label)) {\n    return [];\n  }\n  const [, columnAbs, column, rowAbs, row] = label.toUpperCase().match(LABEL_EXTRACT_REGEXP);\n\n  return [\n    {\n      index: rowLabelToIndex(row),\n      label: row,\n      isAbsolute: rowAbs === '$',\n    },\n    {\n      index: columnLabelToIndex(column),\n      label: column,\n      isAbsolute: columnAbs === '$',\n    },\n  ];\n}\n\n/**\n * Convert row and column indexes into cell label.\n *\n * @param {Object} row Object with `index` and `isAbsolute` properties.\n * @param {Object} column Object with `index` and `isAbsolute` properties.\n * @returns {String} Returns cell label.\n */\nexport function toLabel(row, column) {\n  const rowLabel = (row.isAbsolute ? '$' : '') + rowIndexToLabel(row.index);\n  const columnLabel = (column.isAbsolute ? '$' : '') + columnIndexToLabel(column.index);\n\n  return columnLabel + rowLabel;\n}\n","import Parser from './parser';\nimport SUPPORTED_FORMULAS from './supported-formulas';\nimport error, {\n  ERROR,\n  ERROR_DIV_ZERO,\n  ERROR_NAME,\n  ERROR_NOT_AVAILABLE,\n  ERROR_NULL,\n  ERROR_NUM,\n  ERROR_REF,\n  ERROR_VALUE,\n} from './error';\nimport {\n  extractLabel,\n  toLabel,\n  columnIndexToLabel,\n  columnLabelToIndex,\n  rowIndexToLabel,\n  rowLabelToIndex,\n} from './helper/cell';\n\nexport {\n  SUPPORTED_FORMULAS,\n  ERROR,\n  ERROR_DIV_ZERO,\n  ERROR_NAME,\n  ERROR_NOT_AVAILABLE,\n  ERROR_NULL,\n  ERROR_NUM,\n  ERROR_REF,\n  ERROR_VALUE,\n  Parser,\n  error,\n  extractLabel,\n  toLabel,\n  columnIndexToLabel,\n  columnLabelToIndex,\n  rowIndexToLabel,\n  rowLabelToIndex,\n};\n","import Emitter from 'tiny-emitter';\nimport evaluateByOperator from './evaluate-by-operator/evaluate-by-operator';\nimport {Parser as GrammarParser} from './grammar-parser/grammar-parser';\nimport {trimEdges} from './helper/string';\nimport {toNumber, invertNumber} from './helper/number';\nimport errorParser, {isValidStrict as isErrorValid, ERROR, ERROR_NAME} from './error';\nimport {extractLabel, toLabel} from './helper/cell';\n\n/**\n * @class Parser\n */\nclass Parser extends Emitter {\n  constructor() {\n    super();\n    this.parser = new GrammarParser();\n    this.parser.yy = {\n      toNumber,\n      trimEdges,\n      invertNumber,\n      throwError: (errorName) => this._throwError(errorName),\n      callVariable: (variable) => this._callVariable(variable),\n      evaluateByOperator,\n      callFunction: (name, params) => this._callFunction(name, params),\n      cellValue: (value, sheet) => this._callCellValue(value, sheet),\n      rangeValue: (start, end, sheet) => this._callRangeValue(start, end, sheet),\n    };\n    this.variables = Object.create(null);\n    this.functions = Object.create(null);\n\n    this\n      .setVariable('TRUE', true)\n      .setVariable('FALSE', false)\n      .setVariable('NULL', null);\n  }\n\n  /**\n   * Parse formula expression.\n   *\n   * @param {String} expression to parse.\n   * @return {*} Returns an object with tow properties `error` and `result`.\n   */\n  parse(expression) {\n    let result = null;\n    let error = null;\n\n    try {\n      if (expression === '') {\n        result = '';\n      } else {\n        result = this.parser.parse(expression);\n      }\n    } catch (ex) {\n      const message = errorParser(ex.message);\n\n      if (message) {\n        error = message;\n      } else {\n        error = errorParser(ERROR);\n      }\n    }\n\n    if (result instanceof Error) {\n      error = errorParser(result.message) || errorParser(ERROR);\n      result = null;\n    }\n\n    return {\n      error,\n      result,\n    };\n  }\n\n  /**\n   * Set predefined variable name which can be visible while parsing formula expression.\n   *\n   * @param {String} name Variable name.\n   * @param {*} value Variable value.\n   * @returns {Parser}\n   */\n  setVariable(name, value) {\n    this.variables[name] = value;\n\n    return this;\n  }\n\n  /**\n   * Get variable name.\n   *\n   * @param {String} name Variable name.\n   * @returns {*}\n   */\n  getVariable(name) {\n    return this.variables[name];\n  }\n\n  /**\n   * Retrieve variable value by its name.\n   *\n   * @param name Variable name.\n   * @returns {*}\n   * @private\n   */\n  _callVariable(name) {\n    let value = this.getVariable(name);\n\n    this.emit('callVariable', name, (newValue) => {\n      if (newValue !== void 0) {\n        value = newValue;\n      }\n    });\n\n    if (value === void 0) {\n      throw Error(ERROR_NAME);\n    }\n\n    return value;\n  }\n\n  /**\n   * Set custom function which can be visible while parsing formula expression.\n   *\n   * @param {String} name Custom function name.\n   * @param {Function} fn Custom function.\n   * @returns {Parser}\n   */\n  setFunction(name, fn) {\n    this.functions[name] = fn;\n\n    return this;\n  }\n\n  /**\n   * Get custom function.\n   *\n   * @param {String} name Custom function name.\n   * @returns {*}\n   */\n  getFunction(name) {\n    return this.functions[name];\n  }\n\n  /**\n   * Call function with provided params.\n   *\n   * @param name Function name.\n   * @param params Function params.\n   * @returns {*}\n   * @private\n   */\n  _callFunction(name, params = []) {\n    const fn = this.getFunction(name);\n    let value;\n\n    if (fn) {\n      value = fn(params);\n    }\n\n    this.emit('callFunction', name, params, (newValue) => {\n      if (newValue !== void 0) {\n        value = newValue;\n      }\n    });\n\n    return value === void 0 ? evaluateByOperator(name, params) : value;\n  }\n\n  /**\n   * Retrieve value by its label (`B3`, `B$3`, `B$3`, `$B$3`).\n   *\n   * @param {String} label Coordinates.\n   * @param {String} sheet Reference sheet name\n   * @returns {*}\n   * @private\n   */\n  _callCellValue(label, sheet) {\n    label = label.toUpperCase();\n    const [row, column] = extractLabel(label);\n    let value = void 0;\n\n    let cellCoordinate = sheet ? {label, row, column, sheet} : {label, row, column};\n\n    this.emit('callCellValue', cellCoordinate, (_value) => {\n      value = _value;\n    });\n\n    return value;\n  }\n\n  /**\n   * Retrieve value by its label (`B3:A1`, `B$3:A1`, `B$3:$A1`, `$B$3:A$1`).\n   *\n   * @param {String} startLabel Coordinates of the first cell.\n   * @param {String} endLabel Coordinates of the last cell.\n   * @param {String} sheet Reference sheet name\n   * @returns {Array} Returns an array of mixed values.\n   * @private\n   */\n  _callRangeValue(startLabel, endLabel, sheet) {\n    startLabel = startLabel.toUpperCase();\n    endLabel = endLabel.toUpperCase();\n\n    const [startRow, startColumn] = extractLabel(startLabel);\n    const [endRow, endColumn] = extractLabel(endLabel);\n    let startCell = {};\n    let endCell = {};\n\n    if (startRow.index <= endRow.index) {\n      startCell.row = startRow;\n      endCell.row = endRow;\n    } else {\n      startCell.row = endRow;\n      endCell.row = startRow;\n    }\n\n    if (startColumn.index <= endColumn.index) {\n      startCell.column = startColumn;\n      endCell.column = endColumn;\n    } else {\n      startCell.column = endColumn;\n      endCell.column = startColumn;\n    }\n\n    startCell.label = toLabel(startCell.row, startCell.column);\n    endCell.label = toLabel(endCell.row, endCell.column);\n\n    if (sheet) {\n      startCell.sheet = sheet;\n      endCell.sheet = sheet;\n    }\n\n    let value = [];\n\n    this.emit('callRangeValue', startCell, endCell, (_value = []) => {\n      value = _value;\n    });\n\n    return value;\n  }\n\n  /**\n   * Try to throw error by its name.\n   *\n   * @param {String} errorName Error name.\n   * @returns {String}\n   * @private\n   */\n  _throwError(errorName) {\n    if (isErrorValid(errorName)) {\n      throw Error(errorName);\n    }\n\n    throw Error(ERROR);\n  }\n}\n\nexport default Parser;\n","function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\n","/* eslint-disable import/no-named-as-default-member */\nimport add from './operator/add';\nimport ampersand from './operator/ampersand';\nimport divide from './operator/divide';\nimport equal from './operator/equal';\nimport formulaFunction from './operator/formula-function';\nimport greaterThan from './operator/greater-than';\nimport greaterThanOrEqual from './operator/greater-than-or-equal';\nimport lessThan from './operator/less-than';\nimport lessThanOrEqual from './operator/less-than-or-equal';\nimport minus from './operator/minus';\nimport multiply from './operator/multiply';\nimport notEqual from './operator/not-equal';\nimport power from './operator/power';\nimport {ERROR_NAME} from './../error';\n\nconst availableOperators = Object.create(null);\n\n/**\n * Evaluate values by operator id.git\n *\n * @param {String} operator Operator id.\n * @param {Array} [params=[]] Arguments to evaluate.\n * @returns {*}\n */\nexport default function evaluateByOperator(operator, params = []) {\n  operator = operator.toUpperCase();\n\n  if (!availableOperators[operator]) {\n    throw Error(ERROR_NAME);\n  }\n\n  return availableOperators[operator](...params);\n}\n\n/**\n * Register operator.\n *\n * @param {String|Array} symbol Symbol to register.\n * @param {Function} func Logic to register for this symbol.\n */\nexport function registerOperation(symbol, func) {\n  if (!Array.isArray(symbol)) {\n    symbol = [symbol.toUpperCase()];\n  }\n  symbol.forEach((s) => {\n    if (func.isFactory) {\n      availableOperators[s] = func(s);\n    } else {\n      availableOperators[s] = func;\n    }\n  });\n}\n\nregisterOperation(add.SYMBOL, add);\nregisterOperation(ampersand.SYMBOL, ampersand);\nregisterOperation(divide.SYMBOL, divide);\nregisterOperation(equal.SYMBOL, equal);\nregisterOperation(power.SYMBOL, power);\nregisterOperation(formulaFunction.SYMBOL, formulaFunction);\nregisterOperation(greaterThan.SYMBOL, greaterThan);\nregisterOperation(greaterThanOrEqual.SYMBOL, greaterThanOrEqual);\nregisterOperation(lessThan.SYMBOL, lessThan);\nregisterOperation(lessThanOrEqual.SYMBOL, lessThanOrEqual);\nregisterOperation(multiply.SYMBOL, multiply);\nregisterOperation(notEqual.SYMBOL, notEqual);\nregisterOperation(minus.SYMBOL, minus);\n","import {toNumber} from './../../helper/number';\nimport {ERROR_VALUE} from './../../error';\n\nexport const SYMBOL = '+';\n\nexport default function func(first, ...rest) {\n  const result = rest.reduce((acc, value) => acc + toNumber(value), toNumber(first));\n\n  if (isNaN(result)) {\n    throw Error(ERROR_VALUE);\n  }\n\n  return result;\n}\n\nfunc.SYMBOL = SYMBOL;\n","export const SYMBOL = '&';\n\nexport default function func(...params) {\n  return params.reduce((acc, value) => acc + value.toString(), '');\n}\n\nfunc.SYMBOL = SYMBOL;\n","import {toNumber} from './../../helper/number';\nimport {ERROR_DIV_ZERO, ERROR_VALUE} from './../../error';\n\nexport const SYMBOL = '/';\n\nexport default function func(first, ...rest) {\n  const result = rest.reduce((acc, value) => acc / toNumber(value), toNumber(first));\n\n  if (result === Infinity) {\n    throw Error(ERROR_DIV_ZERO);\n  }\n  if (isNaN(result)) {\n    throw Error(ERROR_VALUE);\n  }\n\n  return result;\n}\n\nfunc.SYMBOL = SYMBOL;\n","export const SYMBOL = '=';\n\nexport default function func(exp1, exp2) {\n  return exp1 === exp2;\n}\n\nfunc.SYMBOL = SYMBOL;\n","import * as formulajs from 'formulajs';\nimport SUPPORTED_FORMULAS from './../../supported-formulas';\nimport {ERROR_NAME} from './../../error';\n\nexport const SYMBOL = SUPPORTED_FORMULAS;\n\nexport default function func(symbol) {\n  return function __formulaFunction(...params) {\n    symbol = symbol.toUpperCase();\n\n    const symbolParts = symbol.split('.');\n    let foundFormula = false;\n    let result;\n\n    if (symbolParts.length === 1) {\n      if (formulajs[symbolParts[0]]) {\n        foundFormula = true;\n        result = formulajs[symbolParts[0]](...params);\n      }\n    } else {\n      const length = symbolParts.length;\n      let index = 0;\n      let nestedFormula = formulajs;\n\n      while (index < length) {\n        nestedFormula = nestedFormula[symbolParts[index]];\n        index++;\n\n        if (!nestedFormula) {\n          nestedFormula = null;\n          break;\n        }\n      }\n      if (nestedFormula) {\n        foundFormula = true;\n        result = nestedFormula(...params);\n      }\n    }\n\n    if (!foundFormula) {\n      throw Error(ERROR_NAME);\n    }\n\n    return result;\n  };\n}\n\nfunc.isFactory = true;\nfunc.SYMBOL = SYMBOL;\n","var categories = [\n  require('./lib/compatibility'),\n  require('./lib/database'),\n  require('./lib/engineering'),\n  require('./lib/logical'),\n  require('./lib/math-trig'),\n  require('./lib/text'),\n  require('./lib/date-time'),\n  require('./lib/financial'),\n  require('./lib/information'),\n  require('./lib/lookup-reference'),\n  require('./lib/statistical'),\n  require('./lib/miscellaneous')\n];\n\nfor (var c in categories) {\n  var category = categories[c];\n  for (var f in category) {\n    exports[f] = exports[f] || category[f];\n  }\n}\n","var mathTrig = require('./math-trig');\nvar statistical = require('./statistical');\nvar engineering = require('./engineering');\nvar dateTime = require('./date-time');\n\nfunction set(fn, root) {\n  if (root) {\n    for (var i in root) {\n      fn[i] = root[i];\n    }\n  }\n\n  return fn;\n}\n\nexports.BETADIST = statistical.BETA.DIST;\nexports.BETAINV = statistical.BETA.INV;\nexports.BINOMDIST = statistical.BINOM.DIST;\nexports.CEILING = exports.ISOCEILING = set(mathTrig.CEILING.MATH, mathTrig.CEILING);\nexports.CEILINGMATH = mathTrig.CEILING.MATH;\nexports.CEILINGPRECISE = mathTrig.CEILING.PRECISE;\nexports.CHIDIST = statistical.CHISQ.DIST;\nexports.CHIDISTRT = statistical.CHISQ.DIST.RT;\nexports.CHIINV = statistical.CHISQ.INV;\nexports.CHIINVRT = statistical.CHISQ.INV.RT;\nexports.CHITEST = statistical.CHISQ.TEST;\nexports.CONFIDENCE = set(statistical.CONFIDENCE.NORM, statistical.CONFIDENCE);\nexports.COVAR = statistical.COVARIANCE.P;\nexports.COVARIANCEP = statistical.COVARIANCE.P;\nexports.COVARIANCES = statistical.COVARIANCE.S;\nexports.CRITBINOM = statistical.BINOM.INV;\nexports.EXPONDIST = statistical.EXPON.DIST;\nexports.ERFCPRECISE = engineering.ERFC.PRECISE;\nexports.ERFPRECISE = engineering.ERF.PRECISE;\nexports.FDIST = statistical.F.DIST;\nexports.FDISTRT = statistical.F.DIST.RT;\nexports.FINVRT = statistical.F.INV.RT;\nexports.FINV = statistical.F.INV;\nexports.FLOOR = set(mathTrig.FLOOR.MATH, mathTrig.FLOOR);\nexports.FLOORMATH = mathTrig.FLOOR.MATH;\nexports.FLOORPRECISE = mathTrig.FLOOR.PRECISE;\nexports.FTEST = statistical.F.TEST;\nexports.GAMMADIST = statistical.GAMMA.DIST;\nexports.GAMMAINV = statistical.GAMMA.INV;\nexports.GAMMALNPRECISE = statistical.GAMMALN.PRECISE;\nexports.HYPGEOMDIST = statistical.HYPGEOM.DIST;\nexports.LOGINV = statistical.LOGNORM.INV;\nexports.LOGNORMINV = statistical.LOGNORM.INV;\nexports.LOGNORMDIST = statistical.LOGNORM.DIST;\nexports.MODE = set(statistical.MODE.SNGL, statistical.MODE);\nexports.MODEMULT = statistical.MODE.MULT;\nexports.MODESNGL = statistical.MODE.SNGL;\nexports.NEGBINOMDIST = statistical.NEGBINOM.DIST;\nexports.NETWORKDAYSINTL = dateTime.NETWORKDAYS.INTL;\nexports.NORMDIST = statistical.NORM.DIST;\nexports.NORMINV = statistical.NORM.INV;\nexports.NORMSDIST = statistical.NORM.S.DIST;\nexports.NORMSINV = statistical.NORM.S.INV;\nexports.PERCENTILE = set(statistical.PERCENTILE.EXC, statistical.PERCENTILE);\nexports.PERCENTILEEXC = statistical.PERCENTILE.EXC;\nexports.PERCENTILEINC = statistical.PERCENTILE.INC;\nexports.PERCENTRANK = set(statistical.PERCENTRANK.INC, statistical.PERCENTRANK);\nexports.PERCENTRANKEXC = statistical.PERCENTRANK.EXC;\nexports.PERCENTRANKINC = statistical.PERCENTRANK.INC;\nexports.POISSON = set(statistical.POISSON.DIST, statistical.POISSON);\nexports.POISSONDIST = statistical.POISSON.DIST;\nexports.QUARTILE = set(statistical.QUARTILE.INC, statistical.QUARTILE);\nexports.QUARTILEEXC = statistical.QUARTILE.EXC;\nexports.QUARTILEINC = statistical.QUARTILE.INC;\nexports.RANK = set(statistical.RANK.EQ, statistical.RANK);\nexports.RANKAVG = statistical.RANK.AVG;\nexports.RANKEQ = statistical.RANK.EQ;\nexports.SKEWP = statistical.SKEW.P;\nexports.STDEV = set(statistical.STDEV.S, statistical.STDEV);\nexports.STDEVP = statistical.STDEV.P;\nexports.STDEVS = statistical.STDEV.S;\nexports.TDIST = statistical.T.DIST;\nexports.TDISTRT = statistical.T.DIST.RT;\nexports.TINV = statistical.T.INV;\nexports.TTEST = statistical.T.TEST;\nexports.VAR = set(statistical.VAR.S, statistical.VAR);\nexports.VARP = statistical.VAR.P;\nexports.VARS = statistical.VAR.S;\nexports.WEIBULL = set(statistical.WEIBULL.DIST, statistical.WEIBULL);\nexports.WEIBULLDIST = statistical.WEIBULL.DIST;\nexports.WORKDAYINTL = dateTime.WORKDAY.INTL;\nexports.ZTEST = statistical.Z.TEST;\n","var M = Math;\nfunction _horner(arr, v) { return arr.reduce(function(z,w){return v * z + w;},0); };\nfunction _bessel_iter(x, n, f0, f1, sign) {\n  if(!sign) sign = -1;\n  var tdx = 2 / x, f2;\n  if(n === 0) return f0;\n  if(n === 1) return f1;\n  for(var o = 1; o != n; ++o) {\n    f2 = f1 * o * tdx + sign * f0;\n    f0 = f1; f1 = f2;\n  }\n  return f1;\n}\nfunction _bessel_wrap(bessel0, bessel1, name, nonzero, sign) {\n  return function bessel(x,n) {\n    if(n === 0) return bessel0(x);\n    if(n === 1) return bessel1(x);\n    if(n < 0) throw name + ': Order (' + n + ') must be nonnegative';\n    if(nonzero == 1 && x === 0) throw name + ': Undefined when x == 0';\n    if(nonzero == 2 && x <= 0) throw name + ': Undefined when x <= 0';\n    var b0 = bessel0(x), b1 = bessel1(x);\n    return _bessel_iter(x, n, b0, b1, sign);\n  };\n}\nvar besselj = (function() {\n  var b0_a1a = [57568490574.0,-13362590354.0,651619640.7,-11214424.18,77392.33017,-184.9052456].reverse();\n  var b0_a2a = [57568490411.0,1029532985.0,9494680.718,59272.64853,267.8532712,1.0].reverse();\n  var b0_a1b = [1.0, -0.1098628627e-2, 0.2734510407e-4, -0.2073370639e-5, 0.2093887211e-6].reverse();\n  var b0_a2b = [-0.1562499995e-1, 0.1430488765e-3, -0.6911147651e-5, 0.7621095161e-6, -0.934935152e-7].reverse();\n  var W = 0.636619772; // 2 / Math.PI\n\n  function bessel0(x) {\n    var a, a1, a2, y = x * x, xx = M.abs(x) - 0.785398164;\n    if(M.abs(x) < 8) {\n      a1 = _horner(b0_a1a, y);\n      a2 = _horner(b0_a2a, y);\n      a = a1/a2;\n    }\n    else {\n      y = 64 / y;\n      a1 = _horner(b0_a1b, y);\n      a2 = _horner(b0_a2b, y);\n      a = M.sqrt(W/M.abs(x))*(M.cos(xx)*a1-M.sin(xx)*a2*8/M.abs(x));\n    }\n    return a;\n  }\n  var b1_a1a = [72362614232.0,-7895059235.0,242396853.1,-2972611.439, 15704.48260, -30.16036606].reverse();\n  var b1_a2a = [144725228442.0, 2300535178.0, 18583304.74, 99447.43394, 376.9991397, 1.0].reverse();\n  var b1_a1b = [1.0, 0.183105e-2, -0.3516396496e-4, 0.2457520174e-5, -0.240337019e-6].reverse();\n  var b1_a2b = [0.04687499995, -0.2002690873e-3, 0.8449199096e-5, -0.88228987e-6, 0.105787412e-6].reverse();\n  function bessel1(x) {\n    var a, a1, a2, y = x*x, xx = M.abs(x) - 2.356194491;\n    if(Math.abs(x)< 8) {\n      a1 = x*_horner(b1_a1a, y);\n      a2 = _horner(b1_a2a, y);\n      a = a1 / a2;\n    } else {\n      y = 64 / y;\n      a1=_horner(b1_a1b, y);\n      a2=_horner(b1_a2b, y);\n      a=M.sqrt(W/M.abs(x))*(M.cos(xx)*a1-M.sin(xx)*a2*8/M.abs(x));\n      if(x < 0) a = -a;\n    }\n    return a;\n  }\n  return function besselj(x, n) {\n    n = Math.round(n);\n    if(n === 0) return bessel0(M.abs(x));\n    if(n === 1) return bessel1(M.abs(x));\n    if(n < 0) throw 'BESSELJ: Order (' + n + ') must be nonnegative';\n    if(M.abs(x) === 0) return 0;\n\n    var ret, j, tox = 2 / M.abs(x), m, jsum, sum, bjp, bj, bjm;\n    if(M.abs(x) > n) {\n      ret = _bessel_iter(x, n, bessel0(M.abs(x)), bessel1(M.abs(x)),-1);\n    } else {\n      m=2*M.floor((n+M.floor(M.sqrt(40*n)))/2);\n      jsum=0;\n      bjp=ret=sum=0.0;\n      bj=1.0;\n      for (j=m;j>0;j--) {\n        bjm=j*tox*bj-bjp;\n        bjp=bj;\n        bj=bjm;\n        if (M.abs(bj) > 1E10) {\n          bj *= 1E-10;\n          bjp *= 1E-10;\n          ret *= 1E-10;\n          sum *= 1E-10;\n        }\n        if (jsum) sum += bj;\n        jsum=!jsum;\n        if (j == n) ret=bjp;\n      }\n      sum=2.0*sum-bj;\n      ret /= sum;\n    }\n    return x < 0 && (n%2) ? -ret : ret;\n  };\n})();\nvar bessely = (function() {\n  var b0_a1a = [-2957821389.0, 7062834065.0, -512359803.6, 10879881.29, -86327.92757, 228.4622733].reverse();\n  var b0_a2a = [40076544269.0, 745249964.8, 7189466.438, 47447.26470, 226.1030244, 1.0].reverse();\n  var b0_a1b = [1.0, -0.1098628627e-2, 0.2734510407e-4, -0.2073370639e-5, 0.2093887211e-6].reverse();\n  var b0_a2b = [-0.1562499995e-1, 0.1430488765e-3, -0.6911147651e-5, 0.7621095161e-6, -0.934945152e-7].reverse();\n\n  var W = 0.636619772;\n  function bessel0(x) {\n    var a, a1, a2, y = x * x, xx = x - 0.785398164;\n    if(x < 8) {\n      a1 = _horner(b0_a1a, y);\n      a2 = _horner(b0_a2a, y);\n      a = a1/a2 + W * besselj(x,0) * M.log(x);\n    } else {\n      y = 64 / y;\n      a1 = _horner(b0_a1b, y);\n      a2 = _horner(b0_a2b, y);\n      a = M.sqrt(W/x)*(M.sin(xx)*a1+M.cos(xx)*a2*8/x);\n    }\n    return a;\n  }\n\n  var b1_a1a = [-0.4900604943e13, 0.1275274390e13, -0.5153438139e11, 0.7349264551e9, -0.4237922726e7, 0.8511937935e4].reverse();\n  var b1_a2a = [0.2499580570e14, 0.4244419664e12, 0.3733650367e10, 0.2245904002e8, 0.1020426050e6, 0.3549632885e3, 1].reverse();\n  var b1_a1b = [1.0, 0.183105e-2, -0.3516396496e-4, 0.2457520174e-5, -0.240337019e-6].reverse();\n  var b1_a2b = [0.04687499995, -0.2002690873e-3, 0.8449199096e-5, -0.88228987e-6, 0.105787412e-6].reverse();\n  function bessel1(x) {\n    var a, a1, a2, y = x*x, xx = x - 2.356194491;\n    if(x < 8) {\n      a1 = x*_horner(b1_a1a, y);\n      a2 = _horner(b1_a2a, y);\n      a = a1/a2 + W * (besselj(x,1) * M.log(x) - 1 / x);\n    } else {\n      y = 64 / y;\n      a1=_horner(b1_a1b, y);\n      a2=_horner(b1_a2b, y);\n      a=M.sqrt(W/x)*(M.sin(xx)*a1+M.cos(xx)*a2*8/x);\n    }\n    return a;\n  }\n\n  return _bessel_wrap(bessel0, bessel1, 'BESSELY', 1, -1);\n})();\nvar besseli = (function() {\n  var b0_a = [1.0, 3.5156229, 3.0899424, 1.2067492, 0.2659732, 0.360768e-1, 0.45813e-2].reverse();\n  var b0_b = [0.39894228, 0.1328592e-1, 0.225319e-2, -0.157565e-2, 0.916281e-2, -0.2057706e-1, 0.2635537e-1, -0.1647633e-1, 0.392377e-2].reverse();\n  function bessel0(x) {\n    if(x <= 3.75) return _horner(b0_a, x*x/(3.75*3.75));\n    return M.exp(M.abs(x))/M.sqrt(M.abs(x))*_horner(b0_b, 3.75/M.abs(x));\n  }\n\n  var b1_a = [0.5, 0.87890594, 0.51498869, 0.15084934, 0.2658733e-1, 0.301532e-2, 0.32411e-3].reverse();\n  var b1_b = [0.39894228, -0.3988024e-1, -0.362018e-2, 0.163801e-2, -0.1031555e-1, 0.2282967e-1, -0.2895312e-1, 0.1787654e-1, -0.420059e-2].reverse();\n  function bessel1(x) {\n    if(x < 3.75) return x * _horner(b1_a, x*x/(3.75*3.75));\n    return (x < 0 ? -1 : 1) * M.exp(M.abs(x))/M.sqrt(M.abs(x))*_horner(b1_b, 3.75/M.abs(x));\n  }\n\n  return function besseli(x, n) {\n    n = Math.round(n);\n    if(n === 0) return bessel0(x);\n    if(n == 1) return bessel1(x);\n    if(n < 0) throw 'BESSELI Order (' + n + ') must be nonnegative';\n    if(M.abs(x) === 0) return 0;\n\n    var ret, j, tox = 2 / M.abs(x), m, bip, bi, bim;\n    m=2*M.round((n+M.round(M.sqrt(40*n)))/2);\n    bip=ret=0.0;\n    bi=1.0;\n    for (j=m;j>0;j--) {\n      bim=j*tox*bi + bip;\n      bip=bi; bi=bim;\n      if (M.abs(bi) > 1E10) {\n        bi *= 1E-10;\n        bip *= 1E-10;\n        ret *= 1E-10;\n      }\n      if(j == n) ret = bip;\n    }\n    ret *= besseli(x, 0) / bi;\n    return x < 0 && (n%2) ? -ret : ret;\n  };\n\n})();\n\nvar besselk = (function() {\n  var b0_a = [-0.57721566, 0.42278420, 0.23069756, 0.3488590e-1, 0.262698e-2, 0.10750e-3, 0.74e-5].reverse();\n  var b0_b = [1.25331414, -0.7832358e-1, 0.2189568e-1, -0.1062446e-1, 0.587872e-2, -0.251540e-2, 0.53208e-3].reverse();\n  function bessel0(x) {\n    if(x <= 2) return -M.log(x/2)*besseli(x,0) + _horner(b0_a, x*x/4);\n    return M.exp(-x)/M.sqrt(x)*_horner(b0_b, 2/x);\n  }\n\n  var b1_a = [1.0, 0.15443144, -0.67278579, -0.18156897, -0.1919402e-1, -0.110404e-2, -0.4686e-4].reverse();\n  var b1_b = [1.25331414, 0.23498619, -0.3655620e-1, 0.1504268e-1, -0.780353e-2, 0.325614e-2, -0.68245e-3].reverse();\n  function bessel1(x) {\n    if(x <= 2) return M.log(x/2)*besseli(x,1) + (1/x)*_horner(b1_a, x*x/4);\n    return M.exp(-x)/M.sqrt(x)*_horner(b1_b, 2/x);\n  }\n\n  return _bessel_wrap(bessel0, bessel1, 'BESSELK', 2, 1);\n})();\nif(typeof exports !== \"undefined\") {\n  exports.besselj = besselj;\n  exports.bessely = bessely;\n  exports.besseli = besseli;\n  exports.besselk = besselk;\n}\n\n","var error = require('./error');\nvar stats = require('./statistical');\nvar maths = require('./math-trig');\nvar utils = require('./utils');\n\nfunction compact(array) {\n  var result = [];\n\n  utils.arrayEach(array, function(value) {\n    if (value) {\n      result.push(value);\n    }\n  });\n\n  return result;\n}\n\nexports.FINDFIELD = function(database, title) {\n  var index = null;\n\n  utils.arrayEach(database, function(value, i) {\n    if (value[0] === title) {\n      index = i;\n      return false;\n    }\n  });\n\n  // Return error if the input field title is incorrect\n  if (index == null) {\n    return error.value;\n  }\n\n  return index;\n};\n\nfunction findResultIndex(database, criterias) {\n  var matches = {};\n  for (var i = 1; i < database[0].length; ++i) {\n    matches[i] = true;\n  }\n  var maxCriteriaLength = criterias[0].length;\n  for (i = 1; i < criterias.length; ++i) {\n    if (criterias[i].length > maxCriteriaLength) {\n      maxCriteriaLength = criterias[i].length;\n    }\n  }\n\n  for (var k = 1; k < database.length; ++k) {\n    for (var l = 1; l < database[k].length; ++l) {\n      var currentCriteriaResult = false;\n      var hasMatchingCriteria   = false;\n      for (var j = 0; j < criterias.length; ++j) {\n        var criteria = criterias[j];\n        if (criteria.length < maxCriteriaLength) {\n          continue;\n        }\n\n        var criteriaField = criteria[0];\n        if (database[k][0] !== criteriaField) {\n          continue;\n        }\n        hasMatchingCriteria = true;\n        for (var p = 1; p < criteria.length; ++p) {\n          currentCriteriaResult = currentCriteriaResult || eval(database[k][l] + criteria[p]);  // jshint ignore:line\n        }\n      }\n      if (hasMatchingCriteria) {\n        matches[l] = matches[l] && currentCriteriaResult;\n      }\n    }\n  }\n\n  var result = [];\n  for (var n = 0; n < database[0].length; ++n) {\n    if (matches[n]) {\n      result.push(n - 1);\n    }\n  }\n\n  return result;\n}\n\n// Database functions\nexports.DAVERAGE = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var sum = 0;\n\n  utils.arrayEach(resultIndexes, function(value) {\n    sum += targetFields[value];\n  });\n\n  return resultIndexes.length === 0 ? error.div0 : sum / resultIndexes.length;\n};\n\nexports.DCOUNT = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return stats.COUNT(targetValues);\n};\n\nexports.DCOUNTA = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return stats.COUNTA(targetValues);\n};\n\nexports.DGET = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  // Return error if no record meets the criteria\n  if (resultIndexes.length === 0) {\n    return error.value;\n  }\n  // Returns the #NUM! error value because more than one record meets the\n  // criteria\n  if (resultIndexes.length > 1) {\n    return error.num;\n  }\n\n  return targetFields[resultIndexes[0]];\n};\n\nexports.DMAX = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var maxValue = targetFields[resultIndexes[0]];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    if (maxValue < targetFields[value]) {\n      maxValue = targetFields[value];\n    }\n  });\n\n  return maxValue;\n};\n\nexports.DMIN = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var minValue = targetFields[resultIndexes[0]];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    if (minValue > targetFields[value]) {\n      minValue = targetFields[value];\n    }\n  });\n\n  return minValue;\n};\n\nexports.DPRODUCT = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n  targetValues = compact(targetValues);\n\n  var result = 1;\n\n  utils.arrayEach(targetValues, function(value) {\n    result *= value;\n  });\n\n  return result;\n};\n\nexports.DSTDEV = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n  targetValues = compact(targetValues);\n\n  return stats.STDEV.S(targetValues);\n};\n\nexports.DSTDEVP = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n  targetValues = compact(targetValues);\n\n  return stats.STDEV.P(targetValues);\n};\n\nexports.DSUM = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return maths.SUM(targetValues);\n};\n\nexports.DVAR = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return stats.VAR.S(targetValues);\n};\n\nexports.DVARP = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return stats.VAR.P(targetValues);\n};\n","var error = require('./error');\nvar utils = require('./utils');\nvar information = require('./information');\n\nexports.AND = function() {\n  var args = utils.flatten(arguments);\n  var result = true;\n  for (var i = 0; i < args.length; i++) {\n    if (!args[i]) {\n      result = false;\n    }\n  }\n  return result;\n};\n\nexports.CHOOSE = function() {\n  if (arguments.length < 2) {\n    return error.na;\n  }\n\n  var index = arguments[0];\n  if (index < 1 || index > 254) {\n    return error.value;\n  }\n\n  if (arguments.length < index + 1) {\n    return error.value;\n  }\n\n  return arguments[index];\n};\n\nexports.FALSE = function() {\n  return false;\n};\n\nexports.IF = function(test, then_value, otherwise_value) {\n  return test ? then_value : otherwise_value;\n};\n\nexports.IFERROR = function(value, valueIfError) {\n  if (information.ISERROR(value)) {\n    return valueIfError;\n  }\n  return value;\n};\n\nexports.IFNA = function(value, value_if_na) {\n  return value === error.na ? value_if_na : value;\n};\n\nexports.NOT = function(logical) {\n  return !logical;\n};\n\nexports.OR = function() {\n  var args = utils.flatten(arguments);\n  var result = false;\n  for (var i = 0; i < args.length; i++) {\n    if (args[i]) {\n      result = true;\n    }\n  }\n  return result;\n};\n\nexports.TRUE = function() {\n  return true;\n};\n\nexports.XOR = function() {\n  var args = utils.flatten(arguments);\n  var result = 0;\n  for (var i = 0; i < args.length; i++) {\n    if (args[i]) {\n      result++;\n    }\n  }\n  return (Math.floor(Math.abs(result)) & 1) ? true : false;\n};\n\nexports.SWITCH = function () {\n  var result;\n\n  if (arguments.length > 0)  {\n    var targetValue = arguments[0];\n    var argc = arguments.length - 1;\n    var switchCount = Math.floor(argc / 2);\n    var switchSatisfied = false;\n    var hasDefaultClause = argc % 2 !== 0;\n    var defaultClause = argc % 2 === 0 ? null : arguments[arguments.length - 1];\n\n    if (switchCount) {\n      for (var index = 0; index < switchCount; index++) {\n        if (targetValue === arguments[index * 2 + 1]) {\n          result = arguments[index * 2 + 2];\n          switchSatisfied = true;\n          break;\n        }\n      }\n    }\n\n    if (!switchSatisfied) {\n      result = hasDefaultClause ? defaultClause : error.na;\n    }\n  } else {\n    result = error.value;\n  }\n\n  return result;\n};\n","var error = require('./error');\nvar dateTime = require('./date-time');\nvar utils = require('./utils');\n\nfunction validDate(d) {\n  return d && d.getTime && !isNaN(d.getTime());\n}\n\nfunction ensureDate(d) {\n  return (d instanceof Date)?d:new Date(d);\n}\n\nexports.ACCRINT = function(issue, first, settlement, rate, par, frequency, basis) {\n  // Return error if either date is invalid\n  issue      = ensureDate(issue);\n  first      = ensureDate(first);\n  settlement = ensureDate(settlement);\n  if (!validDate(issue) || !validDate(first) || !validDate(settlement)) {\n    return error.value;\n  }\n\n  // Return error if either rate or par are lower than or equal to zero\n  if (rate <= 0 || par <= 0) {\n    return error.num;\n  }\n\n  // Return error if frequency is neither 1, 2, or 4\n  if ([1, 2, 4].indexOf(frequency) === -1) {\n    return error.num;\n  }\n\n  // Return error if basis is neither 0, 1, 2, 3, or 4\n  if ([0, 1, 2, 3, 4].indexOf(basis) === -1) {\n    return error.num;\n  }\n\n  // Return error if settlement is before or equal to issue\n  if (settlement <= issue) {\n    return error.num;\n  }\n\n  // Set default values\n  par   = par   || 0;\n  basis = basis || 0;\n\n  // Compute accrued interest\n  return par * rate * dateTime.YEARFRAC(issue, settlement, basis);\n};\n\n// TODO\nexports.ACCRINTM = function() {\n  throw new Error('ACCRINTM is not implemented');\n};\n\n// TODO\nexports.AMORDEGRC = function() {\n  throw new Error('AMORDEGRC is not implemented');\n};\n\n// TODO\nexports.AMORLINC = function() {\n  throw new Error('AMORLINC is not implemented');\n};\n\n// TODO\nexports.COUPDAYBS = function() {\n  throw new Error('COUPDAYBS is not implemented');\n};\n\n// TODO\nexports.COUPDAYS = function() {\n  throw new Error('COUPDAYS is not implemented');\n};\n\n// TODO\nexports.COUPDAYSNC = function() {\n  throw new Error('COUPDAYSNC is not implemented');\n};\n\n// TODO\nexports.COUPNCD = function() {\n  throw new Error('COUPNCD is not implemented');\n};\n\n// TODO\nexports.COUPNUM = function() {\n  throw new Error('COUPNUM is not implemented');\n};\n\n// TODO\nexports.COUPPCD = function() {\n  throw new Error('COUPPCD is not implemented');\n};\n\nexports.CUMIPMT = function(rate, periods, value, start, end, type) {\n  // Credits: algorithm inspired by Apache OpenOffice\n  // Credits: Hannes Stiebitzhofer for the translations of function and variable names\n  // Requires exports.FV() and exports.PMT() from exports.js [http://stoic.com/exports/]\n\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  value = utils.parseNumber(value);\n  if (utils.anyIsError(rate, periods, value)) {\n    return error.value;\n  }\n\n  // Return error if either rate, periods, or value are lower than or equal to zero\n  if (rate <= 0 || periods <= 0 || value <= 0) {\n    return error.num;\n  }\n\n  // Return error if start < 1, end < 1, or start > end\n  if (start < 1 || end < 1 || start > end) {\n    return error.num;\n  }\n\n  // Return error if type is neither 0 nor 1\n  if (type !== 0 && type !== 1) {\n    return error.num;\n  }\n\n  // Compute cumulative interest\n  var payment = exports.PMT(rate, periods, value, 0, type);\n  var interest = 0;\n\n  if (start === 1) {\n    if (type === 0) {\n      interest = -value;\n      start++;\n    }\n  }\n\n  for (var i = start; i <= end; i++) {\n    if (type === 1) {\n      interest += exports.FV(rate, i - 2, payment, value, 1) - payment;\n    } else {\n      interest += exports.FV(rate, i - 1, payment, value, 0);\n    }\n  }\n  interest *= rate;\n\n  // Return cumulative interest\n  return interest;\n};\n\nexports.CUMPRINC = function(rate, periods, value, start, end, type) {\n  // Credits: algorithm inspired by Apache OpenOffice\n  // Credits: Hannes Stiebitzhofer for the translations of function and variable names\n\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  value = utils.parseNumber(value);\n  if (utils.anyIsError(rate, periods, value)) {\n    return error.value;\n  }\n\n  // Return error if either rate, periods, or value are lower than or equal to zero\n  if (rate <= 0 || periods <= 0 || value <= 0) {\n    return error.num;\n  }\n\n  // Return error if start < 1, end < 1, or start > end\n  if (start < 1 || end < 1 || start > end) {\n    return error.num;\n  }\n\n  // Return error if type is neither 0 nor 1\n  if (type !== 0 && type !== 1) {\n    return error.num;\n  }\n\n  // Compute cumulative principal\n  var payment = exports.PMT(rate, periods, value, 0, type);\n  var principal = 0;\n  if (start === 1) {\n    if (type === 0) {\n      principal = payment + value * rate;\n    } else {\n      principal = payment;\n    }\n    start++;\n  }\n  for (var i = start; i <= end; i++) {\n    if (type > 0) {\n      principal += payment - (exports.FV(rate, i - 2, payment, value, 1) - payment) * rate;\n    } else {\n      principal += payment - exports.FV(rate, i - 1, payment, value, 0) * rate;\n    }\n  }\n\n  // Return cumulative principal\n  return principal;\n};\n\nexports.DB = function(cost, salvage, life, period, month) {\n  // Initialize month\n  month = (month === undefined) ? 12 : month;\n\n  cost = utils.parseNumber(cost);\n  salvage = utils.parseNumber(salvage);\n  life = utils.parseNumber(life);\n  period = utils.parseNumber(period);\n  month = utils.parseNumber(month);\n  if (utils.anyIsError(cost, salvage, life, period, month)) {\n    return error.value;\n  }\n\n  // Return error if any of the parameters is negative\n  if (cost < 0 || salvage < 0 || life < 0 || period < 0) {\n    return error.num;\n  }\n\n  // Return error if month is not an integer between 1 and 12\n  if ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].indexOf(month) === -1) {\n    return error.num;\n  }\n\n  // Return error if period is greater than life\n  if (period > life) {\n    return error.num;\n  }\n\n  // Return 0 (zero) if salvage is greater than or equal to cost\n  if (salvage >= cost) {\n    return 0;\n  }\n\n  // Rate is rounded to three decimals places\n  var rate = (1 - Math.pow(salvage / cost, 1 / life)).toFixed(3);\n\n  // Compute initial depreciation\n  var initial = cost * rate * month / 12;\n\n  // Compute total depreciation\n  var total = initial;\n  var current = 0;\n  var ceiling = (period === life) ? life - 1 : period;\n  for (var i = 2; i <= ceiling; i++) {\n    current = (cost - total) * rate;\n    total += current;\n  }\n\n  // Depreciation for the first and last periods are special cases\n  if (period === 1) {\n    // First period\n    return initial;\n  } else if (period === life) {\n    // Last period\n    return (cost - total) * rate;\n  } else {\n    return current;\n  }\n};\n\nexports.DDB = function(cost, salvage, life, period, factor) {\n  // Initialize factor\n  factor = (factor === undefined) ? 2 : factor;\n\n  cost = utils.parseNumber(cost);\n  salvage = utils.parseNumber(salvage);\n  life = utils.parseNumber(life);\n  period = utils.parseNumber(period);\n  factor = utils.parseNumber(factor);\n  if (utils.anyIsError(cost, salvage, life, period, factor)) {\n    return error.value;\n  }\n\n  // Return error if any of the parameters is negative or if factor is null\n  if (cost < 0 || salvage < 0 || life < 0 || period < 0 || factor <= 0) {\n    return error.num;\n  }\n\n  // Return error if period is greater than life\n  if (period > life) {\n    return error.num;\n  }\n\n  // Return 0 (zero) if salvage is greater than or equal to cost\n  if (salvage >= cost) {\n    return 0;\n  }\n\n  // Compute depreciation\n  var total = 0;\n  var current = 0;\n  for (var i = 1; i <= period; i++) {\n    current = Math.min((cost - total) * (factor / life), (cost - salvage - total));\n    total += current;\n  }\n\n  // Return depreciation\n  return current;\n};\n\n// TODO\nexports.DISC = function() {\n  throw new Error('DISC is not implemented');\n};\n\nexports.DOLLARDE = function(dollar, fraction) {\n  // Credits: algorithm inspired by Apache OpenOffice\n\n  dollar = utils.parseNumber(dollar);\n  fraction = utils.parseNumber(fraction);\n  if (utils.anyIsError(dollar, fraction)) {\n    return error.value;\n  }\n\n  // Return error if fraction is negative\n  if (fraction < 0) {\n    return error.num;\n  }\n\n  // Return error if fraction is greater than or equal to 0 and less than 1\n  if (fraction >= 0 && fraction < 1) {\n    return error.div0;\n  }\n\n  // Truncate fraction if it is not an integer\n  fraction = parseInt(fraction, 10);\n\n  // Compute integer part\n  var result = parseInt(dollar, 10);\n\n  // Add decimal part\n  result += (dollar % 1) * Math.pow(10, Math.ceil(Math.log(fraction) / Math.LN10)) / fraction;\n\n  // Round result\n  var power = Math.pow(10, Math.ceil(Math.log(fraction) / Math.LN2) + 1);\n  result = Math.round(result * power) / power;\n\n  // Return converted dollar price\n  return result;\n};\n\nexports.DOLLARFR = function(dollar, fraction) {\n  // Credits: algorithm inspired by Apache OpenOffice\n\n  dollar = utils.parseNumber(dollar);\n  fraction = utils.parseNumber(fraction);\n  if (utils.anyIsError(dollar, fraction)) {\n    return error.value;\n  }\n\n  // Return error if fraction is negative\n  if (fraction < 0) {\n    return error.num;\n  }\n\n  // Return error if fraction is greater than or equal to 0 and less than 1\n  if (fraction >= 0 && fraction < 1) {\n    return error.div0;\n  }\n\n  // Truncate fraction if it is not an integer\n  fraction = parseInt(fraction, 10);\n\n  // Compute integer part\n  var result = parseInt(dollar, 10);\n\n  // Add decimal part\n  result += (dollar % 1) * Math.pow(10, -Math.ceil(Math.log(fraction) / Math.LN10)) * fraction;\n\n  // Return converted dollar price\n  return result;\n};\n\n// TODO\nexports.DURATION = function() {\n  throw new Error('DURATION is not implemented');\n};\n\nexports.EFFECT = function(rate, periods) {\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  if (utils.anyIsError(rate, periods)) {\n    return error.value;\n  }\n\n  // Return error if rate <=0 or periods < 1\n  if (rate <= 0 || periods < 1) {\n    return error.num;\n  }\n\n  // Truncate periods if it is not an integer\n  periods = parseInt(periods, 10);\n\n  // Return effective annual interest rate\n  return Math.pow(1 + rate / periods, periods) - 1;\n};\n\nexports.FV = function(rate, periods, payment, value, type) {\n  // Credits: algorithm inspired by Apache OpenOffice\n\n  value = value || 0;\n  type = type || 0;\n\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  payment = utils.parseNumber(payment);\n  value = utils.parseNumber(value);\n  type = utils.parseNumber(type);\n  if (utils.anyIsError(rate, periods, payment, value, type)) {\n    return error.value;\n  }\n\n  // Return future value\n  var result;\n  if (rate === 0) {\n    result = value + payment * periods;\n  } else {\n    var term = Math.pow(1 + rate, periods);\n    if (type === 1) {\n      result = value * term + payment * (1 + rate) * (term - 1) / rate;\n    } else {\n      result = value * term + payment * (term - 1) / rate;\n    }\n  }\n  return -result;\n};\n\nexports.FVSCHEDULE = function(principal, schedule) {\n  principal = utils.parseNumber(principal);\n  schedule = utils.parseNumberArray(utils.flatten(schedule));\n  if (utils.anyIsError(principal, schedule)) {\n    return error.value;\n  }\n\n  var n = schedule.length;\n  var future = principal;\n\n  // Apply all interests in schedule\n  for (var i = 0; i < n; i++) {\n    // Apply scheduled interest\n    future *= 1 + schedule[i];\n  }\n\n  // Return future value\n  return future;\n};\n\n// TODO\nexports.INTRATE = function() {\n  throw new Error('INTRATE is not implemented');\n};\n\nexports.IPMT = function(rate, period, periods, present, future, type) {\n  // Credits: algorithm inspired by Apache OpenOffice\n\n  future = future || 0;\n  type = type || 0;\n\n  rate = utils.parseNumber(rate);\n  period = utils.parseNumber(period);\n  periods = utils.parseNumber(periods);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  type = utils.parseNumber(type);\n  if (utils.anyIsError(rate, period, periods, present, future, type)) {\n    return error.value;\n  }\n\n  // Compute payment\n  var payment = exports.PMT(rate, periods, present, future, type);\n\n  // Compute interest\n  var interest;\n  if (period === 1) {\n    if (type === 1) {\n      interest = 0;\n    } else {\n      interest = -present;\n    }\n  } else {\n    if (type === 1) {\n      interest = exports.FV(rate, period - 2, payment, present, 1) - payment;\n    } else {\n      interest = exports.FV(rate, period - 1, payment, present, 0);\n    }\n  }\n\n  // Return interest\n  return interest * rate;\n};\n\nexports.IRR = function(values, guess) {\n  // Credits: algorithm inspired by Apache OpenOffice\n\n  guess = guess || 0;\n\n  values = utils.parseNumberArray(utils.flatten(values));\n  guess = utils.parseNumber(guess);\n  if (utils.anyIsError(values, guess)) {\n    return error.value;\n  }\n\n  // Calculates the resulting amount\n  var irrResult = function(values, dates, rate) {\n    var r = rate + 1;\n    var result = values[0];\n    for (var i = 1; i < values.length; i++) {\n      result += values[i] / Math.pow(r, (dates[i] - dates[0]) / 365);\n    }\n    return result;\n  };\n\n  // Calculates the first derivation\n  var irrResultDeriv = function(values, dates, rate) {\n    var r = rate + 1;\n    var result = 0;\n    for (var i = 1; i < values.length; i++) {\n      var frac = (dates[i] - dates[0]) / 365;\n      result -= frac * values[i] / Math.pow(r, frac + 1);\n    }\n    return result;\n  };\n\n  // Initialize dates and check that values contains at least one positive value and one negative value\n  var dates = [];\n  var positive = false;\n  var negative = false;\n  for (var i = 0; i < values.length; i++) {\n    dates[i] = (i === 0) ? 0 : dates[i - 1] + 365;\n    if (values[i] > 0) {\n      positive = true;\n    }\n    if (values[i] < 0) {\n      negative = true;\n    }\n  }\n\n  // Return error if values does not contain at least one positive value and one negative value\n  if (!positive || !negative) {\n    return error.num;\n  }\n\n  // Initialize guess and resultRate\n  guess = (guess === undefined) ? 0.1 : guess;\n  var resultRate = guess;\n\n  // Set maximum epsilon for end of iteration\n  var epsMax = 1e-10;\n\n  // Implement Newton's method\n  var newRate, epsRate, resultValue;\n  var contLoop = true;\n  do {\n    resultValue = irrResult(values, dates, resultRate);\n    newRate = resultRate - resultValue / irrResultDeriv(values, dates, resultRate);\n    epsRate = Math.abs(newRate - resultRate);\n    resultRate = newRate;\n    contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);\n  } while (contLoop);\n\n  // Return internal rate of return\n  return resultRate;\n};\n\nexports.ISPMT = function(rate, period, periods, value) {\n  rate = utils.parseNumber(rate);\n  period = utils.parseNumber(period);\n  periods = utils.parseNumber(periods);\n  value = utils.parseNumber(value);\n  if (utils.anyIsError(rate, period, periods, value)) {\n    return error.value;\n  }\n\n  // Return interest\n  return value * rate * (period / periods - 1);\n};\n\n// TODO\nexports.MDURATION = function() {\n  throw new Error('MDURATION is not implemented');\n};\n\nexports.MIRR = function(values, finance_rate, reinvest_rate) {\n  values = utils.parseNumberArray(utils.flatten(values));\n  finance_rate = utils.parseNumber(finance_rate);\n  reinvest_rate = utils.parseNumber(reinvest_rate);\n  if (utils.anyIsError(values, finance_rate, reinvest_rate)) {\n    return error.value;\n  }\n\n  // Initialize number of values\n  var n = values.length;\n\n  // Lookup payments (negative values) and incomes (positive values)\n  var payments = [];\n  var incomes = [];\n  for (var i = 0; i < n; i++) {\n    if (values[i] < 0) {\n      payments.push(values[i]);\n    } else {\n      incomes.push(values[i]);\n    }\n  }\n\n  // Return modified internal rate of return\n  var num = -exports.NPV(reinvest_rate, incomes) * Math.pow(1 + reinvest_rate, n - 1);\n  var den = exports.NPV(finance_rate, payments) * (1 + finance_rate);\n  return Math.pow(num / den, 1 / (n - 1)) - 1;\n};\n\nexports.NOMINAL = function(rate, periods) {\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  if (utils.anyIsError(rate, periods)) {\n    return error.value;\n  }\n\n  // Return error if rate <=0 or periods < 1\n  if (rate <= 0 || periods < 1) {\n    return error.num;\n  }\n\n  // Truncate periods if it is not an integer\n  periods = parseInt(periods, 10);\n\n  // Return nominal annual interest rate\n  return (Math.pow(rate + 1, 1 / periods) - 1) * periods;\n};\n\nexports.NPER = function(rate, payment, present, future, type) {\n  type = (type === undefined) ? 0 : type;\n  future = (future === undefined) ? 0 : future;\n\n  rate = utils.parseNumber(rate);\n  payment = utils.parseNumber(payment);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  type = utils.parseNumber(type);\n  if (utils.anyIsError(rate, payment, present, future, type)) {\n    return error.value;\n  }\n\n  // Return number of periods\n  var num = payment * (1 + rate * type) - future * rate;\n  var den = (present * rate + payment * (1 + rate * type));\n  return Math.log(num / den) / Math.log(1 + rate);\n};\n\nexports.NPV = function() {\n  var args = utils.parseNumberArray(utils.flatten(arguments));\n  if (args instanceof Error) {\n    return args;\n  }\n\n  // Lookup rate\n  var rate = args[0];\n\n  // Initialize net present value\n  var value = 0;\n\n  // Loop on all values\n  for (var j = 1; j < args.length; j++) {\n    value += args[j] / Math.pow(1 + rate, j);\n  }\n\n  // Return net present value\n  return value;\n};\n\n// TODO\nexports.ODDFPRICE = function() {\n  throw new Error('ODDFPRICE is not implemented');\n};\n\n// TODO\nexports.ODDFYIELD = function() {\n  throw new Error('ODDFYIELD is not implemented');\n};\n\n// TODO\nexports.ODDLPRICE = function() {\n  throw new Error('ODDLPRICE is not implemented');\n};\n\n// TODO\nexports.ODDLYIELD = function() {\n  throw new Error('ODDLYIELD is not implemented');\n};\n\nexports.PDURATION = function(rate, present, future) {\n  rate = utils.parseNumber(rate);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  if (utils.anyIsError(rate, present, future)) {\n    return error.value;\n  }\n\n  // Return error if rate <=0\n  if (rate <= 0) {\n    return error.num;\n  }\n\n  // Return number of periods\n  return (Math.log(future) - Math.log(present)) / Math.log(1 + rate);\n};\n\nexports.PMT = function(rate, periods, present, future, type) {\n  // Credits: algorithm inspired by Apache OpenOffice\n  if (present === undefined) {\n    return 0;\n  }\n\n  future = future || 0;\n  type = type || 0;\n\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  type = utils.parseNumber(type);\n  if (utils.anyIsError(rate, periods, present, future, type)) {\n    return error.value;\n  }\n\n  // Return payment\n  var result;\n  if (rate === 0) {\n    result = (present + future) / periods;\n  } else {\n    var term = Math.pow(1 + rate, periods);\n    if (type === 1) {\n      result = (future * rate / (term - 1) + present * rate / (1 - 1 / term)) / (1 + rate);\n    } else {\n      result = future * rate / (term - 1) + present * rate / (1 - 1 / term);\n    }\n  }\n  return -result;\n};\n\nexports.PPMT = function(rate, period, periods, present, future, type) {\n  future = future || 0;\n  type = type || 0;\n\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  type = utils.parseNumber(type);\n  if (utils.anyIsError(rate, periods, present, future, type)) {\n    return error.value;\n  }\n\n  return exports.PMT(rate, periods, present, future, type) - exports.IPMT(rate, period, periods, present, future, type);\n};\n\n// TODO\nexports.PRICE = function() {\n  throw new Error('PRICE is not implemented');\n};\n\n// TODO\nexports.PRICEDISC = function() {\n  throw new Error('PRICEDISC is not implemented');\n};\n\n// TODO\nexports.PRICEMAT = function() {\n  throw new Error('PRICEMAT is not implemented');\n};\n\nexports.PV = function(rate, periods, payment, future, type) {\n  future = future || 0;\n  type = type || 0;\n\n  rate = utils.parseNumber(rate);\n  periods = utils.parseNumber(periods);\n  payment = utils.parseNumber(payment);\n  future = utils.parseNumber(future);\n  type = utils.parseNumber(type);\n  if (utils.anyIsError(rate, periods, payment, future, type)) {\n    return error.value;\n  }\n\n  // Return present value\n  if (rate === 0) {\n    return -payment * periods - future;\n  } else {\n    return (((1 - Math.pow(1 + rate, periods)) / rate) * payment * (1 + rate * type) - future) / Math.pow(1 + rate, periods);\n  }\n};\n\nexports.RATE = function(periods, payment, present, future, type, guess) {\n  // Credits: rabugento\n\n  guess = (guess === undefined) ? 0.01 : guess;\n  future = (future === undefined) ? 0 : future;\n  type = (type === undefined) ? 0 : type;\n\n  periods = utils.parseNumber(periods);\n  payment = utils.parseNumber(payment);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  type = utils.parseNumber(type);\n  guess = utils.parseNumber(guess);\n  if (utils.anyIsError(periods, payment, present, future, type, guess)) {\n    return error.value;\n  }\n\n  // Set maximum epsilon for end of iteration\n  var epsMax = 1e-10;\n\n  // Set maximum number of iterations\n  var iterMax = 50;\n\n  // Implement Newton's method\n  var y, y0, y1, x0, x1 = 0,\n    f = 0,\n    i = 0;\n  var rate = guess;\n  if (Math.abs(rate) < epsMax) {\n    y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;\n  } else {\n    f = Math.exp(periods * Math.log(1 + rate));\n    y = present * f + payment * (1 / rate + type) * (f - 1) + future;\n  }\n  y0 = present + payment * periods + future;\n  y1 = present * f + payment * (1 / rate + type) * (f - 1) + future;\n  i = x0 = 0;\n  x1 = rate;\n  while ((Math.abs(y0 - y1) > epsMax) && (i < iterMax)) {\n    rate = (y1 * x0 - y0 * x1) / (y1 - y0);\n    x0 = x1;\n    x1 = rate;\n    if (Math.abs(rate) < epsMax) {\n      y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;\n    } else {\n      f = Math.exp(periods * Math.log(1 + rate));\n      y = present * f + payment * (1 / rate + type) * (f - 1) + future;\n    }\n    y0 = y1;\n    y1 = y;\n    ++i;\n  }\n  return rate;\n};\n\n// TODO\nexports.RECEIVED = function() {\n  throw new Error('RECEIVED is not implemented');\n};\n\nexports.RRI = function(periods, present, future) {\n  periods = utils.parseNumber(periods);\n  present = utils.parseNumber(present);\n  future = utils.parseNumber(future);\n  if (utils.anyIsError(periods, present, future)) {\n    return error.value;\n  }\n\n  // Return error if periods or present is equal to 0 (zero)\n  if (periods === 0 || present === 0) {\n    return error.num;\n  }\n\n  // Return equivalent interest rate\n  return Math.pow(future / present, 1 / periods) - 1;\n};\n\nexports.SLN = function(cost, salvage, life) {\n  cost = utils.parseNumber(cost);\n  salvage = utils.parseNumber(salvage);\n  life = utils.parseNumber(life);\n  if (utils.anyIsError(cost, salvage, life)) {\n    return error.value;\n  }\n\n  // Return error if life equal to 0 (zero)\n  if (life === 0) {\n    return error.num;\n  }\n\n  // Return straight-line depreciation\n  return (cost - salvage) / life;\n};\n\nexports.SYD = function(cost, salvage, life, period) {\n  // Return error if any of the parameters is not a number\n  cost = utils.parseNumber(cost);\n  salvage = utils.parseNumber(salvage);\n  life = utils.parseNumber(life);\n  period = utils.parseNumber(period);\n  if (utils.anyIsError(cost, salvage, life, period)) {\n    return error.value;\n  }\n\n  // Return error if life equal to 0 (zero)\n  if (life === 0) {\n    return error.num;\n  }\n\n  // Return error if period is lower than 1 or greater than life\n  if (period < 1 || period > life) {\n    return error.num;\n  }\n\n  // Truncate period if it is not an integer\n  period = parseInt(period, 10);\n\n  // Return straight-line depreciation\n  return ((cost - salvage) * (life - period + 1) * 2) / (life * (life + 1));\n};\n\nexports.TBILLEQ = function(settlement, maturity, discount) {\n  settlement = utils.parseDate(settlement);\n  maturity = utils.parseDate(maturity);\n  discount = utils.parseNumber(discount);\n  if (utils.anyIsError(settlement, maturity, discount)) {\n    return error.value;\n  }\n\n  // Return error if discount is lower than or equal to zero\n  if (discount <= 0) {\n    return error.num;\n  }\n\n  // Return error if settlement is greater than maturity\n  if (settlement > maturity) {\n    return error.num;\n  }\n\n  // Return error if maturity is more than one year after settlement\n  if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {\n    return error.num;\n  }\n\n  // Return bond-equivalent yield\n  return (365 * discount) / (360 - discount * dateTime.DAYS360(settlement, maturity, false));\n};\n\nexports.TBILLPRICE = function(settlement, maturity, discount) {\n  settlement = utils.parseDate(settlement);\n  maturity = utils.parseDate(maturity);\n  discount = utils.parseNumber(discount);\n  if (utils.anyIsError(settlement, maturity, discount)) {\n    return error.value;\n  }\n\n  // Return error if discount is lower than or equal to zero\n  if (discount <= 0) {\n    return error.num;\n  }\n\n  // Return error if settlement is greater than maturity\n  if (settlement > maturity) {\n    return error.num;\n  }\n\n  // Return error if maturity is more than one year after settlement\n  if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {\n    return error.num;\n  }\n\n  // Return bond-equivalent yield\n  return 100 * (1 - discount * dateTime.DAYS360(settlement, maturity, false) / 360);\n};\n\nexports.TBILLYIELD = function(settlement, maturity, price) {\n  settlement = utils.parseDate(settlement);\n  maturity = utils.parseDate(maturity);\n  price = utils.parseNumber(price);\n  if (utils.anyIsError(settlement, maturity, price)) {\n    return error.value;\n  }\n\n  // Return error if price is lower than or equal to zero\n  if (price <= 0) {\n    return error.num;\n  }\n\n  // Return error if settlement is greater than maturity\n  if (settlement > maturity) {\n    return error.num;\n  }\n\n  // Return error if maturity is more than one year after settlement\n  if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {\n    return error.num;\n  }\n\n  // Return bond-equivalent yield\n  return (100 - price) * 360 / (price * dateTime.DAYS360(settlement, maturity, false));\n};\n\n// TODO\nexports.VDB = function() {\n  throw new Error('VDB is not implemented');\n};\n\n// TODO needs better support for date\n// exports.XIRR = function(values, dates, guess) {\n//   // Credits: algorithm inspired by Apache OpenOffice\n//\n//   values = utils.parseNumberArray(utils.flatten(values));\n//   dates = utils.parseDateArray(utils.flatten(dates));\n//   guess = utils.parseNumber(guess);\n//\n//   if (utils.anyIsError(values, dates, guess)) {\n//     return error.value;\n//   }\n//\n//   // Calculates the resulting amount\n//   var irrResult = function(values, dates, rate) {\n//     var r = rate + 1;\n//     var result = values[0];\n//     for (var i = 1; i < values.length; i++) {\n//       result += values[i] / Math.pow(r, dateTime.DAYS(dates[i], dates[0]) / 365);\n//     }\n//     return result;\n//   };\n//\n//   // Calculates the first derivation\n//   var irrResultDeriv = function(values, dates, rate) {\n//     var r = rate + 1;\n//     var result = 0;\n//     for (var i = 1; i < values.length; i++) {\n//       var frac = dateTime.DAYS(dates[i], dates[0]) / 365;\n//       result -= frac * values[i] / Math.pow(r, frac + 1);\n//     }\n//     return result;\n//   };\n//\n//   // Check that values contains at least one positive value and one negative value\n//   var positive = false;\n//   var negative = false;\n//   for (var i = 0; i < values.length; i++) {\n//     if (values[i] > 0) {\n//       positive = true;\n//     }\n//     if (values[i] < 0) {\n//       negative = true;\n//     }\n//   }\n//\n//   // Return error if values does not contain at least one positive value and one negative value\n//   if (!positive || !negative) {\n//     return error.num;\n//   }\n//\n//   // Initialize guess and resultRate\n//   guess = guess || 0.1;\n//   var resultRate = guess;\n//\n//   // Set maximum epsilon for end of iteration\n//   var epsMax = 1e-10;\n//\n//   // Implement Newton's method\n//   var newRate, epsRate, resultValue;\n//   var contLoop = true;\n//   do {\n//     resultValue = irrResult(values, dates, resultRate);\n//     newRate = resultRate - resultValue / irrResultDeriv(values, dates, resultRate);\n//     epsRate = Math.abs(newRate - resultRate);\n//     resultRate = newRate;\n//     contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);\n//   } while (contLoop);\n//\n//   // Return internal rate of return\n//   return resultRate;\n// };\n\nexports.XNPV = function(rate, values, dates) {\n  rate = utils.parseNumber(rate);\n  values = utils.parseNumberArray(utils.flatten(values));\n  dates = utils.parseDateArray(utils.flatten(dates));\n  if (utils.anyIsError(rate, values, dates)) {\n    return error.value;\n  }\n\n  var result = 0;\n  for (var i = 0; i < values.length; i++) {\n    result += values[i] / Math.pow(1 + rate, dateTime.DAYS(dates[i], dates[0]) / 365);\n  }\n  return result;\n};\n\n// TODO\nexports.YIELD = function() {\n  throw new Error('YIELD is not implemented');\n};\n\n// TODO\nexports.YIELDDISC = function() {\n  throw new Error('YIELDDISC is not implemented');\n};\n\n// TODO\nexports.YIELDMAT = function() {\n  throw new Error('YIELDMAT is not implemented');\n};\n","var error = require('./error');\nvar utils = require('./utils');\n\nexports.INDEX = function(lookupArray, lookupRow, lookupColumn) {\n  if (!lookupArray && !lookupRow) {\n    return error.na;\n  }\n\n  if (!(lookupArray instanceof Array)) {\n    return error.na;\n  }\n\n  if (arguments.length === 2) {\n    if (lookupArray[0].length === 1) {\n      lookupArray = lookupArray.flatten();\n    }\n    return lookupArray[lookupRow - 1];\n  } else {\n    return lookupArray[lookupRow - 1][lookupColumn - 1];\n  }\n};\n\nexports.MATCH = function(lookupValue, lookupArray, matchType) {\n  if (matchType === true) {\n    matchType = 1;\n  }\n\n  if (!lookupValue && !lookupArray) {\n    return error.na;\n  }\n\n  if (arguments.length === 2) {\n    matchType = 1;\n  }\n  if (!(lookupArray instanceof Array)) {\n    return error.na;\n  }\n\n  if (matchType !== -1 && matchType !== 0 && matchType !== 1) {\n    return error.na;\n  }\n\n  lookupArray = lookupArray.flatten();\n\n  var index;\n  var indexValue;\n  for (var idx = 0; idx < lookupArray.length; idx++) {\n    if (matchType === 1) {\n      if (lookupArray[idx] === lookupValue) {\n        return idx + 1;\n      } else if (lookupArray[idx] < lookupValue) {\n        if (!indexValue) {\n          index = idx + 1;\n          indexValue = lookupArray[idx];\n        } else if (lookupArray[idx] > indexValue) {\n          index = idx + 1;\n          indexValue = lookupArray[idx];\n        }\n      }\n    } else if (matchType === 0) {\n      if (typeof lookupValue === 'string') {\n        lookupValue = lookupValue.replace(/\\?/g, '.');\n        if (lookupArray[idx].toLowerCase().match(lookupValue.toLowerCase())) {\n          return idx + 1;\n        }\n      } else {\n        if (lookupArray[idx] === lookupValue) {\n          return idx + 1;\n        }\n      }\n    } else if (matchType === -1) {\n      if (lookupArray[idx] === lookupValue) {\n        return idx + 1;\n      } else if (lookupArray[idx] > lookupValue) {\n        if (!indexValue) {\n          index = idx + 1;\n          indexValue = lookupArray[idx];\n        } else if (lookupArray[idx] < indexValue) {\n          index = idx + 1;\n          indexValue = lookupArray[idx];\n        }\n      }\n    }\n  }\n\n  return index ? index : error.na;\n};\n\nexports.VLOOKUP = function (needle, table, index, rangeLookup = true) {\n  if ((!needle && needle !== 0) || !table || !index) {\n    return '';\n  }\n\n  for (var i = 0; i < table.length; i++) {\n    var row = table[i];\n    if (!rangeLookup) {\n      if (row[0] === needle) {\n        return (index < (row.length + 1) ? row[index - 1] : error.ref);\n      }\n    } else {\n      if (!isNaN(needle)) {\n        needle = utils.parseNumber(needle);\n        var startRange = utils.parseNumber(row[0]);\n        var isLastIndex = i === (table.length - 1) ? true : false;\n        if (isLastIndex) {\n          return (index < (row.length + 1) ? row[index - 1] : error.ref);\n        } else {\n          var endRange = utils.parseNumber(table[i + 1][0]) - 1;\n          if (needle >= startRange && needle <= endRange) {\n            return (index < (row.length + 1) ? row[index - 1] : error.ref);\n          }\n        }\n      } else {\n        if (row[0].toLowerCase().indexOf(needle.toLowerCase()) !== -1) {\n          return (index < (row.length + 1) ? row[index - 1] : error.ref);\n        }\n      }\n    }\n  }\n\n  return needle == true ? 0 : error.na;\n};\n\nexports.HLOOKUP = function (needle, table, index, rangeLookup) {\n  if ((!needle && needle !== 0) || !table || !index) {\n    return error.na;\n  }\n\n  rangeLookup = rangeLookup || false;\n\n  var transposedTable = utils.transpose(table);\n\n  for (var i = 0; i < transposedTable.length; i++) {\n    var row = transposedTable[i];\n    if ((!rangeLookup && row[0] === needle) ||\n      ((row[0] === needle) ||\n        (rangeLookup && typeof row[0] === \"string\" && row[0].toLowerCase().indexOf(needle.toLowerCase()) !== -1))) {\n      return (index < (row.length + 1) ? row[index - 1] : error.ref);\n    }\n  }\n\n  return error.na;\n};\n\nexports.LOOKUP = function() {\n  var lookupValue, lookupArray, lookupVector, resultsVector;\n  if (arguments.length === 2) { // array form\n\n    lookupValue = arguments[0].valueOf();\n    lookupArray = arguments[1];\n\n    for (var i = 0; i < lookupArray.length; i++) {\n      if (typeof lookupArray[i] !== 'undefined' && lookupValue === lookupArray[i].valueOf()) {\n        return lookupArray[i];\n      }\n    }\n  } else if (arguments.length === 3) { // vector form\n    lookupValue = arguments[0].valueOf();\n    lookupVector = arguments[1];\n    resultsVector = arguments[2];\n\n    for (var i = 0; i < lookupVector.length; i++) {\n      if (typeof lookupVector[i] !== 'undefined' && lookupValue === lookupVector[i].valueOf()) {\n        return resultsVector[i];\n      }\n    }\n    var sortedLookup = lookupVector.concat(lookupValue).sort(function(a,b) {\n      return a - b;\n    });\n    var sortedIndex = sortedLookup.indexOf(lookupValue);\n    if (resultsVector[sortedIndex-1]) {\n      return resultsVector[sortedIndex-1];\n    }\n  }\n\n  return error.na;\n}\n","export const SYMBOL = '>';\n\nexport default function func(exp1, exp2) {\n  return exp1 > exp2;\n}\n\nfunc.SYMBOL = SYMBOL;\n","export const SYMBOL = '>=';\n\nexport default function func(exp1, exp2) {\n  return exp1 >= exp2;\n}\n\nfunc.SYMBOL = SYMBOL;\n","export const SYMBOL = '<';\n\nexport default function func(exp1, exp2) {\n  return exp1 < exp2;\n}\n\nfunc.SYMBOL = SYMBOL;\n","export const SYMBOL = '<=';\n\nexport default function func(exp1, exp2) {\n  return exp1 <= exp2;\n}\n\nfunc.SYMBOL = SYMBOL;\n","import {toNumber} from './../../helper/number';\nimport {ERROR_VALUE} from './../../error';\n\nexport const SYMBOL = '-';\n\nexport default function func(first, ...rest) {\n  const result = rest.reduce((acc, value) => acc - toNumber(value), toNumber(first));\n\n  if (isNaN(result)) {\n    throw Error(ERROR_VALUE);\n  }\n\n  return result;\n}\n\nfunc.SYMBOL = SYMBOL;\n","import {toNumber} from './../../helper/number';\nimport {ERROR_VALUE} from './../../error';\n\nexport const SYMBOL = '*';\n\nexport default function func(first, ...rest) {\n  const result = rest.reduce((acc, value) => acc * toNumber(value), toNumber(first));\n\n  if (isNaN(result)) {\n    throw Error(ERROR_VALUE);\n  }\n\n  return result;\n}\n\nfunc.SYMBOL = SYMBOL;\n","export const SYMBOL = '<>';\n\nexport default function func(exp1, exp2) {\n  return exp1 !== exp2;\n}\n\nfunc.SYMBOL = SYMBOL;\n","import {toNumber} from './../../helper/number';\nimport {ERROR_VALUE} from './../../error';\n\nexport const SYMBOL = '^';\n\nexport default function func(exp1, exp2) {\n  const result = Math.pow(toNumber(exp1), toNumber(exp2));\n\n  if (isNaN(result)) {\n    throw Error(ERROR_VALUE);\n  }\n\n  return result;\n}\n\nfunc.SYMBOL = SYMBOL;\n","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar grammarParser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,8],$V2=[1,6],$V3=[1,7],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,17],$Vc=[1,18],$Vd=[1,23],$Ve=[1,25],$Vf=[1,26],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[1,30],$Vk=[1,31],$Vl=[1,32],$Vm=[1,33],$Vn=[1,34],$Vo=[5,9,10,11,13,14,15,16,17,18,19,20,35,36],$Vp=[5,9,10,11,13,14,15,16,17,18,19,20,35,36,38],$Vq=[5,9,10,11,13,14,15,16,17,18,19,20,35,36,40],$Vr=[5,10,11,13,14,15,16,17,35,36],$Vs=[5,10,13,14,15,16,35,36],$Vt=[5,10,11,13,14,15,16,17,18,19,35,36],$Vu=[13,35,36];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"expressions\":3,\"expression\":4,\"EOF\":5,\"variableSequence\":6,\"number\":7,\"STRING\":8,\"&\":9,\"=\":10,\"+\":11,\"(\":12,\")\":13,\"<\":14,\">\":15,\"NOT\":16,\"-\":17,\"*\":18,\"/\":19,\"^\":20,\"FUNCTION\":21,\"expseq\":22,\"ARRAYCONSTANT\":23,\"ARRAY\":24,\"cell\":25,\"refCell\":26,\"range\":27,\"refRange\":28,\"ABSOLUTE_CELL\":29,\"RELATIVE_CELL\":30,\"MIXED_CELL\":31,\"REFSHEET\":32,\"!\":33,\":\":34,\";\":35,\",\":36,\"VARIABLE\":37,\"DECIMAL\":38,\"NUMBER\":39,\"%\":40,\"ERROR\":41,\"$accept\":0,\"$end\":1},\nterminals_: {5:\"EOF\",8:\"STRING\",9:\"&\",10:\"=\",11:\"+\",12:\"(\",13:\")\",14:\"<\",15:\">\",16:\"NOT\",17:\"-\",18:\"*\",19:\"/\",20:\"^\",21:\"FUNCTION\",23:\"ARRAYCONSTANT\",24:\"ARRAY\",29:\"ABSOLUTE_CELL\",30:\"RELATIVE_CELL\",31:\"MIXED_CELL\",32:\"REFSHEET\",33:\"!\",34:\":\",35:\";\",36:\",\",37:\"VARIABLE\",38:\"DECIMAL\",39:\"NUMBER\",40:\"%\",41:\"ERROR\"},\nproductions_: [0,[3,2],[4,1],[4,1],[4,1],[4,3],[4,3],[4,3],[4,3],[4,4],[4,4],[4,4],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,2],[4,3],[4,4],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,2],[25,1],[25,1],[25,1],[26,3],[26,3],[26,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[28,5],[28,5],[28,5],[28,5],[28,5],[28,5],[28,5],[28,5],[28,5],[22,1],[22,3],[22,3],[6,1],[6,3],[7,1],[7,3],[7,2],[2,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\n      return $$[$0-1];\n\nbreak;\ncase 2:\n\n      this.$ = yy.callVariable($$[$0][0]);\n\nbreak;\ncase 3:\n\n      this.$ = yy.toNumber($$[$0]);\n\nbreak;\ncase 4:\n\n      this.$ = yy.trimEdges($$[$0]);\n\nbreak;\ncase 5:\n\n      this.$ = yy.evaluateByOperator('&', [$$[$0-2], $$[$0]]);\n\nbreak;\ncase 6:\n\n      this.$ = yy.evaluateByOperator('=', [$$[$0-2], $$[$0]]);\n\nbreak;\ncase 7:\n\n      this.$ = yy.evaluateByOperator('+', [$$[$0-2], $$[$0]]);\n\nbreak;\ncase 8:\n\n      this.$ = $$[$0-1];\n\nbreak;\ncase 9:\n\n      this.$ = yy.evaluateByOperator('<=', [$$[$0-3], $$[$0]]);\n\nbreak;\ncase 10:\n\n      this.$ = yy.evaluateByOperator('>=', [$$[$0-3], $$[$0]]);\n\nbreak;\ncase 11:\n\n      this.$ = yy.evaluateByOperator('<>', [$$[$0-3], $$[$0]]);\n\nbreak;\ncase 12:\n\n      this.$ = yy.evaluateByOperator('NOT', [$$[$0-2], $$[$0]]);\n\nbreak;\ncase 13:\n\n      this.$ = yy.evaluateByOperator('>', [$$[$0-2], $$[$0]]);\n\nbreak;\ncase 14:\n\n      this.$ = yy.evaluateByOperator('<', [$$[$0-2], $$[$0]]);\n\nbreak;\ncase 15:\n\n      this.$ = yy.evaluateByOperator('-', [$$[$0-2], $$[$0]]);\n\nbreak;\ncase 16:\n\n      this.$ = yy.evaluateByOperator('*', [$$[$0-2], $$[$0]]);\n\nbreak;\ncase 17:\n\n      this.$ = yy.evaluateByOperator('/', [$$[$0-2], $$[$0]]);\n\nbreak;\ncase 18:\n\n      this.$ = yy.evaluateByOperator('^', [$$[$0-2], $$[$0]]);\n\nbreak;\ncase 19:\n\n      var n1 = yy.invertNumber($$[$0]);\n\n      this.$ = n1;\n\n      if (isNaN(this.$)) {\n          this.$ = 0;\n      }\n\nbreak;\ncase 20:\n\n      var n1 = yy.toNumber($$[$0]);\n\n      this.$ = n1;\n\n      if (isNaN(this.$)) {\n          this.$ = 0;\n      }\n\nbreak;\ncase 21:\n\n      this.$ = yy.callFunction($$[$0-2]);\n\nbreak;\ncase 22:\n\n      this.$ = yy.callFunction($$[$0-3], $$[$0-1]);\n\nbreak;\ncase 23:\n\n      var result = [];\n\n      var textInArray = yytext.replace('{','').replace('}','');\n\n      var arr = textInArray.split(';');\n      if(arr.length <= 1) {\n        var arr = eval(\"[[\" + arr + \"]]\");\n        arr.forEach(function(item) {\n          result.push(item);\n        });\n      } else {\n        for(var i = 0; i < arr.length; i++) {\n          result.push(eval(\"[\" + arr[i] + \"]\"));\n        }\n      }\n\n      this.$ = result;\n\nbreak;\ncase 24:\n\n      var result = [];\n      var arr = eval(\"[\" + yytext + \"]\");\n\n      arr.forEach(function(item) {\n        result.push(item);\n      });\n      this.$ = result;\n\nbreak;\ncase 31: case 32: case 33:\n\n      this.$ = yy.cellValue($$[$0]);\n\nbreak;\ncase 34:\n\n\n      this.$ = yy.cellValue($$[$0], $$[$0-2].replace(/'/g, \"\"));\n\nbreak;\ncase 35:\n\n      this.$ = yy.cellValue($$[$0], $$[$0-2].replace(/'/g, \"\"));\n\nbreak;\ncase 36:\n\n    this.$ = yy.cellValue($$[$0], $$[$0-2].replace(/'/g, \"\"));\n\nbreak;\ncase 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45:\n\n      this.$ = yy.rangeValue($$[$0-2], $$[$0]);\n\nbreak;\ncase 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54:\n\n      this.$ = yy.rangeValue($$[$0-2], $$[$0], $$[$0-4].replace(/'/g, \"\"));\n\nbreak;\ncase 55: case 58:\n\n      this.$ = [$$[$0]];\n\nbreak;\ncase 56: case 57:\n\n      $$[$0-2].push($$[$0]);\n      this.$ = $$[$0-2];\n\nbreak;\ncase 59:\n\n      this.$ = (Array.isArray($$[$0-2]) ? $$[$0-2] : [$$[$0-2]]);\n      this.$.push($$[$0]);\n\nbreak;\ncase 60:\n\n      this.$ = $$[$0];\n\nbreak;\ncase 61:\n\n      this.$ = ($$[$0-2] + '.' + $$[$0]) * 1;\n\nbreak;\ncase 62:\n\n      this.$ = $$[$0-1] * 0.01;\n\nbreak;\ncase 63:\n\n      this.$ = yy.throwError($$[$0]);\n\nbreak;\n}\n},\ntable: [{2:16,3:1,4:2,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{1:[3]},{5:[1,24],9:$Ve,10:$Vf,11:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn},o($Vo,[2,2],{38:[1,35]}),o($Vo,[2,3],{40:[1,36]}),o($Vo,[2,4]),{2:16,4:37,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:38,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:39,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{12:[1,40]},o($Vo,[2,23]),o($Vo,[2,24]),o($Vo,[2,25]),o($Vo,[2,26]),o($Vo,[2,27]),o($Vo,[2,28]),o($Vo,[2,29],{2:41,41:$Vd}),o($Vp,[2,58]),o($Vq,[2,60],{38:[1,42]}),o($Vo,[2,31],{34:[1,43]}),o($Vo,[2,32],{34:[1,44]}),o($Vo,[2,33],{34:[1,45]}),{33:[1,46]},o([5,9,10,11,13,14,15,16,17,18,19,20,35,36,41],[2,63]),{1:[2,1]},{2:16,4:47,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:48,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:49,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:52,6:3,7:4,8:$V0,10:[1,50],11:$V1,12:$V2,15:[1,51],17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:54,6:3,7:4,8:$V0,10:[1,53],11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:55,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:56,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:57,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:58,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:59,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{37:[1,60]},o($Vq,[2,62]),{9:$Ve,10:$Vf,11:$Vg,13:[1,61],14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn},o($Vr,[2,19],{9:$Ve,18:$Vl,19:$Vm,20:$Vn}),o($Vr,[2,20],{9:$Ve,18:$Vl,19:$Vm,20:$Vn}),{2:16,4:64,6:3,7:4,8:$V0,11:$V1,12:$V2,13:[1,62],17:$V3,21:$V4,22:63,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},o($Vo,[2,30]),{39:[1,65]},{29:[1,66],30:[1,67],31:[1,68]},{29:[1,69],30:[1,70],31:[1,71]},{29:[1,72],30:[1,73],31:[1,74]},{29:[1,75],30:[1,76],31:[1,77]},o($Vo,[2,5]),o([5,10,13,35,36],[2,6],{9:$Ve,11:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vr,[2,7],{9:$Ve,18:$Vl,19:$Vm,20:$Vn}),{2:16,4:78,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:79,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},o($Vs,[2,14],{9:$Ve,11:$Vg,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),{2:16,4:80,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},o($Vs,[2,13],{9:$Ve,11:$Vg,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o([5,10,13,16,35,36],[2,12],{9:$Ve,11:$Vg,14:$Vh,15:$Vi,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vr,[2,15],{9:$Ve,18:$Vl,19:$Vm,20:$Vn}),o($Vt,[2,16],{9:$Ve,20:$Vn}),o($Vt,[2,17],{9:$Ve,20:$Vn}),o([5,10,11,13,14,15,16,17,18,19,20,35,36],[2,18],{9:$Ve}),o($Vp,[2,59]),o($Vo,[2,8]),o($Vo,[2,21]),{13:[1,81],35:[1,82],36:[1,83]},o($Vu,[2,55],{9:$Ve,10:$Vf,11:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vq,[2,61]),o($Vo,[2,37]),o($Vo,[2,38]),o($Vo,[2,39]),o($Vo,[2,40]),o($Vo,[2,41]),o($Vo,[2,42]),o($Vo,[2,43]),o($Vo,[2,44]),o($Vo,[2,45]),o($Vo,[2,34],{34:[1,84]}),o($Vo,[2,35],{34:[1,85]}),o($Vo,[2,36],{34:[1,86]}),o($Vs,[2,9],{9:$Ve,11:$Vg,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vs,[2,11],{9:$Ve,11:$Vg,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vs,[2,10],{9:$Ve,11:$Vg,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vo,[2,22]),{2:16,4:87,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{2:16,4:88,6:3,7:4,8:$V0,11:$V1,12:$V2,17:$V3,21:$V4,23:$V5,24:$V6,25:12,26:13,27:14,28:15,29:$V7,30:$V8,31:$V9,32:$Va,37:$Vb,39:$Vc,41:$Vd},{29:[1,89],30:[1,90],31:[1,91]},{29:[1,92],30:[1,93],31:[1,94]},{29:[1,95],30:[1,96],31:[1,97]},o($Vu,[2,56],{9:$Ve,10:$Vf,11:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vu,[2,57],{9:$Ve,10:$Vf,11:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn}),o($Vo,[2,46]),o($Vo,[2,47]),o($Vo,[2,48]),o($Vo,[2,49]),o($Vo,[2,50]),o($Vo,[2,51]),o($Vo,[2,52]),o($Vo,[2,53]),o($Vo,[2,54])],\ndefaultActions: {24:[2,1]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse (input) {\n    var self = this,\n        stack = [0],\n        tstack = [], // token stack\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    var args = lstack.slice.call(arguments, 1);\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    // copy state\n    for (var k in this.yy) {\n      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n        sharedState.yy[k] = this.yy[k];\n      }\n    }\n\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n\n    var ranges = lexer.options && lexer.options.ranges;\n\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n\n    function popStack (n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n_token_stack:\n    var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n_handle_error:\n        // handle parse error\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var error_rule_depth;\n            var errStr = '';\n\n            // Return the rule stack depth where the nearest error rule can be found.\n            // Return FALSE when no error recovery rule was found.\n            function locateNearestErrorRecoveryRule(state) {\n                var stack_probe = stack.length - 1;\n                var depth = 0;\n\n                // try to recover from error\n                for(;;) {\n                    // check for error recovery rule in this state\n                    if ((TERROR.toString()) in table[state]) {\n                        return depth;\n                    }\n                    if (state === 0 || stack_probe < 2) {\n                        return false; // No suitable error recovery rule available.\n                    }\n                    stack_probe -= 2; // popStack(1): [symbol, action]\n                    state = stack[stack_probe];\n                    ++depth;\n                }\n            }\n\n            if (!recovering) {\n                // first see if there's any chance at hitting an error recovery rule:\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n\n                // Report error\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == EOF ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected,\n                    recoverable: (error_rule_depth !== false)\n                });\n            } else if (preErrorSymbol !== EOF) {\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol === EOF || preErrorSymbol === EOF) {\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            if (error_rule_depth === false) {\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\n            }\n            popStack(error_rule_depth);\n\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(lexer.yytext);\n                lstack.push(lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = lexer.yyleng;\n                    yytext = lexer.yytext;\n                    yylineno = lexer.yylineno;\n                    yyloc = lexer.yylloc;\n                    if (recovering > 0) {\n                        recovering--;\n                    }\n                } else {\n                    // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2:\n                // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                if (ranges) {\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\n                }\n                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3:\n                // accept\n                return true;\n        }\n\n    }\n\n    return true;\n}};\n\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:\nbreak;\ncase 1:return 8;\nbreak;\ncase 2:return 32;\nbreak;\ncase 3:return 8;\nbreak;\ncase 4:return 21;\nbreak;\ncase 5:return 41;\nbreak;\ncase 6:return 29;\nbreak;\ncase 7:return 31;\nbreak;\ncase 8:return 31;\nbreak;\ncase 9:return 30;\nbreak;\ncase 10:return 32;\nbreak;\ncase 11:return 21;\nbreak;\ncase 12:return 37;\nbreak;\ncase 13:return 37;\nbreak;\ncase 14:return 39;\nbreak;\ncase 15:return 24;\nbreak;\ncase 16:return 23;\nbreak;\ncase 17:return 9;\nbreak;\ncase 18:return ' ';\nbreak;\ncase 19:return 38;\nbreak;\ncase 20:return 34;\nbreak;\ncase 21:return 35;\nbreak;\ncase 22:return 36;\nbreak;\ncase 23:return 18;\nbreak;\ncase 24:return 19;\nbreak;\ncase 25:return 17;\nbreak;\ncase 26:return 11;\nbreak;\ncase 27:return 20;\nbreak;\ncase 28:return 12;\nbreak;\ncase 29:return 13;\nbreak;\ncase 30:return 15;\nbreak;\ncase 31:return 14;\nbreak;\ncase 32:return 16;\nbreak;\ncase 33:return '\"';\nbreak;\ncase 34:return \"'\";\nbreak;\ncase 35:return \"!\";\nbreak;\ncase 36:return 10;\nbreak;\ncase 37:return 40;\nbreak;\ncase 38:return '{';\nbreak;\ncase 39:return '}';\nbreak;\ncase 40:return '#';\nbreak;\ncase 41:return 5;\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:\"(\\\\[\"]|[^\"])*\")/,/^(?:'((?![\\\\\\/\\[\\]\\*\\?\\:]).)+?'(?=))/,/^(?:'(\\\\[']|[^'])*')/,/^(?:[A-Za-z]{1,}[A-Za-z_0-9\\.]+(?=[(]))/,/^(?:#[A-Z0-9\\/]+(!|\\?)?)/,/^(?:\\$[A-Za-z]+\\$[0-9]+)/,/^(?:\\$[A-Za-z]+[0-9]+)/,/^(?:[A-Za-z]+\\$[0-9]+)/,/^(?:[A-Za-z]+[0-9]+(?![!]))/,/^(?:[A-Za-z_\\.\\d]+(?=[!]))/,/^(?:[A-Za-z\\.]+(?=[(]))/,/^(?:[A-Za-z]{1,}[A-Za-z_0-9]+)/,/^(?:[A-Za-z_]+)/,/^(?:[0-9]+)/,/^(?:\\[([\\w\\,\\;\\s]*)?\\])/,/^(?:\\{([\\w\\,\\;\\\"\\.\\s]*)?\\})/,/^(?:&)/,/^(?: )/,/^(?:[.])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\\*)/,/^(?:\\/)/,/^(?:-)/,/^(?:\\+)/,/^(?:\\^)/,/^(?:\\()/,/^(?:\\))/,/^(?:>)/,/^(?:<)/,/^(?:NOT\\b)/,/^(?:\")/,/^(?:')/,/^(?:!)/,/^(?:=)/,/^(?:%)/,/^(?:\\{)/,/^(?:\\})/,/^(?:[#])/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = grammarParser;\nexports.Parser = grammarParser.Parser;\nexports.parse = function () { return grammarParser.parse.apply(grammarParser, arguments); };\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/* eslint-disable import/prefer-default-export */\n/**\n * Trim value by cutting character starting from the beginning and ending at the same time.\n *\n * @param {String} string String to trimming.\n * @param {Number} [margin=1] Number of character to cut.\n * @returns {String}\n */\nexport function trimEdges(string, margin = 1) {\n  string = string.substring(margin, string.length - margin);\n\n  return string;\n}\n"],"sourceRoot":""}